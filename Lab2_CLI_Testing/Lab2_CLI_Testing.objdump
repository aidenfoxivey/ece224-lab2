
Lab2_CLI_Testing.elf:     file format elf32-littlenios2
Lab2_CLI_Testing.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800248

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00012d08 memsz 0x00012d08 flags r-x
    LOAD off    0x00013d28 vaddr 0x00812d28 paddr 0x008149e8 align 2**12
         filesz 0x00001cc0 memsz 0x00001cc0 flags rw-
    LOAD off    0x000166a8 vaddr 0x008166a8 paddr 0x008166a8 align 2**12
         filesz 0x00000000 memsz 0x00000d40 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012024  00800248  00800248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000abc  0081226c  0081226c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cc0  00812d28  008149e8  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000d40  008166a8  008166a8  000166a8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  008173e8  008173e8  000159e8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000159e8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d38  00000000  00000000  00015a10  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000207a2  00000000  00000000  00016748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000840d  00000000  00000000  00036eea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a7ee  00000000  00000000  0003f2f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002b44  00000000  00000000  00049ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003afd  00000000  00000000  0004c62c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005346  00000000  00000000  00050129  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00055470  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000007e0  00000000  00000000  000554d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00059872  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00059875  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00059881  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00059882  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00059883  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00059887  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0005988b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0005988f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0005989a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000598a5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  000598b0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000024  00000000  00000000  000598b3  2**0
                  CONTENTS, READONLY
 29 .jdi          00005cac  00000000  00000000  000598d7  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008f4e7  00000000  00000000  0005f583  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800248 l    d  .text	00000000 .text
0081226c l    d  .rodata	00000000 .rodata
00812d28 l    d  .rwdata	00000000 .rwdata
008166a8 l    d  .bss	00000000 .bss
008173e8 l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab2_CLI_Testing_bsp//obj/HAL/src/crt0.o
00800290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 fatfs.c
00000000 l    df *ABS*	00000000 fatfs_diskio.c
008149a0 l     O .rwdata	00000001 Stat
008166a8 l     O .bss	00000001 CardType
008166aa l     O .bss	00000002 Timer1
008166ac l     O .bss	00000002 Timer2
008166ae l     O .bss	00000001 XMITDummy
008166b0 l     O .bss	00000004 Control1
008002b8 l     F .text	00000050 SetLowSpeed
00800308 l     F .text	00000070 SetHighSpeed
00800378 l     F .text	00000048 InitDiskIOHardware
008003c0 l     F .text	00000040 Set8BitTransfer
00800400 l     F .text	0000003c Set32BitTransfer
0080043c l     F .text	00000050 ReceiveU8
0080048c l     F .text	0000012c ReceiveDatablock
008005b8 l     F .text	00000188 TransmitDatablock
00800764 l     F .text	00000054 WaitReady
00800740 l     F .text	00000024 GetCDWP
008007b8 l     F .text	00000048 ReleaseBus
00800800 l     F .text	0000024c SendCMD
008166b4 l     O .bss	00000004 pvm.1949
00000000 l    df *ABS*	00000000 fatfs_nios2_de0_nano_spi.c
00000000 l    df *ABS*	00000000 fatfs_nios2_de1_pio.c
00000000 l    df *ABS*	00000000 fatfs_nios2_de1_spi.c
00000000 l    df *ABS*	00000000 ff.c
008166b8 l     O .bss	00000004 FatFs
008166bc l     O .bss	00000002 Fsid
00801588 l     F .text	00000070 mem_cpy
008015f8 l     F .text	0000005c mem_set
00801654 l     F .text	0000008c mem_cmp
008016e0 l     F .text	0000007c chk_chr
0080175c l     F .text	0000015c move_window
008018b8 l     F .text	00000220 sync
00802154 l     F .text	0000011c remove_chain
00802270 l     F .text	000001dc create_chain
0080244c l     F .text	000001ec dir_sdi
00802638 l     F .text	000002e8 dir_next
00802920 l     F .text	000000fc dir_find
00802a1c l     F .text	00000108 dir_read
00802b24 l     F .text	00000124 dir_register
00802c48 l     F .text	00000098 dir_remove
00802ce0 l     F .text	000002ec create_name
008122b0 l     O .rodata	00000080 excvt.1975
00802fcc l     F .text	0000023c get_fileinfo
00803208 l     F .text	000001dc follow_path
008033e4 l     F .text	000001ac check_fs
00803590 l     F .text	00000940 chk_mounted
00803ed0 l     F .text	00000090 validate
00812330 l     O .rodata	00000016 vst.2214
00812346 l     O .rodata	00000016 cst.2215
00000000 l    df *ABS*	00000000 hello_world.c
008166fc l     O .bss	00000018 alarm
008166c0 l     O .bss	00000004 Systick
008166c4 l     O .bss	00000002 Timer
008081d0 l     F .text	00000068 TimerFunction
008166c6 l     O .bss	00000002 wTimer10ms.3621
00808238 l     F .text	00000054 IoInit
0080828c l     F .text	00000140 scan_files
008083cc l     F .text	000000a8 put_rc
00808474 l     F .text	00000034 display_help
008149a1 l     O .rwdata	00000004 ft.3677
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 uart_nios2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
00812d28 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0080abe4 l     F .text	00000008 __fp_unlock
0080abf8 l     F .text	0000019c __sinit.part.1
0080ad94 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
0080c6e0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080d9f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080db04 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080db30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080dc1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080dcfc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080dde8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0080e224 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008149d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080e614 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080e748 l     F .text	00000034 alt_dev_reg
008136fc l     O .rwdata	00001060 Jtag_uart_0
0081475c l     O .rwdata	00000120 lcd_display
0081487c l     O .rwdata	000000c4 uart
00814940 l     O .rwdata	00000030 audio_i2c_config
00814970 l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080ea80 l     F .text	00000210 altera_avalon_jtag_uart_irq
0080ec90 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008149dc l     O .rwdata	00000004 colstart
0080f2c8 l     F .text	000000b8 lcd_write_command
0080f380 l     F .text	000000d8 lcd_write_data
0080f458 l     F .text	000000d0 lcd_clear_screen
0080f528 l     F .text	000001ec lcd_repaint_screen
0080f714 l     F .text	000000cc lcd_scroll_up
0080f7e0 l     F .text	000002ac lcd_handle_escape
0080ff64 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008101a4 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00810448 l     F .text	000000a0 altera_avalon_uart_irq
008104e8 l     F .text	000000e4 altera_avalon_uart_rxirq
008105cc l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00810768 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00810980 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00811358 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008115bc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0081187c l     F .text	0000003c alt_get_errno
008118b8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00812ba8 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
008166f8 g     O .bss	00000004 alt_instruction_exception_handler
0080a948 g     F .text	00000018 putchar
0080d878 g     F .text	00000054 _isatty_r
008078b0 g     F .text	000000d8 f_gets
0080def8 g     F .text	0000007c alt_main
0080aabc g     F .text	00000090 strcpy
0080a960 g     F .text	000000c0 _puts_r
0081673c g     O .bss	00000230 Fatfs
008172e8 g     O .bss	00000100 alt_irq
0080d5a0 g     F .text	00000060 _lseek_r
00801b44 g     F .text	00000290 get_fat
008149e8 g       *ABS*	00000000 __flash_rwdata_start
00810e10 g     F .text	00000060 alt_up_audio_read_fifo_avail
008173e8 g       *ABS*	00000000 __alt_heap_start
0080a31c g     F .text	0000003c uart0_put
00807a94 g     F .text	00000660 f_printf
00810e70 g     F .text	00000068 alt_up_audio_record_r
0080c9fc g     F .text	0000005c __sseek
0080af34 g     F .text	00000010 __sinit
0080ca60 g     F .text	00000140 __swbuf_r
0080ad9c g     F .text	00000068 __sfmoreglue
0080df98 g     F .text	00000024 __malloc_unlock
0081696c g     O .bss	00000224 File1
00810d7c g     F .text	00000094 alt_up_audio_reset_audio_core
0080beb8 g     F .text	0000015c memmove
0080af1c g     F .text	00000018 _cleanup
00811b00 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080d81c g     F .text	0000005c _fstat_r
008166dc g     O .bss	00000004 errno
0080aaa8 g     F .text	00000014 __srget
0080c978 g     F .text	00000008 __seofread
00800f28 g     F .text	00000170 ffs_DiskIOWrite
00810d3c g     F .text	00000040 alt_up_audio_write_interrupt_pending
008166e4 g     O .bss	00000004 alt_argv
0081c9a0 g       *ABS*	00000000 _gp
00811ad0 g     F .text	00000030 usleep
0081357c g     O .rwdata	00000180 alt_fd_list
00816b90 g     O .bss	00000018 Finfo
0080a55c g     F .text	00000070 _getc_r
0080a5cc g     F .text	00000088 getc
0080a940 g     F .text	00000008 _putchar_r
00801098 g     F .text	000004c4 ffs_DiskIOIoctl
008114f8 g     F .text	00000090 alt_find_dev
0080a6d0 g     F .text	00000148 memcpy
0080abec g     F .text	0000000c _cleanup_r
00811680 g     F .text	0000007c alt_io_redirect
0081226c g       *ABS*	00000000 __DTOR_END__
0080aa20 g     F .text	00000014 puts
00811eb8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
008066dc g     F .text	00000314 f_rename
00811258 g     F .text	00000050 alt_up_audio_read_fifo_head
0080ee88 g     F .text	0000021c altera_avalon_jtag_uart_read
0080a4a0 g     F .text	00000064 .hidden __udivsi3
0080dc58 g     F .text	000000a4 isatty
008166c8 g     O .bss	00000002 acc_dirs
00809c94 g     F .text	000001c0 xitoa
00811e28 g     F .text	00000090 alt_icache_flush
008166d8 g     O .bss	00000004 __malloc_top_pad
00805c84 g     F .text	000001e8 f_truncate
00809950 g     F .text	00000284 xatoi
008080f4 g     F .text	000000dc isWav
0080af84 g     F .text	000004bc __sfvwrite_r
0080c8d0 g     F .text	00000054 _sbrk_r
0080a118 g     F .text	00000120 put_dump
0080d7bc g     F .text	00000060 _read_r
008149c8 g     O .rwdata	00000004 alt_max_fd
008112a8 g     F .text	00000068 alt_up_audio_write_fifo_head
0080cdc0 g     F .text	000000f0 _fclose_r
008166ca g     O .bss	00000002 acc_files
0080d13c g     F .text	00000030 fflush
008166d4 g     O .bss	00000004 __malloc_max_sbrked_mem
008116fc g     F .text	00000180 alt_irq_register
0080de24 g     F .text	000000d4 lseek
008149a8 g     O .rwdata	00000004 _global_impure_ptr
0080c17c g     F .text	00000564 _realloc_r
008173e8 g       *ABS*	00000000 __bss_end
0080e50c g     F .text	00000108 alt_tick
008103a4 g     F .text	000000a4 altera_avalon_uart_init
00810b68 g     F .text	0000003c alt_up_audio_open_dev
0080af54 g     F .text	00000018 __fp_lock_all
00805e6c g     F .text	00000218 f_unlink
00810fa0 g     F .text	00000068 alt_up_audio_play_r
0080e470 g     F .text	0000009c alt_alarm_stop
00809e54 g     F .text	000002c4 xprintf
008166f4 g     O .bss	00000004 alt_irq_active
0080a238 g     F .text	000000c0 get_line
008000fc g     F .exceptions	000000d8 alt_irq_handler
00813554 g     O .rwdata	00000028 alt_dev_null
00807988 g     F .text	00000074 f_putc
008079fc g     F .text	00000098 f_puts
00811310 g     F .text	00000048 alt_dcache_flush_all
008149e8 g       *ABS*	00000000 __ram_rwdata_end
008149c0 g     O .rwdata	00000008 alt_dev_list
0080e650 g     F .text	000000f8 write
0080c014 g     F .text	000000a0 _putc_r
00812d28 g       *ABS*	00000000 __ram_rodata_end
0080db6c g     F .text	000000b0 fstat
0080a504 g     F .text	00000058 .hidden __umodsi3
008173e8 g       *ABS*	00000000 end
0080fa8c g     F .text	000004d8 altera_avalon_lcd_16207_write
008109bc g     F .text	000001ac altera_avalon_uart_write
0080e9cc g     F .text	000000b4 altera_avalon_jtag_uart_init
008001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0081226c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00810220 g     F .text	00000074 alt_avalon_timer_sc_init
008102f4 g     F .text	00000060 altera_avalon_uart_write_fd
00810354 g     F .text	00000050 altera_avalon_uart_close_fd
0080f0a4 g     F .text	00000224 altera_avalon_jtag_uart_write
0080af44 g     F .text	00000004 __sfp_lock_acquire
0080bdd4 g     F .text	000000e4 memchr
0080d290 g     F .text	00000310 _free_r
0080dfbc g     F .text	0000022c alt_printf
00809c28 g     F .text	0000006c xputs
008120b8 g     F .text	00000180 __call_exitprocs
0080aa34 g     F .text	00000074 __srget_r
0080a2f8 g     F .text	00000024 uart0_init
00816ba8 g     O .bss	00000400 Buff
0080516c g     F .text	00000048 f_close
008149b0 g     O .rwdata	00000004 __malloc_sbrk_base
00800248 g     F .text	0000004c _start
008166ec g     O .bss	00000004 _alt_tick_rate
00811150 g     F .text	00000108 alt_up_audio_write_fifo
008166f0 g     O .bss	00000004 _alt_nticks
0080e260 g     F .text	000000fc read
0080e7b4 g     F .text	000000b4 alt_sys_init
00811070 g     F .text	000000e0 alt_up_audio_read_fifo
00811fa0 g     F .text	00000118 __register_exitproc
00804478 g     F .text	000004e8 f_read
00810ca4 g     F .text	00000058 alt_up_audio_disable_write_interrupt
00805814 g     F .text	000000e4 f_readdir
0080ed30 g     F .text	00000068 altera_avalon_jtag_uart_close
00812d28 g       *ABS*	00000000 __ram_rwdata_start
00800e08 g     F .text	00000120 ffs_DiskIORead
0081226c g       *ABS*	00000000 __ram_rodata_start
00816714 g     O .bss	00000028 __malloc_current_mallinfo
008064bc g     F .text	0000010c f_chmod
00816fa8 g     O .bss	00000224 File2
0080e868 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00811d84 g     F .text	000000a4 alt_get_fd
00800a78 g     F .text	0000010c ffs_DiskIOTimerproc
00811b24 g     F .text	00000158 alt_busy_sleep
0080cd6c g     F .text	00000054 _close_r
00810c50 g     F .text	00000054 alt_up_audio_enable_write_interrupt
00800b84 g     F .text	0000025c ffs_DiskIOInitialize
0080a654 g     F .text	0000007c memcmp
0080e928 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008173e8 g       *ABS*	00000000 __alt_stack_base
0080e978 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080cc18 g     F .text	00000154 __swsetup_r
008171cc g     O .bss	0000001c Dir
00810bf8 g     F .text	00000058 alt_up_audio_disable_read_interrupt
0080ae04 g     F .text	00000118 __sfp
0081314c g     O .rwdata	00000408 __malloc_av_
0080af50 g     F .text	00000004 __sinit_lock_release
0080c924 g     F .text	00000054 __sread
008166cc g     O .bss	00000004 acc_size
0080155c g     F .text	0000002c get_fattime
00811c7c g     F .text	00000108 alt_find_file
00811394 g     F .text	000000a4 alt_dev_llist_insert
0080df74 g     F .text	00000024 __malloc_lock
0080e3c0 g     F .text	000000b0 sbrk
0080d0e0 g     F .text	0000005c _fflush_r
008166a8 g       *ABS*	00000000 __bss_start
0080a818 g     F .text	00000128 memset
008084a8 g     F .text	000014a8 main
00810f40 g     F .text	00000060 alt_up_audio_write_fifo_space
008166e8 g     O .bss	00000004 alt_envp
008166d0 g     O .bss	00000004 __malloc_max_total_mem
0080e8c8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080cba0 g     F .text	00000018 __swbuf
00804ee4 g     F .text	00000288 f_sync
00810010 g     F .text	00000134 altera_avalon_lcd_16207_init
0080ca58 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080ceb0 g     F .text	00000014 fclose
0080b5c8 g     F .text	0000080c _malloc_r
008171e8 g     O .bss	00000100 Line
008069f0 g     F .text	00000ec0 f_mkfs
008149cc g     O .rwdata	00000004 alt_errno
00803f60 g     F .text	00000094 f_mount
0080b440 g     F .text	000000c4 _fwalk
008056a4 g     F .text	00000170 f_opendir
0080c0b4 g     F .text	000000c8 putc
0080a3a8 g     F .text	00000084 .hidden __divsi3
0080d16c g     F .text	00000124 _malloc_trim_r
0081226c g       *ABS*	00000000 __CTOR_END__
0081226c g       *ABS*	00000000 __flash_rodata_start
0081226c g       *ABS*	00000000 __DTOR_LIST__
00801dd4 g     F .text	00000380 put_fat
00809bd4 g     F .text	00000054 xputc
0080e77c g     F .text	00000038 alt_irq_init
0080e35c g     F .text	00000064 alt_release_fd
008051b4 g     F .text	000004f0 f_lseek
00811f54 g     F .text	00000014 atexit
0080cbb8 g     F .text	00000060 _write_r
008149ac g     O .rwdata	00000004 _impure_ptr
008166e0 g     O .bss	00000004 alt_argc
0080cec4 g     F .text	0000021c __sflush_r
00811498 g     F .text	00000060 _do_dtors
0080c6fc g     F .text	000001d4 __srefill_r
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00800de0 g     F .text	00000028 ffs_DiskIOStatus
008058f8 g     F .text	000000a0 f_stat
0080af6c g     F .text	00000018 __fp_unlock_all
00810144 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
008149b8 g     O .rwdata	00000008 alt_fs_list
00810ed8 g     F .text	00000068 alt_up_audio_record_l
00800020 g       *ABS*	00000000 __ram_exceptions_start
00801ad8 g     F .text	0000006c clust2sect
008149e8 g       *ABS*	00000000 _edata
008065c8 g     F .text	00000114 f_utime
00810294 g     F .text	00000060 altera_avalon_uart_read_fd
008173e8 g       *ABS*	00000000 _end
00800248 g       *ABS*	00000000 __ram_exceptions_end
00804960 g     F .text	00000584 f_write
0080ed98 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00811008 g     F .text	00000068 alt_up_audio_play_l
0080c980 g     F .text	0000007c __swrite
008149b4 g     O .rwdata	00000004 __malloc_trim_threshold
00803ff4 g     F .text	00000484 f_open
00811f68 g     F .text	00000038 exit
0080b504 g     F .text	000000c4 _fwalk_reent
0080a42c g     F .text	00000074 .hidden __modsi3
008149e4 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080af48 g     F .text	00000004 __sfp_lock_release
00812aa7 g     O .rodata	00000101 _ctype_
0080a358 g     F .text	00000050 uart0_get
00806084 g     F .text	00000438 f_mkdir
00810714 g     F .text	00000054 altera_avalon_uart_close
00812238 g     F .text	00000034 _exit
00800294 g     F .text	00000024 ffs_Init
0080d8cc g     F .text	0000012c alt_alarm_start
0080d600 g     F .text	000001bc __smakebuf_r
0080ab4c g     F .text	00000098 strlen
0081197c g     F .text	00000154 open
0080e1e8 g     F .text	0000003c alt_putchar
00811588 g     F .text	00000034 alt_icache_flush_all
00805998 g     F .text	000002ec f_getfree
008149e0 g     O .rwdata	00000004 alt_priority_mask
008107a4 g     F .text	000001dc altera_avalon_uart_read
00800a4c g     F .text	0000002c ffs_DiskIOInit
008149d4 g     O .rwdata	00000008 alt_alarm_list
00811438 g     F .text	00000060 _do_ctors
0080da34 g     F .text	000000d0 close
0080dd64 g     F .text	00000084 alt_load
00810ba4 g     F .text	00000054 alt_up_audio_enable_read_interrupt
0080af4c g     F .text	00000004 __sinit_lock_acquire
00810cfc g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409214 	ori	at,at,584
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d40 	call	8001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	00802074 	movhi	r2,129
  800140:	109cba04 	addi	r2,r2,29416
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	109cba04 	addi	r2,r2,29416
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	e17ffd17 	ldw	r5,-12(fp)
  800174:	1009883a 	mov	r4,r2
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	0001883a 	nop
  8001c0:	e037883a 	mov	sp,fp
  8001c4:	dfc00117 	ldw	ra,4(sp)
  8001c8:	df000017 	ldw	fp,0(sp)
  8001cc:	dec00204 	addi	sp,sp,8
  8001d0:	f800283a 	ret

008001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d4:	defffb04 	addi	sp,sp,-20
  8001d8:	dfc00415 	stw	ra,16(sp)
  8001dc:	df000315 	stw	fp,12(sp)
  8001e0:	df000304 	addi	fp,sp,12
  8001e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e8:	000531fa 	rdctl	r2,exception
  8001ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001f0:	e0bffd17 	ldw	r2,-12(fp)
  8001f4:	10801f0c 	andi	r2,r2,124
  8001f8:	1004d0ba 	srli	r2,r2,2
  8001fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  800200:	0005333a 	rdctl	r2,badaddr
  800204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800208:	d0a75617 	ldw	r2,-25256(gp)
  80020c:	10000726 	beq	r2,zero,80022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800210:	d0a75617 	ldw	r2,-25256(gp)
  800214:	e0fffd17 	ldw	r3,-12(fp)
  800218:	e1bffe17 	ldw	r6,-8(fp)
  80021c:	e17fff17 	ldw	r5,-4(fp)
  800220:	1809883a 	mov	r4,r3
  800224:	103ee83a 	callr	r2
  800228:	00000206 	br	800234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  80022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800230:	0005883a 	mov	r2,zero
}
  800234:	e037883a 	mov	sp,fp
  800238:	dfc00117 	ldw	ra,4(sp)
  80023c:	df000017 	ldw	fp,0(sp)
  800240:	dec00204 	addi	sp,sp,8
  800244:	f800283a 	ret

Disassembly of section .text:

00800248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  80024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800254:	00bffd16 	blt	zero,r2,80024c <__alt_data_end+0xff80024c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800258:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800260:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800264:	d6b26814 	ori	gp,gp,51616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800268:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  80026c:	1099aa14 	ori	r2,r2,26280

    movhi r3, %hi(__bss_end)
  800270:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800274:	18dcfa14 	ori	r3,r3,29672

    beq r2, r3, 1f
  800278:	10c00326 	beq	r2,r3,800288 <_start+0x40>

0:
    stw zero, (r2)
  80027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800284:	10fffd36 	bltu	r2,r3,80027c <__alt_data_end+0xff80027c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800288:	080dd640 	call	80dd64 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80028c:	080def80 	call	80def8 <alt_main>

00800290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800290:	003fff06 	br	800290 <__alt_data_end+0xff800290>

00800294 <ffs_Init>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: error cause                                                    */
/***************************************************************************/
FFS_RESULT ffs_Init(void)
{
  800294:	defffe04 	addi	sp,sp,-8
  800298:	df000115 	stw	fp,4(sp)
  80029c:	df000104 	addi	fp,sp,4
   FFS_RESULT Error = FFS_OK;
  8002a0:	e03fff0d 	sth	zero,-4(fp)
   
   return (Error);
  8002a4:	e0bfff0b 	ldhu	r2,-4(fp)
} /* ffs_Init */
  8002a8:	e037883a 	mov	sp,fp
  8002ac:	df000017 	ldw	fp,0(sp)
  8002b0:	dec00104 	addi	sp,sp,4
  8002b4:	f800283a 	ret

008002b8 <SetLowSpeed>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void SetLowSpeed(void)
{
  8002b8:	deffff04 	addi	sp,sp,-4
  8002bc:	df000015 	stw	fp,0(sp)
  8002c0:	d839883a 	mov	fp,sp
   Control1 &= ~0xFF00;
  8002c4:	d0e74417 	ldw	r3,-25328(gp)
  8002c8:	00bffff4 	movhi	r2,65535
  8002cc:	10803fc4 	addi	r2,r2,255
  8002d0:	1884703a 	and	r2,r3,r2
  8002d4:	d0a74415 	stw	r2,-25328(gp)
   Control1 |= (249 << 8);
  8002d8:	d0a74417 	ldw	r2,-25328(gp)
  8002dc:	10be4014 	ori	r2,r2,63744
  8002e0:	d0a74415 	stw	r2,-25328(gp)
   SPI_CTRL  = Control1;
  8002e4:	00a04034 	movhi	r2,33024
  8002e8:	10840a04 	addi	r2,r2,4136
  8002ec:	d0e74417 	ldw	r3,-25328(gp)
  8002f0:	10c00015 	stw	r3,0(r2)
} /* SetLowSpeed */
  8002f4:	0001883a 	nop
  8002f8:	e037883a 	mov	sp,fp
  8002fc:	df000017 	ldw	fp,0(sp)
  800300:	dec00104 	addi	sp,sp,4
  800304:	f800283a 	ret

00800308 <SetHighSpeed>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void SetHighSpeed(void)
{
  800308:	deffff04 	addi	sp,sp,-4
  80030c:	df000015 	stw	fp,0(sp)
  800310:	d839883a 	mov	fp,sp
   Control1 &= ~0xFF00;
  800314:	d0e74417 	ldw	r3,-25328(gp)
  800318:	00bffff4 	movhi	r2,65535
  80031c:	10803fc4 	addi	r2,r2,255
  800320:	1884703a 	and	r2,r3,r2
  800324:	d0a74415 	stw	r2,-25328(gp)

   if (0 == (CardType & 0x01))
  800328:	d0a74203 	ldbu	r2,-25336(gp)
  80032c:	10803fcc 	andi	r2,r2,255
  800330:	1080004c 	andi	r2,r2,1
  800334:	1000041e 	bne	r2,zero,800348 <SetHighSpeed+0x40>
   {
      /* SD card 25 MHz */
      Control1 |= (1 << 8);
  800338:	d0a74417 	ldw	r2,-25328(gp)
  80033c:	10804014 	ori	r2,r2,256
  800340:	d0a74415 	stw	r2,-25328(gp)
  800344:	00000306 	br	800354 <SetHighSpeed+0x4c>
   }
   else
   {
      /* MMC card 16 MHz */
      Control1 |= (2 << 8);
  800348:	d0a74417 	ldw	r2,-25328(gp)
  80034c:	10808014 	ori	r2,r2,512
  800350:	d0a74415 	stw	r2,-25328(gp)
   }
   SPI_CTRL  = Control1;
  800354:	00a04034 	movhi	r2,33024
  800358:	10840a04 	addi	r2,r2,4136
  80035c:	d0e74417 	ldw	r3,-25328(gp)
  800360:	10c00015 	stw	r3,0(r2)
} /* SetHighSpeed */
  800364:	0001883a 	nop
  800368:	e037883a 	mov	sp,fp
  80036c:	df000017 	ldw	fp,0(sp)
  800370:	dec00104 	addi	sp,sp,4
  800374:	f800283a 	ret

00800378 <InitDiskIOHardware>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void InitDiskIOHardware(void)
{
  800378:	defffe04 	addi	sp,sp,-8
  80037c:	dfc00115 	stw	ra,4(sp)
  800380:	df000015 	stw	fp,0(sp)
  800384:	d839883a 	mov	fp,sp
   /*
    * Deselct before to prevent glitch
    */
   DESELECT();
  800388:	d0a74417 	ldw	r2,-25328(gp)
  80038c:	10800054 	ori	r2,r2,1
  800390:	d0a74415 	stw	r2,-25328(gp)
  800394:	00a04034 	movhi	r2,33024
  800398:	10840a04 	addi	r2,r2,4136
  80039c:	d0e74417 	ldw	r3,-25328(gp)
  8003a0:	10c00015 	stw	r3,0(r2)

   /* Slow during init */
   SetLowSpeed();
  8003a4:	08002b80 	call	8002b8 <SetLowSpeed>
   
} /* InitDiskIOHardware */
  8003a8:	0001883a 	nop
  8003ac:	e037883a 	mov	sp,fp
  8003b0:	dfc00117 	ldw	ra,4(sp)
  8003b4:	df000017 	ldw	fp,0(sp)
  8003b8:	dec00204 	addi	sp,sp,8
  8003bc:	f800283a 	ret

008003c0 <Set8BitTransfer>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void Set8BitTransfer(void)
{
  8003c0:	deffff04 	addi	sp,sp,-4
  8003c4:	df000015 	stw	fp,0(sp)
  8003c8:	d839883a 	mov	fp,sp
   Control1 &= ~CTRL_BIT32;
  8003cc:	d0e74417 	ldw	r3,-25328(gp)
  8003d0:	00bfff44 	movi	r2,-3
  8003d4:	1884703a 	and	r2,r3,r2
  8003d8:	d0a74415 	stw	r2,-25328(gp)
   SPI_CTRL  = Control1;
  8003dc:	00a04034 	movhi	r2,33024
  8003e0:	10840a04 	addi	r2,r2,4136
  8003e4:	d0e74417 	ldw	r3,-25328(gp)
  8003e8:	10c00015 	stw	r3,0(r2)
} /* Set8BitTransfer */
  8003ec:	0001883a 	nop
  8003f0:	e037883a 	mov	sp,fp
  8003f4:	df000017 	ldw	fp,0(sp)
  8003f8:	dec00104 	addi	sp,sp,4
  8003fc:	f800283a 	ret

00800400 <Set32BitTransfer>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void Set32BitTransfer(void)
{
  800400:	deffff04 	addi	sp,sp,-4
  800404:	df000015 	stw	fp,0(sp)
  800408:	d839883a 	mov	fp,sp
   Control1 |= CTRL_BIT32;
  80040c:	d0a74417 	ldw	r2,-25328(gp)
  800410:	10800094 	ori	r2,r2,2
  800414:	d0a74415 	stw	r2,-25328(gp)
   SPI_CTRL  = Control1;
  800418:	00a04034 	movhi	r2,33024
  80041c:	10840a04 	addi	r2,r2,4136
  800420:	d0e74417 	ldw	r3,-25328(gp)
  800424:	10c00015 	stw	r3,0(r2)
} /* Set32BitTransfer */
  800428:	0001883a 	nop
  80042c:	e037883a 	mov	sp,fp
  800430:	df000017 	ldw	fp,0(sp)
  800434:	dec00104 	addi	sp,sp,4
  800438:	f800283a 	ret

0080043c <ReceiveU8>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
static FFS_U8 ReceiveU8 (void)
{
  80043c:	deffff04 	addi	sp,sp,-4
  800440:	df000015 	stw	fp,0(sp)
  800444:	d839883a 	mov	fp,sp
   SPI_TXR = (uint32_t) 0xff;
  800448:	00a04034 	movhi	r2,33024
  80044c:	10840804 	addi	r2,r2,4128
  800450:	00c03fc4 	movi	r3,255
  800454:	10c00015 	stw	r3,0(r2)

   /* wait for char */
   while (!(SPI_SR & SPI_SR_DONE)) ;
  800458:	0001883a 	nop
  80045c:	00a04034 	movhi	r2,33024
  800460:	10840b04 	addi	r2,r2,4140
  800464:	10800017 	ldw	r2,0(r2)
  800468:	1080004c 	andi	r2,r2,1
  80046c:	103ffb26 	beq	r2,zero,80045c <__alt_data_end+0xff80045c>

   return(SPI_RXR);
  800470:	00a04034 	movhi	r2,33024
  800474:	10840904 	addi	r2,r2,4132
  800478:	10800017 	ldw	r2,0(r2)
} /* ReceiveU8 */
  80047c:	e037883a 	mov	sp,fp
  800480:	df000017 	ldw	fp,0(sp)
  800484:	dec00104 	addi	sp,sp,4
  800488:	f800283a 	ret

0080048c <ReceiveDatablock>:
/*  In    : buff, btr                                                      */
/*  Out   : none                                                           */
/*  Return: In case of an error return FALSE                               */
/***************************************************************************/
static int ReceiveDatablock(FFS_U8 * buff, uint32_t btr)
{
  80048c:	defff904 	addi	sp,sp,-28
  800490:	dfc00615 	stw	ra,24(sp)
  800494:	df000515 	stw	fp,20(sp)
  800498:	df000504 	addi	fp,sp,20
  80049c:	e13ffe15 	stw	r4,-8(fp)
  8004a0:	e17fff15 	stw	r5,-4(fp)
   FFS_U8 token, cnt;
   FFS_U32 *buff32 = (FFS_U32*)buff;
  8004a4:	e0bffe17 	ldw	r2,-8(fp)
  8004a8:	e0bffc15 	stw	r2,-16(fp)

   Timer1 = 10;
  8004ac:	00800284 	movi	r2,10
  8004b0:	d0a7428d 	sth	r2,-25334(gp)
   do /* Wait for data packet in timeout of 100ms */
   {
      token = ReceiveU8();
  8004b4:	080043c0 	call	80043c <ReceiveU8>
  8004b8:	e0bffd05 	stb	r2,-12(fp)
   }
   while ((token == 0xFF) && Timer1);
  8004bc:	e0bffd03 	ldbu	r2,-12(fp)
  8004c0:	10803fd8 	cmpnei	r2,r2,255
  8004c4:	1000031e 	bne	r2,zero,8004d4 <ReceiveDatablock+0x48>
  8004c8:	d0a7428b 	ldhu	r2,-25334(gp)
  8004cc:	10bfffcc 	andi	r2,r2,65535
  8004d0:	103ff81e 	bne	r2,zero,8004b4 <__alt_data_end+0xff8004b4>

   if (token != 0xFE)
  8004d4:	e0bffd03 	ldbu	r2,-12(fp)
  8004d8:	10803fa0 	cmpeqi	r2,r2,254
  8004dc:	1000021e 	bne	r2,zero,8004e8 <ReceiveDatablock+0x5c>
      return(FFS_FALSE);  /* If not valid data token, return with error */
  8004e0:	0005883a 	mov	r2,zero
  8004e4:	00002f06 	br	8005a4 <ReceiveDatablock+0x118>
      
   /* Receive the data block into buffer */
   Set32BitTransfer();
  8004e8:	08004000 	call	800400 <Set32BitTransfer>
   
   /* Divide by 8 */
   cnt = btr >> 3;
  8004ec:	e0bfff17 	ldw	r2,-4(fp)
  8004f0:	1004d0fa 	srli	r2,r2,3
  8004f4:	e0bffb05 	stb	r2,-20(fp)

   do /* Receive the data block into buffer */
   {
      RECEIVE_FAST(buff32);
  8004f8:	00a04034 	movhi	r2,33024
  8004fc:	10840804 	addi	r2,r2,4128
  800500:	00ffffc4 	movi	r3,-1
  800504:	10c00015 	stw	r3,0(r2)
  800508:	0001883a 	nop
  80050c:	00a04034 	movhi	r2,33024
  800510:	10840b04 	addi	r2,r2,4140
  800514:	10800017 	ldw	r2,0(r2)
  800518:	1080004c 	andi	r2,r2,1
  80051c:	103ffb26 	beq	r2,zero,80050c <__alt_data_end+0xff80050c>
  800520:	e0fffc17 	ldw	r3,-16(fp)
  800524:	18800104 	addi	r2,r3,4
  800528:	e0bffc15 	stw	r2,-16(fp)
  80052c:	00a04034 	movhi	r2,33024
  800530:	10840904 	addi	r2,r2,4132
  800534:	10800017 	ldw	r2,0(r2)
  800538:	18800015 	stw	r2,0(r3)
      RECEIVE_FAST(buff32);
  80053c:	00a04034 	movhi	r2,33024
  800540:	10840804 	addi	r2,r2,4128
  800544:	00ffffc4 	movi	r3,-1
  800548:	10c00015 	stw	r3,0(r2)
  80054c:	0001883a 	nop
  800550:	00a04034 	movhi	r2,33024
  800554:	10840b04 	addi	r2,r2,4140
  800558:	10800017 	ldw	r2,0(r2)
  80055c:	1080004c 	andi	r2,r2,1
  800560:	103ffb26 	beq	r2,zero,800550 <__alt_data_end+0xff800550>
  800564:	e0fffc17 	ldw	r3,-16(fp)
  800568:	18800104 	addi	r2,r3,4
  80056c:	e0bffc15 	stw	r2,-16(fp)
  800570:	00a04034 	movhi	r2,33024
  800574:	10840904 	addi	r2,r2,4132
  800578:	10800017 	ldw	r2,0(r2)
  80057c:	18800015 	stw	r2,0(r3)
   }
   while (--cnt);
  800580:	e0bffb03 	ldbu	r2,-20(fp)
  800584:	10bfffc4 	addi	r2,r2,-1
  800588:	e0bffb05 	stb	r2,-20(fp)
  80058c:	e0bffb03 	ldbu	r2,-20(fp)
  800590:	103fd91e 	bne	r2,zero,8004f8 <__alt_data_end+0xff8004f8>
   
   Set8BitTransfer();   
  800594:	08003c00 	call	8003c0 <Set8BitTransfer>
   ReceiveU8();   /* Discard CRC */
  800598:	080043c0 	call	80043c <ReceiveU8>
   ReceiveU8();   /* Discard CRC */
  80059c:	080043c0 	call	80043c <ReceiveU8>

   return(FFS_TRUE);  /* Return with success */
  8005a0:	00800044 	movi	r2,1
} /* ReceiveDatablock */
  8005a4:	e037883a 	mov	sp,fp
  8005a8:	dfc00117 	ldw	ra,4(sp)
  8005ac:	df000017 	ldw	fp,0(sp)
  8005b0:	dec00204 	addi	sp,sp,8
  8005b4:	f800283a 	ret

008005b8 <TransmitDatablock>:
/*  In    : buff, token (Data/Stop token)                                  */
/*  Out   : none                                                           */
/*  Return: In case of an error return FALSE                               */
/***************************************************************************/
static int TransmitDatablock(const FFS_U8 * buff, FFS_U8 token)
{
  8005b8:	defff904 	addi	sp,sp,-28
  8005bc:	dfc00615 	stw	ra,24(sp)
  8005c0:	df000515 	stw	fp,20(sp)
  8005c4:	df000504 	addi	fp,sp,20
  8005c8:	e13ffe15 	stw	r4,-8(fp)
  8005cc:	2805883a 	mov	r2,r5
  8005d0:	e0bfff05 	stb	r2,-4(fp)
   FFS_U8 resp, cnt = 0;
  8005d4:	e03ffb05 	stb	zero,-20(fp)
   FFS_U32 *buff32 = (FFS_U32*)buff;
  8005d8:	e0bffe17 	ldw	r2,-8(fp)
  8005dc:	e0bffc15 	stw	r2,-16(fp)

   if (WaitReady() != 0xFF)
  8005e0:	08007640 	call	800764 <WaitReady>
  8005e4:	10803fcc 	andi	r2,r2,255
  8005e8:	10803fe0 	cmpeqi	r2,r2,255
  8005ec:	1000021e 	bne	r2,zero,8005f8 <TransmitDatablock+0x40>
      return(FFS_FALSE);
  8005f0:	0005883a 	mov	r2,zero
  8005f4:	00004d06 	br	80072c <TransmitDatablock+0x174>

   TRANSMIT_U8(token);  /* Xmit data token */
  8005f8:	00a04034 	movhi	r2,33024
  8005fc:	10840804 	addi	r2,r2,4128
  800600:	e0ffff03 	ldbu	r3,-4(fp)
  800604:	10c00015 	stw	r3,0(r2)
  800608:	0001883a 	nop
  80060c:	00a04034 	movhi	r2,33024
  800610:	10840b04 	addi	r2,r2,4140
  800614:	10800017 	ldw	r2,0(r2)
  800618:	1080004c 	andi	r2,r2,1
  80061c:	103ffb26 	beq	r2,zero,80060c <__alt_data_end+0xff80060c>
   if (token != 0xFD)   /* Is data token */
  800620:	e0bfff03 	ldbu	r2,-4(fp)
  800624:	10803f60 	cmpeqi	r2,r2,253
  800628:	10003f1e 	bne	r2,zero,800728 <TransmitDatablock+0x170>
   {
   
      cnt = 512 / 8;
  80062c:	00801004 	movi	r2,64
  800630:	e0bffb05 	stb	r2,-20(fp)
   
      /* Send the 512 byte data block */
      Set32BitTransfer();
  800634:	08004000 	call	800400 <Set32BitTransfer>
      do /* Send the 512 byte data block */
      {
         TRANSMIT_FAST(*buff32++);
  800638:	00a04034 	movhi	r2,33024
  80063c:	10840804 	addi	r2,r2,4128
  800640:	e0fffc17 	ldw	r3,-16(fp)
  800644:	19000104 	addi	r4,r3,4
  800648:	e13ffc15 	stw	r4,-16(fp)
  80064c:	18c00017 	ldw	r3,0(r3)
  800650:	10c00015 	stw	r3,0(r2)
  800654:	0001883a 	nop
  800658:	00a04034 	movhi	r2,33024
  80065c:	10840b04 	addi	r2,r2,4140
  800660:	10800017 	ldw	r2,0(r2)
  800664:	1080004c 	andi	r2,r2,1
  800668:	103ffb26 	beq	r2,zero,800658 <__alt_data_end+0xff800658>
         TRANSMIT_FAST(*buff32++);
  80066c:	00a04034 	movhi	r2,33024
  800670:	10840804 	addi	r2,r2,4128
  800674:	e0fffc17 	ldw	r3,-16(fp)
  800678:	19000104 	addi	r4,r3,4
  80067c:	e13ffc15 	stw	r4,-16(fp)
  800680:	18c00017 	ldw	r3,0(r3)
  800684:	10c00015 	stw	r3,0(r2)
  800688:	0001883a 	nop
  80068c:	00a04034 	movhi	r2,33024
  800690:	10840b04 	addi	r2,r2,4140
  800694:	10800017 	ldw	r2,0(r2)
  800698:	1080004c 	andi	r2,r2,1
  80069c:	103ffb26 	beq	r2,zero,80068c <__alt_data_end+0xff80068c>
      }
      while (--cnt);
  8006a0:	e0bffb03 	ldbu	r2,-20(fp)
  8006a4:	10bfffc4 	addi	r2,r2,-1
  8006a8:	e0bffb05 	stb	r2,-20(fp)
  8006ac:	e0bffb03 	ldbu	r2,-20(fp)
  8006b0:	103fe11e 	bne	r2,zero,800638 <__alt_data_end+0xff800638>

      Set8BitTransfer();
  8006b4:	08003c00 	call	8003c0 <Set8BitTransfer>
      TRANSMIT_U8(0xFF);   /* CRC (Dummy) */
  8006b8:	00a04034 	movhi	r2,33024
  8006bc:	10840804 	addi	r2,r2,4128
  8006c0:	00c03fc4 	movi	r3,255
  8006c4:	10c00015 	stw	r3,0(r2)
  8006c8:	0001883a 	nop
  8006cc:	00a04034 	movhi	r2,33024
  8006d0:	10840b04 	addi	r2,r2,4140
  8006d4:	10800017 	ldw	r2,0(r2)
  8006d8:	1080004c 	andi	r2,r2,1
  8006dc:	103ffb26 	beq	r2,zero,8006cc <__alt_data_end+0xff8006cc>
      TRANSMIT_U8(0xFF);   /* CRC (Dummy) */
  8006e0:	00a04034 	movhi	r2,33024
  8006e4:	10840804 	addi	r2,r2,4128
  8006e8:	00c03fc4 	movi	r3,255
  8006ec:	10c00015 	stw	r3,0(r2)
  8006f0:	0001883a 	nop
  8006f4:	00a04034 	movhi	r2,33024
  8006f8:	10840b04 	addi	r2,r2,4140
  8006fc:	10800017 	ldw	r2,0(r2)
  800700:	1080004c 	andi	r2,r2,1
  800704:	103ffb26 	beq	r2,zero,8006f4 <__alt_data_end+0xff8006f4>

      resp = ReceiveU8();  /* Reveive data response */
  800708:	080043c0 	call	80043c <ReceiveU8>
  80070c:	e0bffd05 	stb	r2,-12(fp)
      if ((resp & 0x1F) != 0x05) /* If not accepted, return with error */
  800710:	e0bffd03 	ldbu	r2,-12(fp)
  800714:	108007cc 	andi	r2,r2,31
  800718:	10800160 	cmpeqi	r2,r2,5
  80071c:	1000021e 	bne	r2,zero,800728 <TransmitDatablock+0x170>
      {
         return(FFS_FALSE);
  800720:	0005883a 	mov	r2,zero
  800724:	00000106 	br	80072c <TransmitDatablock+0x174>
      }
   }

   return(FFS_TRUE);  /* Return with success */
  800728:	00800044 	movi	r2,1
} /* TransmitDatablock */
  80072c:	e037883a 	mov	sp,fp
  800730:	dfc00117 	ldw	ra,4(sp)
  800734:	df000017 	ldw	fp,0(sp)
  800738:	dec00204 	addi	sp,sp,8
  80073c:	f800283a 	ret

00800740 <GetCDWP>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
static FFS_U32 GetCDWP(void)
{
  800740:	defffe04 	addi	sp,sp,-8
  800744:	df000115 	stw	fp,4(sp)
  800748:	df000104 	addi	fp,sp,4
   FFS_U32 value = 0;
  80074c:	e03fff15 	stw	zero,-4(fp)
   
   /*
    * CD and WP is not supported by the Altera DE1 board.
    */

   return(value);
  800750:	e0bfff17 	ldw	r2,-4(fp)
} /* GetCDWP */
  800754:	e037883a 	mov	sp,fp
  800758:	df000017 	ldw	fp,0(sp)
  80075c:	dec00104 	addi	sp,sp,4
  800760:	f800283a 	ret

00800764 <WaitReady>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/
static FFS_U8 WaitReady (void)
{
  800764:	defffd04 	addi	sp,sp,-12
  800768:	dfc00215 	stw	ra,8(sp)
  80076c:	df000115 	stw	fp,4(sp)
  800770:	df000104 	addi	fp,sp,4
   FFS_U8 res;
   
#if (FFS_USE_REAL_TIME_OS == 0)
   Timer2 = (WAIT_READY_TIME_MAX_MS / 10);
  800774:	00800c84 	movi	r2,50
  800778:	d0a7430d 	sth	r2,-25332(gp)
   ReceiveU8();
  80077c:	080043c0 	call	80043c <ReceiveU8>
   do
   {
      res = ReceiveU8();
  800780:	080043c0 	call	80043c <ReceiveU8>
  800784:	e0bfff05 	stb	r2,-4(fp)
   }
   while ((res != 0xFF) && Timer2);
  800788:	e0bfff03 	ldbu	r2,-4(fp)
  80078c:	10803fe0 	cmpeqi	r2,r2,255
  800790:	1000031e 	bne	r2,zero,8007a0 <WaitReady+0x3c>
  800794:	d0a7430b 	ldhu	r2,-25332(gp)
  800798:	10bfffcc 	andi	r2,r2,65535
  80079c:	103ff81e 	bne	r2,zero,800780 <__alt_data_end+0xff800780>
      ff_wait_ms(WAIT_READY_TIME_RTOS_MS);
   }
   while ((res != 0xFF) && (cnt < WAIT_READY_TIME_CNT_RTOS));
#endif   

   return(res);
  8007a0:	e0bfff03 	ldbu	r2,-4(fp)
} /* WaitReady */
  8007a4:	e037883a 	mov	sp,fp
  8007a8:	dfc00117 	ldw	ra,4(sp)
  8007ac:	df000017 	ldw	fp,0(sp)
  8007b0:	dec00204 	addi	sp,sp,8
  8007b4:	f800283a 	ret

008007b8 <ReleaseBus>:

/*-----------------------------------------------------------------------*/
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/
static void ReleaseBus (void)
{
  8007b8:	defffe04 	addi	sp,sp,-8
  8007bc:	dfc00115 	stw	ra,4(sp)
  8007c0:	df000015 	stw	fp,0(sp)
  8007c4:	d839883a 	mov	fp,sp
    * master device must send a byte after deasserted CS signal.   
    *
    * More information can be found here:
    * http://elm-chan.org/docs/mmc/mmc_e.html
    */
   DESELECT();
  8007c8:	d0a74417 	ldw	r2,-25328(gp)
  8007cc:	10800054 	ori	r2,r2,1
  8007d0:	d0a74415 	stw	r2,-25328(gp)
  8007d4:	00a04034 	movhi	r2,33024
  8007d8:	10840a04 	addi	r2,r2,4136
  8007dc:	d0e74417 	ldw	r3,-25328(gp)
  8007e0:	10c00015 	stw	r3,0(r2)
   ReceiveU8();
  8007e4:	080043c0 	call	80043c <ReceiveU8>
} /* ReleaseBus */
  8007e8:	0001883a 	nop
  8007ec:	e037883a 	mov	sp,fp
  8007f0:	dfc00117 	ldw	ra,4(sp)
  8007f4:	df000017 	ldw	fp,0(sp)
  8007f8:	dec00204 	addi	sp,sp,8
  8007fc:	f800283a 	ret

00800800 <SendCMD>:
/*-----------------------------------------------------------------------*/
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/
static FFS_U8 SendCMD (FFS_U8 cmd,   /* Command byte */
                       FFS_U32 arg)  /* Argument */
{
  800800:	defffb04 	addi	sp,sp,-20
  800804:	dfc00415 	stw	ra,16(sp)
  800808:	df000315 	stw	fp,12(sp)
  80080c:	df000304 	addi	fp,sp,12
  800810:	2005883a 	mov	r2,r4
  800814:	e17fff15 	stw	r5,-4(fp)
  800818:	e0bffe05 	stb	r2,-8(fp)
   FFS_U8 n, res;

   if (cmd & 0x80)   /* ACMD<n> is the command sequense of CMD55-CMD<n> */
  80081c:	e0bffe03 	ldbu	r2,-8(fp)
  800820:	10803fcc 	andi	r2,r2,255
  800824:	1080201c 	xori	r2,r2,128
  800828:	10bfe004 	addi	r2,r2,-128
  80082c:	10000c0e 	bge	r2,zero,800860 <SendCMD+0x60>
   {
      cmd &= 0x7F;
  800830:	e0bffe03 	ldbu	r2,-8(fp)
  800834:	10801fcc 	andi	r2,r2,127
  800838:	e0bffe05 	stb	r2,-8(fp)
      res = SendCMD(CMD55, 0);
  80083c:	000b883a 	mov	r5,zero
  800840:	01001dc4 	movi	r4,119
  800844:	08008000 	call	800800 <SendCMD>
  800848:	e0bffd45 	stb	r2,-11(fp)
      if (res > 1)
  80084c:	e0bffd43 	ldbu	r2,-11(fp)
  800850:	108000b0 	cmpltui	r2,r2,2
  800854:	1000021e 	bne	r2,zero,800860 <SendCMD+0x60>
         return res;
  800858:	e0bffd43 	ldbu	r2,-11(fp)
  80085c:	00007606 	br	800a38 <SendCMD+0x238>
   }

   /* Select the card and wait for ready */
   DESELECT();
  800860:	d0a74417 	ldw	r2,-25328(gp)
  800864:	10800054 	ori	r2,r2,1
  800868:	d0a74415 	stw	r2,-25328(gp)
  80086c:	00a04034 	movhi	r2,33024
  800870:	10840a04 	addi	r2,r2,4136
  800874:	d0e74417 	ldw	r3,-25328(gp)
  800878:	10c00015 	stw	r3,0(r2)
   SELECT();
  80087c:	d0e74417 	ldw	r3,-25328(gp)
  800880:	00bfff84 	movi	r2,-2
  800884:	1884703a 	and	r2,r3,r2
  800888:	d0a74415 	stw	r2,-25328(gp)
  80088c:	00a04034 	movhi	r2,33024
  800890:	10840a04 	addi	r2,r2,4136
  800894:	d0e74417 	ldw	r3,-25328(gp)
  800898:	10c00015 	stw	r3,0(r2)

   if (WaitReady() != 0xFF)
  80089c:	08007640 	call	800764 <WaitReady>
  8008a0:	10803fcc 	andi	r2,r2,255
  8008a4:	10803fe0 	cmpeqi	r2,r2,255
  8008a8:	1000021e 	bne	r2,zero,8008b4 <SendCMD+0xb4>
      return 0xFF;
  8008ac:	00bfffc4 	movi	r2,-1
  8008b0:	00006106 	br	800a38 <SendCMD+0x238>

   /* Send command packet */
   TRANSMIT_U8(cmd); /* Start + Command index */
  8008b4:	00a04034 	movhi	r2,33024
  8008b8:	10840804 	addi	r2,r2,4128
  8008bc:	e0fffe03 	ldbu	r3,-8(fp)
  8008c0:	10c00015 	stw	r3,0(r2)
  8008c4:	0001883a 	nop
  8008c8:	00a04034 	movhi	r2,33024
  8008cc:	10840b04 	addi	r2,r2,4140
  8008d0:	10800017 	ldw	r2,0(r2)
  8008d4:	1080004c 	andi	r2,r2,1
  8008d8:	103ffb26 	beq	r2,zero,8008c8 <__alt_data_end+0xff8008c8>
   TRANSMIT_U8((FFS_U8) (arg >> 24));  /* Argument[31..24] */
  8008dc:	00a04034 	movhi	r2,33024
  8008e0:	10840804 	addi	r2,r2,4128
  8008e4:	e0ffff17 	ldw	r3,-4(fp)
  8008e8:	1806d63a 	srli	r3,r3,24
  8008ec:	10c00015 	stw	r3,0(r2)
  8008f0:	0001883a 	nop
  8008f4:	00a04034 	movhi	r2,33024
  8008f8:	10840b04 	addi	r2,r2,4140
  8008fc:	10800017 	ldw	r2,0(r2)
  800900:	1080004c 	andi	r2,r2,1
  800904:	103ffb26 	beq	r2,zero,8008f4 <__alt_data_end+0xff8008f4>
   TRANSMIT_U8((FFS_U8) (arg >> 16));  /* Argument[23..16] */
  800908:	00a04034 	movhi	r2,33024
  80090c:	10840804 	addi	r2,r2,4128
  800910:	e0ffff17 	ldw	r3,-4(fp)
  800914:	1806d43a 	srli	r3,r3,16
  800918:	18c03fcc 	andi	r3,r3,255
  80091c:	10c00015 	stw	r3,0(r2)
  800920:	0001883a 	nop
  800924:	00a04034 	movhi	r2,33024
  800928:	10840b04 	addi	r2,r2,4140
  80092c:	10800017 	ldw	r2,0(r2)
  800930:	1080004c 	andi	r2,r2,1
  800934:	103ffb26 	beq	r2,zero,800924 <__alt_data_end+0xff800924>
   TRANSMIT_U8((FFS_U8) (arg >> 8));   /* Argument[15..8] */
  800938:	00a04034 	movhi	r2,33024
  80093c:	10840804 	addi	r2,r2,4128
  800940:	e0ffff17 	ldw	r3,-4(fp)
  800944:	1806d23a 	srli	r3,r3,8
  800948:	18c03fcc 	andi	r3,r3,255
  80094c:	10c00015 	stw	r3,0(r2)
  800950:	0001883a 	nop
  800954:	00a04034 	movhi	r2,33024
  800958:	10840b04 	addi	r2,r2,4140
  80095c:	10800017 	ldw	r2,0(r2)
  800960:	1080004c 	andi	r2,r2,1
  800964:	103ffb26 	beq	r2,zero,800954 <__alt_data_end+0xff800954>
   TRANSMIT_U8((FFS_U8) arg); /* Argument[7..0] */
  800968:	00a04034 	movhi	r2,33024
  80096c:	10840804 	addi	r2,r2,4128
  800970:	e0ffff17 	ldw	r3,-4(fp)
  800974:	18c03fcc 	andi	r3,r3,255
  800978:	10c00015 	stw	r3,0(r2)
  80097c:	0001883a 	nop
  800980:	00a04034 	movhi	r2,33024
  800984:	10840b04 	addi	r2,r2,4140
  800988:	10800017 	ldw	r2,0(r2)
  80098c:	1080004c 	andi	r2,r2,1
  800990:	103ffb26 	beq	r2,zero,800980 <__alt_data_end+0xff800980>

   n = 0x01;   /* Dummy CRC + Stop */
  800994:	00800044 	movi	r2,1
  800998:	e0bffd05 	stb	r2,-12(fp)
   if (cmd == CMD0)
  80099c:	e0bffe03 	ldbu	r2,-8(fp)
  8009a0:	10801018 	cmpnei	r2,r2,64
  8009a4:	1000021e 	bne	r2,zero,8009b0 <SendCMD+0x1b0>
      n = 0x95;   /* Valid CRC for CMD0(0) */
  8009a8:	00bfe544 	movi	r2,-107
  8009ac:	e0bffd05 	stb	r2,-12(fp)
   if (cmd == CMD8)
  8009b0:	e0bffe03 	ldbu	r2,-8(fp)
  8009b4:	10801218 	cmpnei	r2,r2,72
  8009b8:	1000021e 	bne	r2,zero,8009c4 <SendCMD+0x1c4>
      n = 0x87;   /* Valid CRC for CMD8(0x1AA) */
  8009bc:	00bfe1c4 	movi	r2,-121
  8009c0:	e0bffd05 	stb	r2,-12(fp)
   TRANSMIT_U8(n);
  8009c4:	00a04034 	movhi	r2,33024
  8009c8:	10840804 	addi	r2,r2,4128
  8009cc:	e0fffd03 	ldbu	r3,-12(fp)
  8009d0:	10c00015 	stw	r3,0(r2)
  8009d4:	0001883a 	nop
  8009d8:	00a04034 	movhi	r2,33024
  8009dc:	10840b04 	addi	r2,r2,4140
  8009e0:	10800017 	ldw	r2,0(r2)
  8009e4:	1080004c 	andi	r2,r2,1
  8009e8:	103ffb26 	beq	r2,zero,8009d8 <__alt_data_end+0xff8009d8>

   /* Receive command response */
   if (cmd == CMD12)
  8009ec:	e0bffe03 	ldbu	r2,-8(fp)
  8009f0:	10801318 	cmpnei	r2,r2,76
  8009f4:	1000011e 	bne	r2,zero,8009fc <SendCMD+0x1fc>
      ReceiveU8();   /* Skip a stuff byte when stop reading */
  8009f8:	080043c0 	call	80043c <ReceiveU8>

   n = 10;  /* Wait for a valid response in timeout of 10 attempts */
  8009fc:	00800284 	movi	r2,10
  800a00:	e0bffd05 	stb	r2,-12(fp)
   do
   {
      res = ReceiveU8();
  800a04:	080043c0 	call	80043c <ReceiveU8>
  800a08:	e0bffd45 	stb	r2,-11(fp)
   }
   while ((res & 0x80) && --n);
  800a0c:	e0bffd43 	ldbu	r2,-11(fp)
  800a10:	10803fcc 	andi	r2,r2,255
  800a14:	1080201c 	xori	r2,r2,128
  800a18:	10bfe004 	addi	r2,r2,-128
  800a1c:	1000050e 	bge	r2,zero,800a34 <SendCMD+0x234>
  800a20:	e0bffd03 	ldbu	r2,-12(fp)
  800a24:	10bfffc4 	addi	r2,r2,-1
  800a28:	e0bffd05 	stb	r2,-12(fp)
  800a2c:	e0bffd03 	ldbu	r2,-12(fp)
  800a30:	103ff41e 	bne	r2,zero,800a04 <__alt_data_end+0xff800a04>

   return(res); /* Return with the response value */
  800a34:	e0bffd43 	ldbu	r2,-11(fp)
} /* SendCMD */
  800a38:	e037883a 	mov	sp,fp
  800a3c:	dfc00117 	ldw	ra,4(sp)
  800a40:	df000017 	ldw	fp,0(sp)
  800a44:	dec00204 	addi	sp,sp,8
  800a48:	f800283a 	ret

00800a4c <ffs_DiskIOInit>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: FFS_OK                                                         */
/***************************************************************************/
FFS_RESULT ffs_DiskIOInit (void)
{
  800a4c:	defffe04 	addi	sp,sp,-8
  800a50:	dfc00115 	stw	ra,4(sp)
  800a54:	df000015 	stw	fp,0(sp)
  800a58:	d839883a 	mov	fp,sp
   (void)XMITDummy;

   InitDiskIOHardware();
  800a5c:	08003780 	call	800378 <InitDiskIOHardware>

   return(FFS_OK);
  800a60:	0005883a 	mov	r2,zero
} /* ffs_DiskIOInit */
  800a64:	e037883a 	mov	sp,fp
  800a68:	dfc00117 	ldw	ra,4(sp)
  800a6c:	df000017 	ldw	fp,0(sp)
  800a70:	dec00204 	addi	sp,sp,8
  800a74:	f800283a 	ret

00800a78 <ffs_DiskIOTimerproc>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void ffs_DiskIOTimerproc (void)
{
  800a78:	defffc04 	addi	sp,sp,-16
  800a7c:	dfc00315 	stw	ra,12(sp)
  800a80:	df000215 	stw	fp,8(sp)
  800a84:	df000204 	addi	fp,sp,8
   static FFS_U32 pvm;
   FFS_U32 n;
   DSTATUS s;

   /* 100Hz decrement timer */
   n = Timer1;
  800a88:	d0a7428b 	ldhu	r2,-25334(gp)
  800a8c:	10bfffcc 	andi	r2,r2,65535
  800a90:	e0bfff15 	stw	r2,-4(fp)
   if (n)
  800a94:	e0bfff17 	ldw	r2,-4(fp)
  800a98:	10000526 	beq	r2,zero,800ab0 <ffs_DiskIOTimerproc+0x38>
      Timer1 = (FFS_U16)-- n;
  800a9c:	e0bfff17 	ldw	r2,-4(fp)
  800aa0:	10bfffc4 	addi	r2,r2,-1
  800aa4:	e0bfff15 	stw	r2,-4(fp)
  800aa8:	e0bfff17 	ldw	r2,-4(fp)
  800aac:	d0a7428d 	sth	r2,-25334(gp)
   n = Timer2;
  800ab0:	d0a7430b 	ldhu	r2,-25332(gp)
  800ab4:	10bfffcc 	andi	r2,r2,65535
  800ab8:	e0bfff15 	stw	r2,-4(fp)
   if (n)
  800abc:	e0bfff17 	ldw	r2,-4(fp)
  800ac0:	10000526 	beq	r2,zero,800ad8 <ffs_DiskIOTimerproc+0x60>
      Timer2 = (FFS_U16)-- n;
  800ac4:	e0bfff17 	ldw	r2,-4(fp)
  800ac8:	10bfffc4 	addi	r2,r2,-1
  800acc:	e0bfff15 	stw	r2,-4(fp)
  800ad0:	e0bfff17 	ldw	r2,-4(fp)
  800ad4:	d0a7430d 	sth	r2,-25332(gp)

   n = pvm;
  800ad8:	d0a74517 	ldw	r2,-25324(gp)
  800adc:	e0bfff15 	stw	r2,-4(fp)

   /* Sample socket switch */
   pvm = GetCDWP();
  800ae0:	08007400 	call	800740 <GetCDWP>
  800ae4:	d0a74515 	stw	r2,-25324(gp)

   /* Have contacts stabled? */
   if (n == pvm)
  800ae8:	d0a74517 	ldw	r2,-25324(gp)
  800aec:	e0ffff17 	ldw	r3,-4(fp)
  800af0:	18801e1e 	bne	r3,r2,800b6c <ffs_DiskIOTimerproc+0xf4>
   {
      s = Stat;
  800af4:	d0a00003 	ldbu	r2,-32768(gp)
  800af8:	e0bffe05 	stb	r2,-8(fp)

      /* Check write protect */
      if (pvm & SOCK_WP_ACTIVE)
  800afc:	d0a74517 	ldw	r2,-25324(gp)
  800b00:	1080008c 	andi	r2,r2,2
  800b04:	10000426 	beq	r2,zero,800b18 <ffs_DiskIOTimerproc+0xa0>
         s |= STA_PROTECT;
  800b08:	e0bffe03 	ldbu	r2,-8(fp)
  800b0c:	10800114 	ori	r2,r2,4
  800b10:	e0bffe05 	stb	r2,-8(fp)
  800b14:	00000406 	br	800b28 <ffs_DiskIOTimerproc+0xb0>
      else
         s &= ~STA_PROTECT;
  800b18:	e0fffe03 	ldbu	r3,-8(fp)
  800b1c:	00bffec4 	movi	r2,-5
  800b20:	1884703a 	and	r2,r3,r2
  800b24:	e0bffe05 	stb	r2,-8(fp)

      /* Check socket empty */
      if (pvm & SOCK_CD_EMPTY)
  800b28:	d0a74517 	ldw	r2,-25324(gp)
  800b2c:	1080004c 	andi	r2,r2,1
  800b30:	10000426 	beq	r2,zero,800b44 <ffs_DiskIOTimerproc+0xcc>
         s |= (STA_NODISK | STA_NOINIT);
  800b34:	e0bffe03 	ldbu	r2,-8(fp)
  800b38:	108000d4 	ori	r2,r2,3
  800b3c:	e0bffe05 	stb	r2,-8(fp)
  800b40:	00000406 	br	800b54 <ffs_DiskIOTimerproc+0xdc>
      else
         s &= ~STA_NODISK;
  800b44:	e0fffe03 	ldbu	r3,-8(fp)
  800b48:	00bfff44 	movi	r2,-3
  800b4c:	1884703a 	and	r2,r3,r2
  800b50:	e0bffe05 	stb	r2,-8(fp)

#if (FFS_SUPPORT_HW_WP == 0)
      /* Ignore the write protect */
      s &= ~STA_PROTECT;
  800b54:	e0fffe03 	ldbu	r3,-8(fp)
  800b58:	00bffec4 	movi	r2,-5
  800b5c:	1884703a 	and	r2,r3,r2
  800b60:	e0bffe05 	stb	r2,-8(fp)
#endif

      Stat = s;
  800b64:	e0bffe03 	ldbu	r2,-8(fp)
  800b68:	d0a00005 	stb	r2,-32768(gp)
   }
} /* ffs_DiskIOTimerproc */
  800b6c:	0001883a 	nop
  800b70:	e037883a 	mov	sp,fp
  800b74:	dfc00117 	ldw	ra,4(sp)
  800b78:	df000017 	ldw	fp,0(sp)
  800b7c:	dec00204 	addi	sp,sp,8
  800b80:	f800283a 	ret

00800b84 <ffs_DiskIOInitialize>:
/*  In    : Physical drive nmuber                                          */
/*  Out   : none                                                           */
/*  Return: DSTATUS                                                        */
/***************************************************************************/
DSTATUS ffs_DiskIOInitialize (FFS_U8 drv)
{
  800b84:	defffa04 	addi	sp,sp,-24
  800b88:	dfc00515 	stw	ra,20(sp)
  800b8c:	df000415 	stw	fp,16(sp)
  800b90:	dc000315 	stw	r16,12(sp)
  800b94:	df000404 	addi	fp,sp,16
  800b98:	2005883a 	mov	r2,r4
  800b9c:	e0bffe05 	stb	r2,-8(fp)
   FFS_U8 n, ty, cmd, ocr[4];

   (void)drv;

   if (Stat & STA_NODISK)  /* No card in the socket */
  800ba0:	d0a00003 	ldbu	r2,-32768(gp)
  800ba4:	10803fcc 	andi	r2,r2,255
  800ba8:	1080008c 	andi	r2,r2,2
  800bac:	10000226 	beq	r2,zero,800bb8 <ffs_DiskIOInitialize+0x34>
      return Stat;
  800bb0:	d0a00003 	ldbu	r2,-32768(gp)
  800bb4:	00008406 	br	800dc8 <ffs_DiskIOInitialize+0x244>

   /* low speed during init */
   SetLowSpeed();
  800bb8:	08002b80 	call	8002b8 <SetLowSpeed>

   POWER_ON(); /* Force socket power ON */
   for (n = 10; n; n--)
  800bbc:	00800284 	movi	r2,10
  800bc0:	e0bffc05 	stb	r2,-16(fp)
  800bc4:	00000406 	br	800bd8 <ffs_DiskIOInitialize+0x54>
      ReceiveU8();   /* 80 dummy clocks */
  800bc8:	080043c0 	call	80043c <ReceiveU8>

   /* low speed during init */
   SetLowSpeed();

   POWER_ON(); /* Force socket power ON */
   for (n = 10; n; n--)
  800bcc:	e0bffc03 	ldbu	r2,-16(fp)
  800bd0:	10bfffc4 	addi	r2,r2,-1
  800bd4:	e0bffc05 	stb	r2,-16(fp)
  800bd8:	e0bffc03 	ldbu	r2,-16(fp)
  800bdc:	103ffa1e 	bne	r2,zero,800bc8 <__alt_data_end+0xff800bc8>
      ReceiveU8();   /* 80 dummy clocks */

   ty = 0;
  800be0:	e03ffc45 	stb	zero,-15(fp)
   if (SendCMD(CMD0, 0) == 1)
  800be4:	000b883a 	mov	r5,zero
  800be8:	01001004 	movi	r4,64
  800bec:	08008000 	call	800800 <SendCMD>
  800bf0:	10803fcc 	andi	r2,r2,255
  800bf4:	10800058 	cmpnei	r2,r2,1
  800bf8:	1000681e 	bne	r2,zero,800d9c <ffs_DiskIOInitialize+0x218>
   {  /* Enter Idle state */
      Timer1 = 100;  /* Initialization timeout of 1000 msec */
  800bfc:	00801904 	movi	r2,100
  800c00:	d0a7428d 	sth	r2,-25334(gp)
      if (SendCMD(CMD8, 0x1AA) == 1)
  800c04:	01406a84 	movi	r5,426
  800c08:	01001204 	movi	r4,72
  800c0c:	08008000 	call	800800 <SendCMD>
  800c10:	10803fcc 	andi	r2,r2,255
  800c14:	10800058 	cmpnei	r2,r2,1
  800c18:	10003e1e 	bne	r2,zero,800d14 <ffs_DiskIOInitialize+0x190>
      {  /* SDC ver 2.00 */
         for (n = 0; n < 4; n++)
  800c1c:	e03ffc05 	stb	zero,-16(fp)
  800c20:	00000906 	br	800c48 <ffs_DiskIOInitialize+0xc4>
            ocr[n] = ReceiveU8();
  800c24:	e43ffc03 	ldbu	r16,-16(fp)
  800c28:	080043c0 	call	80043c <ReceiveU8>
  800c2c:	1007883a 	mov	r3,r2
  800c30:	e0bffcc4 	addi	r2,fp,-13
  800c34:	1405883a 	add	r2,r2,r16
  800c38:	10c00005 	stb	r3,0(r2)
   if (SendCMD(CMD0, 0) == 1)
   {  /* Enter Idle state */
      Timer1 = 100;  /* Initialization timeout of 1000 msec */
      if (SendCMD(CMD8, 0x1AA) == 1)
      {  /* SDC ver 2.00 */
         for (n = 0; n < 4; n++)
  800c3c:	e0bffc03 	ldbu	r2,-16(fp)
  800c40:	10800044 	addi	r2,r2,1
  800c44:	e0bffc05 	stb	r2,-16(fp)
  800c48:	e0bffc03 	ldbu	r2,-16(fp)
  800c4c:	10800130 	cmpltui	r2,r2,4
  800c50:	103ff41e 	bne	r2,zero,800c24 <__alt_data_end+0xff800c24>
            ocr[n] = ReceiveU8();
         if (ocr[2] == 0x01 && ocr[3] == 0xAA)
  800c54:	e0bffd43 	ldbu	r2,-11(fp)
  800c58:	10803fcc 	andi	r2,r2,255
  800c5c:	10800058 	cmpnei	r2,r2,1
  800c60:	10004e1e 	bne	r2,zero,800d9c <ffs_DiskIOInitialize+0x218>
  800c64:	e0bffd83 	ldbu	r2,-10(fp)
  800c68:	10803fcc 	andi	r2,r2,255
  800c6c:	10802a98 	cmpnei	r2,r2,170
  800c70:	10004a1e 	bne	r2,zero,800d9c <ffs_DiskIOInitialize+0x218>
         {  /* The card can work at vdd range of 2.7-3.6V */
            while (Timer1 && SendCMD(ACMD41, 1UL << 30)) ;  /* ACMD41 with HCS bit */
  800c74:	0001883a 	nop
  800c78:	d0a7428b 	ldhu	r2,-25334(gp)
  800c7c:	10bfffcc 	andi	r2,r2,65535
  800c80:	10000526 	beq	r2,zero,800c98 <ffs_DiskIOInitialize+0x114>
  800c84:	01500034 	movhi	r5,16384
  800c88:	01003a44 	movi	r4,233
  800c8c:	08008000 	call	800800 <SendCMD>
  800c90:	10803fcc 	andi	r2,r2,255
  800c94:	103ff81e 	bne	r2,zero,800c78 <__alt_data_end+0xff800c78>
            if (Timer1 && SendCMD(CMD58, 0) == 0)
  800c98:	d0a7428b 	ldhu	r2,-25334(gp)
  800c9c:	10bfffcc 	andi	r2,r2,65535
  800ca0:	10003e26 	beq	r2,zero,800d9c <ffs_DiskIOInitialize+0x218>
  800ca4:	000b883a 	mov	r5,zero
  800ca8:	01001e84 	movi	r4,122
  800cac:	08008000 	call	800800 <SendCMD>
  800cb0:	10803fcc 	andi	r2,r2,255
  800cb4:	1000391e 	bne	r2,zero,800d9c <ffs_DiskIOInitialize+0x218>
            {  /* Check CCS bit */
               for (n = 0; n < 4; n++)
  800cb8:	e03ffc05 	stb	zero,-16(fp)
  800cbc:	00000906 	br	800ce4 <ffs_DiskIOInitialize+0x160>
                  ocr[n] = ReceiveU8();
  800cc0:	e43ffc03 	ldbu	r16,-16(fp)
  800cc4:	080043c0 	call	80043c <ReceiveU8>
  800cc8:	1007883a 	mov	r3,r2
  800ccc:	e0bffcc4 	addi	r2,fp,-13
  800cd0:	1405883a 	add	r2,r2,r16
  800cd4:	10c00005 	stb	r3,0(r2)
         if (ocr[2] == 0x01 && ocr[3] == 0xAA)
         {  /* The card can work at vdd range of 2.7-3.6V */
            while (Timer1 && SendCMD(ACMD41, 1UL << 30)) ;  /* ACMD41 with HCS bit */
            if (Timer1 && SendCMD(CMD58, 0) == 0)
            {  /* Check CCS bit */
               for (n = 0; n < 4; n++)
  800cd8:	e0bffc03 	ldbu	r2,-16(fp)
  800cdc:	10800044 	addi	r2,r2,1
  800ce0:	e0bffc05 	stb	r2,-16(fp)
  800ce4:	e0bffc03 	ldbu	r2,-16(fp)
  800ce8:	10800130 	cmpltui	r2,r2,4
  800cec:	103ff41e 	bne	r2,zero,800cc0 <__alt_data_end+0xff800cc0>
                  ocr[n] = ReceiveU8();
               ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
  800cf0:	e0bffcc3 	ldbu	r2,-13(fp)
  800cf4:	10803fcc 	andi	r2,r2,255
  800cf8:	1080100c 	andi	r2,r2,64
  800cfc:	10000226 	beq	r2,zero,800d08 <ffs_DiskIOInitialize+0x184>
  800d00:	00800304 	movi	r2,12
  800d04:	00000106 	br	800d0c <ffs_DiskIOInitialize+0x188>
  800d08:	00800104 	movi	r2,4
  800d0c:	e0bffc45 	stb	r2,-15(fp)
  800d10:	00002206 	br	800d9c <ffs_DiskIOInitialize+0x218>
            }
         }
      }
      else
      {  /* SDC ver 1.XX or MMC */
         if (SendCMD(ACMD41, 0) <= 1)
  800d14:	000b883a 	mov	r5,zero
  800d18:	01003a44 	movi	r4,233
  800d1c:	08008000 	call	800800 <SendCMD>
  800d20:	10803fcc 	andi	r2,r2,255
  800d24:	108000a8 	cmpgeui	r2,r2,2
  800d28:	1000051e 	bne	r2,zero,800d40 <ffs_DiskIOInitialize+0x1bc>
         {
            ty  = CT_SD1;
  800d2c:	00800084 	movi	r2,2
  800d30:	e0bffc45 	stb	r2,-15(fp)
            cmd = ACMD41;  /* SDC ver 1.XX */
  800d34:	00bffa44 	movi	r2,-23
  800d38:	e0bffc85 	stb	r2,-14(fp)
  800d3c:	00000406 	br	800d50 <ffs_DiskIOInitialize+0x1cc>
         }
         else
         {
            ty  = CT_MMC;
  800d40:	00800044 	movi	r2,1
  800d44:	e0bffc45 	stb	r2,-15(fp)
            cmd = CMD1; /* MMC */
  800d48:	00801044 	movi	r2,65
  800d4c:	e0bffc85 	stb	r2,-14(fp)
         }
         while (Timer1 && SendCMD(cmd, 0)) ; /* Wait for leaving idle state */
  800d50:	0001883a 	nop
  800d54:	d0a7428b 	ldhu	r2,-25334(gp)
  800d58:	10bfffcc 	andi	r2,r2,65535
  800d5c:	10000626 	beq	r2,zero,800d78 <ffs_DiskIOInitialize+0x1f4>
  800d60:	e0bffc83 	ldbu	r2,-14(fp)
  800d64:	000b883a 	mov	r5,zero
  800d68:	1009883a 	mov	r4,r2
  800d6c:	08008000 	call	800800 <SendCMD>
  800d70:	10803fcc 	andi	r2,r2,255
  800d74:	103ff71e 	bne	r2,zero,800d54 <__alt_data_end+0xff800d54>
         if (!Timer1 || SendCMD(CMD16, 512) != 0)  /* Select R/W block length */
  800d78:	d0a7428b 	ldhu	r2,-25334(gp)
  800d7c:	10bfffcc 	andi	r2,r2,65535
  800d80:	10000526 	beq	r2,zero,800d98 <ffs_DiskIOInitialize+0x214>
  800d84:	01408004 	movi	r5,512
  800d88:	01001404 	movi	r4,80
  800d8c:	08008000 	call	800800 <SendCMD>
  800d90:	10803fcc 	andi	r2,r2,255
  800d94:	10000126 	beq	r2,zero,800d9c <ffs_DiskIOInitialize+0x218>
            ty = 0;
  800d98:	e03ffc45 	stb	zero,-15(fp)
      }
   }
   CardType = ty;
  800d9c:	e0bffc43 	ldbu	r2,-15(fp)
  800da0:	d0a74205 	stb	r2,-25336(gp)
   ReleaseBus();
  800da4:	08007b80 	call	8007b8 <ReleaseBus>

   if (ty)
  800da8:	e0bffc43 	ldbu	r2,-15(fp)
  800dac:	10000526 	beq	r2,zero,800dc4 <ffs_DiskIOInitialize+0x240>
   {  /* Initialization succeded */
      Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
  800db0:	d0e00003 	ldbu	r3,-32768(gp)
  800db4:	00bfff84 	movi	r2,-2
  800db8:	1884703a 	and	r2,r3,r2
  800dbc:	d0a00005 	stb	r2,-32768(gp)

      SetHighSpeed();
  800dc0:	08003080 	call	800308 <SetHighSpeed>
   else
   {  /* Initialization failed */
      POWER_OFF();
   }

   return(Stat);
  800dc4:	d0a00003 	ldbu	r2,-32768(gp)
} /* ffs_DiskIOInitialize */
  800dc8:	e6ffff04 	addi	sp,fp,-4
  800dcc:	dfc00217 	ldw	ra,8(sp)
  800dd0:	df000117 	ldw	fp,4(sp)
  800dd4:	dc000017 	ldw	r16,0(sp)
  800dd8:	dec00304 	addi	sp,sp,12
  800ddc:	f800283a 	ret

00800de0 <ffs_DiskIOStatus>:
/*  In    : Physical drive nmuber                                          */
/*  Out   : none                                                           */
/*  Return: DSTATUS                                                        */
/***************************************************************************/
DSTATUS ffs_DiskIOStatus (FFS_U8 drv)
{
  800de0:	defffe04 	addi	sp,sp,-8
  800de4:	df000115 	stw	fp,4(sp)
  800de8:	df000104 	addi	fp,sp,4
  800dec:	2005883a 	mov	r2,r4
  800df0:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   return(Stat);
  800df4:	d0a00003 	ldbu	r2,-32768(gp)
} /* ffs_DiskIOStatus */
  800df8:	e037883a 	mov	sp,fp
  800dfc:	df000017 	ldw	fp,0(sp)
  800e00:	dec00104 	addi	sp,sp,4
  800e04:	f800283a 	ret

00800e08 <ffs_DiskIORead>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIORead (FFS_U8 drv, FFS_U8 * buff, FFS_U32 sector, FFS_U8 count)
{
  800e08:	defffa04 	addi	sp,sp,-24
  800e0c:	dfc00515 	stw	ra,20(sp)
  800e10:	df000415 	stw	fp,16(sp)
  800e14:	df000404 	addi	fp,sp,16
  800e18:	2007883a 	mov	r3,r4
  800e1c:	e17ffd15 	stw	r5,-12(fp)
  800e20:	e1bffe15 	stw	r6,-8(fp)
  800e24:	3805883a 	mov	r2,r7
  800e28:	e0fffc05 	stb	r3,-16(fp)
  800e2c:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   if (!count)
  800e30:	e0bfff03 	ldbu	r2,-4(fp)
  800e34:	1000021e 	bne	r2,zero,800e40 <ffs_DiskIORead+0x38>
      return RES_PARERR;
  800e38:	00800104 	movi	r2,4
  800e3c:	00003506 	br	800f14 <ffs_DiskIORead+0x10c>
   if (Stat & STA_NOINIT)
  800e40:	d0a00003 	ldbu	r2,-32768(gp)
  800e44:	10803fcc 	andi	r2,r2,255
  800e48:	1080004c 	andi	r2,r2,1
  800e4c:	10000226 	beq	r2,zero,800e58 <ffs_DiskIORead+0x50>
      return RES_NOTRDY;
  800e50:	008000c4 	movi	r2,3
  800e54:	00002f06 	br	800f14 <ffs_DiskIORead+0x10c>

   if (!(CardType & CT_BLOCK))
  800e58:	d0a74203 	ldbu	r2,-25336(gp)
  800e5c:	10803fcc 	andi	r2,r2,255
  800e60:	1080020c 	andi	r2,r2,8
  800e64:	1000031e 	bne	r2,zero,800e74 <ffs_DiskIORead+0x6c>
      sector *= 512; /* Convert LBA to byte address if needed */
  800e68:	e0bffe17 	ldw	r2,-8(fp)
  800e6c:	1004927a 	slli	r2,r2,9
  800e70:	e0bffe15 	stw	r2,-8(fp)

   if (count == 1)
  800e74:	e0bfff03 	ldbu	r2,-4(fp)
  800e78:	10800058 	cmpnei	r2,r2,1
  800e7c:	10000b1e 	bne	r2,zero,800eac <ffs_DiskIORead+0xa4>
   {  /* Single block read */
      if ((SendCMD(CMD17, sector) == 0)   /* READ_SINGLE_BLOCK */
  800e80:	e17ffe17 	ldw	r5,-8(fp)
  800e84:	01001444 	movi	r4,81
  800e88:	08008000 	call	800800 <SendCMD>
  800e8c:	10803fcc 	andi	r2,r2,255
  800e90:	10001c1e 	bne	r2,zero,800f04 <ffs_DiskIORead+0xfc>
          && ReceiveDatablock(buff, 512))
  800e94:	01408004 	movi	r5,512
  800e98:	e13ffd17 	ldw	r4,-12(fp)
  800e9c:	080048c0 	call	80048c <ReceiveDatablock>
  800ea0:	10001826 	beq	r2,zero,800f04 <ffs_DiskIORead+0xfc>
         count = 0;
  800ea4:	e03fff05 	stb	zero,-4(fp)
  800ea8:	00001606 	br	800f04 <ffs_DiskIORead+0xfc>
   }
   else
   {  /* Multiple block read */
      if (SendCMD(CMD18, sector) == 0)
  800eac:	e17ffe17 	ldw	r5,-8(fp)
  800eb0:	01001484 	movi	r4,82
  800eb4:	08008000 	call	800800 <SendCMD>
  800eb8:	10803fcc 	andi	r2,r2,255
  800ebc:	1000111e 	bne	r2,zero,800f04 <ffs_DiskIORead+0xfc>
      {  /* READ_MULTIPLE_BLOCK */
         do
         {
            if (!ReceiveDatablock(buff, 512))
  800ec0:	01408004 	movi	r5,512
  800ec4:	e13ffd17 	ldw	r4,-12(fp)
  800ec8:	080048c0 	call	80048c <ReceiveDatablock>
  800ecc:	10000926 	beq	r2,zero,800ef4 <ffs_DiskIORead+0xec>
               break;
            buff += 512;
  800ed0:	e0bffd17 	ldw	r2,-12(fp)
  800ed4:	10808004 	addi	r2,r2,512
  800ed8:	e0bffd15 	stw	r2,-12(fp)
         }
         while (--count);
  800edc:	e0bfff03 	ldbu	r2,-4(fp)
  800ee0:	10bfffc4 	addi	r2,r2,-1
  800ee4:	e0bfff05 	stb	r2,-4(fp)
  800ee8:	e0bfff03 	ldbu	r2,-4(fp)
  800eec:	103ff41e 	bne	r2,zero,800ec0 <__alt_data_end+0xff800ec0>
  800ef0:	00000106 	br	800ef8 <ffs_DiskIORead+0xf0>
      if (SendCMD(CMD18, sector) == 0)
      {  /* READ_MULTIPLE_BLOCK */
         do
         {
            if (!ReceiveDatablock(buff, 512))
               break;
  800ef4:	0001883a 	nop
            buff += 512;
         }
         while (--count);
         SendCMD(CMD12, 0);   /* STOP_TRANSMISSION */
  800ef8:	000b883a 	mov	r5,zero
  800efc:	01001304 	movi	r4,76
  800f00:	08008000 	call	800800 <SendCMD>
      }
   }
   ReleaseBus();
  800f04:	08007b80 	call	8007b8 <ReleaseBus>

   return(count ? RES_ERROR : RES_OK);
  800f08:	e0bfff03 	ldbu	r2,-4(fp)
  800f0c:	1004c03a 	cmpne	r2,r2,zero
  800f10:	10803fcc 	andi	r2,r2,255
} /* ffs_DiskIORead */
  800f14:	e037883a 	mov	sp,fp
  800f18:	dfc00117 	ldw	ra,4(sp)
  800f1c:	df000017 	ldw	fp,0(sp)
  800f20:	dec00204 	addi	sp,sp,8
  800f24:	f800283a 	ret

00800f28 <ffs_DiskIOWrite>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIOWrite (FFS_U8 drv, const FFS_U8 * buff, FFS_U32 sector, FFS_U8 count)
{
  800f28:	defffa04 	addi	sp,sp,-24
  800f2c:	dfc00515 	stw	ra,20(sp)
  800f30:	df000415 	stw	fp,16(sp)
  800f34:	df000404 	addi	fp,sp,16
  800f38:	2007883a 	mov	r3,r4
  800f3c:	e17ffd15 	stw	r5,-12(fp)
  800f40:	e1bffe15 	stw	r6,-8(fp)
  800f44:	3805883a 	mov	r2,r7
  800f48:	e0fffc05 	stb	r3,-16(fp)
  800f4c:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   if (!count)
  800f50:	e0bfff03 	ldbu	r2,-4(fp)
  800f54:	1000021e 	bne	r2,zero,800f60 <ffs_DiskIOWrite+0x38>
      return RES_PARERR;
  800f58:	00800104 	movi	r2,4
  800f5c:	00004906 	br	801084 <ffs_DiskIOWrite+0x15c>
   if (Stat & STA_NOINIT)
  800f60:	d0a00003 	ldbu	r2,-32768(gp)
  800f64:	10803fcc 	andi	r2,r2,255
  800f68:	1080004c 	andi	r2,r2,1
  800f6c:	10000226 	beq	r2,zero,800f78 <ffs_DiskIOWrite+0x50>
      return RES_NOTRDY;
  800f70:	008000c4 	movi	r2,3
  800f74:	00004306 	br	801084 <ffs_DiskIOWrite+0x15c>
   if (Stat & STA_PROTECT)
  800f78:	d0a00003 	ldbu	r2,-32768(gp)
  800f7c:	10803fcc 	andi	r2,r2,255
  800f80:	1080010c 	andi	r2,r2,4
  800f84:	10000226 	beq	r2,zero,800f90 <ffs_DiskIOWrite+0x68>
      return RES_WRPRT;
  800f88:	00800084 	movi	r2,2
  800f8c:	00003d06 	br	801084 <ffs_DiskIOWrite+0x15c>

   if (!(CardType & CT_BLOCK))
  800f90:	d0a74203 	ldbu	r2,-25336(gp)
  800f94:	10803fcc 	andi	r2,r2,255
  800f98:	1080020c 	andi	r2,r2,8
  800f9c:	1000031e 	bne	r2,zero,800fac <ffs_DiskIOWrite+0x84>
      sector *= 512; /* Convert LBA to byte address if needed */
  800fa0:	e0bffe17 	ldw	r2,-8(fp)
  800fa4:	1004927a 	slli	r2,r2,9
  800fa8:	e0bffe15 	stw	r2,-8(fp)

   if (count == 1)
  800fac:	e0bfff03 	ldbu	r2,-4(fp)
  800fb0:	10800058 	cmpnei	r2,r2,1
  800fb4:	10000b1e 	bne	r2,zero,800fe4 <ffs_DiskIOWrite+0xbc>
   {  /* Single block write */
      if ((SendCMD(CMD24, sector) == 0)   /* WRITE_BLOCK */
  800fb8:	e17ffe17 	ldw	r5,-8(fp)
  800fbc:	01001604 	movi	r4,88
  800fc0:	08008000 	call	800800 <SendCMD>
  800fc4:	10803fcc 	andi	r2,r2,255
  800fc8:	10002a1e 	bne	r2,zero,801074 <ffs_DiskIOWrite+0x14c>
          && TransmitDatablock(buff, 0xFE))
  800fcc:	01403f84 	movi	r5,254
  800fd0:	e13ffd17 	ldw	r4,-12(fp)
  800fd4:	08005b80 	call	8005b8 <TransmitDatablock>
  800fd8:	10002626 	beq	r2,zero,801074 <ffs_DiskIOWrite+0x14c>
         count = 0;
  800fdc:	e03fff05 	stb	zero,-4(fp)
  800fe0:	00002406 	br	801074 <ffs_DiskIOWrite+0x14c>
   }
   else
   {  /* Multiple block write */
      if (CardType & CT_SDC)
  800fe4:	d0a74203 	ldbu	r2,-25336(gp)
  800fe8:	10803fcc 	andi	r2,r2,255
  800fec:	1080018c 	andi	r2,r2,6
  800ff0:	10000726 	beq	r2,zero,801010 <ffs_DiskIOWrite+0xe8>
      {
         SendCMD(CMD55, 0);
  800ff4:	000b883a 	mov	r5,zero
  800ff8:	01001dc4 	movi	r4,119
  800ffc:	08008000 	call	800800 <SendCMD>
         SendCMD(CMD23, count);  /* ACMD23 */
  801000:	e0bfff03 	ldbu	r2,-4(fp)
  801004:	100b883a 	mov	r5,r2
  801008:	010015c4 	movi	r4,87
  80100c:	08008000 	call	800800 <SendCMD>
      }
      if (SendCMD(CMD25, sector) == 0)
  801010:	e17ffe17 	ldw	r5,-8(fp)
  801014:	01001644 	movi	r4,89
  801018:	08008000 	call	800800 <SendCMD>
  80101c:	10803fcc 	andi	r2,r2,255
  801020:	1000141e 	bne	r2,zero,801074 <ffs_DiskIOWrite+0x14c>
      {  /* WRITE_MULTIPLE_BLOCK */
         do
         {
            if (!TransmitDatablock(buff, 0xFC))
  801024:	01403f04 	movi	r5,252
  801028:	e13ffd17 	ldw	r4,-12(fp)
  80102c:	08005b80 	call	8005b8 <TransmitDatablock>
  801030:	10000926 	beq	r2,zero,801058 <ffs_DiskIOWrite+0x130>
               break;
            buff += 512;
  801034:	e0bffd17 	ldw	r2,-12(fp)
  801038:	10808004 	addi	r2,r2,512
  80103c:	e0bffd15 	stw	r2,-12(fp)
         }
         while (--count);
  801040:	e0bfff03 	ldbu	r2,-4(fp)
  801044:	10bfffc4 	addi	r2,r2,-1
  801048:	e0bfff05 	stb	r2,-4(fp)
  80104c:	e0bfff03 	ldbu	r2,-4(fp)
  801050:	103ff41e 	bne	r2,zero,801024 <__alt_data_end+0xff801024>
  801054:	00000106 	br	80105c <ffs_DiskIOWrite+0x134>
      if (SendCMD(CMD25, sector) == 0)
      {  /* WRITE_MULTIPLE_BLOCK */
         do
         {
            if (!TransmitDatablock(buff, 0xFC))
               break;
  801058:	0001883a 	nop
            buff += 512;
         }
         while (--count);
         if (!TransmitDatablock(0, 0xFD)) /* STOP_TRAN token */
  80105c:	01403f44 	movi	r5,253
  801060:	0009883a 	mov	r4,zero
  801064:	08005b80 	call	8005b8 <TransmitDatablock>
  801068:	1000021e 	bne	r2,zero,801074 <ffs_DiskIOWrite+0x14c>
            count = 1;
  80106c:	00800044 	movi	r2,1
  801070:	e0bfff05 	stb	r2,-4(fp)
      }
   }
   ReleaseBus();
  801074:	08007b80 	call	8007b8 <ReleaseBus>

   return(count ? RES_ERROR : RES_OK);
  801078:	e0bfff03 	ldbu	r2,-4(fp)
  80107c:	1004c03a 	cmpne	r2,r2,zero
  801080:	10803fcc 	andi	r2,r2,255
} /* ffs_DiskIOWrite */
  801084:	e037883a 	mov	sp,fp
  801088:	dfc00117 	ldw	ra,4(sp)
  80108c:	df000017 	ldw	fp,0(sp)
  801090:	dec00204 	addi	sp,sp,8
  801094:	f800283a 	ret

00801098 <ffs_DiskIOIoctl>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIOIoctl (FFS_U8 drv, FFS_U8 ctrl, void *buff)
{
  801098:	defff204 	addi	sp,sp,-56
  80109c:	dfc00d15 	stw	ra,52(sp)
  8010a0:	df000c15 	stw	fp,48(sp)
  8010a4:	dc000b15 	stw	r16,44(sp)
  8010a8:	df000c04 	addi	fp,sp,48
  8010ac:	2007883a 	mov	r3,r4
  8010b0:	2805883a 	mov	r2,r5
  8010b4:	e1bffe15 	stw	r6,-8(fp)
  8010b8:	e0fffc05 	stb	r3,-16(fp)
  8010bc:	e0bffd05 	stb	r2,-12(fp)
   DRESULT res;
   FFS_U8 n, csd[16], *ptr = buff;
  8010c0:	e0bffe17 	ldw	r2,-8(fp)
  8010c4:	e0bff615 	stw	r2,-40(fp)
   FFS_U16 csize;

   (void)drv;

   if (Stat & STA_NOINIT)
  8010c8:	d0a00003 	ldbu	r2,-32768(gp)
  8010cc:	10803fcc 	andi	r2,r2,255
  8010d0:	1080004c 	andi	r2,r2,1
  8010d4:	10000226 	beq	r2,zero,8010e0 <ffs_DiskIOIoctl+0x48>
      return RES_NOTRDY;
  8010d8:	008000c4 	movi	r2,3
  8010dc:	00011906 	br	801544 <ffs_DiskIOIoctl+0x4ac>

   res = RES_ERROR;
  8010e0:	00800044 	movi	r2,1
  8010e4:	e0bff415 	stw	r2,-48(fp)
   switch (ctrl)
  8010e8:	e0bffd03 	ldbu	r2,-12(fp)
  8010ec:	10c003e8 	cmpgeui	r3,r2,15
  8010f0:	1801021e 	bne	r3,zero,8014fc <ffs_DiskIOIoctl+0x464>
  8010f4:	100690ba 	slli	r3,r2,2
  8010f8:	00802034 	movhi	r2,128
  8010fc:	10844304 	addi	r2,r2,4364
  801100:	1885883a 	add	r2,r3,r2
  801104:	10800017 	ldw	r2,0(r2)
  801108:	1000683a 	jmp	r2
  80110c:	00801148 	cmpgei	r2,zero,69
  801110:	00801180 	call	80118 <__alt_mem_sdram_0-0x77fee8>
  801114:	00801290 	cmplti	r2,zero,74
  801118:	008012a4 	muli	r2,zero,74
  80111c:	008014fc 	xorhi	r2,zero,83
  801120:	008014fc 	xorhi	r2,zero,83
  801124:	008014fc 	xorhi	r2,zero,83
  801128:	008014fc 	xorhi	r2,zero,83
  80112c:	008014fc 	xorhi	r2,zero,83
  801130:	008014fc 	xorhi	r2,zero,83
  801134:	00801410 	cmplti	r2,zero,80
  801138:	00801424 	muli	r2,zero,80
  80113c:	00801450 	cmplti	r2,zero,81
  801140:	0080147c 	xorhi	r2,zero,81
  801144:	008014cc 	andi	r2,zero,83
   {
      case CTRL_SYNC:  /* Make sure that pending write process has been finished */
         SELECT();
  801148:	d0e74417 	ldw	r3,-25328(gp)
  80114c:	00bfff84 	movi	r2,-2
  801150:	1884703a 	and	r2,r3,r2
  801154:	d0a74415 	stw	r2,-25328(gp)
  801158:	00a04034 	movhi	r2,33024
  80115c:	10840a04 	addi	r2,r2,4136
  801160:	d0e74417 	ldw	r3,-25328(gp)
  801164:	10c00015 	stw	r3,0(r2)
         if (WaitReady() == 0xFF)
  801168:	08007640 	call	800764 <WaitReady>
  80116c:	10803fcc 	andi	r2,r2,255
  801170:	10803fd8 	cmpnei	r2,r2,255
  801174:	1000e41e 	bne	r2,zero,801508 <ffs_DiskIOIoctl+0x470>
            res = RES_OK;
  801178:	e03ff415 	stw	zero,-48(fp)
         break;
  80117c:	0000e206 	br	801508 <ffs_DiskIOIoctl+0x470>

      case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
         if ((SendCMD(CMD9, 0) == 0) && ReceiveDatablock(csd, 16))
  801180:	000b883a 	mov	r5,zero
  801184:	01001244 	movi	r4,73
  801188:	08008000 	call	800800 <SendCMD>
  80118c:	10803fcc 	andi	r2,r2,255
  801190:	1000df1e 	bne	r2,zero,801510 <ffs_DiskIOIoctl+0x478>
  801194:	e0bff784 	addi	r2,fp,-34
  801198:	01400404 	movi	r5,16
  80119c:	1009883a 	mov	r4,r2
  8011a0:	080048c0 	call	80048c <ReceiveDatablock>
  8011a4:	1000da26 	beq	r2,zero,801510 <ffs_DiskIOIoctl+0x478>
         {
            if ((csd[0] >> 6) == 1)
  8011a8:	e0bff783 	ldbu	r2,-34(fp)
  8011ac:	10803fcc 	andi	r2,r2,255
  8011b0:	1004d1ba 	srli	r2,r2,6
  8011b4:	10803fcc 	andi	r2,r2,255
  8011b8:	10800058 	cmpnei	r2,r2,1
  8011bc:	10000d1e 	bne	r2,zero,8011f4 <ffs_DiskIOIoctl+0x15c>
            {  /* SDC ver 2.00 */
               //@@MF csize = csd[9] + ((FFS_U16)csd[8] << 8) + 1;
               csize = (FFS_U16) ((FFS_U16) csd[9] | ((FFS_U16) csd[8] << 8)) + 1;
  8011c0:	e0bff9c3 	ldbu	r2,-25(fp)
  8011c4:	10803fcc 	andi	r2,r2,255
  8011c8:	e0fff983 	ldbu	r3,-26(fp)
  8011cc:	18c03fcc 	andi	r3,r3,255
  8011d0:	1806923a 	slli	r3,r3,8
  8011d4:	10c4b03a 	or	r2,r2,r3
  8011d8:	10800044 	addi	r2,r2,1
  8011dc:	e0bff70d 	sth	r2,-36(fp)
               *(FFS_U32 *) buff = (FFS_U32) csize << 10;
  8011e0:	e0bff70b 	ldhu	r2,-36(fp)
  8011e4:	100692ba 	slli	r3,r2,10
  8011e8:	e0bffe17 	ldw	r2,-8(fp)
  8011ec:	10c00015 	stw	r3,0(r2)
  8011f0:	00002506 	br	801288 <ffs_DiskIOIoctl+0x1f0>
            }
            else
            {  /* MMC or SDC ver 1.XX */
               n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
  8011f4:	e0bff8c3 	ldbu	r2,-29(fp)
  8011f8:	108003cc 	andi	r2,r2,15
  8011fc:	1007883a 	mov	r3,r2
  801200:	e0bffa03 	ldbu	r2,-24(fp)
  801204:	10803fcc 	andi	r2,r2,255
  801208:	1004d1fa 	srli	r2,r2,7
  80120c:	1885883a 	add	r2,r3,r2
  801210:	1007883a 	mov	r3,r2
  801214:	e0bff9c3 	ldbu	r2,-25(fp)
  801218:	108000cc 	andi	r2,r2,3
  80121c:	1085883a 	add	r2,r2,r2
  801220:	1885883a 	add	r2,r3,r2
  801224:	10800084 	addi	r2,r2,2
  801228:	e0bff505 	stb	r2,-44(fp)
               csize = (csd[8] >> 6) + ((FFS_U16) csd[7] << 2) + ((FFS_U16) (csd[6] & 3) << 10) + 1;
  80122c:	e0bff983 	ldbu	r2,-26(fp)
  801230:	10803fcc 	andi	r2,r2,255
  801234:	1004d1ba 	srli	r2,r2,6
  801238:	10c03fcc 	andi	r3,r2,255
  80123c:	e0bff943 	ldbu	r2,-27(fp)
  801240:	10803fcc 	andi	r2,r2,255
  801244:	1085883a 	add	r2,r2,r2
  801248:	1085883a 	add	r2,r2,r2
  80124c:	1885883a 	add	r2,r3,r2
  801250:	1007883a 	mov	r3,r2
  801254:	e0bff903 	ldbu	r2,-28(fp)
  801258:	10803fcc 	andi	r2,r2,255
  80125c:	108000cc 	andi	r2,r2,3
  801260:	100492ba 	slli	r2,r2,10
  801264:	1885883a 	add	r2,r3,r2
  801268:	10800044 	addi	r2,r2,1
  80126c:	e0bff70d 	sth	r2,-36(fp)
               *(FFS_U32 *) buff = (FFS_U32) csize << (n - 9);
  801270:	e0fff70b 	ldhu	r3,-36(fp)
  801274:	e0bff503 	ldbu	r2,-44(fp)
  801278:	10bffdc4 	addi	r2,r2,-9
  80127c:	1886983a 	sll	r3,r3,r2
  801280:	e0bffe17 	ldw	r2,-8(fp)
  801284:	10c00015 	stw	r3,0(r2)
            }
            res = RES_OK;
  801288:	e03ff415 	stw	zero,-48(fp)
         }
         break;
  80128c:	0000a006 	br	801510 <ffs_DiskIOIoctl+0x478>

      case GET_SECTOR_SIZE:  /* Get sectors on the disk (WORD) */
         *(FFS_U16 *) buff = 512;
  801290:	e0bffe17 	ldw	r2,-8(fp)
  801294:	00c08004 	movi	r3,512
  801298:	10c0000d 	sth	r3,0(r2)
         res = RES_OK;
  80129c:	e03ff415 	stw	zero,-48(fp)
         break;
  8012a0:	0000a606 	br	80153c <ffs_DiskIOIoctl+0x4a4>

      case GET_BLOCK_SIZE:   /* Get erase block size in unit of sectors (DWORD) */
         if (CardType & CT_SD2)
  8012a4:	d0a74203 	ldbu	r2,-25336(gp)
  8012a8:	10803fcc 	andi	r2,r2,255
  8012ac:	1080010c 	andi	r2,r2,4
  8012b0:	10001e26 	beq	r2,zero,80132c <ffs_DiskIOIoctl+0x294>
         {  /* SDC ver 2.00 */
            if (SendCMD(ACMD13, 0) == 0)
  8012b4:	000b883a 	mov	r5,zero
  8012b8:	01003344 	movi	r4,205
  8012bc:	08008000 	call	800800 <SendCMD>
  8012c0:	10803fcc 	andi	r2,r2,255
  8012c4:	1000941e 	bne	r2,zero,801518 <ffs_DiskIOIoctl+0x480>
            {  /* Read SD status */
               ReceiveU8();
  8012c8:	080043c0 	call	80043c <ReceiveU8>
               if (ReceiveDatablock(csd, 16))
  8012cc:	e0bff784 	addi	r2,fp,-34
  8012d0:	01400404 	movi	r5,16
  8012d4:	1009883a 	mov	r4,r2
  8012d8:	080048c0 	call	80048c <ReceiveDatablock>
  8012dc:	10008e26 	beq	r2,zero,801518 <ffs_DiskIOIoctl+0x480>
               {  /* Read partial block */
                  for (n = 64 - 16; n; n--)
  8012e0:	00800c04 	movi	r2,48
  8012e4:	e0bff505 	stb	r2,-44(fp)
  8012e8:	00000406 	br	8012fc <ffs_DiskIOIoctl+0x264>
                     ReceiveU8();   /* Purge trailing data */
  8012ec:	080043c0 	call	80043c <ReceiveU8>
            if (SendCMD(ACMD13, 0) == 0)
            {  /* Read SD status */
               ReceiveU8();
               if (ReceiveDatablock(csd, 16))
               {  /* Read partial block */
                  for (n = 64 - 16; n; n--)
  8012f0:	e0bff503 	ldbu	r2,-44(fp)
  8012f4:	10bfffc4 	addi	r2,r2,-1
  8012f8:	e0bff505 	stb	r2,-44(fp)
  8012fc:	e0bff503 	ldbu	r2,-44(fp)
  801300:	103ffa1e 	bne	r2,zero,8012ec <__alt_data_end+0xff8012ec>
                     ReceiveU8();   /* Purge trailing data */
                  *(FFS_U32 *) buff = 16UL << (csd[10] >> 4);
  801304:	e0bffa03 	ldbu	r2,-24(fp)
  801308:	10803fcc 	andi	r2,r2,255
  80130c:	1004d13a 	srli	r2,r2,4
  801310:	10803fcc 	andi	r2,r2,255
  801314:	00c00404 	movi	r3,16
  801318:	1886983a 	sll	r3,r3,r2
  80131c:	e0bffe17 	ldw	r2,-8(fp)
  801320:	10c00015 	stw	r3,0(r2)
                  res = RES_OK;
  801324:	e03ff415 	stw	zero,-48(fp)
                  *(FFS_U32 *) buff = ((FFS_U16) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
               }
               res = RES_OK;
            }
         }
         break;
  801328:	00007b06 	br	801518 <ffs_DiskIOIoctl+0x480>
               }
            }
         }
         else
         {  /* SDC ver 1.XX or MMC */
            if ((SendCMD(CMD9, 0) == 0) && ReceiveDatablock(csd, 16))
  80132c:	000b883a 	mov	r5,zero
  801330:	01001244 	movi	r4,73
  801334:	08008000 	call	800800 <SendCMD>
  801338:	10803fcc 	andi	r2,r2,255
  80133c:	1000761e 	bne	r2,zero,801518 <ffs_DiskIOIoctl+0x480>
  801340:	e0bff784 	addi	r2,fp,-34
  801344:	01400404 	movi	r5,16
  801348:	1009883a 	mov	r4,r2
  80134c:	080048c0 	call	80048c <ReceiveDatablock>
  801350:	10007126 	beq	r2,zero,801518 <ffs_DiskIOIoctl+0x480>
            {  /* Read CSD */
               if (CardType & CT_SD1)
  801354:	d0a74203 	ldbu	r2,-25336(gp)
  801358:	10803fcc 	andi	r2,r2,255
  80135c:	1080008c 	andi	r2,r2,2
  801360:	10001526 	beq	r2,zero,8013b8 <ffs_DiskIOIoctl+0x320>
               {  /* SDC ver 1.XX */
                  *(FFS_U32 *) buff = (((csd[10] & 63) << 1) + ((FFS_U16) (csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
  801364:	e0bffa03 	ldbu	r2,-24(fp)
  801368:	10803fcc 	andi	r2,r2,255
  80136c:	10800fcc 	andi	r2,r2,63
  801370:	1085883a 	add	r2,r2,r2
  801374:	1007883a 	mov	r3,r2
  801378:	e0bffa43 	ldbu	r2,-23(fp)
  80137c:	10803fcc 	andi	r2,r2,255
  801380:	1004d1fa 	srli	r2,r2,7
  801384:	10803fcc 	andi	r2,r2,255
  801388:	1885883a 	add	r2,r3,r2
  80138c:	10c00044 	addi	r3,r2,1
  801390:	e0bffac3 	ldbu	r2,-21(fp)
  801394:	10803fcc 	andi	r2,r2,255
  801398:	1004d1ba 	srli	r2,r2,6
  80139c:	10803fcc 	andi	r2,r2,255
  8013a0:	10bfffc4 	addi	r2,r2,-1
  8013a4:	1884983a 	sll	r2,r3,r2
  8013a8:	1007883a 	mov	r3,r2
  8013ac:	e0bffe17 	ldw	r2,-8(fp)
  8013b0:	10c00015 	stw	r3,0(r2)
  8013b4:	00001406 	br	801408 <ffs_DiskIOIoctl+0x370>
               }
               else
               {  /* MMC */
                  *(FFS_U32 *) buff = ((FFS_U16) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
  8013b8:	e0bffa03 	ldbu	r2,-24(fp)
  8013bc:	10803fcc 	andi	r2,r2,255
  8013c0:	10801f0c 	andi	r2,r2,124
  8013c4:	1005d0ba 	srai	r2,r2,2
  8013c8:	10bfffcc 	andi	r2,r2,65535
  8013cc:	10c00044 	addi	r3,r2,1
  8013d0:	e0bffa43 	ldbu	r2,-23(fp)
  8013d4:	10803fcc 	andi	r2,r2,255
  8013d8:	108000cc 	andi	r2,r2,3
  8013dc:	100890fa 	slli	r4,r2,3
  8013e0:	e0bffa43 	ldbu	r2,-23(fp)
  8013e4:	10803fcc 	andi	r2,r2,255
  8013e8:	1004d17a 	srli	r2,r2,5
  8013ec:	10803fcc 	andi	r2,r2,255
  8013f0:	2085883a 	add	r2,r4,r2
  8013f4:	10800044 	addi	r2,r2,1
  8013f8:	1885383a 	mul	r2,r3,r2
  8013fc:	1007883a 	mov	r3,r2
  801400:	e0bffe17 	ldw	r2,-8(fp)
  801404:	10c00015 	stw	r3,0(r2)
               }
               res = RES_OK;
  801408:	e03ff415 	stw	zero,-48(fp)
            }
         }
         break;
  80140c:	00004206 	br	801518 <ffs_DiskIOIoctl+0x480>
         
      /* Following command are not used by FatFs module */
         
      case MMC_GET_TYPE:  /* Get MMC/SDC type (BYTE) */
         *ptr = CardType;
  801410:	d0e74203 	ldbu	r3,-25336(gp)
  801414:	e0bff617 	ldw	r2,-40(fp)
  801418:	10c00005 	stb	r3,0(r2)
         res = RES_OK;
  80141c:	e03ff415 	stw	zero,-48(fp)
         break;
  801420:	00004606 	br	80153c <ffs_DiskIOIoctl+0x4a4>

      case MMC_GET_CSD:   /* Receive CSD as a data block (16 bytes) */
         if (SendCMD(CMD9, 0) == 0  /* READ_CSD */
  801424:	000b883a 	mov	r5,zero
  801428:	01001244 	movi	r4,73
  80142c:	08008000 	call	800800 <SendCMD>
  801430:	10803fcc 	andi	r2,r2,255
  801434:	10003a1e 	bne	r2,zero,801520 <ffs_DiskIOIoctl+0x488>
             && ReceiveDatablock(ptr, 16))
  801438:	01400404 	movi	r5,16
  80143c:	e13ff617 	ldw	r4,-40(fp)
  801440:	080048c0 	call	80048c <ReceiveDatablock>
  801444:	10003626 	beq	r2,zero,801520 <ffs_DiskIOIoctl+0x488>
            res = RES_OK;
  801448:	e03ff415 	stw	zero,-48(fp)
         break;
  80144c:	00003406 	br	801520 <ffs_DiskIOIoctl+0x488>

      case MMC_GET_CID:   /* Receive CID as a data block (16 bytes) */
         if (SendCMD(CMD10, 0) == 0 /* READ_CID */
  801450:	000b883a 	mov	r5,zero
  801454:	01001284 	movi	r4,74
  801458:	08008000 	call	800800 <SendCMD>
  80145c:	10803fcc 	andi	r2,r2,255
  801460:	1000311e 	bne	r2,zero,801528 <ffs_DiskIOIoctl+0x490>
             && ReceiveDatablock(ptr, 16))
  801464:	01400404 	movi	r5,16
  801468:	e13ff617 	ldw	r4,-40(fp)
  80146c:	080048c0 	call	80048c <ReceiveDatablock>
  801470:	10002d26 	beq	r2,zero,801528 <ffs_DiskIOIoctl+0x490>
            res = RES_OK;
  801474:	e03ff415 	stw	zero,-48(fp)
         break;
  801478:	00002b06 	br	801528 <ffs_DiskIOIoctl+0x490>

      case MMC_GET_OCR:   /* Receive OCR as an R3 resp (4 bytes) */
         if (SendCMD(CMD58, 0) == 0)
  80147c:	000b883a 	mov	r5,zero
  801480:	01001e84 	movi	r4,122
  801484:	08008000 	call	800800 <SendCMD>
  801488:	10803fcc 	andi	r2,r2,255
  80148c:	1000281e 	bne	r2,zero,801530 <ffs_DiskIOIoctl+0x498>
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
  801490:	e03ff505 	stb	zero,-44(fp)
  801494:	00000806 	br	8014b8 <ffs_DiskIOIoctl+0x420>
               *ptr++ = ReceiveU8();
  801498:	e43ff617 	ldw	r16,-40(fp)
  80149c:	80800044 	addi	r2,r16,1
  8014a0:	e0bff615 	stw	r2,-40(fp)
  8014a4:	080043c0 	call	80043c <ReceiveU8>
  8014a8:	80800005 	stb	r2,0(r16)
         break;

      case MMC_GET_OCR:   /* Receive OCR as an R3 resp (4 bytes) */
         if (SendCMD(CMD58, 0) == 0)
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
  8014ac:	e0bff503 	ldbu	r2,-44(fp)
  8014b0:	10800044 	addi	r2,r2,1
  8014b4:	e0bff505 	stb	r2,-44(fp)
  8014b8:	e0bff503 	ldbu	r2,-44(fp)
  8014bc:	10800130 	cmpltui	r2,r2,4
  8014c0:	103ff51e 	bne	r2,zero,801498 <__alt_data_end+0xff801498>
               *ptr++ = ReceiveU8();
            res = RES_OK;
  8014c4:	e03ff415 	stw	zero,-48(fp)
         }
         break;
  8014c8:	00001906 	br	801530 <ffs_DiskIOIoctl+0x498>

      case MMC_GET_SDSTAT:   /* Receive SD statsu as a data block (64 bytes) */
         if (SendCMD(ACMD13, 0) == 0)
  8014cc:	000b883a 	mov	r5,zero
  8014d0:	01003344 	movi	r4,205
  8014d4:	08008000 	call	800800 <SendCMD>
  8014d8:	10803fcc 	andi	r2,r2,255
  8014dc:	1000161e 	bne	r2,zero,801538 <ffs_DiskIOIoctl+0x4a0>
         {  /* SD_STATUS */
            ReceiveU8();
  8014e0:	080043c0 	call	80043c <ReceiveU8>
            if (ReceiveDatablock(ptr, 64))
  8014e4:	01401004 	movi	r5,64
  8014e8:	e13ff617 	ldw	r4,-40(fp)
  8014ec:	080048c0 	call	80048c <ReceiveDatablock>
  8014f0:	10001126 	beq	r2,zero,801538 <ffs_DiskIOIoctl+0x4a0>
               res = RES_OK;
  8014f4:	e03ff415 	stw	zero,-48(fp)
         }
         break;
  8014f8:	00000f06 	br	801538 <ffs_DiskIOIoctl+0x4a0>

      default:
         res = RES_PARERR;
  8014fc:	00800104 	movi	r2,4
  801500:	e0bff415 	stw	r2,-48(fp)
  801504:	00000d06 	br	80153c <ffs_DiskIOIoctl+0x4a4>
   {
      case CTRL_SYNC:  /* Make sure that pending write process has been finished */
         SELECT();
         if (WaitReady() == 0xFF)
            res = RES_OK;
         break;
  801508:	0001883a 	nop
  80150c:	00000b06 	br	80153c <ffs_DiskIOIoctl+0x4a4>
               csize = (csd[8] >> 6) + ((FFS_U16) csd[7] << 2) + ((FFS_U16) (csd[6] & 3) << 10) + 1;
               *(FFS_U32 *) buff = (FFS_U32) csize << (n - 9);
            }
            res = RES_OK;
         }
         break;
  801510:	0001883a 	nop
  801514:	00000906 	br	80153c <ffs_DiskIOIoctl+0x4a4>
                  *(FFS_U32 *) buff = ((FFS_U16) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
               }
               res = RES_OK;
            }
         }
         break;
  801518:	0001883a 	nop
  80151c:	00000706 	br	80153c <ffs_DiskIOIoctl+0x4a4>

      case MMC_GET_CSD:   /* Receive CSD as a data block (16 bytes) */
         if (SendCMD(CMD9, 0) == 0  /* READ_CSD */
             && ReceiveDatablock(ptr, 16))
            res = RES_OK;
         break;
  801520:	0001883a 	nop
  801524:	00000506 	br	80153c <ffs_DiskIOIoctl+0x4a4>

      case MMC_GET_CID:   /* Receive CID as a data block (16 bytes) */
         if (SendCMD(CMD10, 0) == 0 /* READ_CID */
             && ReceiveDatablock(ptr, 16))
            res = RES_OK;
         break;
  801528:	0001883a 	nop
  80152c:	00000306 	br	80153c <ffs_DiskIOIoctl+0x4a4>
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
               *ptr++ = ReceiveU8();
            res = RES_OK;
         }
         break;
  801530:	0001883a 	nop
  801534:	00000106 	br	80153c <ffs_DiskIOIoctl+0x4a4>
         {  /* SD_STATUS */
            ReceiveU8();
            if (ReceiveDatablock(ptr, 64))
               res = RES_OK;
         }
         break;
  801538:	0001883a 	nop

      default:
         res = RES_PARERR;
   }

   ReleaseBus();
  80153c:	08007b80 	call	8007b8 <ReleaseBus>

   return(res);
  801540:	e0bff417 	ldw	r2,-48(fp)
} /* ffs_DiskIOIoctl */
  801544:	e6ffff04 	addi	sp,fp,-4
  801548:	dfc00217 	ldw	ra,8(sp)
  80154c:	df000117 	ldw	fp,4(sp)
  801550:	dc000017 	ldw	r16,0(sp)
  801554:	dec00304 	addi	sp,sp,12
  801558:	f800283a 	ret

0080155c <get_fattime>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: time                                                           */
/***************************************************************************/
FFS_U32 get_fattime (void)
{
  80155c:	defffe04 	addi	sp,sp,-8
  801560:	df000115 	stw	fp,4(sp)
  801564:	df000104 	addi	fp,sp,4
   FFS_U32 dTime;

   dTime = ((FFS_U32)(2008 - 1980) << 25) |
  801568:	008e57f4 	movhi	r2,14687
  80156c:	10a87844 	addi	r2,r2,-24095
  801570:	e0bfff15 	stw	r2,-4(fp)
                     ((FFS_U32) 30 << 16) | 
                     ((FFS_U32) 20 << 11) | 
                     ((FFS_U32) 15 << 5)  | 
                     ((FFS_U32) 2 >> 1);

   return(dTime);
  801574:	e0bfff17 	ldw	r2,-4(fp)
} /* get_fattime */
  801578:	e037883a 	mov	sp,fp
  80157c:	df000017 	ldw	fp,0(sp)
  801580:	dec00104 	addi	sp,sp,4
  801584:	f800283a 	ret

00801588 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, uint32_t cnt) {
  801588:	defffa04 	addi	sp,sp,-24
  80158c:	df000515 	stw	fp,20(sp)
  801590:	df000504 	addi	fp,sp,20
  801594:	e13ffd15 	stw	r4,-12(fp)
  801598:	e17ffe15 	stw	r5,-8(fp)
  80159c:	e1bfff15 	stw	r6,-4(fp)
   uint8_t *d = (uint8_t*)dst;
  8015a0:	e0bffd17 	ldw	r2,-12(fp)
  8015a4:	e0bffb15 	stw	r2,-20(fp)
   const uint8_t *s = (const uint8_t*)src;
  8015a8:	e0bffe17 	ldw	r2,-8(fp)
  8015ac:	e0bffc15 	stw	r2,-16(fp)
      *(int*)d = *(int*)s;
      d += sizeof(int); s += sizeof(int);
      cnt -= sizeof(int);
   }
#endif
   while (cnt--)
  8015b0:	00000806 	br	8015d4 <mem_cpy+0x4c>
      *d++ = *s++;
  8015b4:	e0bffb17 	ldw	r2,-20(fp)
  8015b8:	10c00044 	addi	r3,r2,1
  8015bc:	e0fffb15 	stw	r3,-20(fp)
  8015c0:	e0fffc17 	ldw	r3,-16(fp)
  8015c4:	19000044 	addi	r4,r3,1
  8015c8:	e13ffc15 	stw	r4,-16(fp)
  8015cc:	18c00003 	ldbu	r3,0(r3)
  8015d0:	10c00005 	stb	r3,0(r2)
      *(int*)d = *(int*)s;
      d += sizeof(int); s += sizeof(int);
      cnt -= sizeof(int);
   }
#endif
   while (cnt--)
  8015d4:	e0bfff17 	ldw	r2,-4(fp)
  8015d8:	10ffffc4 	addi	r3,r2,-1
  8015dc:	e0ffff15 	stw	r3,-4(fp)
  8015e0:	103ff41e 	bne	r2,zero,8015b4 <__alt_data_end+0xff8015b4>
      *d++ = *s++;
}
  8015e4:	0001883a 	nop
  8015e8:	e037883a 	mov	sp,fp
  8015ec:	df000017 	ldw	fp,0(sp)
  8015f0:	dec00104 	addi	sp,sp,4
  8015f4:	f800283a 	ret

008015f8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, uint32_t cnt) {
  8015f8:	defffb04 	addi	sp,sp,-20
  8015fc:	df000415 	stw	fp,16(sp)
  801600:	df000404 	addi	fp,sp,16
  801604:	e13ffd15 	stw	r4,-12(fp)
  801608:	e17ffe15 	stw	r5,-8(fp)
  80160c:	e1bfff15 	stw	r6,-4(fp)
   uint8_t *d = (uint8_t*)dst;
  801610:	e0bffd17 	ldw	r2,-12(fp)
  801614:	e0bffc15 	stw	r2,-16(fp)

   while (cnt--)
  801618:	00000506 	br	801630 <mem_set+0x38>
      *d++ = (uint8_t)val;
  80161c:	e0bffc17 	ldw	r2,-16(fp)
  801620:	10c00044 	addi	r3,r2,1
  801624:	e0fffc15 	stw	r3,-16(fp)
  801628:	e0fffe17 	ldw	r3,-8(fp)
  80162c:	10c00005 	stb	r3,0(r2)
/* Fill memory */
static
void mem_set (void* dst, int val, uint32_t cnt) {
   uint8_t *d = (uint8_t*)dst;

   while (cnt--)
  801630:	e0bfff17 	ldw	r2,-4(fp)
  801634:	10ffffc4 	addi	r3,r2,-1
  801638:	e0ffff15 	stw	r3,-4(fp)
  80163c:	103ff71e 	bne	r2,zero,80161c <__alt_data_end+0xff80161c>
      *d++ = (uint8_t)val;
}
  801640:	0001883a 	nop
  801644:	e037883a 	mov	sp,fp
  801648:	df000017 	ldw	fp,0(sp)
  80164c:	dec00104 	addi	sp,sp,4
  801650:	f800283a 	ret

00801654 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, uint32_t cnt) {
  801654:	defff904 	addi	sp,sp,-28
  801658:	df000615 	stw	fp,24(sp)
  80165c:	df000604 	addi	fp,sp,24
  801660:	e13ffd15 	stw	r4,-12(fp)
  801664:	e17ffe15 	stw	r5,-8(fp)
  801668:	e1bfff15 	stw	r6,-4(fp)
   const uint8_t *d = (const uint8_t *)dst, *s = (const uint8_t *)src;
  80166c:	e0bffd17 	ldw	r2,-12(fp)
  801670:	e0bffa15 	stw	r2,-24(fp)
  801674:	e0bffe17 	ldw	r2,-8(fp)
  801678:	e0bffb15 	stw	r2,-20(fp)
   int r = 0;
  80167c:	e03ffc15 	stw	zero,-16(fp)

   while (cnt-- && (r = *d++ - *s++) == 0) ;
  801680:	0001883a 	nop
  801684:	e0bfff17 	ldw	r2,-4(fp)
  801688:	10ffffc4 	addi	r3,r2,-1
  80168c:	e0ffff15 	stw	r3,-4(fp)
  801690:	10000e26 	beq	r2,zero,8016cc <mem_cmp+0x78>
  801694:	e0bffa17 	ldw	r2,-24(fp)
  801698:	10c00044 	addi	r3,r2,1
  80169c:	e0fffa15 	stw	r3,-24(fp)
  8016a0:	10800003 	ldbu	r2,0(r2)
  8016a4:	10c03fcc 	andi	r3,r2,255
  8016a8:	e0bffb17 	ldw	r2,-20(fp)
  8016ac:	11000044 	addi	r4,r2,1
  8016b0:	e13ffb15 	stw	r4,-20(fp)
  8016b4:	10800003 	ldbu	r2,0(r2)
  8016b8:	10803fcc 	andi	r2,r2,255
  8016bc:	1885c83a 	sub	r2,r3,r2
  8016c0:	e0bffc15 	stw	r2,-16(fp)
  8016c4:	e0bffc17 	ldw	r2,-16(fp)
  8016c8:	103fee26 	beq	r2,zero,801684 <__alt_data_end+0xff801684>
   return r;
  8016cc:	e0bffc17 	ldw	r2,-16(fp)
}
  8016d0:	e037883a 	mov	sp,fp
  8016d4:	df000017 	ldw	fp,0(sp)
  8016d8:	dec00104 	addi	sp,sp,4
  8016dc:	f800283a 	ret

008016e0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
  8016e0:	defffd04 	addi	sp,sp,-12
  8016e4:	df000215 	stw	fp,8(sp)
  8016e8:	df000204 	addi	fp,sp,8
  8016ec:	e13ffe15 	stw	r4,-8(fp)
  8016f0:	e17fff15 	stw	r5,-4(fp)
   while (*str && *str != chr) str++;
  8016f4:	00000306 	br	801704 <chk_chr+0x24>
  8016f8:	e0bffe17 	ldw	r2,-8(fp)
  8016fc:	10800044 	addi	r2,r2,1
  801700:	e0bffe15 	stw	r2,-8(fp)
  801704:	e0bffe17 	ldw	r2,-8(fp)
  801708:	10800003 	ldbu	r2,0(r2)
  80170c:	10803fcc 	andi	r2,r2,255
  801710:	1080201c 	xori	r2,r2,128
  801714:	10bfe004 	addi	r2,r2,-128
  801718:	10000726 	beq	r2,zero,801738 <chk_chr+0x58>
  80171c:	e0bffe17 	ldw	r2,-8(fp)
  801720:	10800003 	ldbu	r2,0(r2)
  801724:	10c03fcc 	andi	r3,r2,255
  801728:	18c0201c 	xori	r3,r3,128
  80172c:	18ffe004 	addi	r3,r3,-128
  801730:	e0bfff17 	ldw	r2,-4(fp)
  801734:	18bff01e 	bne	r3,r2,8016f8 <__alt_data_end+0xff8016f8>
   return *str;
  801738:	e0bffe17 	ldw	r2,-8(fp)
  80173c:	10800003 	ldbu	r2,0(r2)
  801740:	10803fcc 	andi	r2,r2,255
  801744:	1080201c 	xori	r2,r2,128
  801748:	10bfe004 	addi	r2,r2,-128
}
  80174c:	e037883a 	mov	sp,fp
  801750:	df000017 	ldw	fp,0(sp)
  801754:	dec00104 	addi	sp,sp,4
  801758:	f800283a 	ret

0080175c <move_window>:
static
FRESULT move_window (
   FATFS *fs,     /* File system object */
   uint32_t sector   /* Sector number to make appearance in the fs->win[] */
)              /* Move to zero only writes back dirty window */
{
  80175c:	defffa04 	addi	sp,sp,-24
  801760:	dfc00515 	stw	ra,20(sp)
  801764:	df000415 	stw	fp,16(sp)
  801768:	df000404 	addi	fp,sp,16
  80176c:	e13ffe15 	stw	r4,-8(fp)
  801770:	e17fff15 	stw	r5,-4(fp)
   uint32_t wsect;


   wsect = fs->winsect;
  801774:	e0bffe17 	ldw	r2,-8(fp)
  801778:	10800b17 	ldw	r2,44(r2)
  80177c:	e0bffc15 	stw	r2,-16(fp)
   if (wsect != sector) {  /* Changed current window */
  801780:	e0fffc17 	ldw	r3,-16(fp)
  801784:	e0bfff17 	ldw	r2,-4(fp)
  801788:	18804526 	beq	r3,r2,8018a0 <move_window+0x144>
#if !_FS_READONLY
      if (fs->wflag) {  /* Write back dirty window if needed */
  80178c:	e0bffe17 	ldw	r2,-8(fp)
  801790:	10800103 	ldbu	r2,4(r2)
  801794:	10803fcc 	andi	r2,r2,255
  801798:	10002f26 	beq	r2,zero,801858 <move_window+0xfc>
         if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
  80179c:	e0bffe17 	ldw	r2,-8(fp)
  8017a0:	10800043 	ldbu	r2,1(r2)
  8017a4:	10c03fcc 	andi	r3,r2,255
  8017a8:	e0bffe17 	ldw	r2,-8(fp)
  8017ac:	10800c04 	addi	r2,r2,48
  8017b0:	01c00044 	movi	r7,1
  8017b4:	e1bffc17 	ldw	r6,-16(fp)
  8017b8:	100b883a 	mov	r5,r2
  8017bc:	1809883a 	mov	r4,r3
  8017c0:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  8017c4:	10000226 	beq	r2,zero,8017d0 <move_window+0x74>
            return FR_DISK_ERR;
  8017c8:	00800044 	movi	r2,1
  8017cc:	00003506 	br	8018a4 <move_window+0x148>
         fs->wflag = 0;
  8017d0:	e0bffe17 	ldw	r2,-8(fp)
  8017d4:	10000105 	stb	zero,4(r2)
         if (wsect < (fs->fatbase + fs->fsize)) {  /* In FAT area */
  8017d8:	e0bffe17 	ldw	r2,-8(fp)
  8017dc:	10c00817 	ldw	r3,32(r2)
  8017e0:	e0bffe17 	ldw	r2,-8(fp)
  8017e4:	10800717 	ldw	r2,28(r2)
  8017e8:	1885883a 	add	r2,r3,r2
  8017ec:	e0fffc17 	ldw	r3,-16(fp)
  8017f0:	1880192e 	bgeu	r3,r2,801858 <move_window+0xfc>
            uint8_t nf;
            for (nf = fs->n_fats; nf > 1; nf--) {  /* Reflect the change to all FAT copies */
  8017f4:	e0bffe17 	ldw	r2,-8(fp)
  8017f8:	108000c3 	ldbu	r2,3(r2)
  8017fc:	e0bffd05 	stb	r2,-12(fp)
  801800:	00001206 	br	80184c <move_window+0xf0>
               wsect += fs->fsize;
  801804:	e0bffe17 	ldw	r2,-8(fp)
  801808:	10800717 	ldw	r2,28(r2)
  80180c:	e0fffc17 	ldw	r3,-16(fp)
  801810:	1885883a 	add	r2,r3,r2
  801814:	e0bffc15 	stw	r2,-16(fp)
               disk_write(fs->drv, fs->win, wsect, 1);
  801818:	e0bffe17 	ldw	r2,-8(fp)
  80181c:	10800043 	ldbu	r2,1(r2)
  801820:	10c03fcc 	andi	r3,r2,255
  801824:	e0bffe17 	ldw	r2,-8(fp)
  801828:	10800c04 	addi	r2,r2,48
  80182c:	01c00044 	movi	r7,1
  801830:	e1bffc17 	ldw	r6,-16(fp)
  801834:	100b883a 	mov	r5,r2
  801838:	1809883a 	mov	r4,r3
  80183c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
         if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
            return FR_DISK_ERR;
         fs->wflag = 0;
         if (wsect < (fs->fatbase + fs->fsize)) {  /* In FAT area */
            uint8_t nf;
            for (nf = fs->n_fats; nf > 1; nf--) {  /* Reflect the change to all FAT copies */
  801840:	e0bffd03 	ldbu	r2,-12(fp)
  801844:	10bfffc4 	addi	r2,r2,-1
  801848:	e0bffd05 	stb	r2,-12(fp)
  80184c:	e0bffd03 	ldbu	r2,-12(fp)
  801850:	108000a8 	cmpgeui	r2,r2,2
  801854:	103feb1e 	bne	r2,zero,801804 <__alt_data_end+0xff801804>
               disk_write(fs->drv, fs->win, wsect, 1);
            }
         }
      }
#endif
      if (sector) {
  801858:	e0bfff17 	ldw	r2,-4(fp)
  80185c:	10001026 	beq	r2,zero,8018a0 <move_window+0x144>
         if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
  801860:	e0bffe17 	ldw	r2,-8(fp)
  801864:	10800043 	ldbu	r2,1(r2)
  801868:	10c03fcc 	andi	r3,r2,255
  80186c:	e0bffe17 	ldw	r2,-8(fp)
  801870:	10800c04 	addi	r2,r2,48
  801874:	01c00044 	movi	r7,1
  801878:	e1bfff17 	ldw	r6,-4(fp)
  80187c:	100b883a 	mov	r5,r2
  801880:	1809883a 	mov	r4,r3
  801884:	0800e080 	call	800e08 <ffs_DiskIORead>
  801888:	10000226 	beq	r2,zero,801894 <move_window+0x138>
            return FR_DISK_ERR;
  80188c:	00800044 	movi	r2,1
  801890:	00000406 	br	8018a4 <move_window+0x148>
         fs->winsect = sector;
  801894:	e0bffe17 	ldw	r2,-8(fp)
  801898:	e0ffff17 	ldw	r3,-4(fp)
  80189c:	10c00b15 	stw	r3,44(r2)
      }
   }

   return FR_OK;
  8018a0:	0005883a 	mov	r2,zero
}
  8018a4:	e037883a 	mov	sp,fp
  8018a8:	dfc00117 	ldw	ra,4(sp)
  8018ac:	df000017 	ldw	fp,0(sp)
  8018b0:	dec00204 	addi	sp,sp,8
  8018b4:	f800283a 	ret

008018b8 <sync>:
#if !_FS_READONLY
static
FRESULT sync ( /* FR_OK: successful, FR_DISK_ERR: failed */
   FATFS *fs   /* File system object */
)
{
  8018b8:	defffc04 	addi	sp,sp,-16
  8018bc:	dfc00315 	stw	ra,12(sp)
  8018c0:	df000215 	stw	fp,8(sp)
  8018c4:	df000204 	addi	fp,sp,8
  8018c8:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;


   res = move_window(fs, 0);
  8018cc:	000b883a 	mov	r5,zero
  8018d0:	e13fff17 	ldw	r4,-4(fp)
  8018d4:	080175c0 	call	80175c <move_window>
  8018d8:	e0bffe15 	stw	r2,-8(fp)
   if (res == FR_OK) {
  8018dc:	e0bffe17 	ldw	r2,-8(fp)
  8018e0:	1000771e 	bne	r2,zero,801ac0 <sync+0x208>
      /* Update FSInfo sector if needed */
      if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
  8018e4:	e0bfff17 	ldw	r2,-4(fp)
  8018e8:	10800003 	ldbu	r2,0(r2)
  8018ec:	10803fcc 	andi	r2,r2,255
  8018f0:	108000d8 	cmpnei	r2,r2,3
  8018f4:	1000681e 	bne	r2,zero,801a98 <sync+0x1e0>
  8018f8:	e0bfff17 	ldw	r2,-4(fp)
  8018fc:	10800143 	ldbu	r2,5(r2)
  801900:	10803fcc 	andi	r2,r2,255
  801904:	10006426 	beq	r2,zero,801a98 <sync+0x1e0>
         fs->winsect = 0;
  801908:	e0bfff17 	ldw	r2,-4(fp)
  80190c:	10000b15 	stw	zero,44(r2)
         /* Create FSInfo structure */
         mem_set(fs->win, 0, 512);
  801910:	e0bfff17 	ldw	r2,-4(fp)
  801914:	10800c04 	addi	r2,r2,48
  801918:	01808004 	movi	r6,512
  80191c:	000b883a 	mov	r5,zero
  801920:	1009883a 	mov	r4,r2
  801924:	08015f80 	call	8015f8 <mem_set>
         ST_WORD(fs->win+BS_55AA, 0xAA55);
  801928:	e0bfff17 	ldw	r2,-4(fp)
  80192c:	00c01544 	movi	r3,85
  801930:	10c08b85 	stb	r3,558(r2)
  801934:	e0bfff17 	ldw	r2,-4(fp)
  801938:	00ffea84 	movi	r3,-86
  80193c:	10c08bc5 	stb	r3,559(r2)
         ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
  801940:	e0bfff17 	ldw	r2,-4(fp)
  801944:	00c01484 	movi	r3,82
  801948:	10c00c05 	stb	r3,48(r2)
  80194c:	e0bfff17 	ldw	r2,-4(fp)
  801950:	00c01484 	movi	r3,82
  801954:	10c00c45 	stb	r3,49(r2)
  801958:	e0bfff17 	ldw	r2,-4(fp)
  80195c:	00c01844 	movi	r3,97
  801960:	10c00c85 	stb	r3,50(r2)
  801964:	e0bfff17 	ldw	r2,-4(fp)
  801968:	00c01044 	movi	r3,65
  80196c:	10c00cc5 	stb	r3,51(r2)
         ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
  801970:	e0bfff17 	ldw	r2,-4(fp)
  801974:	00c01c84 	movi	r3,114
  801978:	10c08505 	stb	r3,532(r2)
  80197c:	e0bfff17 	ldw	r2,-4(fp)
  801980:	00c01c84 	movi	r3,114
  801984:	10c08545 	stb	r3,533(r2)
  801988:	e0bfff17 	ldw	r2,-4(fp)
  80198c:	00c01044 	movi	r3,65
  801990:	10c08585 	stb	r3,534(r2)
  801994:	e0bfff17 	ldw	r2,-4(fp)
  801998:	00c01844 	movi	r3,97
  80199c:	10c085c5 	stb	r3,535(r2)
         ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
  8019a0:	e0bfff17 	ldw	r2,-4(fp)
  8019a4:	10800417 	ldw	r2,16(r2)
  8019a8:	1007883a 	mov	r3,r2
  8019ac:	e0bfff17 	ldw	r2,-4(fp)
  8019b0:	10c08605 	stb	r3,536(r2)
  8019b4:	e0bfff17 	ldw	r2,-4(fp)
  8019b8:	10800417 	ldw	r2,16(r2)
  8019bc:	10bfffcc 	andi	r2,r2,65535
  8019c0:	1005d23a 	srai	r2,r2,8
  8019c4:	1007883a 	mov	r3,r2
  8019c8:	e0bfff17 	ldw	r2,-4(fp)
  8019cc:	10c08645 	stb	r3,537(r2)
  8019d0:	e0bfff17 	ldw	r2,-4(fp)
  8019d4:	10800417 	ldw	r2,16(r2)
  8019d8:	1004d43a 	srli	r2,r2,16
  8019dc:	1007883a 	mov	r3,r2
  8019e0:	e0bfff17 	ldw	r2,-4(fp)
  8019e4:	10c08685 	stb	r3,538(r2)
  8019e8:	e0bfff17 	ldw	r2,-4(fp)
  8019ec:	10800417 	ldw	r2,16(r2)
  8019f0:	1004d63a 	srli	r2,r2,24
  8019f4:	1007883a 	mov	r3,r2
  8019f8:	e0bfff17 	ldw	r2,-4(fp)
  8019fc:	10c086c5 	stb	r3,539(r2)
         ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
  801a00:	e0bfff17 	ldw	r2,-4(fp)
  801a04:	10800317 	ldw	r2,12(r2)
  801a08:	1007883a 	mov	r3,r2
  801a0c:	e0bfff17 	ldw	r2,-4(fp)
  801a10:	10c08705 	stb	r3,540(r2)
  801a14:	e0bfff17 	ldw	r2,-4(fp)
  801a18:	10800317 	ldw	r2,12(r2)
  801a1c:	10bfffcc 	andi	r2,r2,65535
  801a20:	1005d23a 	srai	r2,r2,8
  801a24:	1007883a 	mov	r3,r2
  801a28:	e0bfff17 	ldw	r2,-4(fp)
  801a2c:	10c08745 	stb	r3,541(r2)
  801a30:	e0bfff17 	ldw	r2,-4(fp)
  801a34:	10800317 	ldw	r2,12(r2)
  801a38:	1004d43a 	srli	r2,r2,16
  801a3c:	1007883a 	mov	r3,r2
  801a40:	e0bfff17 	ldw	r2,-4(fp)
  801a44:	10c08785 	stb	r3,542(r2)
  801a48:	e0bfff17 	ldw	r2,-4(fp)
  801a4c:	10800317 	ldw	r2,12(r2)
  801a50:	1004d63a 	srli	r2,r2,24
  801a54:	1007883a 	mov	r3,r2
  801a58:	e0bfff17 	ldw	r2,-4(fp)
  801a5c:	10c087c5 	stb	r3,543(r2)
         /* Write it into the FSInfo sector */
         disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
  801a60:	e0bfff17 	ldw	r2,-4(fp)
  801a64:	10800043 	ldbu	r2,1(r2)
  801a68:	10c03fcc 	andi	r3,r2,255
  801a6c:	e0bfff17 	ldw	r2,-4(fp)
  801a70:	11000c04 	addi	r4,r2,48
  801a74:	e0bfff17 	ldw	r2,-4(fp)
  801a78:	10800517 	ldw	r2,20(r2)
  801a7c:	01c00044 	movi	r7,1
  801a80:	100d883a 	mov	r6,r2
  801a84:	200b883a 	mov	r5,r4
  801a88:	1809883a 	mov	r4,r3
  801a8c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
         fs->fsi_flag = 0;
  801a90:	e0bfff17 	ldw	r2,-4(fp)
  801a94:	10000145 	stb	zero,5(r2)
      }
      /* Make sure that no pending write process in the physical drive */
      if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
  801a98:	e0bfff17 	ldw	r2,-4(fp)
  801a9c:	10800043 	ldbu	r2,1(r2)
  801aa0:	10803fcc 	andi	r2,r2,255
  801aa4:	000d883a 	mov	r6,zero
  801aa8:	000b883a 	mov	r5,zero
  801aac:	1009883a 	mov	r4,r2
  801ab0:	08010980 	call	801098 <ffs_DiskIOIoctl>
  801ab4:	10000226 	beq	r2,zero,801ac0 <sync+0x208>
         res = FR_DISK_ERR;
  801ab8:	00800044 	movi	r2,1
  801abc:	e0bffe15 	stw	r2,-8(fp)
   }

   return res;
  801ac0:	e0bffe17 	ldw	r2,-8(fp)
}
  801ac4:	e037883a 	mov	sp,fp
  801ac8:	dfc00117 	ldw	ra,4(sp)
  801acc:	df000017 	ldw	fp,0(sp)
  801ad0:	dec00204 	addi	sp,sp,8
  801ad4:	f800283a 	ret

00801ad8 <clust2sect>:

uint32_t clust2sect (   /* !=0: Sector number, 0: Failed - invalid cluster# */
   FATFS *fs,     /* File system object */
   uint32_t clst     /* Cluster# to be converted */
)
{
  801ad8:	defffd04 	addi	sp,sp,-12
  801adc:	df000215 	stw	fp,8(sp)
  801ae0:	df000204 	addi	fp,sp,8
  801ae4:	e13ffe15 	stw	r4,-8(fp)
  801ae8:	e17fff15 	stw	r5,-4(fp)
   clst -= 2;
  801aec:	e0bfff17 	ldw	r2,-4(fp)
  801af0:	10bfff84 	addi	r2,r2,-2
  801af4:	e0bfff15 	stw	r2,-4(fp)
   if (clst >= (fs->n_fatent - 2)) return 0;    /* Invalid cluster# */
  801af8:	e0bffe17 	ldw	r2,-8(fp)
  801afc:	10800617 	ldw	r2,24(r2)
  801b00:	10bfff84 	addi	r2,r2,-2
  801b04:	e0ffff17 	ldw	r3,-4(fp)
  801b08:	18800236 	bltu	r3,r2,801b14 <clust2sect+0x3c>
  801b0c:	0005883a 	mov	r2,zero
  801b10:	00000806 	br	801b34 <clust2sect+0x5c>
   return clst * fs->csize + fs->database;
  801b14:	e0bffe17 	ldw	r2,-8(fp)
  801b18:	10800083 	ldbu	r2,2(r2)
  801b1c:	10c03fcc 	andi	r3,r2,255
  801b20:	e0bfff17 	ldw	r2,-4(fp)
  801b24:	1887383a 	mul	r3,r3,r2
  801b28:	e0bffe17 	ldw	r2,-8(fp)
  801b2c:	10800a17 	ldw	r2,40(r2)
  801b30:	1885883a 	add	r2,r3,r2
}
  801b34:	e037883a 	mov	sp,fp
  801b38:	df000017 	ldw	fp,0(sp)
  801b3c:	dec00104 	addi	sp,sp,4
  801b40:	f800283a 	ret

00801b44 <get_fat>:

uint32_t get_fat (   /* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
   FATFS *fs,  /* File system object */
   uint32_t clst  /* Cluster# to get the link information */
)
{
  801b44:	defff904 	addi	sp,sp,-28
  801b48:	dfc00615 	stw	ra,24(sp)
  801b4c:	df000515 	stw	fp,20(sp)
  801b50:	df000504 	addi	fp,sp,20
  801b54:	e13ffe15 	stw	r4,-8(fp)
  801b58:	e17fff15 	stw	r5,-4(fp)
   uint32_t wc, bc;
   uint8_t *p;


   if (clst < 2 || clst >= fs->n_fatent)  /* Chack range */
  801b5c:	e0bfff17 	ldw	r2,-4(fp)
  801b60:	108000b0 	cmpltui	r2,r2,2
  801b64:	1000041e 	bne	r2,zero,801b78 <get_fat+0x34>
  801b68:	e0bffe17 	ldw	r2,-8(fp)
  801b6c:	10800617 	ldw	r2,24(r2)
  801b70:	e0ffff17 	ldw	r3,-4(fp)
  801b74:	18800236 	bltu	r3,r2,801b80 <get_fat+0x3c>
      return 1;
  801b78:	00800044 	movi	r2,1
  801b7c:	00009006 	br	801dc0 <get_fat+0x27c>

   switch (fs->fs_type) {
  801b80:	e0bffe17 	ldw	r2,-8(fp)
  801b84:	10800003 	ldbu	r2,0(r2)
  801b88:	10803fcc 	andi	r2,r2,255
  801b8c:	10c000a0 	cmpeqi	r3,r2,2
  801b90:	18003d1e 	bne	r3,zero,801c88 <get_fat+0x144>
  801b94:	10c000e0 	cmpeqi	r3,r2,3
  801b98:	1800571e 	bne	r3,zero,801cf8 <get_fat+0x1b4>
  801b9c:	10800060 	cmpeqi	r2,r2,1
  801ba0:	10008626 	beq	r2,zero,801dbc <get_fat+0x278>
   case FS_FAT12 :
      bc = (uint32_t)clst; bc += bc / 2;
  801ba4:	e0bfff17 	ldw	r2,-4(fp)
  801ba8:	e0bffb15 	stw	r2,-20(fp)
  801bac:	e0bffb17 	ldw	r2,-20(fp)
  801bb0:	1004d07a 	srli	r2,r2,1
  801bb4:	e0fffb17 	ldw	r3,-20(fp)
  801bb8:	1885883a 	add	r2,r3,r2
  801bbc:	e0bffb15 	stw	r2,-20(fp)
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  801bc0:	e0bffe17 	ldw	r2,-8(fp)
  801bc4:	10c00817 	ldw	r3,32(r2)
  801bc8:	e0bffb17 	ldw	r2,-20(fp)
  801bcc:	1004d27a 	srli	r2,r2,9
  801bd0:	1885883a 	add	r2,r3,r2
  801bd4:	100b883a 	mov	r5,r2
  801bd8:	e13ffe17 	ldw	r4,-8(fp)
  801bdc:	080175c0 	call	80175c <move_window>
  801be0:	10006f1e 	bne	r2,zero,801da0 <get_fat+0x25c>
      wc = fs->win[bc % SS(fs)]; bc++;
  801be4:	e0bffb17 	ldw	r2,-20(fp)
  801be8:	10807fcc 	andi	r2,r2,511
  801bec:	e0fffe17 	ldw	r3,-8(fp)
  801bf0:	1885883a 	add	r2,r3,r2
  801bf4:	10800c04 	addi	r2,r2,48
  801bf8:	10800003 	ldbu	r2,0(r2)
  801bfc:	10803fcc 	andi	r2,r2,255
  801c00:	e0bffc15 	stw	r2,-16(fp)
  801c04:	e0bffb17 	ldw	r2,-20(fp)
  801c08:	10800044 	addi	r2,r2,1
  801c0c:	e0bffb15 	stw	r2,-20(fp)
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  801c10:	e0bffe17 	ldw	r2,-8(fp)
  801c14:	10c00817 	ldw	r3,32(r2)
  801c18:	e0bffb17 	ldw	r2,-20(fp)
  801c1c:	1004d27a 	srli	r2,r2,9
  801c20:	1885883a 	add	r2,r3,r2
  801c24:	100b883a 	mov	r5,r2
  801c28:	e13ffe17 	ldw	r4,-8(fp)
  801c2c:	080175c0 	call	80175c <move_window>
  801c30:	10005d1e 	bne	r2,zero,801da8 <get_fat+0x264>
      wc |= fs->win[bc % SS(fs)] << 8;
  801c34:	e0bffb17 	ldw	r2,-20(fp)
  801c38:	10807fcc 	andi	r2,r2,511
  801c3c:	e0fffe17 	ldw	r3,-8(fp)
  801c40:	1885883a 	add	r2,r3,r2
  801c44:	10800c04 	addi	r2,r2,48
  801c48:	10800003 	ldbu	r2,0(r2)
  801c4c:	10803fcc 	andi	r2,r2,255
  801c50:	1004923a 	slli	r2,r2,8
  801c54:	1007883a 	mov	r3,r2
  801c58:	e0bffc17 	ldw	r2,-16(fp)
  801c5c:	10c4b03a 	or	r2,r2,r3
  801c60:	e0bffc15 	stw	r2,-16(fp)
      return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  801c64:	e0bfff17 	ldw	r2,-4(fp)
  801c68:	1080004c 	andi	r2,r2,1
  801c6c:	10000326 	beq	r2,zero,801c7c <get_fat+0x138>
  801c70:	e0bffc17 	ldw	r2,-16(fp)
  801c74:	1004d13a 	srli	r2,r2,4
  801c78:	00005106 	br	801dc0 <get_fat+0x27c>
  801c7c:	e0bffc17 	ldw	r2,-16(fp)
  801c80:	1083ffcc 	andi	r2,r2,4095
  801c84:	00004e06 	br	801dc0 <get_fat+0x27c>

   case FS_FAT16 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  801c88:	e0bffe17 	ldw	r2,-8(fp)
  801c8c:	10c00817 	ldw	r3,32(r2)
  801c90:	e0bfff17 	ldw	r2,-4(fp)
  801c94:	1004d23a 	srli	r2,r2,8
  801c98:	1885883a 	add	r2,r3,r2
  801c9c:	100b883a 	mov	r5,r2
  801ca0:	e13ffe17 	ldw	r4,-8(fp)
  801ca4:	080175c0 	call	80175c <move_window>
  801ca8:	1000411e 	bne	r2,zero,801db0 <get_fat+0x26c>
      p = &fs->win[clst * 2 % SS(fs)];
  801cac:	e0bfff17 	ldw	r2,-4(fp)
  801cb0:	1085883a 	add	r2,r2,r2
  801cb4:	10807f8c 	andi	r2,r2,510
  801cb8:	10800c04 	addi	r2,r2,48
  801cbc:	e0fffe17 	ldw	r3,-8(fp)
  801cc0:	1885883a 	add	r2,r3,r2
  801cc4:	e0bffd15 	stw	r2,-12(fp)
      return LD_WORD(p);
  801cc8:	e0bffd17 	ldw	r2,-12(fp)
  801ccc:	10800044 	addi	r2,r2,1
  801cd0:	10800003 	ldbu	r2,0(r2)
  801cd4:	10803fcc 	andi	r2,r2,255
  801cd8:	1004923a 	slli	r2,r2,8
  801cdc:	1007883a 	mov	r3,r2
  801ce0:	e0bffd17 	ldw	r2,-12(fp)
  801ce4:	10800003 	ldbu	r2,0(r2)
  801ce8:	10803fcc 	andi	r2,r2,255
  801cec:	1884b03a 	or	r2,r3,r2
  801cf0:	10bfffcc 	andi	r2,r2,65535
  801cf4:	00003206 	br	801dc0 <get_fat+0x27c>

   case FS_FAT32 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  801cf8:	e0bffe17 	ldw	r2,-8(fp)
  801cfc:	10c00817 	ldw	r3,32(r2)
  801d00:	e0bfff17 	ldw	r2,-4(fp)
  801d04:	1004d1fa 	srli	r2,r2,7
  801d08:	1885883a 	add	r2,r3,r2
  801d0c:	100b883a 	mov	r5,r2
  801d10:	e13ffe17 	ldw	r4,-8(fp)
  801d14:	080175c0 	call	80175c <move_window>
  801d18:	1000271e 	bne	r2,zero,801db8 <get_fat+0x274>
      p = &fs->win[clst * 4 % SS(fs)];
  801d1c:	e0bfff17 	ldw	r2,-4(fp)
  801d20:	1085883a 	add	r2,r2,r2
  801d24:	1085883a 	add	r2,r2,r2
  801d28:	10807f0c 	andi	r2,r2,508
  801d2c:	10800c04 	addi	r2,r2,48
  801d30:	e0fffe17 	ldw	r3,-8(fp)
  801d34:	1885883a 	add	r2,r3,r2
  801d38:	e0bffd15 	stw	r2,-12(fp)
      return LD_DWORD(p) & 0x0FFFFFFF;
  801d3c:	e0bffd17 	ldw	r2,-12(fp)
  801d40:	108000c4 	addi	r2,r2,3
  801d44:	10800003 	ldbu	r2,0(r2)
  801d48:	10803fcc 	andi	r2,r2,255
  801d4c:	1006963a 	slli	r3,r2,24
  801d50:	e0bffd17 	ldw	r2,-12(fp)
  801d54:	10800084 	addi	r2,r2,2
  801d58:	10800003 	ldbu	r2,0(r2)
  801d5c:	10803fcc 	andi	r2,r2,255
  801d60:	1004943a 	slli	r2,r2,16
  801d64:	1884b03a 	or	r2,r3,r2
  801d68:	e0fffd17 	ldw	r3,-12(fp)
  801d6c:	18c00044 	addi	r3,r3,1
  801d70:	18c00003 	ldbu	r3,0(r3)
  801d74:	18c03fcc 	andi	r3,r3,255
  801d78:	1806923a 	slli	r3,r3,8
  801d7c:	10c6b03a 	or	r3,r2,r3
  801d80:	e0bffd17 	ldw	r2,-12(fp)
  801d84:	10800003 	ldbu	r2,0(r2)
  801d88:	10803fcc 	andi	r2,r2,255
  801d8c:	1886b03a 	or	r3,r3,r2
  801d90:	00840034 	movhi	r2,4096
  801d94:	10bfffc4 	addi	r2,r2,-1
  801d98:	1884703a 	and	r2,r3,r2
  801d9c:	00000806 	br	801dc0 <get_fat+0x27c>
      return 1;

   switch (fs->fs_type) {
   case FS_FAT12 :
      bc = (uint32_t)clst; bc += bc / 2;
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  801da0:	0001883a 	nop
  801da4:	00000506 	br	801dbc <get_fat+0x278>
      wc = fs->win[bc % SS(fs)]; bc++;
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
  801da8:	0001883a 	nop
  801dac:	00000306 	br	801dbc <get_fat+0x278>
      wc |= fs->win[bc % SS(fs)] << 8;
      return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

   case FS_FAT16 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
  801db0:	0001883a 	nop
  801db4:	00000106 	br	801dbc <get_fat+0x278>
      p = &fs->win[clst * 2 % SS(fs)];
      return LD_WORD(p);

   case FS_FAT32 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
  801db8:	0001883a 	nop
      p = &fs->win[clst * 4 % SS(fs)];
      return LD_DWORD(p) & 0x0FFFFFFF;
   }

   return 0xFFFFFFFF;   /* An error occurred at the disk I/O layer */
  801dbc:	00bfffc4 	movi	r2,-1
}
  801dc0:	e037883a 	mov	sp,fp
  801dc4:	dfc00117 	ldw	ra,4(sp)
  801dc8:	df000017 	ldw	fp,0(sp)
  801dcc:	dec00204 	addi	sp,sp,8
  801dd0:	f800283a 	ret

00801dd4 <put_fat>:
FRESULT put_fat (
   FATFS *fs,  /* File system object */
   uint32_t clst, /* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
   uint32_t val   /* New value to mark the cluster */
)
{
  801dd4:	defff804 	addi	sp,sp,-32
  801dd8:	dfc00715 	stw	ra,28(sp)
  801ddc:	df000615 	stw	fp,24(sp)
  801de0:	df000604 	addi	fp,sp,24
  801de4:	e13ffd15 	stw	r4,-12(fp)
  801de8:	e17ffe15 	stw	r5,-8(fp)
  801dec:	e1bfff15 	stw	r6,-4(fp)
   uint32_t bc;
   uint8_t *p;
   FRESULT res;


   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
  801df0:	e0bffe17 	ldw	r2,-8(fp)
  801df4:	108000b0 	cmpltui	r2,r2,2
  801df8:	1000041e 	bne	r2,zero,801e0c <put_fat+0x38>
  801dfc:	e0bffd17 	ldw	r2,-12(fp)
  801e00:	10800617 	ldw	r2,24(r2)
  801e04:	e0fffe17 	ldw	r3,-8(fp)
  801e08:	18800336 	bltu	r3,r2,801e18 <put_fat+0x44>
      res = FR_INT_ERR;
  801e0c:	00800084 	movi	r2,2
  801e10:	e0bffa15 	stw	r2,-24(fp)
  801e14:	0000c906 	br	80213c <put_fat+0x368>

   } else {
      switch (fs->fs_type) {
  801e18:	e0bffd17 	ldw	r2,-12(fp)
  801e1c:	10800003 	ldbu	r2,0(r2)
  801e20:	10803fcc 	andi	r2,r2,255
  801e24:	10c000a0 	cmpeqi	r3,r2,2
  801e28:	1800591e 	bne	r3,zero,801f90 <put_fat+0x1bc>
  801e2c:	10c000e0 	cmpeqi	r3,r2,3
  801e30:	1800741e 	bne	r3,zero,802004 <put_fat+0x230>
  801e34:	10800060 	cmpeqi	r2,r2,1
  801e38:	1000b326 	beq	r2,zero,802108 <put_fat+0x334>
      case FS_FAT12 :
         bc = clst; bc += bc / 2;
  801e3c:	e0bffe17 	ldw	r2,-8(fp)
  801e40:	e0bffb15 	stw	r2,-20(fp)
  801e44:	e0bffb17 	ldw	r2,-20(fp)
  801e48:	1004d07a 	srli	r2,r2,1
  801e4c:	e0fffb17 	ldw	r3,-20(fp)
  801e50:	1885883a 	add	r2,r3,r2
  801e54:	e0bffb15 	stw	r2,-20(fp)
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  801e58:	e0bffd17 	ldw	r2,-12(fp)
  801e5c:	10c00817 	ldw	r3,32(r2)
  801e60:	e0bffb17 	ldw	r2,-20(fp)
  801e64:	1004d27a 	srli	r2,r2,9
  801e68:	1885883a 	add	r2,r3,r2
  801e6c:	100b883a 	mov	r5,r2
  801e70:	e13ffd17 	ldw	r4,-12(fp)
  801e74:	080175c0 	call	80175c <move_window>
  801e78:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  801e7c:	e0bffa17 	ldw	r2,-24(fp)
  801e80:	1000a41e 	bne	r2,zero,802114 <put_fat+0x340>
         p = &fs->win[bc % SS(fs)];
  801e84:	e0bffb17 	ldw	r2,-20(fp)
  801e88:	10807fcc 	andi	r2,r2,511
  801e8c:	10800c04 	addi	r2,r2,48
  801e90:	e0fffd17 	ldw	r3,-12(fp)
  801e94:	1885883a 	add	r2,r3,r2
  801e98:	e0bffc15 	stw	r2,-16(fp)
         *p = (clst & 1) ? ((*p & 0x0F) | ((uint8_t)val << 4)) : (uint8_t)val;
  801e9c:	e0bffe17 	ldw	r2,-8(fp)
  801ea0:	1080004c 	andi	r2,r2,1
  801ea4:	10000a26 	beq	r2,zero,801ed0 <put_fat+0xfc>
  801ea8:	e0bffc17 	ldw	r2,-16(fp)
  801eac:	10800003 	ldbu	r2,0(r2)
  801eb0:	108003cc 	andi	r2,r2,15
  801eb4:	1007883a 	mov	r3,r2
  801eb8:	e0bfff17 	ldw	r2,-4(fp)
  801ebc:	10803fcc 	andi	r2,r2,255
  801ec0:	1004913a 	slli	r2,r2,4
  801ec4:	1884b03a 	or	r2,r3,r2
  801ec8:	1007883a 	mov	r3,r2
  801ecc:	00000206 	br	801ed8 <put_fat+0x104>
  801ed0:	e0bfff17 	ldw	r2,-4(fp)
  801ed4:	1007883a 	mov	r3,r2
  801ed8:	e0bffc17 	ldw	r2,-16(fp)
  801edc:	10c00005 	stb	r3,0(r2)
         bc++;
  801ee0:	e0bffb17 	ldw	r2,-20(fp)
  801ee4:	10800044 	addi	r2,r2,1
  801ee8:	e0bffb15 	stw	r2,-20(fp)
         fs->wflag = 1;
  801eec:	e0bffd17 	ldw	r2,-12(fp)
  801ef0:	00c00044 	movi	r3,1
  801ef4:	10c00105 	stb	r3,4(r2)
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
  801ef8:	e0bffd17 	ldw	r2,-12(fp)
  801efc:	10c00817 	ldw	r3,32(r2)
  801f00:	e0bffb17 	ldw	r2,-20(fp)
  801f04:	1004d27a 	srli	r2,r2,9
  801f08:	1885883a 	add	r2,r3,r2
  801f0c:	100b883a 	mov	r5,r2
  801f10:	e13ffd17 	ldw	r4,-12(fp)
  801f14:	080175c0 	call	80175c <move_window>
  801f18:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  801f1c:	e0bffa17 	ldw	r2,-24(fp)
  801f20:	10007e1e 	bne	r2,zero,80211c <put_fat+0x348>
         p = &fs->win[bc % SS(fs)];
  801f24:	e0bffb17 	ldw	r2,-20(fp)
  801f28:	10807fcc 	andi	r2,r2,511
  801f2c:	10800c04 	addi	r2,r2,48
  801f30:	e0fffd17 	ldw	r3,-12(fp)
  801f34:	1885883a 	add	r2,r3,r2
  801f38:	e0bffc15 	stw	r2,-16(fp)
         *p = (clst & 1) ? (uint8_t)(val >> 4) : ((*p & 0xF0) | ((uint8_t)(val >> 8) & 0x0F));
  801f3c:	e0bffe17 	ldw	r2,-8(fp)
  801f40:	1080004c 	andi	r2,r2,1
  801f44:	10000426 	beq	r2,zero,801f58 <put_fat+0x184>
  801f48:	e0bfff17 	ldw	r2,-4(fp)
  801f4c:	1004d13a 	srli	r2,r2,4
  801f50:	1007883a 	mov	r3,r2
  801f54:	00000b06 	br	801f84 <put_fat+0x1b0>
  801f58:	e0bffc17 	ldw	r2,-16(fp)
  801f5c:	10800003 	ldbu	r2,0(r2)
  801f60:	1007883a 	mov	r3,r2
  801f64:	00bffc04 	movi	r2,-16
  801f68:	1884703a 	and	r2,r3,r2
  801f6c:	1007883a 	mov	r3,r2
  801f70:	e0bfff17 	ldw	r2,-4(fp)
  801f74:	1004d23a 	srli	r2,r2,8
  801f78:	108003cc 	andi	r2,r2,15
  801f7c:	1884b03a 	or	r2,r3,r2
  801f80:	1007883a 	mov	r3,r2
  801f84:	e0bffc17 	ldw	r2,-16(fp)
  801f88:	10c00005 	stb	r3,0(r2)
         break;
  801f8c:	00006806 	br	802130 <put_fat+0x35c>

      case FS_FAT16 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
  801f90:	e0bffd17 	ldw	r2,-12(fp)
  801f94:	10c00817 	ldw	r3,32(r2)
  801f98:	e0bffe17 	ldw	r2,-8(fp)
  801f9c:	1004d23a 	srli	r2,r2,8
  801fa0:	1885883a 	add	r2,r3,r2
  801fa4:	100b883a 	mov	r5,r2
  801fa8:	e13ffd17 	ldw	r4,-12(fp)
  801fac:	080175c0 	call	80175c <move_window>
  801fb0:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  801fb4:	e0bffa17 	ldw	r2,-24(fp)
  801fb8:	10005a1e 	bne	r2,zero,802124 <put_fat+0x350>
         p = &fs->win[clst * 2 % SS(fs)];
  801fbc:	e0bffe17 	ldw	r2,-8(fp)
  801fc0:	1085883a 	add	r2,r2,r2
  801fc4:	10807f8c 	andi	r2,r2,510
  801fc8:	10800c04 	addi	r2,r2,48
  801fcc:	e0fffd17 	ldw	r3,-12(fp)
  801fd0:	1885883a 	add	r2,r3,r2
  801fd4:	e0bffc15 	stw	r2,-16(fp)
         ST_WORD(p, (uint16_t)val);
  801fd8:	e0bfff17 	ldw	r2,-4(fp)
  801fdc:	1007883a 	mov	r3,r2
  801fe0:	e0bffc17 	ldw	r2,-16(fp)
  801fe4:	10c00005 	stb	r3,0(r2)
  801fe8:	e0bffc17 	ldw	r2,-16(fp)
  801fec:	10800044 	addi	r2,r2,1
  801ff0:	e0ffff17 	ldw	r3,-4(fp)
  801ff4:	18ffffcc 	andi	r3,r3,65535
  801ff8:	1807d23a 	srai	r3,r3,8
  801ffc:	10c00005 	stb	r3,0(r2)
         break;
  802000:	00004b06 	br	802130 <put_fat+0x35c>

      case FS_FAT32 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
  802004:	e0bffd17 	ldw	r2,-12(fp)
  802008:	10c00817 	ldw	r3,32(r2)
  80200c:	e0bffe17 	ldw	r2,-8(fp)
  802010:	1004d1fa 	srli	r2,r2,7
  802014:	1885883a 	add	r2,r3,r2
  802018:	100b883a 	mov	r5,r2
  80201c:	e13ffd17 	ldw	r4,-12(fp)
  802020:	080175c0 	call	80175c <move_window>
  802024:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
  802028:	e0bffa17 	ldw	r2,-24(fp)
  80202c:	10003f1e 	bne	r2,zero,80212c <put_fat+0x358>
         p = &fs->win[clst * 4 % SS(fs)];
  802030:	e0bffe17 	ldw	r2,-8(fp)
  802034:	1085883a 	add	r2,r2,r2
  802038:	1085883a 	add	r2,r2,r2
  80203c:	10807f0c 	andi	r2,r2,508
  802040:	10800c04 	addi	r2,r2,48
  802044:	e0fffd17 	ldw	r3,-12(fp)
  802048:	1885883a 	add	r2,r3,r2
  80204c:	e0bffc15 	stw	r2,-16(fp)
         val |= LD_DWORD(p) & 0xF0000000;
  802050:	e0bffc17 	ldw	r2,-16(fp)
  802054:	108000c4 	addi	r2,r2,3
  802058:	10800003 	ldbu	r2,0(r2)
  80205c:	10803fcc 	andi	r2,r2,255
  802060:	1006963a 	slli	r3,r2,24
  802064:	e0bffc17 	ldw	r2,-16(fp)
  802068:	10800084 	addi	r2,r2,2
  80206c:	10800003 	ldbu	r2,0(r2)
  802070:	10803fcc 	andi	r2,r2,255
  802074:	1004943a 	slli	r2,r2,16
  802078:	1884b03a 	or	r2,r3,r2
  80207c:	e0fffc17 	ldw	r3,-16(fp)
  802080:	18c00044 	addi	r3,r3,1
  802084:	18c00003 	ldbu	r3,0(r3)
  802088:	18c03fcc 	andi	r3,r3,255
  80208c:	1806923a 	slli	r3,r3,8
  802090:	10c6b03a 	or	r3,r2,r3
  802094:	e0bffc17 	ldw	r2,-16(fp)
  802098:	10800003 	ldbu	r2,0(r2)
  80209c:	10803fcc 	andi	r2,r2,255
  8020a0:	1884b03a 	or	r2,r3,r2
  8020a4:	10bc002c 	andhi	r2,r2,61440
  8020a8:	e0ffff17 	ldw	r3,-4(fp)
  8020ac:	1884b03a 	or	r2,r3,r2
  8020b0:	e0bfff15 	stw	r2,-4(fp)
         ST_DWORD(p, val);
  8020b4:	e0bfff17 	ldw	r2,-4(fp)
  8020b8:	1007883a 	mov	r3,r2
  8020bc:	e0bffc17 	ldw	r2,-16(fp)
  8020c0:	10c00005 	stb	r3,0(r2)
  8020c4:	e0bffc17 	ldw	r2,-16(fp)
  8020c8:	10800044 	addi	r2,r2,1
  8020cc:	e0ffff17 	ldw	r3,-4(fp)
  8020d0:	18ffffcc 	andi	r3,r3,65535
  8020d4:	1807d23a 	srai	r3,r3,8
  8020d8:	10c00005 	stb	r3,0(r2)
  8020dc:	e0bffc17 	ldw	r2,-16(fp)
  8020e0:	10800084 	addi	r2,r2,2
  8020e4:	e0ffff17 	ldw	r3,-4(fp)
  8020e8:	1806d43a 	srli	r3,r3,16
  8020ec:	10c00005 	stb	r3,0(r2)
  8020f0:	e0bffc17 	ldw	r2,-16(fp)
  8020f4:	108000c4 	addi	r2,r2,3
  8020f8:	e0ffff17 	ldw	r3,-4(fp)
  8020fc:	1806d63a 	srli	r3,r3,24
  802100:	10c00005 	stb	r3,0(r2)
         break;
  802104:	00000a06 	br	802130 <put_fat+0x35c>

      default :
         res = FR_INT_ERR;
  802108:	00800084 	movi	r2,2
  80210c:	e0bffa15 	stw	r2,-24(fp)
  802110:	00000706 	br	802130 <put_fat+0x35c>
   } else {
      switch (fs->fs_type) {
      case FS_FAT12 :
         bc = clst; bc += bc / 2;
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
         if (res != FR_OK) break;
  802114:	0001883a 	nop
  802118:	00000506 	br	802130 <put_fat+0x35c>
         p = &fs->win[bc % SS(fs)];
         *p = (clst & 1) ? ((*p & 0x0F) | ((uint8_t)val << 4)) : (uint8_t)val;
         bc++;
         fs->wflag = 1;
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
         if (res != FR_OK) break;
  80211c:	0001883a 	nop
  802120:	00000306 	br	802130 <put_fat+0x35c>
         *p = (clst & 1) ? (uint8_t)(val >> 4) : ((*p & 0xF0) | ((uint8_t)(val >> 8) & 0x0F));
         break;

      case FS_FAT16 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
         if (res != FR_OK) break;
  802124:	0001883a 	nop
  802128:	00000106 	br	802130 <put_fat+0x35c>
         ST_WORD(p, (uint16_t)val);
         break;

      case FS_FAT32 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
         if (res != FR_OK) break;
  80212c:	0001883a 	nop
         break;

      default :
         res = FR_INT_ERR;
      }
      fs->wflag = 1;
  802130:	e0bffd17 	ldw	r2,-12(fp)
  802134:	00c00044 	movi	r3,1
  802138:	10c00105 	stb	r3,4(r2)
   }

   return res;
  80213c:	e0bffa17 	ldw	r2,-24(fp)
}
  802140:	e037883a 	mov	sp,fp
  802144:	dfc00117 	ldw	ra,4(sp)
  802148:	df000017 	ldw	fp,0(sp)
  80214c:	dec00204 	addi	sp,sp,8
  802150:	f800283a 	ret

00802154 <remove_chain>:
static
FRESULT remove_chain (
   FATFS *fs,        /* File system object */
   uint32_t clst        /* Cluster# to remove a chain from */
)
{
  802154:	defffa04 	addi	sp,sp,-24
  802158:	dfc00515 	stw	ra,20(sp)
  80215c:	df000415 	stw	fp,16(sp)
  802160:	df000404 	addi	fp,sp,16
  802164:	e13ffe15 	stw	r4,-8(fp)
  802168:	e17fff15 	stw	r5,-4(fp)
   uint32_t nxt;
#if _USE_ERASE
   uint32_t scl = clst, ecl = clst, resion[2];
#endif

   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
  80216c:	e0bfff17 	ldw	r2,-4(fp)
  802170:	108000b0 	cmpltui	r2,r2,2
  802174:	1000041e 	bne	r2,zero,802188 <remove_chain+0x34>
  802178:	e0bffe17 	ldw	r2,-8(fp)
  80217c:	10800617 	ldw	r2,24(r2)
  802180:	e0ffff17 	ldw	r3,-4(fp)
  802184:	18800336 	bltu	r3,r2,802194 <remove_chain+0x40>
      res = FR_INT_ERR;
  802188:	00800084 	movi	r2,2
  80218c:	e0bffc15 	stw	r2,-16(fp)
  802190:	00003106 	br	802258 <remove_chain+0x104>

   } else {
      res = FR_OK;
  802194:	e03ffc15 	stw	zero,-16(fp)
      while (clst < fs->n_fatent) {       /* Not a last link? */
  802198:	00002706 	br	802238 <remove_chain+0xe4>
         nxt = get_fat(fs, clst);         /* Get cluster status */
  80219c:	e17fff17 	ldw	r5,-4(fp)
  8021a0:	e13ffe17 	ldw	r4,-8(fp)
  8021a4:	0801b440 	call	801b44 <get_fat>
  8021a8:	e0bffd15 	stw	r2,-12(fp)
         if (nxt == 0) break;          /* Empty cluster? */
  8021ac:	e0bffd17 	ldw	r2,-12(fp)
  8021b0:	10002626 	beq	r2,zero,80224c <remove_chain+0xf8>
         if (nxt == 1) { res = FR_INT_ERR; break; }   /* Internal error? */
  8021b4:	e0bffd17 	ldw	r2,-12(fp)
  8021b8:	10800058 	cmpnei	r2,r2,1
  8021bc:	1000031e 	bne	r2,zero,8021cc <remove_chain+0x78>
  8021c0:	00800084 	movi	r2,2
  8021c4:	e0bffc15 	stw	r2,-16(fp)
  8021c8:	00002306 	br	802258 <remove_chain+0x104>
         if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }  /* Disk error? */
  8021cc:	e0bffd17 	ldw	r2,-12(fp)
  8021d0:	10bfffd8 	cmpnei	r2,r2,-1
  8021d4:	1000031e 	bne	r2,zero,8021e4 <remove_chain+0x90>
  8021d8:	00800044 	movi	r2,1
  8021dc:	e0bffc15 	stw	r2,-16(fp)
  8021e0:	00001d06 	br	802258 <remove_chain+0x104>
         res = put_fat(fs, clst, 0);         /* Mark the cluster "empty" */
  8021e4:	000d883a 	mov	r6,zero
  8021e8:	e17fff17 	ldw	r5,-4(fp)
  8021ec:	e13ffe17 	ldw	r4,-8(fp)
  8021f0:	0801dd40 	call	801dd4 <put_fat>
  8021f4:	e0bffc15 	stw	r2,-16(fp)
         if (res != FR_OK) break;
  8021f8:	e0bffc17 	ldw	r2,-16(fp)
  8021fc:	1000151e 	bne	r2,zero,802254 <remove_chain+0x100>
         if (fs->free_clust != 0xFFFFFFFF) { /* Update FSInfo */
  802200:	e0bffe17 	ldw	r2,-8(fp)
  802204:	10800417 	ldw	r2,16(r2)
  802208:	10bfffe0 	cmpeqi	r2,r2,-1
  80220c:	1000081e 	bne	r2,zero,802230 <remove_chain+0xdc>
            fs->free_clust++;
  802210:	e0bffe17 	ldw	r2,-8(fp)
  802214:	10800417 	ldw	r2,16(r2)
  802218:	10c00044 	addi	r3,r2,1
  80221c:	e0bffe17 	ldw	r2,-8(fp)
  802220:	10c00415 	stw	r3,16(r2)
            fs->fsi_flag = 1;
  802224:	e0bffe17 	ldw	r2,-8(fp)
  802228:	00c00044 	movi	r3,1
  80222c:	10c00145 	stb	r3,5(r2)
            resion[1] = clust2sect(fs, ecl) + fs->csize - 1;   /* End sector */
            disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);    /* Erase the block */
            scl = ecl = nxt;
         }
#endif
         clst = nxt; /* Next cluster */
  802230:	e0bffd17 	ldw	r2,-12(fp)
  802234:	e0bfff15 	stw	r2,-4(fp)
   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
      res = FR_INT_ERR;

   } else {
      res = FR_OK;
      while (clst < fs->n_fatent) {       /* Not a last link? */
  802238:	e0bffe17 	ldw	r2,-8(fp)
  80223c:	10800617 	ldw	r2,24(r2)
  802240:	e0ffff17 	ldw	r3,-4(fp)
  802244:	18bfd536 	bltu	r3,r2,80219c <__alt_data_end+0xff80219c>
  802248:	00000306 	br	802258 <remove_chain+0x104>
         nxt = get_fat(fs, clst);         /* Get cluster status */
         if (nxt == 0) break;          /* Empty cluster? */
  80224c:	0001883a 	nop
  802250:	00000106 	br	802258 <remove_chain+0x104>
         if (nxt == 1) { res = FR_INT_ERR; break; }   /* Internal error? */
         if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }  /* Disk error? */
         res = put_fat(fs, clst, 0);         /* Mark the cluster "empty" */
         if (res != FR_OK) break;
  802254:	0001883a 	nop
#endif
         clst = nxt; /* Next cluster */
      }
   }

   return res;
  802258:	e0bffc17 	ldw	r2,-16(fp)
}
  80225c:	e037883a 	mov	sp,fp
  802260:	dfc00117 	ldw	ra,4(sp)
  802264:	df000017 	ldw	fp,0(sp)
  802268:	dec00204 	addi	sp,sp,8
  80226c:	f800283a 	ret

00802270 <create_chain>:
static
uint32_t create_chain ( /* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
   FATFS *fs,        /* File system object */
   uint32_t clst        /* Cluster# to stretch. 0 means create a new chain. */
)
{
  802270:	defff804 	addi	sp,sp,-32
  802274:	dfc00715 	stw	ra,28(sp)
  802278:	df000615 	stw	fp,24(sp)
  80227c:	df000604 	addi	fp,sp,24
  802280:	e13ffe15 	stw	r4,-8(fp)
  802284:	e17fff15 	stw	r5,-4(fp)
   uint32_t cs, ncl, scl;
   FRESULT res;


   if (clst == 0) {     /* Create a new chain */
  802288:	e0bfff17 	ldw	r2,-4(fp)
  80228c:	10000c1e 	bne	r2,zero,8022c0 <create_chain+0x50>
      scl = fs->last_clust;         /* Get suggested start point */
  802290:	e0bffe17 	ldw	r2,-8(fp)
  802294:	10800317 	ldw	r2,12(r2)
  802298:	e0bffb15 	stw	r2,-20(fp)
      if (!scl || scl >= fs->n_fatent) scl = 1;
  80229c:	e0bffb17 	ldw	r2,-20(fp)
  8022a0:	10000426 	beq	r2,zero,8022b4 <create_chain+0x44>
  8022a4:	e0bffe17 	ldw	r2,-8(fp)
  8022a8:	10800617 	ldw	r2,24(r2)
  8022ac:	e0fffb17 	ldw	r3,-20(fp)
  8022b0:	18801436 	bltu	r3,r2,802304 <create_chain+0x94>
  8022b4:	00800044 	movi	r2,1
  8022b8:	e0bffb15 	stw	r2,-20(fp)
  8022bc:	00001106 	br	802304 <create_chain+0x94>
   }
   else {               /* Stretch the current chain */
      cs = get_fat(fs, clst);       /* Check the cluster status */
  8022c0:	e17fff17 	ldw	r5,-4(fp)
  8022c4:	e13ffe17 	ldw	r4,-8(fp)
  8022c8:	0801b440 	call	801b44 <get_fat>
  8022cc:	e0bffd15 	stw	r2,-12(fp)
      if (cs < 2) return 1;         /* It is an invalid cluster */
  8022d0:	e0bffd17 	ldw	r2,-12(fp)
  8022d4:	108000a8 	cmpgeui	r2,r2,2
  8022d8:	1000021e 	bne	r2,zero,8022e4 <create_chain+0x74>
  8022dc:	00800044 	movi	r2,1
  8022e0:	00005506 	br	802438 <create_chain+0x1c8>
      if (cs < fs->n_fatent) return cs;   /* It is already followed by next cluster */
  8022e4:	e0bffe17 	ldw	r2,-8(fp)
  8022e8:	10800617 	ldw	r2,24(r2)
  8022ec:	e0fffd17 	ldw	r3,-12(fp)
  8022f0:	1880022e 	bgeu	r3,r2,8022fc <create_chain+0x8c>
  8022f4:	e0bffd17 	ldw	r2,-12(fp)
  8022f8:	00004f06 	br	802438 <create_chain+0x1c8>
      scl = clst;
  8022fc:	e0bfff17 	ldw	r2,-4(fp)
  802300:	e0bffb15 	stw	r2,-20(fp)
   }

   ncl = scl;           /* Start cluster */
  802304:	e0bffb17 	ldw	r2,-20(fp)
  802308:	e0bffa15 	stw	r2,-24(fp)
   for (;;) {
      ncl++;                     /* Next cluster */
  80230c:	e0bffa17 	ldw	r2,-24(fp)
  802310:	10800044 	addi	r2,r2,1
  802314:	e0bffa15 	stw	r2,-24(fp)
      if (ncl >= fs->n_fatent) {    /* Wrap around */
  802318:	e0bffe17 	ldw	r2,-8(fp)
  80231c:	10800617 	ldw	r2,24(r2)
  802320:	e0fffa17 	ldw	r3,-24(fp)
  802324:	18800736 	bltu	r3,r2,802344 <create_chain+0xd4>
         ncl = 2;
  802328:	00800084 	movi	r2,2
  80232c:	e0bffa15 	stw	r2,-24(fp)
         if (ncl > scl) return 0;   /* No free cluster */
  802330:	e0bffa17 	ldw	r2,-24(fp)
  802334:	e0fffb17 	ldw	r3,-20(fp)
  802338:	1880022e 	bgeu	r3,r2,802344 <create_chain+0xd4>
  80233c:	0005883a 	mov	r2,zero
  802340:	00003d06 	br	802438 <create_chain+0x1c8>
      }
      cs = get_fat(fs, ncl);        /* Get the cluster status */
  802344:	e17ffa17 	ldw	r5,-24(fp)
  802348:	e13ffe17 	ldw	r4,-8(fp)
  80234c:	0801b440 	call	801b44 <get_fat>
  802350:	e0bffd15 	stw	r2,-12(fp)
      if (cs == 0) break;           /* Found a free cluster */
  802354:	e0bffd17 	ldw	r2,-12(fp)
  802358:	10000d26 	beq	r2,zero,802390 <create_chain+0x120>
      if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
  80235c:	e0bffd17 	ldw	r2,-12(fp)
  802360:	10bfffe0 	cmpeqi	r2,r2,-1
  802364:	1000031e 	bne	r2,zero,802374 <create_chain+0x104>
  802368:	e0bffd17 	ldw	r2,-12(fp)
  80236c:	10800058 	cmpnei	r2,r2,1
  802370:	1000021e 	bne	r2,zero,80237c <create_chain+0x10c>
         return cs;
  802374:	e0bffd17 	ldw	r2,-12(fp)
  802378:	00002f06 	br	802438 <create_chain+0x1c8>
      if (ncl == scl) return 0;     /* No free cluster */
  80237c:	e0fffa17 	ldw	r3,-24(fp)
  802380:	e0bffb17 	ldw	r2,-20(fp)
  802384:	18bfe11e 	bne	r3,r2,80230c <__alt_data_end+0xff80230c>
  802388:	0005883a 	mov	r2,zero
  80238c:	00002a06 	br	802438 <create_chain+0x1c8>
      if (ncl >= fs->n_fatent) {    /* Wrap around */
         ncl = 2;
         if (ncl > scl) return 0;   /* No free cluster */
      }
      cs = get_fat(fs, ncl);        /* Get the cluster status */
      if (cs == 0) break;           /* Found a free cluster */
  802390:	0001883a 	nop
      if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
         return cs;
      if (ncl == scl) return 0;     /* No free cluster */
   }

   res = put_fat(fs, ncl, 0x0FFFFFFF); /* Mark the new cluster "last link" */
  802394:	01840034 	movhi	r6,4096
  802398:	31bfffc4 	addi	r6,r6,-1
  80239c:	e17ffa17 	ldw	r5,-24(fp)
  8023a0:	e13ffe17 	ldw	r4,-8(fp)
  8023a4:	0801dd40 	call	801dd4 <put_fat>
  8023a8:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK && clst != 0) {
  8023ac:	e0bffc17 	ldw	r2,-16(fp)
  8023b0:	1000071e 	bne	r2,zero,8023d0 <create_chain+0x160>
  8023b4:	e0bfff17 	ldw	r2,-4(fp)
  8023b8:	10000526 	beq	r2,zero,8023d0 <create_chain+0x160>
      res = put_fat(fs, clst, ncl); /* Link it to the previous one if needed */
  8023bc:	e1bffa17 	ldw	r6,-24(fp)
  8023c0:	e17fff17 	ldw	r5,-4(fp)
  8023c4:	e13ffe17 	ldw	r4,-8(fp)
  8023c8:	0801dd40 	call	801dd4 <put_fat>
  8023cc:	e0bffc15 	stw	r2,-16(fp)
   }
   if (res == FR_OK) {
  8023d0:	e0bffc17 	ldw	r2,-16(fp)
  8023d4:	1000101e 	bne	r2,zero,802418 <create_chain+0x1a8>
      fs->last_clust = ncl;         /* Update FSINFO */
  8023d8:	e0bffe17 	ldw	r2,-8(fp)
  8023dc:	e0fffa17 	ldw	r3,-24(fp)
  8023e0:	10c00315 	stw	r3,12(r2)
      if (fs->free_clust != 0xFFFFFFFF) {
  8023e4:	e0bffe17 	ldw	r2,-8(fp)
  8023e8:	10800417 	ldw	r2,16(r2)
  8023ec:	10bfffe0 	cmpeqi	r2,r2,-1
  8023f0:	1000101e 	bne	r2,zero,802434 <create_chain+0x1c4>
         fs->free_clust--;
  8023f4:	e0bffe17 	ldw	r2,-8(fp)
  8023f8:	10800417 	ldw	r2,16(r2)
  8023fc:	10ffffc4 	addi	r3,r2,-1
  802400:	e0bffe17 	ldw	r2,-8(fp)
  802404:	10c00415 	stw	r3,16(r2)
         fs->fsi_flag = 1;
  802408:	e0bffe17 	ldw	r2,-8(fp)
  80240c:	00c00044 	movi	r3,1
  802410:	10c00145 	stb	r3,5(r2)
  802414:	00000706 	br	802434 <create_chain+0x1c4>
      }
   } else {
      ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
  802418:	e0bffc17 	ldw	r2,-16(fp)
  80241c:	10800058 	cmpnei	r2,r2,1
  802420:	1000021e 	bne	r2,zero,80242c <create_chain+0x1bc>
  802424:	00bfffc4 	movi	r2,-1
  802428:	00000106 	br	802430 <create_chain+0x1c0>
  80242c:	00800044 	movi	r2,1
  802430:	e0bffa15 	stw	r2,-24(fp)
   }

   return ncl;    /* Return new cluster number or error code */
  802434:	e0bffa17 	ldw	r2,-24(fp)
}
  802438:	e037883a 	mov	sp,fp
  80243c:	dfc00117 	ldw	ra,4(sp)
  802440:	df000017 	ldw	fp,0(sp)
  802444:	dec00204 	addi	sp,sp,8
  802448:	f800283a 	ret

0080244c <dir_sdi>:
static
FRESULT dir_sdi (
   DIR *dj,    /* Pointer to directory object */
   uint16_t idx    /* Directory index number */
)
{
  80244c:	defffa04 	addi	sp,sp,-24
  802450:	dfc00515 	stw	ra,20(sp)
  802454:	df000415 	stw	fp,16(sp)
  802458:	df000404 	addi	fp,sp,16
  80245c:	e13ffe15 	stw	r4,-8(fp)
  802460:	2805883a 	mov	r2,r5
  802464:	e0bfff0d 	sth	r2,-4(fp)
   uint32_t clst;
   uint16_t ic;


   dj->index = idx;
  802468:	e0bffe17 	ldw	r2,-8(fp)
  80246c:	e0ffff0b 	ldhu	r3,-4(fp)
  802470:	10c0018d 	sth	r3,6(r2)
   clst = dj->sclust;
  802474:	e0bffe17 	ldw	r2,-8(fp)
  802478:	10800217 	ldw	r2,8(r2)
  80247c:	e0bffc15 	stw	r2,-16(fp)
   if (clst == 1 || clst >= dj->fs->n_fatent)   /* Check start cluster range */
  802480:	e0bffc17 	ldw	r2,-16(fp)
  802484:	10800060 	cmpeqi	r2,r2,1
  802488:	1000051e 	bne	r2,zero,8024a0 <dir_sdi+0x54>
  80248c:	e0bffe17 	ldw	r2,-8(fp)
  802490:	10800017 	ldw	r2,0(r2)
  802494:	10800617 	ldw	r2,24(r2)
  802498:	e0fffc17 	ldw	r3,-16(fp)
  80249c:	18800236 	bltu	r3,r2,8024a8 <dir_sdi+0x5c>
      return FR_INT_ERR;
  8024a0:	00800084 	movi	r2,2
  8024a4:	00005f06 	br	802624 <dir_sdi+0x1d8>
   if (!clst && dj->fs->fs_type == FS_FAT32) /* Replace cluster# 0 with root cluster# if in FAT32 */
  8024a8:	e0bffc17 	ldw	r2,-16(fp)
  8024ac:	10000a1e 	bne	r2,zero,8024d8 <dir_sdi+0x8c>
  8024b0:	e0bffe17 	ldw	r2,-8(fp)
  8024b4:	10800017 	ldw	r2,0(r2)
  8024b8:	10800003 	ldbu	r2,0(r2)
  8024bc:	10803fcc 	andi	r2,r2,255
  8024c0:	108000d8 	cmpnei	r2,r2,3
  8024c4:	1000041e 	bne	r2,zero,8024d8 <dir_sdi+0x8c>
      clst = dj->fs->dirbase;
  8024c8:	e0bffe17 	ldw	r2,-8(fp)
  8024cc:	10800017 	ldw	r2,0(r2)
  8024d0:	10800917 	ldw	r2,36(r2)
  8024d4:	e0bffc15 	stw	r2,-16(fp)

   if (clst == 0) {  /* Static table (root-dir in FAT12/16) */
  8024d8:	e0bffc17 	ldw	r2,-16(fp)
  8024dc:	1000151e 	bne	r2,zero,802534 <dir_sdi+0xe8>
      dj->clust = clst;
  8024e0:	e0bffe17 	ldw	r2,-8(fp)
  8024e4:	e0fffc17 	ldw	r3,-16(fp)
  8024e8:	10c00315 	stw	r3,12(r2)
      if (idx >= dj->fs->n_rootdir)    /* Index is out of range */
  8024ec:	e0bffe17 	ldw	r2,-8(fp)
  8024f0:	10800017 	ldw	r2,0(r2)
  8024f4:	1080020b 	ldhu	r2,8(r2)
  8024f8:	10bfffcc 	andi	r2,r2,65535
  8024fc:	e0ffff0b 	ldhu	r3,-4(fp)
  802500:	18800236 	bltu	r3,r2,80250c <dir_sdi+0xc0>
         return FR_INT_ERR;
  802504:	00800084 	movi	r2,2
  802508:	00004606 	br	802624 <dir_sdi+0x1d8>
      dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
  80250c:	e0bffe17 	ldw	r2,-8(fp)
  802510:	10800017 	ldw	r2,0(r2)
  802514:	10c00917 	ldw	r3,36(r2)
  802518:	e0bfff0b 	ldhu	r2,-4(fp)
  80251c:	1004d13a 	srli	r2,r2,4
  802520:	10bfffcc 	andi	r2,r2,65535
  802524:	1887883a 	add	r3,r3,r2
  802528:	e0bffe17 	ldw	r2,-8(fp)
  80252c:	10c00415 	stw	r3,16(r2)
  802530:	00003206 	br	8025fc <dir_sdi+0x1b0>
   }
   else {            /* Dynamic table (sub-dirs or root-dir in FAT32) */
      ic = SS(dj->fs) / SZ_DIR * dj->fs->csize; /* Entries per cluster */
  802534:	e0bffe17 	ldw	r2,-8(fp)
  802538:	10800017 	ldw	r2,0(r2)
  80253c:	10800083 	ldbu	r2,2(r2)
  802540:	10803fcc 	andi	r2,r2,255
  802544:	1004913a 	slli	r2,r2,4
  802548:	e0bffd0d 	sth	r2,-12(fp)
      while (idx >= ic) {  /* Follow cluster chain */
  80254c:	00001906 	br	8025b4 <dir_sdi+0x168>
         clst = get_fat(dj->fs, clst);          /* Get next cluster */
  802550:	e0bffe17 	ldw	r2,-8(fp)
  802554:	10800017 	ldw	r2,0(r2)
  802558:	e17ffc17 	ldw	r5,-16(fp)
  80255c:	1009883a 	mov	r4,r2
  802560:	0801b440 	call	801b44 <get_fat>
  802564:	e0bffc15 	stw	r2,-16(fp)
         if (clst == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error */
  802568:	e0bffc17 	ldw	r2,-16(fp)
  80256c:	10bfffd8 	cmpnei	r2,r2,-1
  802570:	1000021e 	bne	r2,zero,80257c <dir_sdi+0x130>
  802574:	00800044 	movi	r2,1
  802578:	00002a06 	br	802624 <dir_sdi+0x1d8>
         if (clst < 2 || clst >= dj->fs->n_fatent) /* Reached to end of table or int error */
  80257c:	e0bffc17 	ldw	r2,-16(fp)
  802580:	108000b0 	cmpltui	r2,r2,2
  802584:	1000051e 	bne	r2,zero,80259c <dir_sdi+0x150>
  802588:	e0bffe17 	ldw	r2,-8(fp)
  80258c:	10800017 	ldw	r2,0(r2)
  802590:	10800617 	ldw	r2,24(r2)
  802594:	e0fffc17 	ldw	r3,-16(fp)
  802598:	18800236 	bltu	r3,r2,8025a4 <dir_sdi+0x158>
            return FR_INT_ERR;
  80259c:	00800084 	movi	r2,2
  8025a0:	00002006 	br	802624 <dir_sdi+0x1d8>
         idx -= ic;
  8025a4:	e0ffff0b 	ldhu	r3,-4(fp)
  8025a8:	e0bffd0b 	ldhu	r2,-12(fp)
  8025ac:	1885c83a 	sub	r2,r3,r2
  8025b0:	e0bfff0d 	sth	r2,-4(fp)
         return FR_INT_ERR;
      dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
   }
   else {            /* Dynamic table (sub-dirs or root-dir in FAT32) */
      ic = SS(dj->fs) / SZ_DIR * dj->fs->csize; /* Entries per cluster */
      while (idx >= ic) {  /* Follow cluster chain */
  8025b4:	e0ffff0b 	ldhu	r3,-4(fp)
  8025b8:	e0bffd0b 	ldhu	r2,-12(fp)
  8025bc:	18bfe42e 	bgeu	r3,r2,802550 <__alt_data_end+0xff802550>
         if (clst == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error */
         if (clst < 2 || clst >= dj->fs->n_fatent) /* Reached to end of table or int error */
            return FR_INT_ERR;
         idx -= ic;
      }
      dj->clust = clst;
  8025c0:	e0bffe17 	ldw	r2,-8(fp)
  8025c4:	e0fffc17 	ldw	r3,-16(fp)
  8025c8:	10c00315 	stw	r3,12(r2)
      dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
  8025cc:	e0bffe17 	ldw	r2,-8(fp)
  8025d0:	10800017 	ldw	r2,0(r2)
  8025d4:	e17ffc17 	ldw	r5,-16(fp)
  8025d8:	1009883a 	mov	r4,r2
  8025dc:	0801ad80 	call	801ad8 <clust2sect>
  8025e0:	1007883a 	mov	r3,r2
  8025e4:	e0bfff0b 	ldhu	r2,-4(fp)
  8025e8:	1004d13a 	srli	r2,r2,4
  8025ec:	10bfffcc 	andi	r2,r2,65535
  8025f0:	1887883a 	add	r3,r3,r2
  8025f4:	e0bffe17 	ldw	r2,-8(fp)
  8025f8:	10c00415 	stw	r3,16(r2)
   }

   dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;   /* Ptr to the entry in the sector */
  8025fc:	e0bffe17 	ldw	r2,-8(fp)
  802600:	10800017 	ldw	r2,0(r2)
  802604:	10c00c04 	addi	r3,r2,48
  802608:	e0bfff0b 	ldhu	r2,-4(fp)
  80260c:	108003cc 	andi	r2,r2,15
  802610:	1004917a 	slli	r2,r2,5
  802614:	1887883a 	add	r3,r3,r2
  802618:	e0bffe17 	ldw	r2,-8(fp)
  80261c:	10c00515 	stw	r3,20(r2)

   return FR_OK;  /* Seek succeeded */
  802620:	0005883a 	mov	r2,zero
}
  802624:	e037883a 	mov	sp,fp
  802628:	dfc00117 	ldw	ra,4(sp)
  80262c:	df000017 	ldw	fp,0(sp)
  802630:	dec00204 	addi	sp,sp,8
  802634:	f800283a 	ret

00802638 <dir_next>:
static
FRESULT dir_next (   /* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
   DIR *dj,    /* Pointer to directory object */
   int stretch    /* 0: Do not stretch table, 1: Stretch table if needed */
)
{
  802638:	defff904 	addi	sp,sp,-28
  80263c:	dfc00615 	stw	ra,24(sp)
  802640:	df000515 	stw	fp,20(sp)
  802644:	dc000415 	stw	r16,16(sp)
  802648:	df000504 	addi	fp,sp,20
  80264c:	e13ffd15 	stw	r4,-12(fp)
  802650:	e17ffe15 	stw	r5,-8(fp)
   uint16_t i;



   stretch = stretch;      /* To suppress warning on read-only cfg. */
   i = dj->index + 1;
  802654:	e0bffd17 	ldw	r2,-12(fp)
  802658:	1080018b 	ldhu	r2,6(r2)
  80265c:	10800044 	addi	r2,r2,1
  802660:	e0bffc8d 	sth	r2,-14(fp)
   if (!i || !dj->sect) /* Report EOT when index has reached 65535 */
  802664:	e0bffc8b 	ldhu	r2,-14(fp)
  802668:	10000326 	beq	r2,zero,802678 <dir_next+0x40>
  80266c:	e0bffd17 	ldw	r2,-12(fp)
  802670:	10800417 	ldw	r2,16(r2)
  802674:	1000021e 	bne	r2,zero,802680 <dir_next+0x48>
      return FR_NO_FILE;
  802678:	00800104 	movi	r2,4
  80267c:	0000a206 	br	802908 <dir_next+0x2d0>

   if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
  802680:	e0bffc8b 	ldhu	r2,-14(fp)
  802684:	108003cc 	andi	r2,r2,15
  802688:	10bfffcc 	andi	r2,r2,65535
  80268c:	1000911e 	bne	r2,zero,8028d4 <dir_next+0x29c>
      dj->sect++;             /* Next sector */
  802690:	e0bffd17 	ldw	r2,-12(fp)
  802694:	10800417 	ldw	r2,16(r2)
  802698:	10c00044 	addi	r3,r2,1
  80269c:	e0bffd17 	ldw	r2,-12(fp)
  8026a0:	10c00415 	stw	r3,16(r2)

      if (dj->clust == 0) {   /* Static table */
  8026a4:	e0bffd17 	ldw	r2,-12(fp)
  8026a8:	10800317 	ldw	r2,12(r2)
  8026ac:	1000081e 	bne	r2,zero,8026d0 <dir_next+0x98>
         if (i >= dj->fs->n_rootdir)   /* Report EOT when end of table */
  8026b0:	e0bffd17 	ldw	r2,-12(fp)
  8026b4:	10800017 	ldw	r2,0(r2)
  8026b8:	1080020b 	ldhu	r2,8(r2)
  8026bc:	10bfffcc 	andi	r2,r2,65535
  8026c0:	e0fffc8b 	ldhu	r3,-14(fp)
  8026c4:	18808336 	bltu	r3,r2,8028d4 <dir_next+0x29c>
            return FR_NO_FILE;
  8026c8:	00800104 	movi	r2,4
  8026cc:	00008e06 	br	802908 <dir_next+0x2d0>
      }
      else {               /* Dynamic table */
         if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {   /* Cluster changed? */
  8026d0:	e0bffc8b 	ldhu	r2,-14(fp)
  8026d4:	1004d13a 	srli	r2,r2,4
  8026d8:	10bfffcc 	andi	r2,r2,65535
  8026dc:	e0fffd17 	ldw	r3,-12(fp)
  8026e0:	18c00017 	ldw	r3,0(r3)
  8026e4:	18c00083 	ldbu	r3,2(r3)
  8026e8:	18c03fcc 	andi	r3,r3,255
  8026ec:	18ffffc4 	addi	r3,r3,-1
  8026f0:	10c4703a 	and	r2,r2,r3
  8026f4:	1000771e 	bne	r2,zero,8028d4 <dir_next+0x29c>
            clst = get_fat(dj->fs, dj->clust);           /* Get next cluster */
  8026f8:	e0bffd17 	ldw	r2,-12(fp)
  8026fc:	10c00017 	ldw	r3,0(r2)
  802700:	e0bffd17 	ldw	r2,-12(fp)
  802704:	10800317 	ldw	r2,12(r2)
  802708:	100b883a 	mov	r5,r2
  80270c:	1809883a 	mov	r4,r3
  802710:	0801b440 	call	801b44 <get_fat>
  802714:	e0bffb15 	stw	r2,-20(fp)
            if (clst <= 1) return FR_INT_ERR;
  802718:	e0bffb17 	ldw	r2,-20(fp)
  80271c:	108000a8 	cmpgeui	r2,r2,2
  802720:	1000021e 	bne	r2,zero,80272c <dir_next+0xf4>
  802724:	00800084 	movi	r2,2
  802728:	00007706 	br	802908 <dir_next+0x2d0>
            if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  80272c:	e0bffb17 	ldw	r2,-20(fp)
  802730:	10bfffd8 	cmpnei	r2,r2,-1
  802734:	1000021e 	bne	r2,zero,802740 <dir_next+0x108>
  802738:	00800044 	movi	r2,1
  80273c:	00007206 	br	802908 <dir_next+0x2d0>
            if (clst >= dj->fs->n_fatent) {              /* When it reached end of dynamic table */
  802740:	e0bffd17 	ldw	r2,-12(fp)
  802744:	10800017 	ldw	r2,0(r2)
  802748:	10800617 	ldw	r2,24(r2)
  80274c:	e0fffb17 	ldw	r3,-20(fp)
  802750:	18805536 	bltu	r3,r2,8028a8 <dir_next+0x270>
#if !_FS_READONLY
               uint8_t c;
               if (!stretch) return FR_NO_FILE;       /* When do not stretch, report EOT */
  802754:	e0bffe17 	ldw	r2,-8(fp)
  802758:	1000021e 	bne	r2,zero,802764 <dir_next+0x12c>
  80275c:	00800104 	movi	r2,4
  802760:	00006906 	br	802908 <dir_next+0x2d0>
               clst = create_chain(dj->fs, dj->clust);      /* Stretch cluster chain */
  802764:	e0bffd17 	ldw	r2,-12(fp)
  802768:	10c00017 	ldw	r3,0(r2)
  80276c:	e0bffd17 	ldw	r2,-12(fp)
  802770:	10800317 	ldw	r2,12(r2)
  802774:	100b883a 	mov	r5,r2
  802778:	1809883a 	mov	r4,r3
  80277c:	08022700 	call	802270 <create_chain>
  802780:	e0bffb15 	stw	r2,-20(fp)
               if (clst == 0) return FR_DENIED;       /* No free cluster */
  802784:	e0bffb17 	ldw	r2,-20(fp)
  802788:	1000021e 	bne	r2,zero,802794 <dir_next+0x15c>
  80278c:	008001c4 	movi	r2,7
  802790:	00005d06 	br	802908 <dir_next+0x2d0>
               if (clst == 1) return FR_INT_ERR;
  802794:	e0bffb17 	ldw	r2,-20(fp)
  802798:	10800058 	cmpnei	r2,r2,1
  80279c:	1000021e 	bne	r2,zero,8027a8 <dir_next+0x170>
  8027a0:	00800084 	movi	r2,2
  8027a4:	00005806 	br	802908 <dir_next+0x2d0>
               if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
  8027a8:	e0bffb17 	ldw	r2,-20(fp)
  8027ac:	10bfffd8 	cmpnei	r2,r2,-1
  8027b0:	1000021e 	bne	r2,zero,8027bc <dir_next+0x184>
  8027b4:	00800044 	movi	r2,1
  8027b8:	00005306 	br	802908 <dir_next+0x2d0>
               /* Clean-up stretched table */
               if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
  8027bc:	e0bffd17 	ldw	r2,-12(fp)
  8027c0:	10800017 	ldw	r2,0(r2)
  8027c4:	000b883a 	mov	r5,zero
  8027c8:	1009883a 	mov	r4,r2
  8027cc:	080175c0 	call	80175c <move_window>
  8027d0:	10000226 	beq	r2,zero,8027dc <dir_next+0x1a4>
  8027d4:	00800044 	movi	r2,1
  8027d8:	00004b06 	br	802908 <dir_next+0x2d0>
               mem_set(dj->fs->win, 0, SS(dj->fs));         /* Clear window buffer */
  8027dc:	e0bffd17 	ldw	r2,-12(fp)
  8027e0:	10800017 	ldw	r2,0(r2)
  8027e4:	10800c04 	addi	r2,r2,48
  8027e8:	01808004 	movi	r6,512
  8027ec:	000b883a 	mov	r5,zero
  8027f0:	1009883a 	mov	r4,r2
  8027f4:	08015f80 	call	8015f8 <mem_set>
               dj->fs->winsect = clust2sect(dj->fs, clst);  /* Cluster start sector */
  8027f8:	e0bffd17 	ldw	r2,-12(fp)
  8027fc:	14000017 	ldw	r16,0(r2)
  802800:	e0bffd17 	ldw	r2,-12(fp)
  802804:	10800017 	ldw	r2,0(r2)
  802808:	e17ffb17 	ldw	r5,-20(fp)
  80280c:	1009883a 	mov	r4,r2
  802810:	0801ad80 	call	801ad8 <clust2sect>
  802814:	80800b15 	stw	r2,44(r16)
               for (c = 0; c < dj->fs->csize; c++) {     /* Fill the new cluster with 0 */
  802818:	e03ffc05 	stb	zero,-16(fp)
  80281c:	00001406 	br	802870 <dir_next+0x238>
                  dj->fs->wflag = 1;
  802820:	e0bffd17 	ldw	r2,-12(fp)
  802824:	10800017 	ldw	r2,0(r2)
  802828:	00c00044 	movi	r3,1
  80282c:	10c00105 	stb	r3,4(r2)
                  if (move_window(dj->fs, 0)) return FR_DISK_ERR;
  802830:	e0bffd17 	ldw	r2,-12(fp)
  802834:	10800017 	ldw	r2,0(r2)
  802838:	000b883a 	mov	r5,zero
  80283c:	1009883a 	mov	r4,r2
  802840:	080175c0 	call	80175c <move_window>
  802844:	10000226 	beq	r2,zero,802850 <dir_next+0x218>
  802848:	00800044 	movi	r2,1
  80284c:	00002e06 	br	802908 <dir_next+0x2d0>
                  dj->fs->winsect++;
  802850:	e0bffd17 	ldw	r2,-12(fp)
  802854:	10800017 	ldw	r2,0(r2)
  802858:	10c00b17 	ldw	r3,44(r2)
  80285c:	18c00044 	addi	r3,r3,1
  802860:	10c00b15 	stw	r3,44(r2)
               if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
               /* Clean-up stretched table */
               if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
               mem_set(dj->fs->win, 0, SS(dj->fs));         /* Clear window buffer */
               dj->fs->winsect = clust2sect(dj->fs, clst);  /* Cluster start sector */
               for (c = 0; c < dj->fs->csize; c++) {     /* Fill the new cluster with 0 */
  802864:	e0bffc03 	ldbu	r2,-16(fp)
  802868:	10800044 	addi	r2,r2,1
  80286c:	e0bffc05 	stb	r2,-16(fp)
  802870:	e0bffd17 	ldw	r2,-12(fp)
  802874:	10800017 	ldw	r2,0(r2)
  802878:	10800083 	ldbu	r2,2(r2)
  80287c:	10803fcc 	andi	r2,r2,255
  802880:	e0fffc03 	ldbu	r3,-16(fp)
  802884:	18bfe636 	bltu	r3,r2,802820 <__alt_data_end+0xff802820>
                  dj->fs->wflag = 1;
                  if (move_window(dj->fs, 0)) return FR_DISK_ERR;
                  dj->fs->winsect++;
               }
               dj->fs->winsect -= c;                  /* Rewind window address */
  802888:	e0bffd17 	ldw	r2,-12(fp)
  80288c:	10800017 	ldw	r2,0(r2)
  802890:	e0fffd17 	ldw	r3,-12(fp)
  802894:	18c00017 	ldw	r3,0(r3)
  802898:	19000b17 	ldw	r4,44(r3)
  80289c:	e0fffc03 	ldbu	r3,-16(fp)
  8028a0:	20c7c83a 	sub	r3,r4,r3
  8028a4:	10c00b15 	stw	r3,44(r2)
#else
               return FR_NO_FILE;         /* Report EOT */
#endif
            }
            dj->clust = clst;          /* Initialize data for new cluster */
  8028a8:	e0bffd17 	ldw	r2,-12(fp)
  8028ac:	e0fffb17 	ldw	r3,-20(fp)
  8028b0:	10c00315 	stw	r3,12(r2)
            dj->sect = clust2sect(dj->fs, clst);
  8028b4:	e0bffd17 	ldw	r2,-12(fp)
  8028b8:	10800017 	ldw	r2,0(r2)
  8028bc:	e17ffb17 	ldw	r5,-20(fp)
  8028c0:	1009883a 	mov	r4,r2
  8028c4:	0801ad80 	call	801ad8 <clust2sect>
  8028c8:	1007883a 	mov	r3,r2
  8028cc:	e0bffd17 	ldw	r2,-12(fp)
  8028d0:	10c00415 	stw	r3,16(r2)
         }
      }
   }

   dj->index = i;
  8028d4:	e0bffd17 	ldw	r2,-12(fp)
  8028d8:	e0fffc8b 	ldhu	r3,-14(fp)
  8028dc:	10c0018d 	sth	r3,6(r2)
   dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
  8028e0:	e0bffd17 	ldw	r2,-12(fp)
  8028e4:	10800017 	ldw	r2,0(r2)
  8028e8:	10c00c04 	addi	r3,r2,48
  8028ec:	e0bffc8b 	ldhu	r2,-14(fp)
  8028f0:	108003cc 	andi	r2,r2,15
  8028f4:	1004917a 	slli	r2,r2,5
  8028f8:	1887883a 	add	r3,r3,r2
  8028fc:	e0bffd17 	ldw	r2,-12(fp)
  802900:	10c00515 	stw	r3,20(r2)

   return FR_OK;
  802904:	0005883a 	mov	r2,zero
}
  802908:	e6ffff04 	addi	sp,fp,-4
  80290c:	dfc00217 	ldw	ra,8(sp)
  802910:	df000117 	ldw	fp,4(sp)
  802914:	dc000017 	ldw	r16,0(sp)
  802918:	dec00304 	addi	sp,sp,12
  80291c:	f800283a 	ret

00802920 <dir_find>:

static
FRESULT dir_find (
   DIR *dj        /* Pointer to the directory object linked to the file name */
)
{
  802920:	defffa04 	addi	sp,sp,-24
  802924:	dfc00515 	stw	ra,20(sp)
  802928:	df000415 	stw	fp,16(sp)
  80292c:	df000404 	addi	fp,sp,16
  802930:	e13fff15 	stw	r4,-4(fp)
   uint8_t c, *dir;
#if _USE_LFN
   uint8_t a, ord, sum;
#endif

   res = dir_sdi(dj, 0);         /* Rewind directory object */
  802934:	000b883a 	mov	r5,zero
  802938:	e13fff17 	ldw	r4,-4(fp)
  80293c:	080244c0 	call	80244c <dir_sdi>
  802940:	e0bffc15 	stw	r2,-16(fp)
   if (res != FR_OK) return res;
  802944:	e0bffc17 	ldw	r2,-16(fp)
  802948:	10000226 	beq	r2,zero,802954 <dir_find+0x34>
  80294c:	e0bffc17 	ldw	r2,-16(fp)
  802950:	00002d06 	br	802a08 <dir_find+0xe8>

#if _USE_LFN
   ord = sum = 0xFF;
#endif
   do {
      res = move_window(dj->fs, dj->sect);
  802954:	e0bfff17 	ldw	r2,-4(fp)
  802958:	10c00017 	ldw	r3,0(r2)
  80295c:	e0bfff17 	ldw	r2,-4(fp)
  802960:	10800417 	ldw	r2,16(r2)
  802964:	100b883a 	mov	r5,r2
  802968:	1809883a 	mov	r4,r3
  80296c:	080175c0 	call	80175c <move_window>
  802970:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
  802974:	e0bffc17 	ldw	r2,-16(fp)
  802978:	10001f1e 	bne	r2,zero,8029f8 <dir_find+0xd8>
      dir = dj->dir;             /* Ptr to the directory entry of current index */
  80297c:	e0bfff17 	ldw	r2,-4(fp)
  802980:	10800517 	ldw	r2,20(r2)
  802984:	e0bffd15 	stw	r2,-12(fp)
      c = dir[DIR_Name];
  802988:	e0bffd17 	ldw	r2,-12(fp)
  80298c:	10800003 	ldbu	r2,0(r2)
  802990:	e0bffe05 	stb	r2,-8(fp)
      if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
  802994:	e0bffe03 	ldbu	r2,-8(fp)
  802998:	1000031e 	bne	r2,zero,8029a8 <dir_find+0x88>
  80299c:	00800104 	movi	r2,4
  8029a0:	e0bffc15 	stw	r2,-16(fp)
  8029a4:	00001706 	br	802a04 <dir_find+0xe4>
            ord = 0xFF; dj->lfn_idx = 0xFFFF;   /* Reset LFN sequence */
            if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;  /* SFN matched? */
         }
      }
#else    /* Non LFN configuration */
      if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
  8029a8:	e0bffd17 	ldw	r2,-12(fp)
  8029ac:	108002c4 	addi	r2,r2,11
  8029b0:	10800003 	ldbu	r2,0(r2)
  8029b4:	10803fcc 	andi	r2,r2,255
  8029b8:	1080020c 	andi	r2,r2,8
  8029bc:	1000071e 	bne	r2,zero,8029dc <dir_find+0xbc>
  8029c0:	e0bfff17 	ldw	r2,-4(fp)
  8029c4:	10800617 	ldw	r2,24(r2)
  8029c8:	018002c4 	movi	r6,11
  8029cc:	100b883a 	mov	r5,r2
  8029d0:	e13ffd17 	ldw	r4,-12(fp)
  8029d4:	08016540 	call	801654 <mem_cmp>
  8029d8:	10000926 	beq	r2,zero,802a00 <dir_find+0xe0>
         break;
#endif
      res = dir_next(dj, 0);     /* Next entry */
  8029dc:	000b883a 	mov	r5,zero
  8029e0:	e13fff17 	ldw	r4,-4(fp)
  8029e4:	08026380 	call	802638 <dir_next>
  8029e8:	e0bffc15 	stw	r2,-16(fp)
   } while (res == FR_OK);
  8029ec:	e0bffc17 	ldw	r2,-16(fp)
  8029f0:	103fd826 	beq	r2,zero,802954 <__alt_data_end+0xff802954>
  8029f4:	00000306 	br	802a04 <dir_find+0xe4>
#if _USE_LFN
   ord = sum = 0xFF;
#endif
   do {
      res = move_window(dj->fs, dj->sect);
      if (res != FR_OK) break;
  8029f8:	0001883a 	nop
  8029fc:	00000106 	br	802a04 <dir_find+0xe4>
            if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;  /* SFN matched? */
         }
      }
#else    /* Non LFN configuration */
      if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
         break;
  802a00:	0001883a 	nop
#endif
      res = dir_next(dj, 0);     /* Next entry */
   } while (res == FR_OK);

   return res;
  802a04:	e0bffc17 	ldw	r2,-16(fp)
}
  802a08:	e037883a 	mov	sp,fp
  802a0c:	dfc00117 	ldw	ra,4(sp)
  802a10:	df000017 	ldw	fp,0(sp)
  802a14:	dec00204 	addi	sp,sp,8
  802a18:	f800283a 	ret

00802a1c <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
   DIR *dj        /* Pointer to the directory object that pointing the entry to be read */
)
{
  802a1c:	defffa04 	addi	sp,sp,-24
  802a20:	dfc00515 	stw	ra,20(sp)
  802a24:	df000415 	stw	fp,16(sp)
  802a28:	df000404 	addi	fp,sp,16
  802a2c:	e13fff15 	stw	r4,-4(fp)
   uint8_t c, *dir;
#if _USE_LFN
   uint8_t a, ord = 0xFF, sum = 0xFF;
#endif

   res = FR_NO_FILE;
  802a30:	00800104 	movi	r2,4
  802a34:	e0bffc15 	stw	r2,-16(fp)
   while (dj->sect) {
  802a38:	00002706 	br	802ad8 <dir_read+0xbc>
      res = move_window(dj->fs, dj->sect);
  802a3c:	e0bfff17 	ldw	r2,-4(fp)
  802a40:	10c00017 	ldw	r3,0(r2)
  802a44:	e0bfff17 	ldw	r2,-4(fp)
  802a48:	10800417 	ldw	r2,16(r2)
  802a4c:	100b883a 	mov	r5,r2
  802a50:	1809883a 	mov	r4,r3
  802a54:	080175c0 	call	80175c <move_window>
  802a58:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
  802a5c:	e0bffc17 	ldw	r2,-16(fp)
  802a60:	1000211e 	bne	r2,zero,802ae8 <dir_read+0xcc>
      dir = dj->dir;             /* Ptr to the directory entry of current index */
  802a64:	e0bfff17 	ldw	r2,-4(fp)
  802a68:	10800517 	ldw	r2,20(r2)
  802a6c:	e0bffd15 	stw	r2,-12(fp)
      c = dir[DIR_Name];
  802a70:	e0bffd17 	ldw	r2,-12(fp)
  802a74:	10800003 	ldbu	r2,0(r2)
  802a78:	e0bffe05 	stb	r2,-8(fp)
      if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
  802a7c:	e0bffe03 	ldbu	r2,-8(fp)
  802a80:	1000031e 	bne	r2,zero,802a90 <dir_read+0x74>
  802a84:	00800104 	movi	r2,4
  802a88:	e0bffc15 	stw	r2,-16(fp)
  802a8c:	00001b06 	br	802afc <dir_read+0xe0>
               dj->lfn_idx = 0xFFFF;      /* It has no LFN. */
            break;
         }
      }
#else    /* Non LFN configuration */
      if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))   /* Is it a valid entry? */
  802a90:	e0bffe03 	ldbu	r2,-8(fp)
  802a94:	10803960 	cmpeqi	r2,r2,229
  802a98:	1000091e 	bne	r2,zero,802ac0 <dir_read+0xa4>
  802a9c:	e0bffe03 	ldbu	r2,-8(fp)
  802aa0:	10800ba0 	cmpeqi	r2,r2,46
  802aa4:	1000061e 	bne	r2,zero,802ac0 <dir_read+0xa4>
  802aa8:	e0bffd17 	ldw	r2,-12(fp)
  802aac:	108002c4 	addi	r2,r2,11
  802ab0:	10800003 	ldbu	r2,0(r2)
  802ab4:	10803fcc 	andi	r2,r2,255
  802ab8:	1080020c 	andi	r2,r2,8
  802abc:	10000c26 	beq	r2,zero,802af0 <dir_read+0xd4>
         break;
#endif
      res = dir_next(dj, 0);           /* Next entry */
  802ac0:	000b883a 	mov	r5,zero
  802ac4:	e13fff17 	ldw	r4,-4(fp)
  802ac8:	08026380 	call	802638 <dir_next>
  802acc:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
  802ad0:	e0bffc17 	ldw	r2,-16(fp)
  802ad4:	1000081e 	bne	r2,zero,802af8 <dir_read+0xdc>
#if _USE_LFN
   uint8_t a, ord = 0xFF, sum = 0xFF;
#endif

   res = FR_NO_FILE;
   while (dj->sect) {
  802ad8:	e0bfff17 	ldw	r2,-4(fp)
  802adc:	10800417 	ldw	r2,16(r2)
  802ae0:	103fd61e 	bne	r2,zero,802a3c <__alt_data_end+0xff802a3c>
  802ae4:	00000506 	br	802afc <dir_read+0xe0>
      res = move_window(dj->fs, dj->sect);
      if (res != FR_OK) break;
  802ae8:	0001883a 	nop
  802aec:	00000306 	br	802afc <dir_read+0xe0>
            break;
         }
      }
#else    /* Non LFN configuration */
      if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))   /* Is it a valid entry? */
         break;
  802af0:	0001883a 	nop
  802af4:	00000106 	br	802afc <dir_read+0xe0>
#endif
      res = dir_next(dj, 0);           /* Next entry */
      if (res != FR_OK) break;
  802af8:	0001883a 	nop
   }

   if (res != FR_OK) dj->sect = 0;
  802afc:	e0bffc17 	ldw	r2,-16(fp)
  802b00:	10000226 	beq	r2,zero,802b0c <dir_read+0xf0>
  802b04:	e0bfff17 	ldw	r2,-4(fp)
  802b08:	10000415 	stw	zero,16(r2)

   return res;
  802b0c:	e0bffc17 	ldw	r2,-16(fp)
}
  802b10:	e037883a 	mov	sp,fp
  802b14:	dfc00117 	ldw	ra,4(sp)
  802b18:	df000017 	ldw	fp,0(sp)
  802b1c:	dec00204 	addi	sp,sp,8
  802b20:	f800283a 	ret

00802b24 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (  /* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
   DIR *dj           /* Target directory with object name to be created */
)
{
  802b24:	defffa04 	addi	sp,sp,-24
  802b28:	dfc00515 	stw	ra,20(sp)
  802b2c:	df000415 	stw	fp,16(sp)
  802b30:	df000404 	addi	fp,sp,16
  802b34:	e13fff15 	stw	r4,-4(fp)
         } while (res == FR_OK && --ne);
      }
   }

#else /* Non LFN configuration */
   res = dir_sdi(dj, 0);
  802b38:	000b883a 	mov	r5,zero
  802b3c:	e13fff17 	ldw	r4,-4(fp)
  802b40:	080244c0 	call	80244c <dir_sdi>
  802b44:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK) {
  802b48:	e0bffc17 	ldw	r2,-16(fp)
  802b4c:	10001b1e 	bne	r2,zero,802bbc <dir_register+0x98>
      do {  /* Find a blank entry for the SFN */
         res = move_window(dj->fs, dj->sect);
  802b50:	e0bfff17 	ldw	r2,-4(fp)
  802b54:	10c00017 	ldw	r3,0(r2)
  802b58:	e0bfff17 	ldw	r2,-4(fp)
  802b5c:	10800417 	ldw	r2,16(r2)
  802b60:	100b883a 	mov	r5,r2
  802b64:	1809883a 	mov	r4,r3
  802b68:	080175c0 	call	80175c <move_window>
  802b6c:	e0bffc15 	stw	r2,-16(fp)
         if (res != FR_OK) break;
  802b70:	e0bffc17 	ldw	r2,-16(fp)
  802b74:	1000101e 	bne	r2,zero,802bb8 <dir_register+0x94>
         c = *dj->dir;
  802b78:	e0bfff17 	ldw	r2,-4(fp)
  802b7c:	10800517 	ldw	r2,20(r2)
  802b80:	10800003 	ldbu	r2,0(r2)
  802b84:	e0bffd05 	stb	r2,-12(fp)
         if (c == DDE || c == 0) break;   /* Is it a blank entry? */
  802b88:	e0bffd03 	ldbu	r2,-12(fp)
  802b8c:	10803960 	cmpeqi	r2,r2,229
  802b90:	10000a1e 	bne	r2,zero,802bbc <dir_register+0x98>
  802b94:	e0bffd03 	ldbu	r2,-12(fp)
  802b98:	10000826 	beq	r2,zero,802bbc <dir_register+0x98>
         res = dir_next(dj, 1);        /* Next entry with table stretch */
  802b9c:	01400044 	movi	r5,1
  802ba0:	e13fff17 	ldw	r4,-4(fp)
  802ba4:	08026380 	call	802638 <dir_next>
  802ba8:	e0bffc15 	stw	r2,-16(fp)
      } while (res == FR_OK);
  802bac:	e0bffc17 	ldw	r2,-16(fp)
  802bb0:	103fe726 	beq	r2,zero,802b50 <__alt_data_end+0xff802b50>
  802bb4:	00000106 	br	802bbc <dir_register+0x98>
#else /* Non LFN configuration */
   res = dir_sdi(dj, 0);
   if (res == FR_OK) {
      do {  /* Find a blank entry for the SFN */
         res = move_window(dj->fs, dj->sect);
         if (res != FR_OK) break;
  802bb8:	0001883a 	nop
         res = dir_next(dj, 1);        /* Next entry with table stretch */
      } while (res == FR_OK);
   }
#endif

   if (res == FR_OK) {     /* Initialize the SFN entry */
  802bbc:	e0bffc17 	ldw	r2,-16(fp)
  802bc0:	10001b1e 	bne	r2,zero,802c30 <dir_register+0x10c>
      res = move_window(dj->fs, dj->sect);
  802bc4:	e0bfff17 	ldw	r2,-4(fp)
  802bc8:	10c00017 	ldw	r3,0(r2)
  802bcc:	e0bfff17 	ldw	r2,-4(fp)
  802bd0:	10800417 	ldw	r2,16(r2)
  802bd4:	100b883a 	mov	r5,r2
  802bd8:	1809883a 	mov	r4,r3
  802bdc:	080175c0 	call	80175c <move_window>
  802be0:	e0bffc15 	stw	r2,-16(fp)
      if (res == FR_OK) {
  802be4:	e0bffc17 	ldw	r2,-16(fp)
  802be8:	1000111e 	bne	r2,zero,802c30 <dir_register+0x10c>
         dir = dj->dir;
  802bec:	e0bfff17 	ldw	r2,-4(fp)
  802bf0:	10800517 	ldw	r2,20(r2)
  802bf4:	e0bffe15 	stw	r2,-8(fp)
         mem_set(dir, 0, SZ_DIR);   /* Clean the entry */
  802bf8:	01800804 	movi	r6,32
  802bfc:	000b883a 	mov	r5,zero
  802c00:	e13ffe17 	ldw	r4,-8(fp)
  802c04:	08015f80 	call	8015f8 <mem_set>
         mem_cpy(dir, dj->fn, 11);  /* Put SFN */
  802c08:	e0bfff17 	ldw	r2,-4(fp)
  802c0c:	10800617 	ldw	r2,24(r2)
  802c10:	018002c4 	movi	r6,11
  802c14:	100b883a 	mov	r5,r2
  802c18:	e13ffe17 	ldw	r4,-8(fp)
  802c1c:	08015880 	call	801588 <mem_cpy>
#if _USE_LFN
         dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);   /* Put NT flag */
#endif
         dj->fs->wflag = 1;
  802c20:	e0bfff17 	ldw	r2,-4(fp)
  802c24:	10800017 	ldw	r2,0(r2)
  802c28:	00c00044 	movi	r3,1
  802c2c:	10c00105 	stb	r3,4(r2)
      }
   }

   return res;
  802c30:	e0bffc17 	ldw	r2,-16(fp)
}
  802c34:	e037883a 	mov	sp,fp
  802c38:	dfc00117 	ldw	ra,4(sp)
  802c3c:	df000017 	ldw	fp,0(sp)
  802c40:	dec00204 	addi	sp,sp,8
  802c44:	f800283a 	ret

00802c48 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove ( /* FR_OK: Successful, FR_DISK_ERR: A disk error */
   DIR *dj           /* Directory object pointing the entry to be removed */
)
{
  802c48:	defffc04 	addi	sp,sp,-16
  802c4c:	dfc00315 	stw	ra,12(sp)
  802c50:	df000215 	stw	fp,8(sp)
  802c54:	df000204 	addi	fp,sp,8
  802c58:	e13fff15 	stw	r4,-4(fp)
      } while (res == FR_OK);
      if (res == FR_NO_FILE) res = FR_INT_ERR;
   }

#else       /* Non LFN configuration */
   res = dir_sdi(dj, dj->index);
  802c5c:	e0bfff17 	ldw	r2,-4(fp)
  802c60:	1080018b 	ldhu	r2,6(r2)
  802c64:	10bfffcc 	andi	r2,r2,65535
  802c68:	100b883a 	mov	r5,r2
  802c6c:	e13fff17 	ldw	r4,-4(fp)
  802c70:	080244c0 	call	80244c <dir_sdi>
  802c74:	e0bffe15 	stw	r2,-8(fp)
   if (res == FR_OK) {
  802c78:	e0bffe17 	ldw	r2,-8(fp)
  802c7c:	1000121e 	bne	r2,zero,802cc8 <dir_remove+0x80>
      res = move_window(dj->fs, dj->sect);
  802c80:	e0bfff17 	ldw	r2,-4(fp)
  802c84:	10c00017 	ldw	r3,0(r2)
  802c88:	e0bfff17 	ldw	r2,-4(fp)
  802c8c:	10800417 	ldw	r2,16(r2)
  802c90:	100b883a 	mov	r5,r2
  802c94:	1809883a 	mov	r4,r3
  802c98:	080175c0 	call	80175c <move_window>
  802c9c:	e0bffe15 	stw	r2,-8(fp)
      if (res == FR_OK) {
  802ca0:	e0bffe17 	ldw	r2,-8(fp)
  802ca4:	1000081e 	bne	r2,zero,802cc8 <dir_remove+0x80>
         *dj->dir = DDE;         /* Mark the entry "deleted" */
  802ca8:	e0bfff17 	ldw	r2,-4(fp)
  802cac:	10800517 	ldw	r2,20(r2)
  802cb0:	00fff944 	movi	r3,-27
  802cb4:	10c00005 	stb	r3,0(r2)
         dj->fs->wflag = 1;
  802cb8:	e0bfff17 	ldw	r2,-4(fp)
  802cbc:	10800017 	ldw	r2,0(r2)
  802cc0:	00c00044 	movi	r3,1
  802cc4:	10c00105 	stb	r3,4(r2)
      }
   }
#endif

   return res;
  802cc8:	e0bffe17 	ldw	r2,-8(fp)
}
  802ccc:	e037883a 	mov	sp,fp
  802cd0:	dfc00117 	ldw	ra,4(sp)
  802cd4:	df000017 	ldw	fp,0(sp)
  802cd8:	dec00204 	addi	sp,sp,8
  802cdc:	f800283a 	ret

00802ce0 <create_name>:
static
FRESULT create_name (
   DIR *dj,       /* Pointer to the directory object */
   const TCHAR **path   /* Pointer to pointer to the segment in the path string */
)
{
  802ce0:	defff604 	addi	sp,sp,-40
  802ce4:	dfc00915 	stw	ra,36(sp)
  802ce8:	df000815 	stw	fp,32(sp)
  802cec:	df000804 	addi	fp,sp,32
  802cf0:	e13ffe15 	stw	r4,-8(fp)
  802cf4:	e17fff15 	stw	r5,-4(fp)
   uint8_t b, c, d, *sfn;
   uint32_t ni, si, i;
   const char *p;

   /* Create file name in directory form */
   for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
  802cf8:	e0bfff17 	ldw	r2,-4(fp)
  802cfc:	10800017 	ldw	r2,0(r2)
  802d00:	e0bffc15 	stw	r2,-16(fp)
  802d04:	00000306 	br	802d14 <create_name+0x34>
  802d08:	e0bffc17 	ldw	r2,-16(fp)
  802d0c:	10800044 	addi	r2,r2,1
  802d10:	e0bffc15 	stw	r2,-16(fp)
  802d14:	e0bffc17 	ldw	r2,-16(fp)
  802d18:	10800003 	ldbu	r2,0(r2)
  802d1c:	10803fcc 	andi	r2,r2,255
  802d20:	1080201c 	xori	r2,r2,128
  802d24:	10bfe004 	addi	r2,r2,-128
  802d28:	10800be0 	cmpeqi	r2,r2,47
  802d2c:	103ff61e 	bne	r2,zero,802d08 <__alt_data_end+0xff802d08>
  802d30:	e0bffc17 	ldw	r2,-16(fp)
  802d34:	10800003 	ldbu	r2,0(r2)
  802d38:	10803fcc 	andi	r2,r2,255
  802d3c:	1080201c 	xori	r2,r2,128
  802d40:	10bfe004 	addi	r2,r2,-128
  802d44:	10801720 	cmpeqi	r2,r2,92
  802d48:	103fef1e 	bne	r2,zero,802d08 <__alt_data_end+0xff802d08>
   sfn = dj->fn;
  802d4c:	e0bffe17 	ldw	r2,-8(fp)
  802d50:	10800617 	ldw	r2,24(r2)
  802d54:	e0bffd15 	stw	r2,-12(fp)
   mem_set(sfn, ' ', 11);
  802d58:	018002c4 	movi	r6,11
  802d5c:	01400804 	movi	r5,32
  802d60:	e13ffd17 	ldw	r4,-12(fp)
  802d64:	08015f80 	call	8015f8 <mem_set>
   si = i = b = 0; ni = 8;
  802d68:	e03ff805 	stb	zero,-32(fp)
  802d6c:	e03ffb15 	stw	zero,-20(fp)
  802d70:	e0bffb17 	ldw	r2,-20(fp)
  802d74:	e0bffa15 	stw	r2,-24(fp)
  802d78:	00800204 	movi	r2,8
  802d7c:	e0bff915 	stw	r2,-28(fp)
      sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;  /* Set last segment flag if end of path */
      return FR_OK;
   }
#endif
   for (;;) {
      c = (uint8_t)p[si++];
  802d80:	e0bffa17 	ldw	r2,-24(fp)
  802d84:	10c00044 	addi	r3,r2,1
  802d88:	e0fffa15 	stw	r3,-24(fp)
  802d8c:	e0fffc17 	ldw	r3,-16(fp)
  802d90:	1885883a 	add	r2,r3,r2
  802d94:	10800003 	ldbu	r2,0(r2)
  802d98:	e0bff845 	stb	r2,-31(fp)
      if (c <= ' ' || c == '/' || c == '\\') break;   /* Break on end of segment */
  802d9c:	e0bff843 	ldbu	r2,-31(fp)
  802da0:	10800870 	cmpltui	r2,r2,33
  802da4:	1000521e 	bne	r2,zero,802ef0 <create_name+0x210>
  802da8:	e0bff843 	ldbu	r2,-31(fp)
  802dac:	10800be0 	cmpeqi	r2,r2,47
  802db0:	10004f1e 	bne	r2,zero,802ef0 <create_name+0x210>
  802db4:	e0bff843 	ldbu	r2,-31(fp)
  802db8:	10801720 	cmpeqi	r2,r2,92
  802dbc:	10004c1e 	bne	r2,zero,802ef0 <create_name+0x210>
      if (c == '.' || i >= ni) {
  802dc0:	e0bff843 	ldbu	r2,-31(fp)
  802dc4:	10800ba0 	cmpeqi	r2,r2,46
  802dc8:	1000031e 	bne	r2,zero,802dd8 <create_name+0xf8>
  802dcc:	e0fffb17 	ldw	r3,-20(fp)
  802dd0:	e0bff917 	ldw	r2,-28(fp)
  802dd4:	18801136 	bltu	r3,r2,802e1c <create_name+0x13c>
         if (ni != 8 || c != '.') return FR_INVALID_NAME;
  802dd8:	e0bff917 	ldw	r2,-28(fp)
  802ddc:	10800218 	cmpnei	r2,r2,8
  802de0:	1000031e 	bne	r2,zero,802df0 <create_name+0x110>
  802de4:	e0bff843 	ldbu	r2,-31(fp)
  802de8:	10800ba0 	cmpeqi	r2,r2,46
  802dec:	1000021e 	bne	r2,zero,802df8 <create_name+0x118>
  802df0:	00800184 	movi	r2,6
  802df4:	00007006 	br	802fb8 <create_name+0x2d8>
         i = 8; ni = 11;
  802df8:	00800204 	movi	r2,8
  802dfc:	e0bffb15 	stw	r2,-20(fp)
  802e00:	008002c4 	movi	r2,11
  802e04:	e0bff915 	stw	r2,-28(fp)
         b <<= 2; continue;
  802e08:	e0bff803 	ldbu	r2,-32(fp)
  802e0c:	1085883a 	add	r2,r2,r2
  802e10:	1085883a 	add	r2,r2,r2
  802e14:	e0bff805 	stb	r2,-32(fp)
  802e18:	00003406 	br	802eec <create_name+0x20c>
      }
      if (c >= 0x80) {           /* Extended char? */
  802e1c:	e0bff843 	ldbu	r2,-31(fp)
  802e20:	10803fcc 	andi	r2,r2,255
  802e24:	1080201c 	xori	r2,r2,128
  802e28:	10bfe004 	addi	r2,r2,-128
  802e2c:	10000a0e 	bge	r2,zero,802e58 <create_name+0x178>
         b |= 3;                 /* Eliminate NT flag */
  802e30:	e0bff803 	ldbu	r2,-32(fp)
  802e34:	108000d4 	ori	r2,r2,3
  802e38:	e0bff805 	stb	r2,-32(fp)
#ifdef _EXCVT
         c = excvt[c-0x80];         /* Upper conversion (SBCS) */
  802e3c:	e0bff843 	ldbu	r2,-31(fp)
  802e40:	10ffe004 	addi	r3,r2,-128
  802e44:	00802074 	movhi	r2,129
  802e48:	1088ac04 	addi	r2,r2,8880
  802e4c:	10c5883a 	add	r2,r2,r3
  802e50:	10800003 	ldbu	r2,0(r2)
  802e54:	e0bff845 	stb	r2,-31(fp)
         if (!IsDBCS2(d) || i >= ni - 1)  /* Reject invalid DBC */
            return FR_INVALID_NAME;
         sfn[i++] = c;
         sfn[i++] = d;
      } else {                /* Single byte code */
         if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) /* Reject illegal chrs for SFN */
  802e58:	e0bff843 	ldbu	r2,-31(fp)
  802e5c:	100b883a 	mov	r5,r2
  802e60:	01002074 	movhi	r4,129
  802e64:	21089b04 	addi	r4,r4,8812
  802e68:	08016e00 	call	8016e0 <chk_chr>
  802e6c:	10000226 	beq	r2,zero,802e78 <create_name+0x198>
            return FR_INVALID_NAME;
  802e70:	00800184 	movi	r2,6
  802e74:	00005006 	br	802fb8 <create_name+0x2d8>
         if (IsUpper(c)) {       /* ASCII large capital? */
  802e78:	e0bff843 	ldbu	r2,-31(fp)
  802e7c:	10801070 	cmpltui	r2,r2,65
  802e80:	1000071e 	bne	r2,zero,802ea0 <create_name+0x1c0>
  802e84:	e0bff843 	ldbu	r2,-31(fp)
  802e88:	108016e8 	cmpgeui	r2,r2,91
  802e8c:	1000041e 	bne	r2,zero,802ea0 <create_name+0x1c0>
            b |= 2;
  802e90:	e0bff803 	ldbu	r2,-32(fp)
  802e94:	10800094 	ori	r2,r2,2
  802e98:	e0bff805 	stb	r2,-32(fp)
  802e9c:	00000c06 	br	802ed0 <create_name+0x1f0>
         } else {
            if (IsLower(c)) {    /* ASCII small capital? */
  802ea0:	e0bff843 	ldbu	r2,-31(fp)
  802ea4:	10801870 	cmpltui	r2,r2,97
  802ea8:	1000091e 	bne	r2,zero,802ed0 <create_name+0x1f0>
  802eac:	e0bff843 	ldbu	r2,-31(fp)
  802eb0:	10801ee8 	cmpgeui	r2,r2,123
  802eb4:	1000061e 	bne	r2,zero,802ed0 <create_name+0x1f0>
               b |= 1; c -= 0x20;
  802eb8:	e0bff803 	ldbu	r2,-32(fp)
  802ebc:	10800054 	ori	r2,r2,1
  802ec0:	e0bff805 	stb	r2,-32(fp)
  802ec4:	e0bff843 	ldbu	r2,-31(fp)
  802ec8:	10bff804 	addi	r2,r2,-32
  802ecc:	e0bff845 	stb	r2,-31(fp)
            }
         }
         sfn[i++] = c;
  802ed0:	e0bffb17 	ldw	r2,-20(fp)
  802ed4:	10c00044 	addi	r3,r2,1
  802ed8:	e0fffb15 	stw	r3,-20(fp)
  802edc:	e0fffd17 	ldw	r3,-12(fp)
  802ee0:	1885883a 	add	r2,r3,r2
  802ee4:	e0fff843 	ldbu	r3,-31(fp)
  802ee8:	10c00005 	stb	r3,0(r2)
      }
   }
  802eec:	003fa406 	br	802d80 <__alt_data_end+0xff802d80>
   *path = &p[si];                  /* Return pointer to the next segment */
  802ef0:	e0fffc17 	ldw	r3,-16(fp)
  802ef4:	e0bffa17 	ldw	r2,-24(fp)
  802ef8:	1887883a 	add	r3,r3,r2
  802efc:	e0bfff17 	ldw	r2,-4(fp)
  802f00:	10c00015 	stw	r3,0(r2)
   c = (c <= ' ') ? NS_LAST : 0;    /* Set last segment flag if end of path */
  802f04:	e0bff843 	ldbu	r2,-31(fp)
  802f08:	10800868 	cmpgeui	r2,r2,33
  802f0c:	1000021e 	bne	r2,zero,802f18 <create_name+0x238>
  802f10:	00800104 	movi	r2,4
  802f14:	00000106 	br	802f1c <create_name+0x23c>
  802f18:	0005883a 	mov	r2,zero
  802f1c:	e0bff845 	stb	r2,-31(fp)

   if (!i) return FR_INVALID_NAME;     /* Reject nul string */
  802f20:	e0bffb17 	ldw	r2,-20(fp)
  802f24:	1000021e 	bne	r2,zero,802f30 <create_name+0x250>
  802f28:	00800184 	movi	r2,6
  802f2c:	00002206 	br	802fb8 <create_name+0x2d8>
   if (sfn[0] == DDE) sfn[0] = NDDE;   /* When first char collides with DDE, replace it with 0x05 */
  802f30:	e0bffd17 	ldw	r2,-12(fp)
  802f34:	10800003 	ldbu	r2,0(r2)
  802f38:	10803fcc 	andi	r2,r2,255
  802f3c:	10803958 	cmpnei	r2,r2,229
  802f40:	1000031e 	bne	r2,zero,802f50 <create_name+0x270>
  802f44:	e0bffd17 	ldw	r2,-12(fp)
  802f48:	00c00144 	movi	r3,5
  802f4c:	10c00005 	stb	r3,0(r2)

   if (ni == 8) b <<= 2;
  802f50:	e0bff917 	ldw	r2,-28(fp)
  802f54:	10800218 	cmpnei	r2,r2,8
  802f58:	1000041e 	bne	r2,zero,802f6c <create_name+0x28c>
  802f5c:	e0bff803 	ldbu	r2,-32(fp)
  802f60:	1085883a 	add	r2,r2,r2
  802f64:	1085883a 	add	r2,r2,r2
  802f68:	e0bff805 	stb	r2,-32(fp)
   if ((b & 0x03) == 0x01) c |= NS_EXT;   /* NT flag (Name extension has only small capital) */
  802f6c:	e0bff803 	ldbu	r2,-32(fp)
  802f70:	108000cc 	andi	r2,r2,3
  802f74:	10800058 	cmpnei	r2,r2,1
  802f78:	1000031e 	bne	r2,zero,802f88 <create_name+0x2a8>
  802f7c:	e0bff843 	ldbu	r2,-31(fp)
  802f80:	10800414 	ori	r2,r2,16
  802f84:	e0bff845 	stb	r2,-31(fp)
   if ((b & 0x0C) == 0x04) c |= NS_BODY;  /* NT flag (Name body has only small capital) */
  802f88:	e0bff803 	ldbu	r2,-32(fp)
  802f8c:	1080030c 	andi	r2,r2,12
  802f90:	10800118 	cmpnei	r2,r2,4
  802f94:	1000031e 	bne	r2,zero,802fa4 <create_name+0x2c4>
  802f98:	e0bff843 	ldbu	r2,-31(fp)
  802f9c:	10800214 	ori	r2,r2,8
  802fa0:	e0bff845 	stb	r2,-31(fp)

   sfn[NS] = c;      /* Store NT flag, File name is created */
  802fa4:	e0bffd17 	ldw	r2,-12(fp)
  802fa8:	108002c4 	addi	r2,r2,11
  802fac:	e0fff843 	ldbu	r3,-31(fp)
  802fb0:	10c00005 	stb	r3,0(r2)

   return FR_OK;
  802fb4:	0005883a 	mov	r2,zero
#endif
}
  802fb8:	e037883a 	mov	sp,fp
  802fbc:	dfc00117 	ldw	ra,4(sp)
  802fc0:	df000017 	ldw	fp,0(sp)
  802fc4:	dec00204 	addi	sp,sp,8
  802fc8:	f800283a 	ret

00802fcc <get_fileinfo>:
static
void get_fileinfo (     /* No return code */
   DIR *dj,       /* Pointer to the directory object */
   FILINFO *fno      /* Pointer to the file information to be filled */
)
{
  802fcc:	defff804 	addi	sp,sp,-32
  802fd0:	df000715 	stw	fp,28(sp)
  802fd4:	df000704 	addi	fp,sp,28
  802fd8:	e13ffe15 	stw	r4,-8(fp)
  802fdc:	e17fff15 	stw	r5,-4(fp)
   uint32_t i;
   uint8_t nt, *dir;
   TCHAR *p, c;


   p = fno->fname;
  802fe0:	e0bfff17 	ldw	r2,-4(fp)
  802fe4:	10800244 	addi	r2,r2,9
  802fe8:	e0bffa15 	stw	r2,-24(fp)
   if (dj->sect) {
  802fec:	e0bffe17 	ldw	r2,-8(fp)
  802ff0:	10800417 	ldw	r2,16(r2)
  802ff4:	10007d26 	beq	r2,zero,8031ec <get_fileinfo+0x220>
      dir = dj->dir;
  802ff8:	e0bffe17 	ldw	r2,-8(fp)
  802ffc:	10800517 	ldw	r2,20(r2)
  803000:	e0bffc15 	stw	r2,-16(fp)
      nt = dir[DIR_NTres];    /* NT flag */
  803004:	e0bffc17 	ldw	r2,-16(fp)
  803008:	10800303 	ldbu	r2,12(r2)
  80300c:	e0bffd05 	stb	r2,-12(fp)
      for (i = 0; i < 8; i++) {  /* Copy name body */
  803010:	e03ff915 	stw	zero,-28(fp)
  803014:	00001506 	br	80306c <get_fileinfo+0xa0>
         c = dir[i];
  803018:	e0fffc17 	ldw	r3,-16(fp)
  80301c:	e0bff917 	ldw	r2,-28(fp)
  803020:	1885883a 	add	r2,r3,r2
  803024:	10800003 	ldbu	r2,0(r2)
  803028:	e0bffb05 	stb	r2,-20(fp)
         if (c == ' ') break;
  80302c:	e0bffb07 	ldb	r2,-20(fp)
  803030:	10800818 	cmpnei	r2,r2,32
  803034:	10001126 	beq	r2,zero,80307c <get_fileinfo+0xb0>
         if (c == NDDE) c = (TCHAR)DDE;
  803038:	e0bffb07 	ldb	r2,-20(fp)
  80303c:	10800158 	cmpnei	r2,r2,5
  803040:	1000021e 	bne	r2,zero,80304c <get_fileinfo+0x80>
  803044:	00bff944 	movi	r2,-27
  803048:	e0bffb05 	stb	r2,-20(fp)
         if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
            c = (c << 8) | dir[++i];
         c = ff_convert(c, 1);
         if (!c) c = '?';
#endif
         *p++ = c;
  80304c:	e0bffa17 	ldw	r2,-24(fp)
  803050:	10c00044 	addi	r3,r2,1
  803054:	e0fffa15 	stw	r3,-24(fp)
  803058:	e0fffb03 	ldbu	r3,-20(fp)
  80305c:	10c00005 	stb	r3,0(r2)

   p = fno->fname;
   if (dj->sect) {
      dir = dj->dir;
      nt = dir[DIR_NTres];    /* NT flag */
      for (i = 0; i < 8; i++) {  /* Copy name body */
  803060:	e0bff917 	ldw	r2,-28(fp)
  803064:	10800044 	addi	r2,r2,1
  803068:	e0bff915 	stw	r2,-28(fp)
  80306c:	e0bff917 	ldw	r2,-28(fp)
  803070:	10800230 	cmpltui	r2,r2,8
  803074:	103fe81e 	bne	r2,zero,803018 <__alt_data_end+0xff803018>
  803078:	00000106 	br	803080 <get_fileinfo+0xb4>
         c = dir[i];
         if (c == ' ') break;
  80307c:	0001883a 	nop
         c = ff_convert(c, 1);
         if (!c) c = '?';
#endif
         *p++ = c;
      }
      if (dir[8] != ' ') {    /* Copy name extension */
  803080:	e0bffc17 	ldw	r2,-16(fp)
  803084:	10800204 	addi	r2,r2,8
  803088:	10800003 	ldbu	r2,0(r2)
  80308c:	10803fcc 	andi	r2,r2,255
  803090:	10800820 	cmpeqi	r2,r2,32
  803094:	10001d1e 	bne	r2,zero,80310c <get_fileinfo+0x140>
         *p++ = '.';
  803098:	e0bffa17 	ldw	r2,-24(fp)
  80309c:	10c00044 	addi	r3,r2,1
  8030a0:	e0fffa15 	stw	r3,-24(fp)
  8030a4:	00c00b84 	movi	r3,46
  8030a8:	10c00005 	stb	r3,0(r2)
         for (i = 8; i < 11; i++) {
  8030ac:	00800204 	movi	r2,8
  8030b0:	e0bff915 	stw	r2,-28(fp)
  8030b4:	00001006 	br	8030f8 <get_fileinfo+0x12c>
            c = dir[i];
  8030b8:	e0fffc17 	ldw	r3,-16(fp)
  8030bc:	e0bff917 	ldw	r2,-28(fp)
  8030c0:	1885883a 	add	r2,r3,r2
  8030c4:	10800003 	ldbu	r2,0(r2)
  8030c8:	e0bffb05 	stb	r2,-20(fp)
            if (c == ' ') break;
  8030cc:	e0bffb07 	ldb	r2,-20(fp)
  8030d0:	10800818 	cmpnei	r2,r2,32
  8030d4:	10000c26 	beq	r2,zero,803108 <get_fileinfo+0x13c>
            if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
               c = (c << 8) | dir[++i];
            c = ff_convert(c, 1);
            if (!c) c = '?';
#endif
            *p++ = c;
  8030d8:	e0bffa17 	ldw	r2,-24(fp)
  8030dc:	10c00044 	addi	r3,r2,1
  8030e0:	e0fffa15 	stw	r3,-24(fp)
  8030e4:	e0fffb03 	ldbu	r3,-20(fp)
  8030e8:	10c00005 	stb	r3,0(r2)
#endif
         *p++ = c;
      }
      if (dir[8] != ' ') {    /* Copy name extension */
         *p++ = '.';
         for (i = 8; i < 11; i++) {
  8030ec:	e0bff917 	ldw	r2,-28(fp)
  8030f0:	10800044 	addi	r2,r2,1
  8030f4:	e0bff915 	stw	r2,-28(fp)
  8030f8:	e0bff917 	ldw	r2,-28(fp)
  8030fc:	108002f0 	cmpltui	r2,r2,11
  803100:	103fed1e 	bne	r2,zero,8030b8 <__alt_data_end+0xff8030b8>
  803104:	00000106 	br	80310c <get_fileinfo+0x140>
            c = dir[i];
            if (c == ' ') break;
  803108:	0001883a 	nop
            if (!c) c = '?';
#endif
            *p++ = c;
         }
      }
      fno->fattrib = dir[DIR_Attr];          /* Attribute */
  80310c:	e0bffc17 	ldw	r2,-16(fp)
  803110:	10c002c3 	ldbu	r3,11(r2)
  803114:	e0bfff17 	ldw	r2,-4(fp)
  803118:	10c00205 	stb	r3,8(r2)
      fno->fsize = LD_DWORD(dir+DIR_FileSize);  /* Size */
  80311c:	e0bffc17 	ldw	r2,-16(fp)
  803120:	108007c4 	addi	r2,r2,31
  803124:	10800003 	ldbu	r2,0(r2)
  803128:	10803fcc 	andi	r2,r2,255
  80312c:	1006963a 	slli	r3,r2,24
  803130:	e0bffc17 	ldw	r2,-16(fp)
  803134:	10800784 	addi	r2,r2,30
  803138:	10800003 	ldbu	r2,0(r2)
  80313c:	10803fcc 	andi	r2,r2,255
  803140:	1004943a 	slli	r2,r2,16
  803144:	1884b03a 	or	r2,r3,r2
  803148:	e0fffc17 	ldw	r3,-16(fp)
  80314c:	18c00744 	addi	r3,r3,29
  803150:	18c00003 	ldbu	r3,0(r3)
  803154:	18c03fcc 	andi	r3,r3,255
  803158:	1806923a 	slli	r3,r3,8
  80315c:	10c6b03a 	or	r3,r2,r3
  803160:	e0bffc17 	ldw	r2,-16(fp)
  803164:	10800704 	addi	r2,r2,28
  803168:	10800003 	ldbu	r2,0(r2)
  80316c:	10803fcc 	andi	r2,r2,255
  803170:	1886b03a 	or	r3,r3,r2
  803174:	e0bfff17 	ldw	r2,-4(fp)
  803178:	10c00015 	stw	r3,0(r2)
      fno->fdate = LD_WORD(dir+DIR_WrtDate);    /* Date */
  80317c:	e0bffc17 	ldw	r2,-16(fp)
  803180:	10800644 	addi	r2,r2,25
  803184:	10800003 	ldbu	r2,0(r2)
  803188:	10803fcc 	andi	r2,r2,255
  80318c:	1004923a 	slli	r2,r2,8
  803190:	1007883a 	mov	r3,r2
  803194:	e0bffc17 	ldw	r2,-16(fp)
  803198:	10800604 	addi	r2,r2,24
  80319c:	10800003 	ldbu	r2,0(r2)
  8031a0:	10803fcc 	andi	r2,r2,255
  8031a4:	1884b03a 	or	r2,r3,r2
  8031a8:	1007883a 	mov	r3,r2
  8031ac:	e0bfff17 	ldw	r2,-4(fp)
  8031b0:	10c0010d 	sth	r3,4(r2)
      fno->ftime = LD_WORD(dir+DIR_WrtTime);    /* Time */
  8031b4:	e0bffc17 	ldw	r2,-16(fp)
  8031b8:	108005c4 	addi	r2,r2,23
  8031bc:	10800003 	ldbu	r2,0(r2)
  8031c0:	10803fcc 	andi	r2,r2,255
  8031c4:	1004923a 	slli	r2,r2,8
  8031c8:	1007883a 	mov	r3,r2
  8031cc:	e0bffc17 	ldw	r2,-16(fp)
  8031d0:	10800584 	addi	r2,r2,22
  8031d4:	10800003 	ldbu	r2,0(r2)
  8031d8:	10803fcc 	andi	r2,r2,255
  8031dc:	1884b03a 	or	r2,r3,r2
  8031e0:	1007883a 	mov	r3,r2
  8031e4:	e0bfff17 	ldw	r2,-4(fp)
  8031e8:	10c0018d 	sth	r3,6(r2)
   }
   *p = 0;     /* Terminate SFN str by a \0 */
  8031ec:	e0bffa17 	ldw	r2,-24(fp)
  8031f0:	10000005 	stb	zero,0(r2)
         }
      }
      tp[i] = 0;  /* Terminate the LFN str by a \0 */
   }
#endif
}
  8031f4:	0001883a 	nop
  8031f8:	e037883a 	mov	sp,fp
  8031fc:	df000017 	ldw	fp,0(sp)
  803200:	dec00104 	addi	sp,sp,4
  803204:	f800283a 	ret

00803208 <follow_path>:
static
FRESULT follow_path (   /* FR_OK(0): successful, !=0: error code */
   DIR *dj,       /* Directory object to return last directory and found object */
   const TCHAR *path /* Full-path string to find a file or directory */
)
{
  803208:	defff904 	addi	sp,sp,-28
  80320c:	dfc00615 	stw	ra,24(sp)
  803210:	df000515 	stw	fp,20(sp)
  803214:	df000504 	addi	fp,sp,20
  803218:	e13ffe15 	stw	r4,-8(fp)
  80321c:	e17fff15 	stw	r5,-4(fp)
      path++;  dj->sclust = 0;      /* Strip it and start from the root dir */
   } else {                   /* No heading separator */
      dj->sclust = dj->fs->cdir; /* Start from the current dir */
   }
#else
   if (*path == '/' || *path == '\\')  /* Strip heading separator if exist */
  803220:	e0bfff17 	ldw	r2,-4(fp)
  803224:	10800003 	ldbu	r2,0(r2)
  803228:	10803fcc 	andi	r2,r2,255
  80322c:	1080201c 	xori	r2,r2,128
  803230:	10bfe004 	addi	r2,r2,-128
  803234:	10800be0 	cmpeqi	r2,r2,47
  803238:	1000071e 	bne	r2,zero,803258 <follow_path+0x50>
  80323c:	e0bfff17 	ldw	r2,-4(fp)
  803240:	10800003 	ldbu	r2,0(r2)
  803244:	10803fcc 	andi	r2,r2,255
  803248:	1080201c 	xori	r2,r2,128
  80324c:	10bfe004 	addi	r2,r2,-128
  803250:	10801718 	cmpnei	r2,r2,92
  803254:	1000031e 	bne	r2,zero,803264 <follow_path+0x5c>
      path++;
  803258:	e0bfff17 	ldw	r2,-4(fp)
  80325c:	10800044 	addi	r2,r2,1
  803260:	e0bfff15 	stw	r2,-4(fp)
   dj->sclust = 0;                  /* Start from the root dir */
  803264:	e0bffe17 	ldw	r2,-8(fp)
  803268:	10000215 	stw	zero,8(r2)
#endif

   if ((uint32_t)*path < ' ') {         /* Nul path means the start directory itself */
  80326c:	e0bfff17 	ldw	r2,-4(fp)
  803270:	10800003 	ldbu	r2,0(r2)
  803274:	10803fcc 	andi	r2,r2,255
  803278:	10800828 	cmpgeui	r2,r2,32
  80327c:	1000071e 	bne	r2,zero,80329c <follow_path+0x94>
      res = dir_sdi(dj, 0);
  803280:	000b883a 	mov	r5,zero
  803284:	e13ffe17 	ldw	r4,-8(fp)
  803288:	080244c0 	call	80244c <dir_sdi>
  80328c:	e0bffb15 	stw	r2,-20(fp)
      dj->dir = 0;
  803290:	e0bffe17 	ldw	r2,-8(fp)
  803294:	10000515 	stw	zero,20(r2)
  803298:	00004c06 	br	8033cc <follow_path+0x1c4>

   } else {                   /* Follow path */
      for (;;) {
         res = create_name(dj, &path); /* Get a segment */
  80329c:	e0bfff04 	addi	r2,fp,-4
  8032a0:	100b883a 	mov	r5,r2
  8032a4:	e13ffe17 	ldw	r4,-8(fp)
  8032a8:	0802ce00 	call	802ce0 <create_name>
  8032ac:	e0bffb15 	stw	r2,-20(fp)
         if (res != FR_OK) break;
  8032b0:	e0bffb17 	ldw	r2,-20(fp)
  8032b4:	10003e1e 	bne	r2,zero,8033b0 <follow_path+0x1a8>
         res = dir_find(dj);           /* Find it */
  8032b8:	e13ffe17 	ldw	r4,-8(fp)
  8032bc:	08029200 	call	802920 <dir_find>
  8032c0:	e0bffb15 	stw	r2,-20(fp)
         ns = *(dj->fn+NS);
  8032c4:	e0bffe17 	ldw	r2,-8(fp)
  8032c8:	10800617 	ldw	r2,24(r2)
  8032cc:	108002c3 	ldbu	r2,11(r2)
  8032d0:	e0bffc05 	stb	r2,-16(fp)
         if (res != FR_OK) {           /* Failed to find the object */
  8032d4:	e0bffb17 	ldw	r2,-20(fp)
  8032d8:	10000926 	beq	r2,zero,803300 <follow_path+0xf8>
            if (res != FR_NO_FILE) break; /* Abort if any hard error occured */
  8032dc:	e0bffb17 	ldw	r2,-20(fp)
  8032e0:	10800120 	cmpeqi	r2,r2,4
  8032e4:	10003426 	beq	r2,zero,8033b8 <follow_path+0x1b0>
            if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exit */
               dj->sclust = 0; dj->dir = 0;  /* It is the root dir */
               res = FR_OK;
               if (!(ns & NS_LAST)) continue;
            } else {                   /* Could not find the object */
               if (!(ns & NS_LAST)) res = FR_NO_PATH;
  8032e8:	e0bffc03 	ldbu	r2,-16(fp)
  8032ec:	1080010c 	andi	r2,r2,4
  8032f0:	1000331e 	bne	r2,zero,8033c0 <follow_path+0x1b8>
  8032f4:	00800144 	movi	r2,5
  8032f8:	e0bffb15 	stw	r2,-20(fp)
            }
            break;
  8032fc:	00003006 	br	8033c0 <follow_path+0x1b8>
         }
         if (ns & NS_LAST) break;         /* Last segment match. Function completed. */
  803300:	e0bffc03 	ldbu	r2,-16(fp)
  803304:	1080010c 	andi	r2,r2,4
  803308:	10002f1e 	bne	r2,zero,8033c8 <follow_path+0x1c0>
         dir = dj->dir;                /* There is next segment. Follow the sub directory */
  80330c:	e0bffe17 	ldw	r2,-8(fp)
  803310:	10800517 	ldw	r2,20(r2)
  803314:	e0bffd15 	stw	r2,-12(fp)
         if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
  803318:	e0bffd17 	ldw	r2,-12(fp)
  80331c:	108002c4 	addi	r2,r2,11
  803320:	10800003 	ldbu	r2,0(r2)
  803324:	10803fcc 	andi	r2,r2,255
  803328:	1080040c 	andi	r2,r2,16
  80332c:	1000031e 	bne	r2,zero,80333c <follow_path+0x134>
            res = FR_NO_PATH; break;
  803330:	00800144 	movi	r2,5
  803334:	e0bffb15 	stw	r2,-20(fp)
  803338:	00002406 	br	8033cc <follow_path+0x1c4>
         }
         dj->sclust = LD_CLUST(dir);
  80333c:	e0bffd17 	ldw	r2,-12(fp)
  803340:	10800544 	addi	r2,r2,21
  803344:	10800003 	ldbu	r2,0(r2)
  803348:	10803fcc 	andi	r2,r2,255
  80334c:	1004923a 	slli	r2,r2,8
  803350:	1007883a 	mov	r3,r2
  803354:	e0bffd17 	ldw	r2,-12(fp)
  803358:	10800504 	addi	r2,r2,20
  80335c:	10800003 	ldbu	r2,0(r2)
  803360:	10803fcc 	andi	r2,r2,255
  803364:	1884b03a 	or	r2,r3,r2
  803368:	10bfffcc 	andi	r2,r2,65535
  80336c:	1006943a 	slli	r3,r2,16
  803370:	e0bffd17 	ldw	r2,-12(fp)
  803374:	108006c4 	addi	r2,r2,27
  803378:	10800003 	ldbu	r2,0(r2)
  80337c:	10803fcc 	andi	r2,r2,255
  803380:	1004923a 	slli	r2,r2,8
  803384:	1009883a 	mov	r4,r2
  803388:	e0bffd17 	ldw	r2,-12(fp)
  80338c:	10800684 	addi	r2,r2,26
  803390:	10800003 	ldbu	r2,0(r2)
  803394:	10803fcc 	andi	r2,r2,255
  803398:	2084b03a 	or	r2,r4,r2
  80339c:	10bfffcc 	andi	r2,r2,65535
  8033a0:	1886b03a 	or	r3,r3,r2
  8033a4:	e0bffe17 	ldw	r2,-8(fp)
  8033a8:	10c00215 	stw	r3,8(r2)
      }
  8033ac:	003fbb06 	br	80329c <__alt_data_end+0xff80329c>
      dj->dir = 0;

   } else {                   /* Follow path */
      for (;;) {
         res = create_name(dj, &path); /* Get a segment */
         if (res != FR_OK) break;
  8033b0:	0001883a 	nop
  8033b4:	00000506 	br	8033cc <follow_path+0x1c4>
         res = dir_find(dj);           /* Find it */
         ns = *(dj->fn+NS);
         if (res != FR_OK) {           /* Failed to find the object */
            if (res != FR_NO_FILE) break; /* Abort if any hard error occured */
  8033b8:	0001883a 	nop
  8033bc:	00000306 	br	8033cc <follow_path+0x1c4>
               res = FR_OK;
               if (!(ns & NS_LAST)) continue;
            } else {                   /* Could not find the object */
               if (!(ns & NS_LAST)) res = FR_NO_PATH;
            }
            break;
  8033c0:	0001883a 	nop
  8033c4:	00000106 	br	8033cc <follow_path+0x1c4>
         }
         if (ns & NS_LAST) break;         /* Last segment match. Function completed. */
  8033c8:	0001883a 	nop
         }
         dj->sclust = LD_CLUST(dir);
      }
   }

   return res;
  8033cc:	e0bffb17 	ldw	r2,-20(fp)
}
  8033d0:	e037883a 	mov	sp,fp
  8033d4:	dfc00117 	ldw	ra,4(sp)
  8033d8:	df000017 	ldw	fp,0(sp)
  8033dc:	dec00204 	addi	sp,sp,8
  8033e0:	f800283a 	ret

008033e4 <check_fs>:
static
uint8_t check_fs (   /* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
   FATFS *fs,  /* File system object */
   uint32_t sect  /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  8033e4:	defffc04 	addi	sp,sp,-16
  8033e8:	dfc00315 	stw	ra,12(sp)
  8033ec:	df000215 	stw	fp,8(sp)
  8033f0:	df000204 	addi	fp,sp,8
  8033f4:	e13ffe15 	stw	r4,-8(fp)
  8033f8:	e17fff15 	stw	r5,-4(fp)
   if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)   /* Load boot record */
  8033fc:	e0bffe17 	ldw	r2,-8(fp)
  803400:	10800043 	ldbu	r2,1(r2)
  803404:	10c03fcc 	andi	r3,r2,255
  803408:	e0bffe17 	ldw	r2,-8(fp)
  80340c:	10800c04 	addi	r2,r2,48
  803410:	01c00044 	movi	r7,1
  803414:	e1bfff17 	ldw	r6,-4(fp)
  803418:	100b883a 	mov	r5,r2
  80341c:	1809883a 	mov	r4,r3
  803420:	0800e080 	call	800e08 <ffs_DiskIORead>
  803424:	10000226 	beq	r2,zero,803430 <check_fs+0x4c>
      return 3;
  803428:	008000c4 	movi	r2,3
  80342c:	00005306 	br	80357c <check_fs+0x198>
   if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)    /* Check record signature (always placed at offset 510 even if the sector size is >512) */
  803430:	e0bffe17 	ldw	r2,-8(fp)
  803434:	10808b84 	addi	r2,r2,558
  803438:	10800044 	addi	r2,r2,1
  80343c:	10800003 	ldbu	r2,0(r2)
  803440:	10803fcc 	andi	r2,r2,255
  803444:	1004923a 	slli	r2,r2,8
  803448:	1007883a 	mov	r3,r2
  80344c:	e0bffe17 	ldw	r2,-8(fp)
  803450:	10808b83 	ldbu	r2,558(r2)
  803454:	10803fcc 	andi	r2,r2,255
  803458:	1884b03a 	or	r2,r3,r2
  80345c:	10bfffcc 	andi	r2,r2,65535
  803460:	10a0001c 	xori	r2,r2,32768
  803464:	10a00004 	addi	r2,r2,-32768
  803468:	10aa9560 	cmpeqi	r2,r2,-21931
  80346c:	1000021e 	bne	r2,zero,803478 <check_fs+0x94>
      return 2;
  803470:	00800084 	movi	r2,2
  803474:	00004106 	br	80357c <check_fs+0x198>

   if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)   /* Check "FAT" string */
  803478:	e0bffe17 	ldw	r2,-8(fp)
  80347c:	10801984 	addi	r2,r2,102
  803480:	108000c4 	addi	r2,r2,3
  803484:	10800003 	ldbu	r2,0(r2)
  803488:	10803fcc 	andi	r2,r2,255
  80348c:	1006963a 	slli	r3,r2,24
  803490:	e0bffe17 	ldw	r2,-8(fp)
  803494:	10801984 	addi	r2,r2,102
  803498:	10800084 	addi	r2,r2,2
  80349c:	10800003 	ldbu	r2,0(r2)
  8034a0:	10803fcc 	andi	r2,r2,255
  8034a4:	1004943a 	slli	r2,r2,16
  8034a8:	1884b03a 	or	r2,r3,r2
  8034ac:	e0fffe17 	ldw	r3,-8(fp)
  8034b0:	18c01984 	addi	r3,r3,102
  8034b4:	18c00044 	addi	r3,r3,1
  8034b8:	18c00003 	ldbu	r3,0(r3)
  8034bc:	18c03fcc 	andi	r3,r3,255
  8034c0:	1806923a 	slli	r3,r3,8
  8034c4:	10c6b03a 	or	r3,r2,r3
  8034c8:	e0bffe17 	ldw	r2,-8(fp)
  8034cc:	10801983 	ldbu	r2,102(r2)
  8034d0:	10803fcc 	andi	r2,r2,255
  8034d4:	1886b03a 	or	r3,r3,r2
  8034d8:	00804034 	movhi	r2,256
  8034dc:	10bfffc4 	addi	r2,r2,-1
  8034e0:	1886703a 	and	r3,r3,r2
  8034e4:	00801534 	movhi	r2,84
  8034e8:	10905184 	addi	r2,r2,16710
  8034ec:	1880021e 	bne	r3,r2,8034f8 <check_fs+0x114>
      return 0;
  8034f0:	0005883a 	mov	r2,zero
  8034f4:	00002106 	br	80357c <check_fs+0x198>
   if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
  8034f8:	e0bffe17 	ldw	r2,-8(fp)
  8034fc:	10802084 	addi	r2,r2,130
  803500:	108000c4 	addi	r2,r2,3
  803504:	10800003 	ldbu	r2,0(r2)
  803508:	10803fcc 	andi	r2,r2,255
  80350c:	1006963a 	slli	r3,r2,24
  803510:	e0bffe17 	ldw	r2,-8(fp)
  803514:	10802084 	addi	r2,r2,130
  803518:	10800084 	addi	r2,r2,2
  80351c:	10800003 	ldbu	r2,0(r2)
  803520:	10803fcc 	andi	r2,r2,255
  803524:	1004943a 	slli	r2,r2,16
  803528:	1884b03a 	or	r2,r3,r2
  80352c:	e0fffe17 	ldw	r3,-8(fp)
  803530:	18c02084 	addi	r3,r3,130
  803534:	18c00044 	addi	r3,r3,1
  803538:	18c00003 	ldbu	r3,0(r3)
  80353c:	18c03fcc 	andi	r3,r3,255
  803540:	1806923a 	slli	r3,r3,8
  803544:	10c6b03a 	or	r3,r2,r3
  803548:	e0bffe17 	ldw	r2,-8(fp)
  80354c:	10802083 	ldbu	r2,130(r2)
  803550:	10803fcc 	andi	r2,r2,255
  803554:	1886b03a 	or	r3,r3,r2
  803558:	00804034 	movhi	r2,256
  80355c:	10bfffc4 	addi	r2,r2,-1
  803560:	1886703a 	and	r3,r3,r2
  803564:	00801534 	movhi	r2,84
  803568:	10905184 	addi	r2,r2,16710
  80356c:	1880021e 	bne	r3,r2,803578 <check_fs+0x194>
      return 0;
  803570:	0005883a 	mov	r2,zero
  803574:	00000106 	br	80357c <check_fs+0x198>

   return 1;
  803578:	00800044 	movi	r2,1
}
  80357c:	e037883a 	mov	sp,fp
  803580:	dfc00117 	ldw	ra,4(sp)
  803584:	df000017 	ldw	fp,0(sp)
  803588:	dec00204 	addi	sp,sp,8
  80358c:	f800283a 	ret

00803590 <chk_mounted>:
FRESULT chk_mounted (   /* FR_OK(0): successful, !=0: any error occurred */
   const TCHAR **path,  /* Pointer to pointer to the path name (drive number) */
   FATFS **rfs,      /* Pointer to pointer to the found file system object */
   uint8_t chk_wp       /* !=0: Check media write protection for write access */
)
{
  803590:	deffee04 	addi	sp,sp,-72
  803594:	dfc01115 	stw	ra,68(sp)
  803598:	df001015 	stw	fp,64(sp)
  80359c:	df001004 	addi	fp,sp,64
  8035a0:	e13ffd15 	stw	r4,-12(fp)
  8035a4:	e17ffe15 	stw	r5,-8(fp)
  8035a8:	3005883a 	mov	r2,r6
  8035ac:	e0bfff05 	stb	r2,-4(fp)
   uint8_t fmt, b, pi, *tbl;
   uint32_t vol;
   DSTATUS stat;
   uint32_t bsect, fasize, tsect, sysect, nclst, szbfat;
   uint16_t nrsv;
   const TCHAR *p = *path;
  8035b0:	e0bffd17 	ldw	r2,-12(fp)
  8035b4:	10800017 	ldw	r2,0(r2)
  8035b8:	e0bff615 	stw	r2,-40(fp)
   FATFS *fs;

   /* Get logical drive number from the path name */
   vol = p[0] - '0';             /* Is there a drive number? */
  8035bc:	e0bff617 	ldw	r2,-40(fp)
  8035c0:	10800003 	ldbu	r2,0(r2)
  8035c4:	10803fcc 	andi	r2,r2,255
  8035c8:	1080201c 	xori	r2,r2,128
  8035cc:	10bfe004 	addi	r2,r2,-128
  8035d0:	10bff404 	addi	r2,r2,-48
  8035d4:	e0bff115 	stw	r2,-60(fp)
   if (vol <= 9 && p[1] == ':') {      /* Found a drive number, get and strip it */
  8035d8:	e0bff117 	ldw	r2,-60(fp)
  8035dc:	108002a8 	cmpgeui	r2,r2,10
  8035e0:	10000f1e 	bne	r2,zero,803620 <chk_mounted+0x90>
  8035e4:	e0bff617 	ldw	r2,-40(fp)
  8035e8:	10800044 	addi	r2,r2,1
  8035ec:	10800003 	ldbu	r2,0(r2)
  8035f0:	10803fcc 	andi	r2,r2,255
  8035f4:	1080201c 	xori	r2,r2,128
  8035f8:	10bfe004 	addi	r2,r2,-128
  8035fc:	10800e98 	cmpnei	r2,r2,58
  803600:	1000071e 	bne	r2,zero,803620 <chk_mounted+0x90>
      p += 2; *path = p;            /* Return pointer to the path name */
  803604:	e0bff617 	ldw	r2,-40(fp)
  803608:	10800084 	addi	r2,r2,2
  80360c:	e0bff615 	stw	r2,-40(fp)
  803610:	e0bffd17 	ldw	r2,-12(fp)
  803614:	e0fff617 	ldw	r3,-40(fp)
  803618:	10c00015 	stw	r3,0(r2)
  80361c:	00000106 	br	803624 <chk_mounted+0x94>
   } else {                   /* No drive number is given */
#if _FS_RPATH
      vol = CurrVol;             /* Use current drive */
#else
      vol = 0;                /* Use drive 0 */
  803620:	e03ff115 	stw	zero,-60(fp)
#endif
   }

   /* Check if the file system object is valid or not */
   if (vol >= _VOLUMES)             /* Is the drive number valid? */
  803624:	e0bff117 	ldw	r2,-60(fp)
  803628:	10000226 	beq	r2,zero,803634 <chk_mounted+0xa4>
      return FR_INVALID_DRIVE;
  80362c:	008002c4 	movi	r2,11
  803630:	00022206 	br	803ebc <chk_mounted+0x92c>
   *rfs = fs = FatFs[vol];          /* Return pointer to the corresponding file system object */
  803634:	e0bff117 	ldw	r2,-60(fp)
  803638:	1085883a 	add	r2,r2,r2
  80363c:	1087883a 	add	r3,r2,r2
  803640:	d0a74604 	addi	r2,gp,-25320
  803644:	1885883a 	add	r2,r3,r2
  803648:	10800017 	ldw	r2,0(r2)
  80364c:	e0bff715 	stw	r2,-36(fp)
  803650:	e0bffe17 	ldw	r2,-8(fp)
  803654:	e0fff717 	ldw	r3,-36(fp)
  803658:	10c00015 	stw	r3,0(r2)
   if (!fs) return FR_NOT_ENABLED;     /* Is the file system object available? */
  80365c:	e0bff717 	ldw	r2,-36(fp)
  803660:	1000021e 	bne	r2,zero,80366c <chk_mounted+0xdc>
  803664:	00800304 	movi	r2,12
  803668:	00021406 	br	803ebc <chk_mounted+0x92c>

   ENTER_FF(fs);                 /* Lock file system */

   if (fs->fs_type) {               /* If the logical drive has been mounted */
  80366c:	e0bff717 	ldw	r2,-36(fp)
  803670:	10800003 	ldbu	r2,0(r2)
  803674:	10803fcc 	andi	r2,r2,255
  803678:	10001226 	beq	r2,zero,8036c4 <chk_mounted+0x134>
      stat = disk_status(fs->drv);
  80367c:	e0bff717 	ldw	r2,-36(fp)
  803680:	10800043 	ldbu	r2,1(r2)
  803684:	10803fcc 	andi	r2,r2,255
  803688:	1009883a 	mov	r4,r2
  80368c:	0800de00 	call	800de0 <ffs_DiskIOStatus>
  803690:	e0bff805 	stb	r2,-32(fp)
      if (!(stat & STA_NOINIT)) {      /* and the physical drive is kept initialized (has not been changed), */
  803694:	e0bff803 	ldbu	r2,-32(fp)
  803698:	1080004c 	andi	r2,r2,1
  80369c:	1000091e 	bne	r2,zero,8036c4 <chk_mounted+0x134>
         if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))  /* Check write protection if needed */
  8036a0:	e0bfff03 	ldbu	r2,-4(fp)
  8036a4:	10000526 	beq	r2,zero,8036bc <chk_mounted+0x12c>
  8036a8:	e0bff803 	ldbu	r2,-32(fp)
  8036ac:	1080010c 	andi	r2,r2,4
  8036b0:	10000226 	beq	r2,zero,8036bc <chk_mounted+0x12c>
            return FR_WRITE_PROTECTED;
  8036b4:	00800284 	movi	r2,10
  8036b8:	00020006 	br	803ebc <chk_mounted+0x92c>
         return FR_OK;           /* The file system object is valid */
  8036bc:	0005883a 	mov	r2,zero
  8036c0:	0001fe06 	br	803ebc <chk_mounted+0x92c>
   }

   /* The file system object is not valid. */
   /* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

   fs->fs_type = 0;              /* Clear the file system object */
  8036c4:	e0bff717 	ldw	r2,-36(fp)
  8036c8:	10000005 	stb	zero,0(r2)
   fs->drv = LD2PD(vol);            /* Bind the logical drive and a physical drive */
  8036cc:	e0bff117 	ldw	r2,-60(fp)
  8036d0:	1007883a 	mov	r3,r2
  8036d4:	e0bff717 	ldw	r2,-36(fp)
  8036d8:	10c00045 	stb	r3,1(r2)
   stat = disk_initialize(fs->drv); /* Initialize low level disk I/O layer */
  8036dc:	e0bff717 	ldw	r2,-36(fp)
  8036e0:	10800043 	ldbu	r2,1(r2)
  8036e4:	10803fcc 	andi	r2,r2,255
  8036e8:	1009883a 	mov	r4,r2
  8036ec:	0800b840 	call	800b84 <ffs_DiskIOInitialize>
  8036f0:	e0bff805 	stb	r2,-32(fp)
   if (stat & STA_NOINIT)           /* Check if the initialization succeeded */
  8036f4:	e0bff803 	ldbu	r2,-32(fp)
  8036f8:	1080004c 	andi	r2,r2,1
  8036fc:	10000226 	beq	r2,zero,803708 <chk_mounted+0x178>
      return FR_NOT_READY;       /* Failed to initialize due to no media or hard error */
  803700:	008000c4 	movi	r2,3
  803704:	0001ed06 	br	803ebc <chk_mounted+0x92c>
   if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))  /* Check disk write protection if needed */
  803708:	e0bfff03 	ldbu	r2,-4(fp)
  80370c:	10000526 	beq	r2,zero,803724 <chk_mounted+0x194>
  803710:	e0bff803 	ldbu	r2,-32(fp)
  803714:	1080010c 	andi	r2,r2,4
  803718:	10000226 	beq	r2,zero,803724 <chk_mounted+0x194>
      return FR_WRITE_PROTECTED;
  80371c:	00800284 	movi	r2,10
  803720:	0001e606 	br	803ebc <chk_mounted+0x92c>
#if _MAX_SS != 512                  /* Get disk sector size (variable sector size cfg only) */
   if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
      return FR_DISK_ERR;
#endif
   /* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
   fmt = check_fs(fs, bsect = 0);      /* Load sector 0 and check if it is an FAT-VBR (in SFD) */
  803724:	e03ff215 	stw	zero,-56(fp)
  803728:	e17ff217 	ldw	r5,-56(fp)
  80372c:	e13ff717 	ldw	r4,-36(fp)
  803730:	08033e40 	call	8033e4 <check_fs>
  803734:	e0bff005 	stb	r2,-64(fp)
   if (LD2PT(vol) && !fmt) fmt = 1; /* Force non-SFD if the volume is forced partition */
   if (fmt == 1) {                  /* Not an FAT-VBR, the physical drive can be partitioned */
  803738:	e0bff003 	ldbu	r2,-64(fp)
  80373c:	10800058 	cmpnei	r2,r2,1
  803740:	10002d1e 	bne	r2,zero,8037f8 <chk_mounted+0x268>
      /* Check the partition listed in the partition table */
      pi = LD2PT(vol);
  803744:	e03ff045 	stb	zero,-63(fp)
      if (pi) pi--;
  803748:	e0bff043 	ldbu	r2,-63(fp)
  80374c:	10000326 	beq	r2,zero,80375c <chk_mounted+0x1cc>
  803750:	e0bff043 	ldbu	r2,-63(fp)
  803754:	10bfffc4 	addi	r2,r2,-1
  803758:	e0bff045 	stb	r2,-63(fp)
      tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
  80375c:	e0bff043 	ldbu	r2,-63(fp)
  803760:	1004913a 	slli	r2,r2,4
  803764:	10806f84 	addi	r2,r2,446
  803768:	10800c04 	addi	r2,r2,48
  80376c:	e0fff717 	ldw	r3,-36(fp)
  803770:	1885883a 	add	r2,r3,r2
  803774:	e0bff915 	stw	r2,-28(fp)
      if (tbl[4]) {                 /* Is the partition existing? */
  803778:	e0bff917 	ldw	r2,-28(fp)
  80377c:	10800104 	addi	r2,r2,4
  803780:	10800003 	ldbu	r2,0(r2)
  803784:	10803fcc 	andi	r2,r2,255
  803788:	10001b26 	beq	r2,zero,8037f8 <chk_mounted+0x268>
         bsect = LD_DWORD(&tbl[8]);    /* Partition offset in LBA */
  80378c:	e0bff917 	ldw	r2,-28(fp)
  803790:	108002c4 	addi	r2,r2,11
  803794:	10800003 	ldbu	r2,0(r2)
  803798:	10803fcc 	andi	r2,r2,255
  80379c:	1006963a 	slli	r3,r2,24
  8037a0:	e0bff917 	ldw	r2,-28(fp)
  8037a4:	10800284 	addi	r2,r2,10
  8037a8:	10800003 	ldbu	r2,0(r2)
  8037ac:	10803fcc 	andi	r2,r2,255
  8037b0:	1004943a 	slli	r2,r2,16
  8037b4:	1884b03a 	or	r2,r3,r2
  8037b8:	e0fff917 	ldw	r3,-28(fp)
  8037bc:	18c00244 	addi	r3,r3,9
  8037c0:	18c00003 	ldbu	r3,0(r3)
  8037c4:	18c03fcc 	andi	r3,r3,255
  8037c8:	1806923a 	slli	r3,r3,8
  8037cc:	10c6b03a 	or	r3,r2,r3
  8037d0:	e0bff917 	ldw	r2,-28(fp)
  8037d4:	10800204 	addi	r2,r2,8
  8037d8:	10800003 	ldbu	r2,0(r2)
  8037dc:	10803fcc 	andi	r2,r2,255
  8037e0:	1884b03a 	or	r2,r3,r2
  8037e4:	e0bff215 	stw	r2,-56(fp)
         fmt = check_fs(fs, bsect);    /* Check the partition */
  8037e8:	e17ff217 	ldw	r5,-56(fp)
  8037ec:	e13ff717 	ldw	r4,-36(fp)
  8037f0:	08033e40 	call	8033e4 <check_fs>
  8037f4:	e0bff005 	stb	r2,-64(fp)
      }
   }
   if (fmt == 3) return FR_DISK_ERR;
  8037f8:	e0bff003 	ldbu	r2,-64(fp)
  8037fc:	108000d8 	cmpnei	r2,r2,3
  803800:	1000021e 	bne	r2,zero,80380c <chk_mounted+0x27c>
  803804:	00800044 	movi	r2,1
  803808:	0001ac06 	br	803ebc <chk_mounted+0x92c>
   if (fmt) return FR_NO_FILESYSTEM;      /* No FAT volume is found */
  80380c:	e0bff003 	ldbu	r2,-64(fp)
  803810:	10000226 	beq	r2,zero,80381c <chk_mounted+0x28c>
  803814:	00800344 	movi	r2,13
  803818:	0001a806 	br	803ebc <chk_mounted+0x92c>

   /* An FAT volume is found. Following code initializes the file system object */

   if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))     /* (BPB_BytsPerSec must be equal to the physical sector size) */
  80381c:	e0bff717 	ldw	r2,-36(fp)
  803820:	10800f03 	ldbu	r2,60(r2)
  803824:	10803fcc 	andi	r2,r2,255
  803828:	1004923a 	slli	r2,r2,8
  80382c:	1007883a 	mov	r3,r2
  803830:	e0bff717 	ldw	r2,-36(fp)
  803834:	10800ec3 	ldbu	r2,59(r2)
  803838:	10803fcc 	andi	r2,r2,255
  80383c:	1884b03a 	or	r2,r3,r2
  803840:	10bfffcc 	andi	r2,r2,65535
  803844:	10a0001c 	xori	r2,r2,32768
  803848:	10a00004 	addi	r2,r2,-32768
  80384c:	10808020 	cmpeqi	r2,r2,512
  803850:	1000021e 	bne	r2,zero,80385c <chk_mounted+0x2cc>
      return FR_NO_FILESYSTEM;
  803854:	00800344 	movi	r2,13
  803858:	00019806 	br	803ebc <chk_mounted+0x92c>

   fasize = LD_WORD(fs->win+BPB_FATSz16);          /* Number of sectors per FAT */
  80385c:	e0bff717 	ldw	r2,-36(fp)
  803860:	108011c3 	ldbu	r2,71(r2)
  803864:	10803fcc 	andi	r2,r2,255
  803868:	1004923a 	slli	r2,r2,8
  80386c:	1007883a 	mov	r3,r2
  803870:	e0bff717 	ldw	r2,-36(fp)
  803874:	10801183 	ldbu	r2,70(r2)
  803878:	10803fcc 	andi	r2,r2,255
  80387c:	1884b03a 	or	r2,r3,r2
  803880:	10bfffcc 	andi	r2,r2,65535
  803884:	e0bff315 	stw	r2,-52(fp)
   if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
  803888:	e0bff317 	ldw	r2,-52(fp)
  80388c:	1000131e 	bne	r2,zero,8038dc <chk_mounted+0x34c>
  803890:	e0bff717 	ldw	r2,-36(fp)
  803894:	108015c3 	ldbu	r2,87(r2)
  803898:	10803fcc 	andi	r2,r2,255
  80389c:	1006963a 	slli	r3,r2,24
  8038a0:	e0bff717 	ldw	r2,-36(fp)
  8038a4:	10801583 	ldbu	r2,86(r2)
  8038a8:	10803fcc 	andi	r2,r2,255
  8038ac:	1004943a 	slli	r2,r2,16
  8038b0:	1884b03a 	or	r2,r3,r2
  8038b4:	e0fff717 	ldw	r3,-36(fp)
  8038b8:	18c01543 	ldbu	r3,85(r3)
  8038bc:	18c03fcc 	andi	r3,r3,255
  8038c0:	1806923a 	slli	r3,r3,8
  8038c4:	10c6b03a 	or	r3,r2,r3
  8038c8:	e0bff717 	ldw	r2,-36(fp)
  8038cc:	10801503 	ldbu	r2,84(r2)
  8038d0:	10803fcc 	andi	r2,r2,255
  8038d4:	1884b03a 	or	r2,r3,r2
  8038d8:	e0bff315 	stw	r2,-52(fp)
   fs->fsize = fasize;
  8038dc:	e0bff717 	ldw	r2,-36(fp)
  8038e0:	e0fff317 	ldw	r3,-52(fp)
  8038e4:	10c00715 	stw	r3,28(r2)

   fs->n_fats = b = fs->win[BPB_NumFATs];          /* Number of FAT copies */
  8038e8:	e0bff717 	ldw	r2,-36(fp)
  8038ec:	10801003 	ldbu	r2,64(r2)
  8038f0:	e0bffa05 	stb	r2,-24(fp)
  8038f4:	e0bff717 	ldw	r2,-36(fp)
  8038f8:	e0fffa03 	ldbu	r3,-24(fp)
  8038fc:	10c000c5 	stb	r3,3(r2)
   if (b != 1 && b != 2) return FR_NO_FILESYSTEM;     /* (Must be 1 or 2) */
  803900:	e0bffa03 	ldbu	r2,-24(fp)
  803904:	10800060 	cmpeqi	r2,r2,1
  803908:	1000051e 	bne	r2,zero,803920 <chk_mounted+0x390>
  80390c:	e0bffa03 	ldbu	r2,-24(fp)
  803910:	108000a0 	cmpeqi	r2,r2,2
  803914:	1000021e 	bne	r2,zero,803920 <chk_mounted+0x390>
  803918:	00800344 	movi	r2,13
  80391c:	00016706 	br	803ebc <chk_mounted+0x92c>
   fasize *= b;                              /* Number of sectors for FAT area */
  803920:	e0bffa03 	ldbu	r2,-24(fp)
  803924:	e0fff317 	ldw	r3,-52(fp)
  803928:	1885383a 	mul	r2,r3,r2
  80392c:	e0bff315 	stw	r2,-52(fp)

   fs->csize = b = fs->win[BPB_SecPerClus];        /* Number of sectors per cluster */
  803930:	e0bff717 	ldw	r2,-36(fp)
  803934:	10800f43 	ldbu	r2,61(r2)
  803938:	e0bffa05 	stb	r2,-24(fp)
  80393c:	e0bff717 	ldw	r2,-36(fp)
  803940:	e0fffa03 	ldbu	r3,-24(fp)
  803944:	10c00085 	stb	r3,2(r2)
   if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;  /* (Must be power of 2) */
  803948:	e0bffa03 	ldbu	r2,-24(fp)
  80394c:	10000526 	beq	r2,zero,803964 <chk_mounted+0x3d4>
  803950:	e0fffa03 	ldbu	r3,-24(fp)
  803954:	e0bffa03 	ldbu	r2,-24(fp)
  803958:	10bfffc4 	addi	r2,r2,-1
  80395c:	1884703a 	and	r2,r3,r2
  803960:	10000226 	beq	r2,zero,80396c <chk_mounted+0x3dc>
  803964:	00800344 	movi	r2,13
  803968:	00015406 	br	803ebc <chk_mounted+0x92c>

   fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);   /* Number of root directory entries */
  80396c:	e0bff717 	ldw	r2,-36(fp)
  803970:	10801083 	ldbu	r2,66(r2)
  803974:	10803fcc 	andi	r2,r2,255
  803978:	1004923a 	slli	r2,r2,8
  80397c:	1007883a 	mov	r3,r2
  803980:	e0bff717 	ldw	r2,-36(fp)
  803984:	10801043 	ldbu	r2,65(r2)
  803988:	10803fcc 	andi	r2,r2,255
  80398c:	1884b03a 	or	r2,r3,r2
  803990:	1007883a 	mov	r3,r2
  803994:	e0bff717 	ldw	r2,-36(fp)
  803998:	10c0020d 	sth	r3,8(r2)
   if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must be sector aligned) */
  80399c:	e0bff717 	ldw	r2,-36(fp)
  8039a0:	1080020b 	ldhu	r2,8(r2)
  8039a4:	108003cc 	andi	r2,r2,15
  8039a8:	10bfffcc 	andi	r2,r2,65535
  8039ac:	10000226 	beq	r2,zero,8039b8 <chk_mounted+0x428>
  8039b0:	00800344 	movi	r2,13
  8039b4:	00014106 	br	803ebc <chk_mounted+0x92c>

   tsect = LD_WORD(fs->win+BPB_TotSec16);          /* Number of sectors on the volume */
  8039b8:	e0bff717 	ldw	r2,-36(fp)
  8039bc:	10801103 	ldbu	r2,68(r2)
  8039c0:	10803fcc 	andi	r2,r2,255
  8039c4:	1004923a 	slli	r2,r2,8
  8039c8:	1007883a 	mov	r3,r2
  8039cc:	e0bff717 	ldw	r2,-36(fp)
  8039d0:	108010c3 	ldbu	r2,67(r2)
  8039d4:	10803fcc 	andi	r2,r2,255
  8039d8:	1884b03a 	or	r2,r3,r2
  8039dc:	10bfffcc 	andi	r2,r2,65535
  8039e0:	e0bff415 	stw	r2,-48(fp)
   if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
  8039e4:	e0bff417 	ldw	r2,-48(fp)
  8039e8:	1000131e 	bne	r2,zero,803a38 <chk_mounted+0x4a8>
  8039ec:	e0bff717 	ldw	r2,-36(fp)
  8039f0:	108014c3 	ldbu	r2,83(r2)
  8039f4:	10803fcc 	andi	r2,r2,255
  8039f8:	1006963a 	slli	r3,r2,24
  8039fc:	e0bff717 	ldw	r2,-36(fp)
  803a00:	10801483 	ldbu	r2,82(r2)
  803a04:	10803fcc 	andi	r2,r2,255
  803a08:	1004943a 	slli	r2,r2,16
  803a0c:	1884b03a 	or	r2,r3,r2
  803a10:	e0fff717 	ldw	r3,-36(fp)
  803a14:	18c01443 	ldbu	r3,81(r3)
  803a18:	18c03fcc 	andi	r3,r3,255
  803a1c:	1806923a 	slli	r3,r3,8
  803a20:	10c6b03a 	or	r3,r2,r3
  803a24:	e0bff717 	ldw	r2,-36(fp)
  803a28:	10801403 	ldbu	r2,80(r2)
  803a2c:	10803fcc 	andi	r2,r2,255
  803a30:	1884b03a 	or	r2,r3,r2
  803a34:	e0bff415 	stw	r2,-48(fp)

   nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);            /* Number of reserved sectors */
  803a38:	e0bff717 	ldw	r2,-36(fp)
  803a3c:	10800fc3 	ldbu	r2,63(r2)
  803a40:	10803fcc 	andi	r2,r2,255
  803a44:	1004923a 	slli	r2,r2,8
  803a48:	1007883a 	mov	r3,r2
  803a4c:	e0bff717 	ldw	r2,-36(fp)
  803a50:	10800f83 	ldbu	r2,62(r2)
  803a54:	10803fcc 	andi	r2,r2,255
  803a58:	1884b03a 	or	r2,r3,r2
  803a5c:	e0bffa8d 	sth	r2,-22(fp)
   if (!nrsv) return FR_NO_FILESYSTEM;             /* (BPB_RsvdSecCnt must not be 0) */
  803a60:	e0bffa8b 	ldhu	r2,-22(fp)
  803a64:	1000021e 	bne	r2,zero,803a70 <chk_mounted+0x4e0>
  803a68:	00800344 	movi	r2,13
  803a6c:	00011306 	br	803ebc <chk_mounted+0x92c>

   /* Determine the FAT sub type */
   sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR); /* RSV+FAT+DIR */
  803a70:	e0fffa8b 	ldhu	r3,-22(fp)
  803a74:	e0bff317 	ldw	r2,-52(fp)
  803a78:	1887883a 	add	r3,r3,r2
  803a7c:	e0bff717 	ldw	r2,-36(fp)
  803a80:	1080020b 	ldhu	r2,8(r2)
  803a84:	10bfffcc 	andi	r2,r2,65535
  803a88:	1004d13a 	srli	r2,r2,4
  803a8c:	10bfffcc 	andi	r2,r2,65535
  803a90:	1885883a 	add	r2,r3,r2
  803a94:	e0bffb15 	stw	r2,-20(fp)
   if (tsect < sysect) return FR_NO_FILESYSTEM;    /* (Invalid volume size) */
  803a98:	e0fff417 	ldw	r3,-48(fp)
  803a9c:	e0bffb17 	ldw	r2,-20(fp)
  803aa0:	1880022e 	bgeu	r3,r2,803aac <chk_mounted+0x51c>
  803aa4:	00800344 	movi	r2,13
  803aa8:	00010406 	br	803ebc <chk_mounted+0x92c>
   nclst = (tsect - sysect) / fs->csize;           /* Number of clusters */
  803aac:	e0fff417 	ldw	r3,-48(fp)
  803ab0:	e0bffb17 	ldw	r2,-20(fp)
  803ab4:	1887c83a 	sub	r3,r3,r2
  803ab8:	e0bff717 	ldw	r2,-36(fp)
  803abc:	10800083 	ldbu	r2,2(r2)
  803ac0:	10803fcc 	andi	r2,r2,255
  803ac4:	100b883a 	mov	r5,r2
  803ac8:	1809883a 	mov	r4,r3
  803acc:	080a4a00 	call	80a4a0 <__udivsi3>
  803ad0:	e0bffc15 	stw	r2,-16(fp)
   if (!nclst) return FR_NO_FILESYSTEM;            /* (Invalid volume size) */
  803ad4:	e0bffc17 	ldw	r2,-16(fp)
  803ad8:	1000021e 	bne	r2,zero,803ae4 <chk_mounted+0x554>
  803adc:	00800344 	movi	r2,13
  803ae0:	0000f606 	br	803ebc <chk_mounted+0x92c>
   fmt = FS_FAT12;
  803ae4:	00800044 	movi	r2,1
  803ae8:	e0bff005 	stb	r2,-64(fp)
   if (nclst >= MIN_FAT16) fmt = FS_FAT16;
  803aec:	e0bffc17 	ldw	r2,-16(fp)
  803af0:	1083fdb0 	cmpltui	r2,r2,4086
  803af4:	1000021e 	bne	r2,zero,803b00 <chk_mounted+0x570>
  803af8:	00800084 	movi	r2,2
  803afc:	e0bff005 	stb	r2,-64(fp)
   if (nclst >= MIN_FAT32) fmt = FS_FAT32;
  803b00:	e0bffc17 	ldw	r2,-16(fp)
  803b04:	10bffdb0 	cmpltui	r2,r2,65526
  803b08:	1000021e 	bne	r2,zero,803b14 <chk_mounted+0x584>
  803b0c:	008000c4 	movi	r2,3
  803b10:	e0bff005 	stb	r2,-64(fp)

   /* Boundaries and Limits */
   fs->n_fatent = nclst + 2;                    /* Number of FAT entries */
  803b14:	e0bffc17 	ldw	r2,-16(fp)
  803b18:	10c00084 	addi	r3,r2,2
  803b1c:	e0bff717 	ldw	r2,-36(fp)
  803b20:	10c00615 	stw	r3,24(r2)
   fs->database = bsect + sysect;                  /* Data start sector */
  803b24:	e0fff217 	ldw	r3,-56(fp)
  803b28:	e0bffb17 	ldw	r2,-20(fp)
  803b2c:	1887883a 	add	r3,r3,r2
  803b30:	e0bff717 	ldw	r2,-36(fp)
  803b34:	10c00a15 	stw	r3,40(r2)
   fs->fatbase = bsect + nrsv;                  /* FAT start sector */
  803b38:	e0fffa8b 	ldhu	r3,-22(fp)
  803b3c:	e0bff217 	ldw	r2,-56(fp)
  803b40:	1887883a 	add	r3,r3,r2
  803b44:	e0bff717 	ldw	r2,-36(fp)
  803b48:	10c00815 	stw	r3,32(r2)
   if (fmt == FS_FAT32) {
  803b4c:	e0bff003 	ldbu	r2,-64(fp)
  803b50:	108000d8 	cmpnei	r2,r2,3
  803b54:	1000201e 	bne	r2,zero,803bd8 <chk_mounted+0x648>
      if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
  803b58:	e0bff717 	ldw	r2,-36(fp)
  803b5c:	1080020b 	ldhu	r2,8(r2)
  803b60:	10bfffcc 	andi	r2,r2,65535
  803b64:	10000226 	beq	r2,zero,803b70 <chk_mounted+0x5e0>
  803b68:	00800344 	movi	r2,13
  803b6c:	0000d306 	br	803ebc <chk_mounted+0x92c>
      fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
  803b70:	e0bff717 	ldw	r2,-36(fp)
  803b74:	108017c3 	ldbu	r2,95(r2)
  803b78:	10803fcc 	andi	r2,r2,255
  803b7c:	1006963a 	slli	r3,r2,24
  803b80:	e0bff717 	ldw	r2,-36(fp)
  803b84:	10801783 	ldbu	r2,94(r2)
  803b88:	10803fcc 	andi	r2,r2,255
  803b8c:	1004943a 	slli	r2,r2,16
  803b90:	1884b03a 	or	r2,r3,r2
  803b94:	e0fff717 	ldw	r3,-36(fp)
  803b98:	18c01743 	ldbu	r3,93(r3)
  803b9c:	18c03fcc 	andi	r3,r3,255
  803ba0:	1806923a 	slli	r3,r3,8
  803ba4:	10c6b03a 	or	r3,r2,r3
  803ba8:	e0bff717 	ldw	r2,-36(fp)
  803bac:	10801703 	ldbu	r2,92(r2)
  803bb0:	10803fcc 	andi	r2,r2,255
  803bb4:	1886b03a 	or	r3,r3,r2
  803bb8:	e0bff717 	ldw	r2,-36(fp)
  803bbc:	10c00915 	stw	r3,36(r2)
      szbfat = fs->n_fatent * 4;                /* (Required FAT size) */
  803bc0:	e0bff717 	ldw	r2,-36(fp)
  803bc4:	10800617 	ldw	r2,24(r2)
  803bc8:	1085883a 	add	r2,r2,r2
  803bcc:	1085883a 	add	r2,r2,r2
  803bd0:	e0bff515 	stw	r2,-44(fp)
  803bd4:	00001e06 	br	803c50 <chk_mounted+0x6c0>
   } else {
      if (!fs->n_rootdir)  return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must not be 0) */
  803bd8:	e0bff717 	ldw	r2,-36(fp)
  803bdc:	1080020b 	ldhu	r2,8(r2)
  803be0:	10bfffcc 	andi	r2,r2,65535
  803be4:	1000021e 	bne	r2,zero,803bf0 <chk_mounted+0x660>
  803be8:	00800344 	movi	r2,13
  803bec:	0000b306 	br	803ebc <chk_mounted+0x92c>
      fs->dirbase = fs->fatbase + fasize;          /* Root directory start sector */
  803bf0:	e0bff717 	ldw	r2,-36(fp)
  803bf4:	10c00817 	ldw	r3,32(r2)
  803bf8:	e0bff317 	ldw	r2,-52(fp)
  803bfc:	1887883a 	add	r3,r3,r2
  803c00:	e0bff717 	ldw	r2,-36(fp)
  803c04:	10c00915 	stw	r3,36(r2)
      szbfat = (fmt == FS_FAT16) ?              /* (Required FAT size) */
         fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
  803c08:	e0bff003 	ldbu	r2,-64(fp)
  803c0c:	10800098 	cmpnei	r2,r2,2
  803c10:	1000041e 	bne	r2,zero,803c24 <chk_mounted+0x694>
  803c14:	e0bff717 	ldw	r2,-36(fp)
  803c18:	10800617 	ldw	r2,24(r2)
  803c1c:	1085883a 	add	r2,r2,r2
  803c20:	00000a06 	br	803c4c <chk_mounted+0x6bc>
  803c24:	e0bff717 	ldw	r2,-36(fp)
  803c28:	10c00617 	ldw	r3,24(r2)
  803c2c:	1805883a 	mov	r2,r3
  803c30:	1085883a 	add	r2,r2,r2
  803c34:	10c5883a 	add	r2,r2,r3
  803c38:	1006d07a 	srli	r3,r2,1
  803c3c:	e0bff717 	ldw	r2,-36(fp)
  803c40:	10800617 	ldw	r2,24(r2)
  803c44:	1080004c 	andi	r2,r2,1
  803c48:	1885883a 	add	r2,r3,r2
      fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
      szbfat = fs->n_fatent * 4;                /* (Required FAT size) */
   } else {
      if (!fs->n_rootdir)  return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must not be 0) */
      fs->dirbase = fs->fatbase + fasize;          /* Root directory start sector */
      szbfat = (fmt == FS_FAT16) ?              /* (Required FAT size) */
  803c4c:	e0bff515 	stw	r2,-44(fp)
         fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   }
   if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))  /* (BPB_FATSz must not be less than required) */
  803c50:	e0bff717 	ldw	r2,-36(fp)
  803c54:	10c00717 	ldw	r3,28(r2)
  803c58:	e0bff517 	ldw	r2,-44(fp)
  803c5c:	10807fc4 	addi	r2,r2,511
  803c60:	1004d27a 	srli	r2,r2,9
  803c64:	1880022e 	bgeu	r3,r2,803c70 <chk_mounted+0x6e0>
      return FR_NO_FILESYSTEM;
  803c68:	00800344 	movi	r2,13
  803c6c:	00009306 	br	803ebc <chk_mounted+0x92c>

#if !_FS_READONLY
   /* Initialize cluster allocation information */
   fs->free_clust = 0xFFFFFFFF;
  803c70:	e0bff717 	ldw	r2,-36(fp)
  803c74:	00ffffc4 	movi	r3,-1
  803c78:	10c00415 	stw	r3,16(r2)
   fs->last_clust = 0;
  803c7c:	e0bff717 	ldw	r2,-36(fp)
  803c80:	10000315 	stw	zero,12(r2)

   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
  803c84:	e0bff003 	ldbu	r2,-64(fp)
  803c88:	108000d8 	cmpnei	r2,r2,3
  803c8c:	10007d1e 	bne	r2,zero,803e84 <chk_mounted+0x8f4>
      fs->fsi_flag = 0;
  803c90:	e0bff717 	ldw	r2,-36(fp)
  803c94:	10000145 	stb	zero,5(r2)
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
  803c98:	e0bff717 	ldw	r2,-36(fp)
  803c9c:	10801843 	ldbu	r2,97(r2)
  803ca0:	10803fcc 	andi	r2,r2,255
  803ca4:	1004923a 	slli	r2,r2,8
  803ca8:	1007883a 	mov	r3,r2
  803cac:	e0bff717 	ldw	r2,-36(fp)
  803cb0:	10801803 	ldbu	r2,96(r2)
  803cb4:	10803fcc 	andi	r2,r2,255
  803cb8:	1884b03a 	or	r2,r3,r2
  803cbc:	10ffffcc 	andi	r3,r2,65535
  803cc0:	e0bff217 	ldw	r2,-56(fp)
  803cc4:	1887883a 	add	r3,r3,r2
  803cc8:	e0bff717 	ldw	r2,-36(fp)
  803ccc:	10c00515 	stw	r3,20(r2)
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  803cd0:	e0bff717 	ldw	r2,-36(fp)
  803cd4:	10800043 	ldbu	r2,1(r2)
  803cd8:	10c03fcc 	andi	r3,r2,255
  803cdc:	e0bff717 	ldw	r2,-36(fp)
  803ce0:	11000c04 	addi	r4,r2,48
  803ce4:	e0bff717 	ldw	r2,-36(fp)
  803ce8:	10800517 	ldw	r2,20(r2)
  803cec:	01c00044 	movi	r7,1
  803cf0:	100d883a 	mov	r6,r2
  803cf4:	200b883a 	mov	r5,r4
  803cf8:	1809883a 	mov	r4,r3
  803cfc:	0800e080 	call	800e08 <ffs_DiskIORead>
  803d00:	1000601e 	bne	r2,zero,803e84 <chk_mounted+0x8f4>
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  803d04:	e0bff717 	ldw	r2,-36(fp)
  803d08:	10808bc3 	ldbu	r2,559(r2)
  803d0c:	10803fcc 	andi	r2,r2,255
  803d10:	1004923a 	slli	r2,r2,8
  803d14:	1007883a 	mov	r3,r2
  803d18:	e0bff717 	ldw	r2,-36(fp)
  803d1c:	10808b83 	ldbu	r2,558(r2)
  803d20:	10803fcc 	andi	r2,r2,255
  803d24:	1884b03a 	or	r2,r3,r2

   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
  803d28:	10bfffcc 	andi	r2,r2,65535
  803d2c:	10a0001c 	xori	r2,r2,32768
  803d30:	10a00004 	addi	r2,r2,-32768
  803d34:	10aa9558 	cmpnei	r2,r2,-21931
  803d38:	1000521e 	bne	r2,zero,803e84 <chk_mounted+0x8f4>
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  803d3c:	e0bff717 	ldw	r2,-36(fp)
  803d40:	10800cc3 	ldbu	r2,51(r2)
  803d44:	10803fcc 	andi	r2,r2,255
  803d48:	1006963a 	slli	r3,r2,24
  803d4c:	e0bff717 	ldw	r2,-36(fp)
  803d50:	10800c83 	ldbu	r2,50(r2)
  803d54:	10803fcc 	andi	r2,r2,255
  803d58:	1004943a 	slli	r2,r2,16
  803d5c:	1884b03a 	or	r2,r3,r2
  803d60:	e0fff717 	ldw	r3,-36(fp)
  803d64:	18c00c43 	ldbu	r3,49(r3)
  803d68:	18c03fcc 	andi	r3,r3,255
  803d6c:	1806923a 	slli	r3,r3,8
  803d70:	10c6b03a 	or	r3,r2,r3
  803d74:	e0bff717 	ldw	r2,-36(fp)
  803d78:	10800c03 	ldbu	r2,48(r2)
  803d7c:	10803fcc 	andi	r2,r2,255
  803d80:	1886b03a 	or	r3,r3,r2
   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
  803d84:	00905874 	movhi	r2,16737
  803d88:	10949484 	addi	r2,r2,21074
  803d8c:	18803d1e 	bne	r3,r2,803e84 <chk_mounted+0x8f4>
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
         LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
  803d90:	e0bff717 	ldw	r2,-36(fp)
  803d94:	108085c3 	ldbu	r2,535(r2)
  803d98:	10803fcc 	andi	r2,r2,255
  803d9c:	1006963a 	slli	r3,r2,24
  803da0:	e0bff717 	ldw	r2,-36(fp)
  803da4:	10808583 	ldbu	r2,534(r2)
  803da8:	10803fcc 	andi	r2,r2,255
  803dac:	1004943a 	slli	r2,r2,16
  803db0:	1884b03a 	or	r2,r3,r2
  803db4:	e0fff717 	ldw	r3,-36(fp)
  803db8:	18c08543 	ldbu	r3,533(r3)
  803dbc:	18c03fcc 	andi	r3,r3,255
  803dc0:	1806923a 	slli	r3,r3,8
  803dc4:	10c6b03a 	or	r3,r2,r3
  803dc8:	e0bff717 	ldw	r2,-36(fp)
  803dcc:	10808503 	ldbu	r2,532(r2)
  803dd0:	10803fcc 	andi	r2,r2,255
  803dd4:	1886b03a 	or	r3,r3,r2
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
  803dd8:	00985074 	movhi	r2,24897
  803ddc:	109c9c84 	addi	r2,r2,29298
  803de0:	1880281e 	bne	r3,r2,803e84 <chk_mounted+0x8f4>
         LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
            fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
  803de4:	e0bff717 	ldw	r2,-36(fp)
  803de8:	108087c3 	ldbu	r2,543(r2)
  803dec:	10803fcc 	andi	r2,r2,255
  803df0:	1006963a 	slli	r3,r2,24
  803df4:	e0bff717 	ldw	r2,-36(fp)
  803df8:	10808783 	ldbu	r2,542(r2)
  803dfc:	10803fcc 	andi	r2,r2,255
  803e00:	1004943a 	slli	r2,r2,16
  803e04:	1884b03a 	or	r2,r3,r2
  803e08:	e0fff717 	ldw	r3,-36(fp)
  803e0c:	18c08743 	ldbu	r3,541(r3)
  803e10:	18c03fcc 	andi	r3,r3,255
  803e14:	1806923a 	slli	r3,r3,8
  803e18:	10c6b03a 	or	r3,r2,r3
  803e1c:	e0bff717 	ldw	r2,-36(fp)
  803e20:	10808703 	ldbu	r2,540(r2)
  803e24:	10803fcc 	andi	r2,r2,255
  803e28:	1886b03a 	or	r3,r3,r2
  803e2c:	e0bff717 	ldw	r2,-36(fp)
  803e30:	10c00315 	stw	r3,12(r2)
            fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
  803e34:	e0bff717 	ldw	r2,-36(fp)
  803e38:	108086c3 	ldbu	r2,539(r2)
  803e3c:	10803fcc 	andi	r2,r2,255
  803e40:	1006963a 	slli	r3,r2,24
  803e44:	e0bff717 	ldw	r2,-36(fp)
  803e48:	10808683 	ldbu	r2,538(r2)
  803e4c:	10803fcc 	andi	r2,r2,255
  803e50:	1004943a 	slli	r2,r2,16
  803e54:	1884b03a 	or	r2,r3,r2
  803e58:	e0fff717 	ldw	r3,-36(fp)
  803e5c:	18c08643 	ldbu	r3,537(r3)
  803e60:	18c03fcc 	andi	r3,r3,255
  803e64:	1806923a 	slli	r3,r3,8
  803e68:	10c6b03a 	or	r3,r2,r3
  803e6c:	e0bff717 	ldw	r2,-36(fp)
  803e70:	10808603 	ldbu	r2,536(r2)
  803e74:	10803fcc 	andi	r2,r2,255
  803e78:	1886b03a 	or	r3,r3,r2
  803e7c:	e0bff717 	ldw	r2,-36(fp)
  803e80:	10c00415 	stw	r3,16(r2)
      }
   }
#endif
   fs->fs_type = fmt;      /* FAT sub-type */
  803e84:	e0bff717 	ldw	r2,-36(fp)
  803e88:	e0fff003 	ldbu	r3,-64(fp)
  803e8c:	10c00005 	stb	r3,0(r2)
   fs->id = ++Fsid;     /* File system mount ID */
  803e90:	d0a7470b 	ldhu	r2,-25316(gp)
  803e94:	10800044 	addi	r2,r2,1
  803e98:	d0a7470d 	sth	r2,-25316(gp)
  803e9c:	d0e7470b 	ldhu	r3,-25316(gp)
  803ea0:	e0bff717 	ldw	r2,-36(fp)
  803ea4:	10c0018d 	sth	r3,6(r2)
   fs->winsect = 0;     /* Invalidate sector cache */
  803ea8:	e0bff717 	ldw	r2,-36(fp)
  803eac:	10000b15 	stw	zero,44(r2)
   fs->wflag = 0;
  803eb0:	e0bff717 	ldw	r2,-36(fp)
  803eb4:	10000105 	stb	zero,4(r2)
#endif
#if _FS_SHARE           /* Clear file lock semaphores */
   clear_lock(fs);
#endif

   return FR_OK;
  803eb8:	0005883a 	mov	r2,zero
}
  803ebc:	e037883a 	mov	sp,fp
  803ec0:	dfc00117 	ldw	ra,4(sp)
  803ec4:	df000017 	ldw	fp,0(sp)
  803ec8:	dec00204 	addi	sp,sp,8
  803ecc:	f800283a 	ret

00803ed0 <validate>:
static
FRESULT validate (   /* FR_OK(0): The object is valid, !=0: Invalid */
   FATFS *fs,     /* Pointer to the file system object */
   uint16_t id        /* Member id of the target object to be checked */
)
{
  803ed0:	defffc04 	addi	sp,sp,-16
  803ed4:	dfc00315 	stw	ra,12(sp)
  803ed8:	df000215 	stw	fp,8(sp)
  803edc:	df000204 	addi	fp,sp,8
  803ee0:	e13ffe15 	stw	r4,-8(fp)
  803ee4:	2805883a 	mov	r2,r5
  803ee8:	e0bfff0d 	sth	r2,-4(fp)
   if (!fs || !fs->fs_type || fs->id != id)
  803eec:	e0bffe17 	ldw	r2,-8(fp)
  803ef0:	10000926 	beq	r2,zero,803f18 <validate+0x48>
  803ef4:	e0bffe17 	ldw	r2,-8(fp)
  803ef8:	10800003 	ldbu	r2,0(r2)
  803efc:	10803fcc 	andi	r2,r2,255
  803f00:	10000526 	beq	r2,zero,803f18 <validate+0x48>
  803f04:	e0bffe17 	ldw	r2,-8(fp)
  803f08:	1080018b 	ldhu	r2,6(r2)
  803f0c:	10ffffcc 	andi	r3,r2,65535
  803f10:	e0bfff0b 	ldhu	r2,-4(fp)
  803f14:	18800226 	beq	r3,r2,803f20 <validate+0x50>
      return FR_INVALID_OBJECT;
  803f18:	00800244 	movi	r2,9
  803f1c:	00000b06 	br	803f4c <validate+0x7c>

   ENTER_FF(fs);     /* Lock file system */

   if (disk_status(fs->drv) & STA_NOINIT)
  803f20:	e0bffe17 	ldw	r2,-8(fp)
  803f24:	10800043 	ldbu	r2,1(r2)
  803f28:	10803fcc 	andi	r2,r2,255
  803f2c:	1009883a 	mov	r4,r2
  803f30:	0800de00 	call	800de0 <ffs_DiskIOStatus>
  803f34:	10803fcc 	andi	r2,r2,255
  803f38:	1080004c 	andi	r2,r2,1
  803f3c:	10000226 	beq	r2,zero,803f48 <validate+0x78>
      return FR_NOT_READY;
  803f40:	008000c4 	movi	r2,3
  803f44:	00000106 	br	803f4c <validate+0x7c>

   return FR_OK;
  803f48:	0005883a 	mov	r2,zero
}
  803f4c:	e037883a 	mov	sp,fp
  803f50:	dfc00117 	ldw	ra,4(sp)
  803f54:	df000017 	ldw	fp,0(sp)
  803f58:	dec00204 	addi	sp,sp,8
  803f5c:	f800283a 	ret

00803f60 <f_mount>:

FRESULT f_mount (
   uint8_t vol,      /* Logical drive number to be mounted/unmounted */
   FATFS *fs      /* Pointer to new file system object (NULL for unmount)*/
)
{
  803f60:	defffc04 	addi	sp,sp,-16
  803f64:	df000315 	stw	fp,12(sp)
  803f68:	df000304 	addi	fp,sp,12
  803f6c:	2005883a 	mov	r2,r4
  803f70:	e17fff15 	stw	r5,-4(fp)
  803f74:	e0bffe05 	stb	r2,-8(fp)
   FATFS *rfs;


   if (vol >= _VOLUMES)    /* Check if the drive number is valid */
  803f78:	e0bffe03 	ldbu	r2,-8(fp)
  803f7c:	10000226 	beq	r2,zero,803f88 <f_mount+0x28>
      return FR_INVALID_DRIVE;
  803f80:	008002c4 	movi	r2,11
  803f84:	00001706 	br	803fe4 <f_mount+0x84>
   rfs = FatFs[vol];       /* Get current fs object */
  803f88:	e0bffe03 	ldbu	r2,-8(fp)
  803f8c:	1085883a 	add	r2,r2,r2
  803f90:	1087883a 	add	r3,r2,r2
  803f94:	d0a74604 	addi	r2,gp,-25320
  803f98:	1885883a 	add	r2,r3,r2
  803f9c:	10800017 	ldw	r2,0(r2)
  803fa0:	e0bffd15 	stw	r2,-12(fp)

   if (rfs) {
  803fa4:	e0bffd17 	ldw	r2,-12(fp)
  803fa8:	10000226 	beq	r2,zero,803fb4 <f_mount+0x54>
      clear_lock(rfs);
#endif
#if _FS_REENTRANT          /* Discard sync object of the current volume */
      if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
      rfs->fs_type = 0;    /* Clear old fs object */
  803fac:	e0bffd17 	ldw	r2,-12(fp)
  803fb0:	10000005 	stb	zero,0(r2)
   }

   if (fs) {
  803fb4:	e0bfff17 	ldw	r2,-4(fp)
  803fb8:	10000226 	beq	r2,zero,803fc4 <f_mount+0x64>
      fs->fs_type = 0;     /* Clear new fs object */
  803fbc:	e0bfff17 	ldw	r2,-4(fp)
  803fc0:	10000005 	stb	zero,0(r2)
#if _FS_REENTRANT          /* Create sync object for the new volume */
      if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
   }
   FatFs[vol] = fs;        /* Register new fs object */
  803fc4:	e0bffe03 	ldbu	r2,-8(fp)
  803fc8:	1085883a 	add	r2,r2,r2
  803fcc:	1087883a 	add	r3,r2,r2
  803fd0:	d0a74604 	addi	r2,gp,-25320
  803fd4:	1885883a 	add	r2,r3,r2
  803fd8:	e0ffff17 	ldw	r3,-4(fp)
  803fdc:	10c00015 	stw	r3,0(r2)

   return FR_OK;
  803fe0:	0005883a 	mov	r2,zero
}
  803fe4:	e037883a 	mov	sp,fp
  803fe8:	df000017 	ldw	fp,0(sp)
  803fec:	dec00104 	addi	sp,sp,4
  803ff0:	f800283a 	ret

00803ff4 <f_open>:
FRESULT f_open (
   FIL *fp,       /* Pointer to the blank file object */
   const TCHAR *path,   /* Pointer to the file name */
   uint8_t mode         /* Access mode and file open mode flags */
)
{
  803ff4:	deffed04 	addi	sp,sp,-76
  803ff8:	dfc01215 	stw	ra,72(sp)
  803ffc:	df001115 	stw	fp,68(sp)
  804000:	df001104 	addi	fp,sp,68
  804004:	e13ffd15 	stw	r4,-12(fp)
  804008:	e17ffe15 	stw	r5,-8(fp)
  80400c:	3005883a 	mov	r2,r6
  804010:	e0bfff05 	stb	r2,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   fp->fs = 0;       /* Clear file object */
  804014:	e0bffd17 	ldw	r2,-12(fp)
  804018:	10000015 	stw	zero,0(r2)

#if !_FS_READONLY
   mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
  80401c:	e0bfff03 	ldbu	r2,-4(fp)
  804020:	108007cc 	andi	r2,r2,31
  804024:	e0bfff05 	stb	r2,-4(fp)
   res = chk_mounted(&path, &dj.fs, (uint8_t)(mode & ~FA_READ));
  804028:	e0bfff03 	ldbu	r2,-4(fp)
  80402c:	11003f8c 	andi	r4,r2,254
  804030:	e0fff304 	addi	r3,fp,-52
  804034:	e0bffe04 	addi	r2,fp,-8
  804038:	200d883a 	mov	r6,r4
  80403c:	180b883a 	mov	r5,r3
  804040:	1009883a 	mov	r4,r2
  804044:	08035900 	call	803590 <chk_mounted>
  804048:	e0bfef15 	stw	r2,-68(fp)
#else
   mode &= FA_READ;
   res = chk_mounted(&path, &dj.fs, 0);
#endif
   INIT_BUF(dj);
  80404c:	e0bffa04 	addi	r2,fp,-24
  804050:	e0bff915 	stw	r2,-28(fp)
   if (res == FR_OK)
  804054:	e0bfef17 	ldw	r2,-68(fp)
  804058:	1000061e 	bne	r2,zero,804074 <f_open+0x80>
      res = follow_path(&dj, path); /* Follow the file path */
  80405c:	e0fffe17 	ldw	r3,-8(fp)
  804060:	e0bff304 	addi	r2,fp,-52
  804064:	180b883a 	mov	r5,r3
  804068:	1009883a 	mov	r4,r2
  80406c:	08032080 	call	803208 <follow_path>
  804070:	e0bfef15 	stw	r2,-68(fp)
   dir = dj.dir;
  804074:	e0bff817 	ldw	r2,-32(fp)
  804078:	e0bff015 	stw	r2,-64(fp)

#if !_FS_READONLY /* R/W configuration */
   if (res == FR_OK) {
  80407c:	e0bfef17 	ldw	r2,-68(fp)
  804080:	1000041e 	bne	r2,zero,804094 <f_open+0xa0>
      if (!dir)   /* Current dir itself */
  804084:	e0bff017 	ldw	r2,-64(fp)
  804088:	1000021e 	bne	r2,zero,804094 <f_open+0xa0>
         res = FR_INVALID_NAME;
  80408c:	00800184 	movi	r2,6
  804090:	e0bfef15 	stw	r2,-68(fp)
      else
         res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
   }
   /* Create or Open a file */
   if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
  804094:	e0bfff03 	ldbu	r2,-4(fp)
  804098:	1080070c 	andi	r2,r2,28
  80409c:	10008726 	beq	r2,zero,8042bc <f_open+0x2c8>
      uint32_t dw, cl;

      if (res != FR_OK) {              /* No file, create new */
  8040a0:	e0bfef17 	ldw	r2,-68(fp)
  8040a4:	10000d26 	beq	r2,zero,8040dc <f_open+0xe8>
         if (res == FR_NO_FILE)        /* There is no file to open, create a new entry */
  8040a8:	e0bfef17 	ldw	r2,-68(fp)
  8040ac:	10800118 	cmpnei	r2,r2,4
  8040b0:	1000041e 	bne	r2,zero,8040c4 <f_open+0xd0>
#if _FS_SHARE
            res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
            res = dir_register(&dj);
  8040b4:	e0bff304 	addi	r2,fp,-52
  8040b8:	1009883a 	mov	r4,r2
  8040bc:	0802b240 	call	802b24 <dir_register>
  8040c0:	e0bfef15 	stw	r2,-68(fp)
#endif
         mode |= FA_CREATE_ALWAYS;     /* File is created */
  8040c4:	e0bfff03 	ldbu	r2,-4(fp)
  8040c8:	10800214 	ori	r2,r2,8
  8040cc:	e0bfff05 	stb	r2,-4(fp)
         dir = dj.dir;              /* New entry */
  8040d0:	e0bff817 	ldw	r2,-32(fp)
  8040d4:	e0bff015 	stw	r2,-64(fp)
  8040d8:	00000e06 	br	804114 <f_open+0x120>
      }
      else {                        /* Any object is already existing */
         if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {  /* Cannot overwrite it (R/O or DIR) */
  8040dc:	e0bff017 	ldw	r2,-64(fp)
  8040e0:	108002c4 	addi	r2,r2,11
  8040e4:	10800003 	ldbu	r2,0(r2)
  8040e8:	10803fcc 	andi	r2,r2,255
  8040ec:	1080044c 	andi	r2,r2,17
  8040f0:	10000326 	beq	r2,zero,804100 <f_open+0x10c>
            res = FR_DENIED;
  8040f4:	008001c4 	movi	r2,7
  8040f8:	e0bfef15 	stw	r2,-68(fp)
  8040fc:	00000506 	br	804114 <f_open+0x120>
         } else {
            if (mode & FA_CREATE_NEW)  /* Cannot create as new file */
  804100:	e0bfff03 	ldbu	r2,-4(fp)
  804104:	1080010c 	andi	r2,r2,4
  804108:	10000226 	beq	r2,zero,804114 <f_open+0x120>
               res = FR_EXIST;
  80410c:	00800204 	movi	r2,8
  804110:	e0bfef15 	stw	r2,-68(fp)
         }
      }
      if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {   /* Truncate it if overwrite mode */
  804114:	e0bfef17 	ldw	r2,-68(fp)
  804118:	10007e1e 	bne	r2,zero,804314 <f_open+0x320>
  80411c:	e0bfff03 	ldbu	r2,-4(fp)
  804120:	1080020c 	andi	r2,r2,8
  804124:	10007b26 	beq	r2,zero,804314 <f_open+0x320>
         dw = get_fattime();              /* Created time */
  804128:	080155c0 	call	80155c <get_fattime>
  80412c:	e0bff115 	stw	r2,-60(fp)
         ST_DWORD(dir+DIR_CrtTime, dw);
  804130:	e0bff017 	ldw	r2,-64(fp)
  804134:	10800384 	addi	r2,r2,14
  804138:	e0fff117 	ldw	r3,-60(fp)
  80413c:	10c00005 	stb	r3,0(r2)
  804140:	e0bff017 	ldw	r2,-64(fp)
  804144:	108003c4 	addi	r2,r2,15
  804148:	e0fff117 	ldw	r3,-60(fp)
  80414c:	18ffffcc 	andi	r3,r3,65535
  804150:	1807d23a 	srai	r3,r3,8
  804154:	10c00005 	stb	r3,0(r2)
  804158:	e0bff017 	ldw	r2,-64(fp)
  80415c:	10800404 	addi	r2,r2,16
  804160:	e0fff117 	ldw	r3,-60(fp)
  804164:	1806d43a 	srli	r3,r3,16
  804168:	10c00005 	stb	r3,0(r2)
  80416c:	e0bff017 	ldw	r2,-64(fp)
  804170:	10800444 	addi	r2,r2,17
  804174:	e0fff117 	ldw	r3,-60(fp)
  804178:	1806d63a 	srli	r3,r3,24
  80417c:	10c00005 	stb	r3,0(r2)
         dir[DIR_Attr] = 0;               /* Reset attribute */
  804180:	e0bff017 	ldw	r2,-64(fp)
  804184:	108002c4 	addi	r2,r2,11
  804188:	10000005 	stb	zero,0(r2)
         ST_DWORD(dir+DIR_FileSize, 0);      /* size = 0 */
  80418c:	e0bff017 	ldw	r2,-64(fp)
  804190:	10800704 	addi	r2,r2,28
  804194:	10000005 	stb	zero,0(r2)
  804198:	e0bff017 	ldw	r2,-64(fp)
  80419c:	10800744 	addi	r2,r2,29
  8041a0:	10000005 	stb	zero,0(r2)
  8041a4:	e0bff017 	ldw	r2,-64(fp)
  8041a8:	10800784 	addi	r2,r2,30
  8041ac:	10000005 	stb	zero,0(r2)
  8041b0:	e0bff017 	ldw	r2,-64(fp)
  8041b4:	108007c4 	addi	r2,r2,31
  8041b8:	10000005 	stb	zero,0(r2)
         cl = LD_CLUST(dir);              /* Get start cluster */
  8041bc:	e0bff017 	ldw	r2,-64(fp)
  8041c0:	10800544 	addi	r2,r2,21
  8041c4:	10800003 	ldbu	r2,0(r2)
  8041c8:	10803fcc 	andi	r2,r2,255
  8041cc:	1004923a 	slli	r2,r2,8
  8041d0:	1007883a 	mov	r3,r2
  8041d4:	e0bff017 	ldw	r2,-64(fp)
  8041d8:	10800504 	addi	r2,r2,20
  8041dc:	10800003 	ldbu	r2,0(r2)
  8041e0:	10803fcc 	andi	r2,r2,255
  8041e4:	1884b03a 	or	r2,r3,r2
  8041e8:	10bfffcc 	andi	r2,r2,65535
  8041ec:	1006943a 	slli	r3,r2,16
  8041f0:	e0bff017 	ldw	r2,-64(fp)
  8041f4:	108006c4 	addi	r2,r2,27
  8041f8:	10800003 	ldbu	r2,0(r2)
  8041fc:	10803fcc 	andi	r2,r2,255
  804200:	1004923a 	slli	r2,r2,8
  804204:	1009883a 	mov	r4,r2
  804208:	e0bff017 	ldw	r2,-64(fp)
  80420c:	10800684 	addi	r2,r2,26
  804210:	10800003 	ldbu	r2,0(r2)
  804214:	10803fcc 	andi	r2,r2,255
  804218:	2084b03a 	or	r2,r4,r2
  80421c:	10bfffcc 	andi	r2,r2,65535
  804220:	1884b03a 	or	r2,r3,r2
  804224:	e0bff215 	stw	r2,-56(fp)
         ST_CLUST(dir, 0);             /* cluster = 0 */
  804228:	e0bff017 	ldw	r2,-64(fp)
  80422c:	10800684 	addi	r2,r2,26
  804230:	10000005 	stb	zero,0(r2)
  804234:	e0bff017 	ldw	r2,-64(fp)
  804238:	108006c4 	addi	r2,r2,27
  80423c:	10000005 	stb	zero,0(r2)
  804240:	e0bff017 	ldw	r2,-64(fp)
  804244:	10800504 	addi	r2,r2,20
  804248:	10000005 	stb	zero,0(r2)
  80424c:	e0bff017 	ldw	r2,-64(fp)
  804250:	10800544 	addi	r2,r2,21
  804254:	10000005 	stb	zero,0(r2)
         dj.fs->wflag = 1;
  804258:	e0bff317 	ldw	r2,-52(fp)
  80425c:	00c00044 	movi	r3,1
  804260:	10c00105 	stb	r3,4(r2)
         if (cl) {                     /* Remove the cluster chain if exist */
  804264:	e0bff217 	ldw	r2,-56(fp)
  804268:	10002a26 	beq	r2,zero,804314 <f_open+0x320>
            dw = dj.fs->winsect;
  80426c:	e0bff317 	ldw	r2,-52(fp)
  804270:	10800b17 	ldw	r2,44(r2)
  804274:	e0bff115 	stw	r2,-60(fp)
            res = remove_chain(dj.fs, cl);
  804278:	e0bff317 	ldw	r2,-52(fp)
  80427c:	e17ff217 	ldw	r5,-56(fp)
  804280:	1009883a 	mov	r4,r2
  804284:	08021540 	call	802154 <remove_chain>
  804288:	e0bfef15 	stw	r2,-68(fp)
            if (res == FR_OK) {
  80428c:	e0bfef17 	ldw	r2,-68(fp)
  804290:	1000201e 	bne	r2,zero,804314 <f_open+0x320>
               dj.fs->last_clust = cl - 1;   /* Reuse the cluster hole */
  804294:	e0bff317 	ldw	r2,-52(fp)
  804298:	e0fff217 	ldw	r3,-56(fp)
  80429c:	18ffffc4 	addi	r3,r3,-1
  8042a0:	10c00315 	stw	r3,12(r2)
               res = move_window(dj.fs, dw);
  8042a4:	e0bff317 	ldw	r2,-52(fp)
  8042a8:	e17ff117 	ldw	r5,-60(fp)
  8042ac:	1009883a 	mov	r4,r2
  8042b0:	080175c0 	call	80175c <move_window>
  8042b4:	e0bfef15 	stw	r2,-68(fp)
  8042b8:	00001606 	br	804314 <f_open+0x320>
            }
         }
      }
   }
   else {   /* Open an existing file */
      if (res == FR_OK) {                 /* Follow succeeded */
  8042bc:	e0bfef17 	ldw	r2,-68(fp)
  8042c0:	1000141e 	bne	r2,zero,804314 <f_open+0x320>
         if (dir[DIR_Attr] & AM_DIR) {    /* It is a directory */
  8042c4:	e0bff017 	ldw	r2,-64(fp)
  8042c8:	108002c4 	addi	r2,r2,11
  8042cc:	10800003 	ldbu	r2,0(r2)
  8042d0:	10803fcc 	andi	r2,r2,255
  8042d4:	1080040c 	andi	r2,r2,16
  8042d8:	10000326 	beq	r2,zero,8042e8 <f_open+0x2f4>
            res = FR_NO_FILE;
  8042dc:	00800104 	movi	r2,4
  8042e0:	e0bfef15 	stw	r2,-68(fp)
  8042e4:	00000b06 	br	804314 <f_open+0x320>
         } else {
            if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
  8042e8:	e0bfff03 	ldbu	r2,-4(fp)
  8042ec:	1080008c 	andi	r2,r2,2
  8042f0:	10000826 	beq	r2,zero,804314 <f_open+0x320>
  8042f4:	e0bff017 	ldw	r2,-64(fp)
  8042f8:	108002c4 	addi	r2,r2,11
  8042fc:	10800003 	ldbu	r2,0(r2)
  804300:	10803fcc 	andi	r2,r2,255
  804304:	1080004c 	andi	r2,r2,1
  804308:	10000226 	beq	r2,zero,804314 <f_open+0x320>
               res = FR_DENIED;
  80430c:	008001c4 	movi	r2,7
  804310:	e0bfef15 	stw	r2,-68(fp)
         }
      }
   }
   if (res == FR_OK) {
  804314:	e0bfef17 	ldw	r2,-68(fp)
  804318:	10000d1e 	bne	r2,zero,804350 <f_open+0x35c>
      if (mode & FA_CREATE_ALWAYS)        /* Set file change flag if created or overwritten */
  80431c:	e0bfff03 	ldbu	r2,-4(fp)
  804320:	1080020c 	andi	r2,r2,8
  804324:	10000326 	beq	r2,zero,804334 <f_open+0x340>
         mode |= FA__WRITTEN;
  804328:	e0bfff03 	ldbu	r2,-4(fp)
  80432c:	10800814 	ori	r2,r2,32
  804330:	e0bfff05 	stb	r2,-4(fp)
      fp->dir_sect = dj.fs->winsect;         /* Pointer to the directory entry */
  804334:	e0bff317 	ldw	r2,-52(fp)
  804338:	10c00b17 	ldw	r3,44(r2)
  80433c:	e0bffd17 	ldw	r2,-12(fp)
  804340:	10c00715 	stw	r3,28(r2)
      fp->dir_ptr = dir;
  804344:	e0bffd17 	ldw	r2,-12(fp)
  804348:	e0fff017 	ldw	r3,-64(fp)
  80434c:	10c00815 	stw	r3,32(r2)
      }
   }
#endif
   FREE_BUF();

   if (res == FR_OK) {
  804350:	e0bfef17 	ldw	r2,-68(fp)
  804354:	1000421e 	bne	r2,zero,804460 <f_open+0x46c>
      fp->flag = mode;              /* File access mode */
  804358:	e0bffd17 	ldw	r2,-12(fp)
  80435c:	e0ffff03 	ldbu	r3,-4(fp)
  804360:	10c00185 	stb	r3,6(r2)
      fp->sclust = LD_CLUST(dir);         /* File start cluster */
  804364:	e0bff017 	ldw	r2,-64(fp)
  804368:	10800544 	addi	r2,r2,21
  80436c:	10800003 	ldbu	r2,0(r2)
  804370:	10803fcc 	andi	r2,r2,255
  804374:	1004923a 	slli	r2,r2,8
  804378:	1007883a 	mov	r3,r2
  80437c:	e0bff017 	ldw	r2,-64(fp)
  804380:	10800504 	addi	r2,r2,20
  804384:	10800003 	ldbu	r2,0(r2)
  804388:	10803fcc 	andi	r2,r2,255
  80438c:	1884b03a 	or	r2,r3,r2
  804390:	10bfffcc 	andi	r2,r2,65535
  804394:	1006943a 	slli	r3,r2,16
  804398:	e0bff017 	ldw	r2,-64(fp)
  80439c:	108006c4 	addi	r2,r2,27
  8043a0:	10800003 	ldbu	r2,0(r2)
  8043a4:	10803fcc 	andi	r2,r2,255
  8043a8:	1004923a 	slli	r2,r2,8
  8043ac:	1009883a 	mov	r4,r2
  8043b0:	e0bff017 	ldw	r2,-64(fp)
  8043b4:	10800684 	addi	r2,r2,26
  8043b8:	10800003 	ldbu	r2,0(r2)
  8043bc:	10803fcc 	andi	r2,r2,255
  8043c0:	2084b03a 	or	r2,r4,r2
  8043c4:	10bfffcc 	andi	r2,r2,65535
  8043c8:	1886b03a 	or	r3,r3,r2
  8043cc:	e0bffd17 	ldw	r2,-12(fp)
  8043d0:	10c00415 	stw	r3,16(r2)
      fp->fsize = LD_DWORD(dir+DIR_FileSize);   /* File size */
  8043d4:	e0bff017 	ldw	r2,-64(fp)
  8043d8:	108007c4 	addi	r2,r2,31
  8043dc:	10800003 	ldbu	r2,0(r2)
  8043e0:	10803fcc 	andi	r2,r2,255
  8043e4:	1006963a 	slli	r3,r2,24
  8043e8:	e0bff017 	ldw	r2,-64(fp)
  8043ec:	10800784 	addi	r2,r2,30
  8043f0:	10800003 	ldbu	r2,0(r2)
  8043f4:	10803fcc 	andi	r2,r2,255
  8043f8:	1004943a 	slli	r2,r2,16
  8043fc:	1884b03a 	or	r2,r3,r2
  804400:	e0fff017 	ldw	r3,-64(fp)
  804404:	18c00744 	addi	r3,r3,29
  804408:	18c00003 	ldbu	r3,0(r3)
  80440c:	18c03fcc 	andi	r3,r3,255
  804410:	1806923a 	slli	r3,r3,8
  804414:	10c6b03a 	or	r3,r2,r3
  804418:	e0bff017 	ldw	r2,-64(fp)
  80441c:	10800704 	addi	r2,r2,28
  804420:	10800003 	ldbu	r2,0(r2)
  804424:	10803fcc 	andi	r2,r2,255
  804428:	1886b03a 	or	r3,r3,r2
  80442c:	e0bffd17 	ldw	r2,-12(fp)
  804430:	10c00315 	stw	r3,12(r2)
      fp->fptr = 0;                 /* File pointer */
  804434:	e0bffd17 	ldw	r2,-12(fp)
  804438:	10000215 	stw	zero,8(r2)
      fp->dsect = 0;
  80443c:	e0bffd17 	ldw	r2,-12(fp)
  804440:	10000615 	stw	zero,24(r2)
#if _USE_FASTSEEK
      fp->cltbl = 0;                /* Normal seek mode */
#endif
      fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
  804444:	e0fff317 	ldw	r3,-52(fp)
  804448:	e0bffd17 	ldw	r2,-12(fp)
  80444c:	10c00015 	stw	r3,0(r2)
  804450:	e0bff317 	ldw	r2,-52(fp)
  804454:	10c0018b 	ldhu	r3,6(r2)
  804458:	e0bffd17 	ldw	r2,-12(fp)
  80445c:	10c0010d 	sth	r3,4(r2)
   }

   LEAVE_FF(dj.fs, res);
  804460:	e0bfef17 	ldw	r2,-68(fp)
}
  804464:	e037883a 	mov	sp,fp
  804468:	dfc00117 	ldw	ra,4(sp)
  80446c:	df000017 	ldw	fp,0(sp)
  804470:	dec00204 	addi	sp,sp,8
  804474:	f800283a 	ret

00804478 <f_read>:
   FIL *fp,       /* Pointer to the file object */
   void *buff,    /* Pointer to data buffer */
   uint32_t btr,      /* Number of bytes to read */
   uint32_t *br    /* Pointer to number of bytes read */
)
{
  804478:	defff204 	addi	sp,sp,-56
  80447c:	dfc00d15 	stw	ra,52(sp)
  804480:	df000c15 	stw	fp,48(sp)
  804484:	df000c04 	addi	fp,sp,48
  804488:	e13ffc15 	stw	r4,-16(fp)
  80448c:	e17ffd15 	stw	r5,-12(fp)
  804490:	e1bffe15 	stw	r6,-8(fp)
  804494:	e1ffff15 	stw	r7,-4(fp)
   FRESULT res;
   uint32_t clst, sect, remain;
   uint32_t rcnt, cc;
   uint8_t csect, *rbuff = buff;
  804498:	e0bffd17 	ldw	r2,-12(fp)
  80449c:	e0bff715 	stw	r2,-36(fp)


   *br = 0; /* Initialize byte counter */
  8044a0:	e0bfff17 	ldw	r2,-4(fp)
  8044a4:	10000015 	stw	zero,0(r2)

   res = validate(fp->fs, fp->id);           /* Check validity */
  8044a8:	e0bffc17 	ldw	r2,-16(fp)
  8044ac:	10c00017 	ldw	r3,0(r2)
  8044b0:	e0bffc17 	ldw	r2,-16(fp)
  8044b4:	1080010b 	ldhu	r2,4(r2)
  8044b8:	10bfffcc 	andi	r2,r2,65535
  8044bc:	100b883a 	mov	r5,r2
  8044c0:	1809883a 	mov	r4,r3
  8044c4:	0803ed00 	call	803ed0 <validate>
  8044c8:	e0bff815 	stw	r2,-32(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
  8044cc:	e0bff817 	ldw	r2,-32(fp)
  8044d0:	10000226 	beq	r2,zero,8044dc <f_read+0x64>
  8044d4:	e0bff817 	ldw	r2,-32(fp)
  8044d8:	00011c06 	br	80494c <f_read+0x4d4>
   if (fp->flag & FA__ERROR)              /* Aborted file? */
  8044dc:	e0bffc17 	ldw	r2,-16(fp)
  8044e0:	10800183 	ldbu	r2,6(r2)
  8044e4:	10803fcc 	andi	r2,r2,255
  8044e8:	1080201c 	xori	r2,r2,128
  8044ec:	10bfe004 	addi	r2,r2,-128
  8044f0:	1000020e 	bge	r2,zero,8044fc <f_read+0x84>
      LEAVE_FF(fp->fs, FR_INT_ERR);
  8044f4:	00800084 	movi	r2,2
  8044f8:	00011406 	br	80494c <f_read+0x4d4>
   if (!(fp->flag & FA_READ))                /* Check access mode */
  8044fc:	e0bffc17 	ldw	r2,-16(fp)
  804500:	10800183 	ldbu	r2,6(r2)
  804504:	10803fcc 	andi	r2,r2,255
  804508:	1080004c 	andi	r2,r2,1
  80450c:	1000021e 	bne	r2,zero,804518 <f_read+0xa0>
      LEAVE_FF(fp->fs, FR_DENIED);
  804510:	008001c4 	movi	r2,7
  804514:	00010d06 	br	80494c <f_read+0x4d4>
   remain = fp->fsize - fp->fptr;
  804518:	e0bffc17 	ldw	r2,-16(fp)
  80451c:	10c00317 	ldw	r3,12(r2)
  804520:	e0bffc17 	ldw	r2,-16(fp)
  804524:	10800217 	ldw	r2,8(r2)
  804528:	1885c83a 	sub	r2,r3,r2
  80452c:	e0bff915 	stw	r2,-28(fp)
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */
  804530:	e0bffe17 	ldw	r2,-8(fp)
  804534:	e0fff917 	ldw	r3,-28(fp)
  804538:	1881012e 	bgeu	r3,r2,804940 <f_read+0x4c8>
  80453c:	e0bff917 	ldw	r2,-28(fp)
  804540:	e0bffe15 	stw	r2,-8(fp)

   for ( ;  btr;                       /* Repeat until all data read */
  804544:	0000fe06 	br	804940 <f_read+0x4c8>
      rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
      if ((fp->fptr % SS(fp->fs)) == 0) {    /* On the sector boundary? */
  804548:	e0bffc17 	ldw	r2,-16(fp)
  80454c:	10800217 	ldw	r2,8(r2)
  804550:	10807fcc 	andi	r2,r2,511
  804554:	1000d11e 	bne	r2,zero,80489c <f_read+0x424>
         csect = (uint8_t)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));   /* Sector offset in the cluster */
  804558:	e0bffc17 	ldw	r2,-16(fp)
  80455c:	10800217 	ldw	r2,8(r2)
  804560:	1004d27a 	srli	r2,r2,9
  804564:	1007883a 	mov	r3,r2
  804568:	e0bffc17 	ldw	r2,-16(fp)
  80456c:	10800017 	ldw	r2,0(r2)
  804570:	10800083 	ldbu	r2,2(r2)
  804574:	10bfffc4 	addi	r2,r2,-1
  804578:	1884703a 	and	r2,r3,r2
  80457c:	e0bffa05 	stb	r2,-24(fp)
         if (!csect) {                 /* On the cluster boundary? */
  804580:	e0bffa03 	ldbu	r2,-24(fp)
  804584:	10002a1e 	bne	r2,zero,804630 <f_read+0x1b8>
            if (fp->fptr == 0) {       /* On the top of the file? */
  804588:	e0bffc17 	ldw	r2,-16(fp)
  80458c:	10800217 	ldw	r2,8(r2)
  804590:	1000041e 	bne	r2,zero,8045a4 <f_read+0x12c>
               clst = fp->sclust;         /* Follow from the origin */
  804594:	e0bffc17 	ldw	r2,-16(fp)
  804598:	10800417 	ldw	r2,16(r2)
  80459c:	e0bff415 	stw	r2,-48(fp)
  8045a0:	00000806 	br	8045c4 <f_read+0x14c>
#if _USE_FASTSEEK
               if (fp->cltbl)
                  clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
               else
#endif
                  clst = get_fat(fp->fs, fp->clust);  /* Follow cluster chain on the FAT */
  8045a4:	e0bffc17 	ldw	r2,-16(fp)
  8045a8:	10c00017 	ldw	r3,0(r2)
  8045ac:	e0bffc17 	ldw	r2,-16(fp)
  8045b0:	10800517 	ldw	r2,20(r2)
  8045b4:	100b883a 	mov	r5,r2
  8045b8:	1809883a 	mov	r4,r3
  8045bc:	0801b440 	call	801b44 <get_fat>
  8045c0:	e0bff415 	stw	r2,-48(fp)
            }
            if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
  8045c4:	e0bff417 	ldw	r2,-48(fp)
  8045c8:	108000a8 	cmpgeui	r2,r2,2
  8045cc:	1000091e 	bne	r2,zero,8045f4 <f_read+0x17c>
  8045d0:	e0bffc17 	ldw	r2,-16(fp)
  8045d4:	10c00183 	ldbu	r3,6(r2)
  8045d8:	00bfe004 	movi	r2,-128
  8045dc:	1884b03a 	or	r2,r3,r2
  8045e0:	1007883a 	mov	r3,r2
  8045e4:	e0bffc17 	ldw	r2,-16(fp)
  8045e8:	10c00185 	stb	r3,6(r2)
  8045ec:	00800084 	movi	r2,2
  8045f0:	0000d606 	br	80494c <f_read+0x4d4>
            if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  8045f4:	e0bff417 	ldw	r2,-48(fp)
  8045f8:	10bfffd8 	cmpnei	r2,r2,-1
  8045fc:	1000091e 	bne	r2,zero,804624 <f_read+0x1ac>
  804600:	e0bffc17 	ldw	r2,-16(fp)
  804604:	10c00183 	ldbu	r3,6(r2)
  804608:	00bfe004 	movi	r2,-128
  80460c:	1884b03a 	or	r2,r3,r2
  804610:	1007883a 	mov	r3,r2
  804614:	e0bffc17 	ldw	r2,-16(fp)
  804618:	10c00185 	stb	r3,6(r2)
  80461c:	00800044 	movi	r2,1
  804620:	0000ca06 	br	80494c <f_read+0x4d4>
            fp->clust = clst;          /* Update current cluster */
  804624:	e0bffc17 	ldw	r2,-16(fp)
  804628:	e0fff417 	ldw	r3,-48(fp)
  80462c:	10c00515 	stw	r3,20(r2)
         }
         sect = clust2sect(fp->fs, fp->clust);  /* Get current sector */
  804630:	e0bffc17 	ldw	r2,-16(fp)
  804634:	10c00017 	ldw	r3,0(r2)
  804638:	e0bffc17 	ldw	r2,-16(fp)
  80463c:	10800517 	ldw	r2,20(r2)
  804640:	100b883a 	mov	r5,r2
  804644:	1809883a 	mov	r4,r3
  804648:	0801ad80 	call	801ad8 <clust2sect>
  80464c:	e0bffb15 	stw	r2,-20(fp)
         if (!sect) ABORT(fp->fs, FR_INT_ERR);
  804650:	e0bffb17 	ldw	r2,-20(fp)
  804654:	1000091e 	bne	r2,zero,80467c <f_read+0x204>
  804658:	e0bffc17 	ldw	r2,-16(fp)
  80465c:	10c00183 	ldbu	r3,6(r2)
  804660:	00bfe004 	movi	r2,-128
  804664:	1884b03a 	or	r2,r3,r2
  804668:	1007883a 	mov	r3,r2
  80466c:	e0bffc17 	ldw	r2,-16(fp)
  804670:	10c00185 	stb	r3,6(r2)
  804674:	00800084 	movi	r2,2
  804678:	0000b406 	br	80494c <f_read+0x4d4>
         sect += csect;
  80467c:	e0bffa03 	ldbu	r2,-24(fp)
  804680:	e0fffb17 	ldw	r3,-20(fp)
  804684:	1885883a 	add	r2,r3,r2
  804688:	e0bffb15 	stw	r2,-20(fp)
         cc = btr / SS(fp->fs);           /* When remaining bytes >= sector size, */
  80468c:	e0bffe17 	ldw	r2,-8(fp)
  804690:	1004d27a 	srli	r2,r2,9
  804694:	e0bff615 	stw	r2,-40(fp)
         if (cc) {                     /* Read maximum contiguous sectors directly */
  804698:	e0bff617 	ldw	r2,-40(fp)
  80469c:	10004026 	beq	r2,zero,8047a0 <f_read+0x328>
            if (csect + cc > fp->fs->csize)  /* Clip at cluster boundary */
  8046a0:	e0fffa03 	ldbu	r3,-24(fp)
  8046a4:	e0bff617 	ldw	r2,-40(fp)
  8046a8:	1885883a 	add	r2,r3,r2
  8046ac:	e0fffc17 	ldw	r3,-16(fp)
  8046b0:	18c00017 	ldw	r3,0(r3)
  8046b4:	18c00083 	ldbu	r3,2(r3)
  8046b8:	18c03fcc 	andi	r3,r3,255
  8046bc:	1880072e 	bgeu	r3,r2,8046dc <f_read+0x264>
               cc = fp->fs->csize - csect;
  8046c0:	e0bffc17 	ldw	r2,-16(fp)
  8046c4:	10800017 	ldw	r2,0(r2)
  8046c8:	10800083 	ldbu	r2,2(r2)
  8046cc:	10c03fcc 	andi	r3,r2,255
  8046d0:	e0bffa03 	ldbu	r2,-24(fp)
  8046d4:	1885c83a 	sub	r2,r3,r2
  8046d8:	e0bff615 	stw	r2,-40(fp)
            if (disk_read(fp->fs->drv, rbuff, sect, (uint8_t)cc) != RES_OK)
  8046dc:	e0bffc17 	ldw	r2,-16(fp)
  8046e0:	10800017 	ldw	r2,0(r2)
  8046e4:	10800043 	ldbu	r2,1(r2)
  8046e8:	10c03fcc 	andi	r3,r2,255
  8046ec:	e0bff617 	ldw	r2,-40(fp)
  8046f0:	10803fcc 	andi	r2,r2,255
  8046f4:	100f883a 	mov	r7,r2
  8046f8:	e1bffb17 	ldw	r6,-20(fp)
  8046fc:	e17ff717 	ldw	r5,-36(fp)
  804700:	1809883a 	mov	r4,r3
  804704:	0800e080 	call	800e08 <ffs_DiskIORead>
  804708:	10000926 	beq	r2,zero,804730 <f_read+0x2b8>
               ABORT(fp->fs, FR_DISK_ERR);
  80470c:	e0bffc17 	ldw	r2,-16(fp)
  804710:	10c00183 	ldbu	r3,6(r2)
  804714:	00bfe004 	movi	r2,-128
  804718:	1884b03a 	or	r2,r3,r2
  80471c:	1007883a 	mov	r3,r2
  804720:	e0bffc17 	ldw	r2,-16(fp)
  804724:	10c00185 	stb	r3,6(r2)
  804728:	00800044 	movi	r2,1
  80472c:	00008706 	br	80494c <f_read+0x4d4>
#if !_FS_READONLY && _FS_MINIMIZE <= 2       /* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
            if (fp->fs->wflag && fp->fs->winsect - sect < cc)
               mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
            if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
  804730:	e0bffc17 	ldw	r2,-16(fp)
  804734:	10800183 	ldbu	r2,6(r2)
  804738:	10803fcc 	andi	r2,r2,255
  80473c:	1080100c 	andi	r2,r2,64
  804740:	10001326 	beq	r2,zero,804790 <f_read+0x318>
  804744:	e0bffc17 	ldw	r2,-16(fp)
  804748:	10c00617 	ldw	r3,24(r2)
  80474c:	e0bffb17 	ldw	r2,-20(fp)
  804750:	1887c83a 	sub	r3,r3,r2
  804754:	e0bff617 	ldw	r2,-40(fp)
  804758:	18800d2e 	bgeu	r3,r2,804790 <f_read+0x318>
               mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
  80475c:	e0bffc17 	ldw	r2,-16(fp)
  804760:	10c00617 	ldw	r3,24(r2)
  804764:	e0bffb17 	ldw	r2,-20(fp)
  804768:	1885c83a 	sub	r2,r3,r2
  80476c:	1004927a 	slli	r2,r2,9
  804770:	e0fff717 	ldw	r3,-36(fp)
  804774:	1887883a 	add	r3,r3,r2
  804778:	e0bffc17 	ldw	r2,-16(fp)
  80477c:	10800904 	addi	r2,r2,36
  804780:	01808004 	movi	r6,512
  804784:	100b883a 	mov	r5,r2
  804788:	1809883a 	mov	r4,r3
  80478c:	08015880 	call	801588 <mem_cpy>
#endif
#endif
            rcnt = SS(fp->fs) * cc;       /* Number of bytes transferred */
  804790:	e0bff617 	ldw	r2,-40(fp)
  804794:	1004927a 	slli	r2,r2,9
  804798:	e0bff515 	stw	r2,-44(fp)
            continue;
  80479c:	00005406 	br	8048f0 <f_read+0x478>
         }
#if !_FS_TINY
         if (fp->dsect != sect) {         /* Load data sector if not in cache */
  8047a0:	e0bffc17 	ldw	r2,-16(fp)
  8047a4:	10c00617 	ldw	r3,24(r2)
  8047a8:	e0bffb17 	ldw	r2,-20(fp)
  8047ac:	18803826 	beq	r3,r2,804890 <f_read+0x418>
#if !_FS_READONLY
            if (fp->flag & FA__DIRTY) {      /* Write-back dirty sector cache */
  8047b0:	e0bffc17 	ldw	r2,-16(fp)
  8047b4:	10800183 	ldbu	r2,6(r2)
  8047b8:	10803fcc 	andi	r2,r2,255
  8047bc:	1080100c 	andi	r2,r2,64
  8047c0:	10001e26 	beq	r2,zero,80483c <f_read+0x3c4>
               if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  8047c4:	e0bffc17 	ldw	r2,-16(fp)
  8047c8:	10800017 	ldw	r2,0(r2)
  8047cc:	10800043 	ldbu	r2,1(r2)
  8047d0:	10c03fcc 	andi	r3,r2,255
  8047d4:	e0bffc17 	ldw	r2,-16(fp)
  8047d8:	11000904 	addi	r4,r2,36
  8047dc:	e0bffc17 	ldw	r2,-16(fp)
  8047e0:	10800617 	ldw	r2,24(r2)
  8047e4:	01c00044 	movi	r7,1
  8047e8:	100d883a 	mov	r6,r2
  8047ec:	200b883a 	mov	r5,r4
  8047f0:	1809883a 	mov	r4,r3
  8047f4:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  8047f8:	10000926 	beq	r2,zero,804820 <f_read+0x3a8>
                  ABORT(fp->fs, FR_DISK_ERR);
  8047fc:	e0bffc17 	ldw	r2,-16(fp)
  804800:	10c00183 	ldbu	r3,6(r2)
  804804:	00bfe004 	movi	r2,-128
  804808:	1884b03a 	or	r2,r3,r2
  80480c:	1007883a 	mov	r3,r2
  804810:	e0bffc17 	ldw	r2,-16(fp)
  804814:	10c00185 	stb	r3,6(r2)
  804818:	00800044 	movi	r2,1
  80481c:	00004b06 	br	80494c <f_read+0x4d4>
               fp->flag &= ~FA__DIRTY;
  804820:	e0bffc17 	ldw	r2,-16(fp)
  804824:	10c00183 	ldbu	r3,6(r2)
  804828:	00bfefc4 	movi	r2,-65
  80482c:	1884703a 	and	r2,r3,r2
  804830:	1007883a 	mov	r3,r2
  804834:	e0bffc17 	ldw	r2,-16(fp)
  804838:	10c00185 	stb	r3,6(r2)
            }
#endif
            if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)  /* Fill sector cache */
  80483c:	e0bffc17 	ldw	r2,-16(fp)
  804840:	10800017 	ldw	r2,0(r2)
  804844:	10800043 	ldbu	r2,1(r2)
  804848:	10c03fcc 	andi	r3,r2,255
  80484c:	e0bffc17 	ldw	r2,-16(fp)
  804850:	10800904 	addi	r2,r2,36
  804854:	01c00044 	movi	r7,1
  804858:	e1bffb17 	ldw	r6,-20(fp)
  80485c:	100b883a 	mov	r5,r2
  804860:	1809883a 	mov	r4,r3
  804864:	0800e080 	call	800e08 <ffs_DiskIORead>
  804868:	10000926 	beq	r2,zero,804890 <f_read+0x418>
               ABORT(fp->fs, FR_DISK_ERR);
  80486c:	e0bffc17 	ldw	r2,-16(fp)
  804870:	10c00183 	ldbu	r3,6(r2)
  804874:	00bfe004 	movi	r2,-128
  804878:	1884b03a 	or	r2,r3,r2
  80487c:	1007883a 	mov	r3,r2
  804880:	e0bffc17 	ldw	r2,-16(fp)
  804884:	10c00185 	stb	r3,6(r2)
  804888:	00800044 	movi	r2,1
  80488c:	00002f06 	br	80494c <f_read+0x4d4>
         }
#endif
         fp->dsect = sect;
  804890:	e0bffc17 	ldw	r2,-16(fp)
  804894:	e0fffb17 	ldw	r3,-20(fp)
  804898:	10c00615 	stw	r3,24(r2)
      }
      rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs)); /* Get partial sector data from sector buffer */
  80489c:	e0bffc17 	ldw	r2,-16(fp)
  8048a0:	10800217 	ldw	r2,8(r2)
  8048a4:	10807fcc 	andi	r2,r2,511
  8048a8:	00c08004 	movi	r3,512
  8048ac:	1885c83a 	sub	r2,r3,r2
  8048b0:	e0bff515 	stw	r2,-44(fp)
      if (rcnt > btr) rcnt = btr;
  8048b4:	e0bff517 	ldw	r2,-44(fp)
  8048b8:	e0fffe17 	ldw	r3,-8(fp)
  8048bc:	1880022e 	bgeu	r3,r2,8048c8 <f_read+0x450>
  8048c0:	e0bffe17 	ldw	r2,-8(fp)
  8048c4:	e0bff515 	stw	r2,-44(fp)
#if _FS_TINY
      if (move_window(fp->fs, fp->dsect))    /* Move sector window */
         ABORT(fp->fs, FR_DISK_ERR);
      mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);  /* Pick partial sector */
#else
      mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);   /* Pick partial sector */
  8048c8:	e0bffc17 	ldw	r2,-16(fp)
  8048cc:	10800217 	ldw	r2,8(r2)
  8048d0:	10807fcc 	andi	r2,r2,511
  8048d4:	10800904 	addi	r2,r2,36
  8048d8:	e0fffc17 	ldw	r3,-16(fp)
  8048dc:	1885883a 	add	r2,r3,r2
  8048e0:	e1bff517 	ldw	r6,-44(fp)
  8048e4:	100b883a 	mov	r5,r2
  8048e8:	e13ff717 	ldw	r4,-36(fp)
  8048ec:	08015880 	call	801588 <mem_cpy>
      LEAVE_FF(fp->fs, FR_DENIED);
   remain = fp->fsize - fp->fptr;
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */

   for ( ;  btr;                       /* Repeat until all data read */
      rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
  8048f0:	e0fff717 	ldw	r3,-36(fp)
  8048f4:	e0bff517 	ldw	r2,-44(fp)
  8048f8:	1885883a 	add	r2,r3,r2
  8048fc:	e0bff715 	stw	r2,-36(fp)
  804900:	e0bffc17 	ldw	r2,-16(fp)
  804904:	10c00217 	ldw	r3,8(r2)
  804908:	e0bff517 	ldw	r2,-44(fp)
  80490c:	1887883a 	add	r3,r3,r2
  804910:	e0bffc17 	ldw	r2,-16(fp)
  804914:	10c00215 	stw	r3,8(r2)
  804918:	e0bfff17 	ldw	r2,-4(fp)
  80491c:	10c00017 	ldw	r3,0(r2)
  804920:	e0bff517 	ldw	r2,-44(fp)
  804924:	1887883a 	add	r3,r3,r2
  804928:	e0bfff17 	ldw	r2,-4(fp)
  80492c:	10c00015 	stw	r3,0(r2)
  804930:	e0fffe17 	ldw	r3,-8(fp)
  804934:	e0bff517 	ldw	r2,-44(fp)
  804938:	1885c83a 	sub	r2,r3,r2
  80493c:	e0bffe15 	stw	r2,-8(fp)
   if (!(fp->flag & FA_READ))                /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   remain = fp->fsize - fp->fptr;
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */

   for ( ;  btr;                       /* Repeat until all data read */
  804940:	e0bffe17 	ldw	r2,-8(fp)
  804944:	103f001e 	bne	r2,zero,804548 <__alt_data_end+0xff804548>
#else
      mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);   /* Pick partial sector */
#endif
   }

   LEAVE_FF(fp->fs, FR_OK);
  804948:	0005883a 	mov	r2,zero
}
  80494c:	e037883a 	mov	sp,fp
  804950:	dfc00117 	ldw	ra,4(sp)
  804954:	df000017 	ldw	fp,0(sp)
  804958:	dec00204 	addi	sp,sp,8
  80495c:	f800283a 	ret

00804960 <f_write>:
   FIL *fp,       /* Pointer to the file object */
   const void *buff, /* Pointer to the data to be written */
   uint32_t btw,         /* Number of bytes to write */
   uint32_t *bw       /* Pointer to number of bytes written */
)
{
  804960:	defff304 	addi	sp,sp,-52
  804964:	dfc00c15 	stw	ra,48(sp)
  804968:	df000b15 	stw	fp,44(sp)
  80496c:	df000b04 	addi	fp,sp,44
  804970:	e13ffc15 	stw	r4,-16(fp)
  804974:	e17ffd15 	stw	r5,-12(fp)
  804978:	e1bffe15 	stw	r6,-8(fp)
  80497c:	e1ffff15 	stw	r7,-4(fp)
   FRESULT res;
   uint32_t clst, sect;
   uint32_t wcnt, cc;
   const uint8_t *wbuff = buff;
  804980:	e0bffd17 	ldw	r2,-12(fp)
  804984:	e0bff815 	stw	r2,-32(fp)
   uint8_t csect;


   *bw = 0; /* Initialize byte counter */
  804988:	e0bfff17 	ldw	r2,-4(fp)
  80498c:	10000015 	stw	zero,0(r2)

   res = validate(fp->fs, fp->id);        /* Check validity */
  804990:	e0bffc17 	ldw	r2,-16(fp)
  804994:	10c00017 	ldw	r3,0(r2)
  804998:	e0bffc17 	ldw	r2,-16(fp)
  80499c:	1080010b 	ldhu	r2,4(r2)
  8049a0:	10bfffcc 	andi	r2,r2,65535
  8049a4:	100b883a 	mov	r5,r2
  8049a8:	1809883a 	mov	r4,r3
  8049ac:	0803ed00 	call	803ed0 <validate>
  8049b0:	e0bff915 	stw	r2,-28(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
  8049b4:	e0bff917 	ldw	r2,-28(fp)
  8049b8:	10000226 	beq	r2,zero,8049c4 <f_write+0x64>
  8049bc:	e0bff917 	ldw	r2,-28(fp)
  8049c0:	00014306 	br	804ed0 <f_write+0x570>
   if (fp->flag & FA__ERROR)           /* Aborted file? */
  8049c4:	e0bffc17 	ldw	r2,-16(fp)
  8049c8:	10800183 	ldbu	r2,6(r2)
  8049cc:	10803fcc 	andi	r2,r2,255
  8049d0:	1080201c 	xori	r2,r2,128
  8049d4:	10bfe004 	addi	r2,r2,-128
  8049d8:	1000020e 	bge	r2,zero,8049e4 <f_write+0x84>
      LEAVE_FF(fp->fs, FR_INT_ERR);
  8049dc:	00800084 	movi	r2,2
  8049e0:	00013b06 	br	804ed0 <f_write+0x570>
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
  8049e4:	e0bffc17 	ldw	r2,-16(fp)
  8049e8:	10800183 	ldbu	r2,6(r2)
  8049ec:	10803fcc 	andi	r2,r2,255
  8049f0:	1080008c 	andi	r2,r2,2
  8049f4:	1000021e 	bne	r2,zero,804a00 <f_write+0xa0>
      LEAVE_FF(fp->fs, FR_DENIED);
  8049f8:	008001c4 	movi	r2,7
  8049fc:	00013406 	br	804ed0 <f_write+0x570>
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */
  804a00:	e0bffc17 	ldw	r2,-16(fp)
  804a04:	10c00317 	ldw	r3,12(r2)
  804a08:	e0bffe17 	ldw	r2,-8(fp)
  804a0c:	1887883a 	add	r3,r3,r2
  804a10:	e0bffc17 	ldw	r2,-16(fp)
  804a14:	10800317 	ldw	r2,12(r2)
  804a18:	1881192e 	bgeu	r3,r2,804e80 <f_write+0x520>
  804a1c:	e03ffe15 	stw	zero,-8(fp)

   for ( ;  btw;                    /* Repeat until all data written */
  804a20:	00011706 	br	804e80 <f_write+0x520>
      wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
      if ((fp->fptr % SS(fp->fs)) == 0) { /* On the sector boundary? */
  804a24:	e0bffc17 	ldw	r2,-16(fp)
  804a28:	10800217 	ldw	r2,8(r2)
  804a2c:	10807fcc 	andi	r2,r2,511
  804a30:	1000e41e 	bne	r2,zero,804dc4 <f_write+0x464>
         csect = (uint8_t)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));   /* Sector offset in the cluster */
  804a34:	e0bffc17 	ldw	r2,-16(fp)
  804a38:	10800217 	ldw	r2,8(r2)
  804a3c:	1004d27a 	srli	r2,r2,9
  804a40:	1007883a 	mov	r3,r2
  804a44:	e0bffc17 	ldw	r2,-16(fp)
  804a48:	10800017 	ldw	r2,0(r2)
  804a4c:	10800083 	ldbu	r2,2(r2)
  804a50:	10bfffc4 	addi	r2,r2,-1
  804a54:	1884703a 	and	r2,r3,r2
  804a58:	e0bffa05 	stb	r2,-24(fp)
         if (!csect) {              /* On the cluster boundary? */
  804a5c:	e0bffa03 	ldbu	r2,-24(fp)
  804a60:	1000371e 	bne	r2,zero,804b40 <f_write+0x1e0>
            if (fp->fptr == 0) {    /* On the top of the file? */
  804a64:	e0bffc17 	ldw	r2,-16(fp)
  804a68:	10800217 	ldw	r2,8(r2)
  804a6c:	10000f1e 	bne	r2,zero,804aac <f_write+0x14c>
               clst = fp->sclust;      /* Follow from the origin */
  804a70:	e0bffc17 	ldw	r2,-16(fp)
  804a74:	10800417 	ldw	r2,16(r2)
  804a78:	e0bff515 	stw	r2,-44(fp)
               if (clst == 0)       /* When no cluster is allocated, */
  804a7c:	e0bff517 	ldw	r2,-44(fp)
  804a80:	1000121e 	bne	r2,zero,804acc <f_write+0x16c>
                  fp->sclust = clst = create_chain(fp->fs, 0); /* Create a new cluster chain */
  804a84:	e0bffc17 	ldw	r2,-16(fp)
  804a88:	10800017 	ldw	r2,0(r2)
  804a8c:	000b883a 	mov	r5,zero
  804a90:	1009883a 	mov	r4,r2
  804a94:	08022700 	call	802270 <create_chain>
  804a98:	e0bff515 	stw	r2,-44(fp)
  804a9c:	e0bffc17 	ldw	r2,-16(fp)
  804aa0:	e0fff517 	ldw	r3,-44(fp)
  804aa4:	10c00415 	stw	r3,16(r2)
  804aa8:	00000806 	br	804acc <f_write+0x16c>
#if _USE_FASTSEEK
               if (fp->cltbl)
                  clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
               else
#endif
                  clst = create_chain(fp->fs, fp->clust);   /* Follow or stretch cluster chain on the FAT */
  804aac:	e0bffc17 	ldw	r2,-16(fp)
  804ab0:	10c00017 	ldw	r3,0(r2)
  804ab4:	e0bffc17 	ldw	r2,-16(fp)
  804ab8:	10800517 	ldw	r2,20(r2)
  804abc:	100b883a 	mov	r5,r2
  804ac0:	1809883a 	mov	r4,r3
  804ac4:	08022700 	call	802270 <create_chain>
  804ac8:	e0bff515 	stw	r2,-44(fp)
            }
            if (clst == 0) break;      /* Could not allocate a new cluster (disk full) */
  804acc:	e0bff517 	ldw	r2,-44(fp)
  804ad0:	1000ee26 	beq	r2,zero,804e8c <f_write+0x52c>
            if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  804ad4:	e0bff517 	ldw	r2,-44(fp)
  804ad8:	10800058 	cmpnei	r2,r2,1
  804adc:	1000091e 	bne	r2,zero,804b04 <f_write+0x1a4>
  804ae0:	e0bffc17 	ldw	r2,-16(fp)
  804ae4:	10c00183 	ldbu	r3,6(r2)
  804ae8:	00bfe004 	movi	r2,-128
  804aec:	1884b03a 	or	r2,r3,r2
  804af0:	1007883a 	mov	r3,r2
  804af4:	e0bffc17 	ldw	r2,-16(fp)
  804af8:	10c00185 	stb	r3,6(r2)
  804afc:	00800084 	movi	r2,2
  804b00:	0000f306 	br	804ed0 <f_write+0x570>
            if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  804b04:	e0bff517 	ldw	r2,-44(fp)
  804b08:	10bfffd8 	cmpnei	r2,r2,-1
  804b0c:	1000091e 	bne	r2,zero,804b34 <f_write+0x1d4>
  804b10:	e0bffc17 	ldw	r2,-16(fp)
  804b14:	10c00183 	ldbu	r3,6(r2)
  804b18:	00bfe004 	movi	r2,-128
  804b1c:	1884b03a 	or	r2,r3,r2
  804b20:	1007883a 	mov	r3,r2
  804b24:	e0bffc17 	ldw	r2,-16(fp)
  804b28:	10c00185 	stb	r3,6(r2)
  804b2c:	00800044 	movi	r2,1
  804b30:	0000e706 	br	804ed0 <f_write+0x570>
            fp->clust = clst;       /* Update current cluster */
  804b34:	e0bffc17 	ldw	r2,-16(fp)
  804b38:	e0fff517 	ldw	r3,-44(fp)
  804b3c:	10c00515 	stw	r3,20(r2)
         }
#if _FS_TINY
         if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0)) /* Write-back sector cache */
            ABORT(fp->fs, FR_DISK_ERR);
#else
         if (fp->flag & FA__DIRTY) {      /* Write-back sector cache */
  804b40:	e0bffc17 	ldw	r2,-16(fp)
  804b44:	10800183 	ldbu	r2,6(r2)
  804b48:	10803fcc 	andi	r2,r2,255
  804b4c:	1080100c 	andi	r2,r2,64
  804b50:	10001e26 	beq	r2,zero,804bcc <f_write+0x26c>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  804b54:	e0bffc17 	ldw	r2,-16(fp)
  804b58:	10800017 	ldw	r2,0(r2)
  804b5c:	10800043 	ldbu	r2,1(r2)
  804b60:	10c03fcc 	andi	r3,r2,255
  804b64:	e0bffc17 	ldw	r2,-16(fp)
  804b68:	11000904 	addi	r4,r2,36
  804b6c:	e0bffc17 	ldw	r2,-16(fp)
  804b70:	10800617 	ldw	r2,24(r2)
  804b74:	01c00044 	movi	r7,1
  804b78:	100d883a 	mov	r6,r2
  804b7c:	200b883a 	mov	r5,r4
  804b80:	1809883a 	mov	r4,r3
  804b84:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  804b88:	10000926 	beq	r2,zero,804bb0 <f_write+0x250>
               ABORT(fp->fs, FR_DISK_ERR);
  804b8c:	e0bffc17 	ldw	r2,-16(fp)
  804b90:	10c00183 	ldbu	r3,6(r2)
  804b94:	00bfe004 	movi	r2,-128
  804b98:	1884b03a 	or	r2,r3,r2
  804b9c:	1007883a 	mov	r3,r2
  804ba0:	e0bffc17 	ldw	r2,-16(fp)
  804ba4:	10c00185 	stb	r3,6(r2)
  804ba8:	00800044 	movi	r2,1
  804bac:	0000c806 	br	804ed0 <f_write+0x570>
            fp->flag &= ~FA__DIRTY;
  804bb0:	e0bffc17 	ldw	r2,-16(fp)
  804bb4:	10c00183 	ldbu	r3,6(r2)
  804bb8:	00bfefc4 	movi	r2,-65
  804bbc:	1884703a 	and	r2,r3,r2
  804bc0:	1007883a 	mov	r3,r2
  804bc4:	e0bffc17 	ldw	r2,-16(fp)
  804bc8:	10c00185 	stb	r3,6(r2)
         }
#endif
         sect = clust2sect(fp->fs, fp->clust);  /* Get current sector */
  804bcc:	e0bffc17 	ldw	r2,-16(fp)
  804bd0:	10c00017 	ldw	r3,0(r2)
  804bd4:	e0bffc17 	ldw	r2,-16(fp)
  804bd8:	10800517 	ldw	r2,20(r2)
  804bdc:	100b883a 	mov	r5,r2
  804be0:	1809883a 	mov	r4,r3
  804be4:	0801ad80 	call	801ad8 <clust2sect>
  804be8:	e0bffb15 	stw	r2,-20(fp)
         if (!sect) ABORT(fp->fs, FR_INT_ERR);
  804bec:	e0bffb17 	ldw	r2,-20(fp)
  804bf0:	1000091e 	bne	r2,zero,804c18 <f_write+0x2b8>
  804bf4:	e0bffc17 	ldw	r2,-16(fp)
  804bf8:	10c00183 	ldbu	r3,6(r2)
  804bfc:	00bfe004 	movi	r2,-128
  804c00:	1884b03a 	or	r2,r3,r2
  804c04:	1007883a 	mov	r3,r2
  804c08:	e0bffc17 	ldw	r2,-16(fp)
  804c0c:	10c00185 	stb	r3,6(r2)
  804c10:	00800084 	movi	r2,2
  804c14:	0000ae06 	br	804ed0 <f_write+0x570>
         sect += csect;
  804c18:	e0bffa03 	ldbu	r2,-24(fp)
  804c1c:	e0fffb17 	ldw	r3,-20(fp)
  804c20:	1885883a 	add	r2,r3,r2
  804c24:	e0bffb15 	stw	r2,-20(fp)
         cc = btw / SS(fp->fs);        /* When remaining bytes >= sector size, */
  804c28:	e0bffe17 	ldw	r2,-8(fp)
  804c2c:	1004d27a 	srli	r2,r2,9
  804c30:	e0bff715 	stw	r2,-36(fp)
         if (cc) {                  /* Write maximum contiguous sectors directly */
  804c34:	e0bff717 	ldw	r2,-36(fp)
  804c38:	10004126 	beq	r2,zero,804d40 <f_write+0x3e0>
            if (csect + cc > fp->fs->csize)  /* Clip at cluster boundary */
  804c3c:	e0fffa03 	ldbu	r3,-24(fp)
  804c40:	e0bff717 	ldw	r2,-36(fp)
  804c44:	1885883a 	add	r2,r3,r2
  804c48:	e0fffc17 	ldw	r3,-16(fp)
  804c4c:	18c00017 	ldw	r3,0(r3)
  804c50:	18c00083 	ldbu	r3,2(r3)
  804c54:	18c03fcc 	andi	r3,r3,255
  804c58:	1880072e 	bgeu	r3,r2,804c78 <f_write+0x318>
               cc = fp->fs->csize - csect;
  804c5c:	e0bffc17 	ldw	r2,-16(fp)
  804c60:	10800017 	ldw	r2,0(r2)
  804c64:	10800083 	ldbu	r2,2(r2)
  804c68:	10c03fcc 	andi	r3,r2,255
  804c6c:	e0bffa03 	ldbu	r2,-24(fp)
  804c70:	1885c83a 	sub	r2,r3,r2
  804c74:	e0bff715 	stw	r2,-36(fp)
            if (disk_write(fp->fs->drv, wbuff, sect, (uint8_t)cc) != RES_OK)
  804c78:	e0bffc17 	ldw	r2,-16(fp)
  804c7c:	10800017 	ldw	r2,0(r2)
  804c80:	10800043 	ldbu	r2,1(r2)
  804c84:	10c03fcc 	andi	r3,r2,255
  804c88:	e0bff717 	ldw	r2,-36(fp)
  804c8c:	10803fcc 	andi	r2,r2,255
  804c90:	100f883a 	mov	r7,r2
  804c94:	e1bffb17 	ldw	r6,-20(fp)
  804c98:	e17ff817 	ldw	r5,-32(fp)
  804c9c:	1809883a 	mov	r4,r3
  804ca0:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  804ca4:	10000926 	beq	r2,zero,804ccc <f_write+0x36c>
               ABORT(fp->fs, FR_DISK_ERR);
  804ca8:	e0bffc17 	ldw	r2,-16(fp)
  804cac:	10c00183 	ldbu	r3,6(r2)
  804cb0:	00bfe004 	movi	r2,-128
  804cb4:	1884b03a 	or	r2,r3,r2
  804cb8:	1007883a 	mov	r3,r2
  804cbc:	e0bffc17 	ldw	r2,-16(fp)
  804cc0:	10c00185 	stb	r3,6(r2)
  804cc4:	00800044 	movi	r2,1
  804cc8:	00008106 	br	804ed0 <f_write+0x570>
            if (fp->fs->winsect - sect < cc) {  /* Refill sector cache if it gets invalidated by the direct write */
               mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
               fp->fs->wflag = 0;
            }
#else
            if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
  804ccc:	e0bffc17 	ldw	r2,-16(fp)
  804cd0:	10c00617 	ldw	r3,24(r2)
  804cd4:	e0bffb17 	ldw	r2,-20(fp)
  804cd8:	1887c83a 	sub	r3,r3,r2
  804cdc:	e0bff717 	ldw	r2,-36(fp)
  804ce0:	1880132e 	bgeu	r3,r2,804d30 <f_write+0x3d0>
               mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
  804ce4:	e0bffc17 	ldw	r2,-16(fp)
  804ce8:	11000904 	addi	r4,r2,36
  804cec:	e0bffc17 	ldw	r2,-16(fp)
  804cf0:	10c00617 	ldw	r3,24(r2)
  804cf4:	e0bffb17 	ldw	r2,-20(fp)
  804cf8:	1885c83a 	sub	r2,r3,r2
  804cfc:	1004927a 	slli	r2,r2,9
  804d00:	e0fff817 	ldw	r3,-32(fp)
  804d04:	1885883a 	add	r2,r3,r2
  804d08:	01808004 	movi	r6,512
  804d0c:	100b883a 	mov	r5,r2
  804d10:	08015880 	call	801588 <mem_cpy>
               fp->flag &= ~FA__DIRTY;
  804d14:	e0bffc17 	ldw	r2,-16(fp)
  804d18:	10c00183 	ldbu	r3,6(r2)
  804d1c:	00bfefc4 	movi	r2,-65
  804d20:	1884703a 	and	r2,r3,r2
  804d24:	1007883a 	mov	r3,r2
  804d28:	e0bffc17 	ldw	r2,-16(fp)
  804d2c:	10c00185 	stb	r3,6(r2)
            }
#endif
            wcnt = SS(fp->fs) * cc;    /* Number of bytes transferred */
  804d30:	e0bff717 	ldw	r2,-36(fp)
  804d34:	1004927a 	slli	r2,r2,9
  804d38:	e0bff615 	stw	r2,-40(fp)
            continue;
  804d3c:	00003c06 	br	804e30 <f_write+0x4d0>
         if (fp->fptr >= fp->fsize) {  /* Avoid silly cache filling at growing edge */
            if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
            fp->fs->winsect = sect;
         }
#else
         if (fp->dsect != sect) {      /* Fill sector cache with file data */
  804d40:	e0bffc17 	ldw	r2,-16(fp)
  804d44:	10c00617 	ldw	r3,24(r2)
  804d48:	e0bffb17 	ldw	r2,-20(fp)
  804d4c:	18801a26 	beq	r3,r2,804db8 <f_write+0x458>
            if (fp->fptr < fp->fsize &&
  804d50:	e0bffc17 	ldw	r2,-16(fp)
  804d54:	10c00217 	ldw	r3,8(r2)
  804d58:	e0bffc17 	ldw	r2,-16(fp)
  804d5c:	10800317 	ldw	r2,12(r2)
  804d60:	1880152e 	bgeu	r3,r2,804db8 <f_write+0x458>
               disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
  804d64:	e0bffc17 	ldw	r2,-16(fp)
  804d68:	10800017 	ldw	r2,0(r2)
  804d6c:	10800043 	ldbu	r2,1(r2)
  804d70:	10c03fcc 	andi	r3,r2,255
  804d74:	e0bffc17 	ldw	r2,-16(fp)
  804d78:	10800904 	addi	r2,r2,36
  804d7c:	01c00044 	movi	r7,1
  804d80:	e1bffb17 	ldw	r6,-20(fp)
  804d84:	100b883a 	mov	r5,r2
  804d88:	1809883a 	mov	r4,r3
  804d8c:	0800e080 	call	800e08 <ffs_DiskIORead>
            if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
            fp->fs->winsect = sect;
         }
#else
         if (fp->dsect != sect) {      /* Fill sector cache with file data */
            if (fp->fptr < fp->fsize &&
  804d90:	10000926 	beq	r2,zero,804db8 <f_write+0x458>
               disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
                  ABORT(fp->fs, FR_DISK_ERR);
  804d94:	e0bffc17 	ldw	r2,-16(fp)
  804d98:	10c00183 	ldbu	r3,6(r2)
  804d9c:	00bfe004 	movi	r2,-128
  804da0:	1884b03a 	or	r2,r3,r2
  804da4:	1007883a 	mov	r3,r2
  804da8:	e0bffc17 	ldw	r2,-16(fp)
  804dac:	10c00185 	stb	r3,6(r2)
  804db0:	00800044 	movi	r2,1
  804db4:	00004606 	br	804ed0 <f_write+0x570>
         }
#endif
         fp->dsect = sect;
  804db8:	e0bffc17 	ldw	r2,-16(fp)
  804dbc:	e0fffb17 	ldw	r3,-20(fp)
  804dc0:	10c00615 	stw	r3,24(r2)
      }
      wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
  804dc4:	e0bffc17 	ldw	r2,-16(fp)
  804dc8:	10800217 	ldw	r2,8(r2)
  804dcc:	10807fcc 	andi	r2,r2,511
  804dd0:	00c08004 	movi	r3,512
  804dd4:	1885c83a 	sub	r2,r3,r2
  804dd8:	e0bff615 	stw	r2,-40(fp)
      if (wcnt > btw) wcnt = btw;
  804ddc:	e0bff617 	ldw	r2,-40(fp)
  804de0:	e0fffe17 	ldw	r3,-8(fp)
  804de4:	1880022e 	bgeu	r3,r2,804df0 <f_write+0x490>
  804de8:	e0bffe17 	ldw	r2,-8(fp)
  804dec:	e0bff615 	stw	r2,-40(fp)
      if (move_window(fp->fs, fp->dsect)) /* Move sector window */
         ABORT(fp->fs, FR_DISK_ERR);
      mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
      fp->fs->wflag = 1;
#else
      mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);   /* Fit partial sector */
  804df0:	e0bffc17 	ldw	r2,-16(fp)
  804df4:	10800217 	ldw	r2,8(r2)
  804df8:	10807fcc 	andi	r2,r2,511
  804dfc:	10800904 	addi	r2,r2,36
  804e00:	e0fffc17 	ldw	r3,-16(fp)
  804e04:	1885883a 	add	r2,r3,r2
  804e08:	e1bff617 	ldw	r6,-40(fp)
  804e0c:	e17ff817 	ldw	r5,-32(fp)
  804e10:	1009883a 	mov	r4,r2
  804e14:	08015880 	call	801588 <mem_cpy>
      fp->flag |= FA__DIRTY;
  804e18:	e0bffc17 	ldw	r2,-16(fp)
  804e1c:	10800183 	ldbu	r2,6(r2)
  804e20:	10801014 	ori	r2,r2,64
  804e24:	1007883a 	mov	r3,r2
  804e28:	e0bffc17 	ldw	r2,-16(fp)
  804e2c:	10c00185 	stb	r3,6(r2)
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */

   for ( ;  btw;                    /* Repeat until all data written */
      wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
  804e30:	e0fff817 	ldw	r3,-32(fp)
  804e34:	e0bff617 	ldw	r2,-40(fp)
  804e38:	1885883a 	add	r2,r3,r2
  804e3c:	e0bff815 	stw	r2,-32(fp)
  804e40:	e0bffc17 	ldw	r2,-16(fp)
  804e44:	10c00217 	ldw	r3,8(r2)
  804e48:	e0bff617 	ldw	r2,-40(fp)
  804e4c:	1887883a 	add	r3,r3,r2
  804e50:	e0bffc17 	ldw	r2,-16(fp)
  804e54:	10c00215 	stw	r3,8(r2)
  804e58:	e0bfff17 	ldw	r2,-4(fp)
  804e5c:	10c00017 	ldw	r3,0(r2)
  804e60:	e0bff617 	ldw	r2,-40(fp)
  804e64:	1887883a 	add	r3,r3,r2
  804e68:	e0bfff17 	ldw	r2,-4(fp)
  804e6c:	10c00015 	stw	r3,0(r2)
  804e70:	e0fffe17 	ldw	r3,-8(fp)
  804e74:	e0bff617 	ldw	r2,-40(fp)
  804e78:	1885c83a 	sub	r2,r3,r2
  804e7c:	e0bffe15 	stw	r2,-8(fp)
      LEAVE_FF(fp->fs, FR_INT_ERR);
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */

   for ( ;  btw;                    /* Repeat until all data written */
  804e80:	e0bffe17 	ldw	r2,-8(fp)
  804e84:	103ee71e 	bne	r2,zero,804a24 <__alt_data_end+0xff804a24>
  804e88:	00000106 	br	804e90 <f_write+0x530>
                  clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
               else
#endif
                  clst = create_chain(fp->fs, fp->clust);   /* Follow or stretch cluster chain on the FAT */
            }
            if (clst == 0) break;      /* Could not allocate a new cluster (disk full) */
  804e8c:	0001883a 	nop
      mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);   /* Fit partial sector */
      fp->flag |= FA__DIRTY;
#endif
   }

   if (fp->fptr > fp->fsize) fp->fsize = fp->fptr; /* Update file size if needed */
  804e90:	e0bffc17 	ldw	r2,-16(fp)
  804e94:	10800217 	ldw	r2,8(r2)
  804e98:	e0fffc17 	ldw	r3,-16(fp)
  804e9c:	18c00317 	ldw	r3,12(r3)
  804ea0:	1880042e 	bgeu	r3,r2,804eb4 <f_write+0x554>
  804ea4:	e0bffc17 	ldw	r2,-16(fp)
  804ea8:	10c00217 	ldw	r3,8(r2)
  804eac:	e0bffc17 	ldw	r2,-16(fp)
  804eb0:	10c00315 	stw	r3,12(r2)
   fp->flag |= FA__WRITTEN;                  /* Set file change flag */
  804eb4:	e0bffc17 	ldw	r2,-16(fp)
  804eb8:	10800183 	ldbu	r2,6(r2)
  804ebc:	10800814 	ori	r2,r2,32
  804ec0:	1007883a 	mov	r3,r2
  804ec4:	e0bffc17 	ldw	r2,-16(fp)
  804ec8:	10c00185 	stb	r3,6(r2)

   LEAVE_FF(fp->fs, FR_OK);
  804ecc:	0005883a 	mov	r2,zero
}
  804ed0:	e037883a 	mov	sp,fp
  804ed4:	dfc00117 	ldw	ra,4(sp)
  804ed8:	df000017 	ldw	fp,0(sp)
  804edc:	dec00204 	addi	sp,sp,8
  804ee0:	f800283a 	ret

00804ee4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
   FIL *fp     /* Pointer to the file object */
)
{
  804ee4:	defffa04 	addi	sp,sp,-24
  804ee8:	dfc00515 	stw	ra,20(sp)
  804eec:	df000415 	stw	fp,16(sp)
  804ef0:	df000404 	addi	fp,sp,16
  804ef4:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   uint32_t tim;
   uint8_t *dir;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
  804ef8:	e0bfff17 	ldw	r2,-4(fp)
  804efc:	10c00017 	ldw	r3,0(r2)
  804f00:	e0bfff17 	ldw	r2,-4(fp)
  804f04:	1080010b 	ldhu	r2,4(r2)
  804f08:	10bfffcc 	andi	r2,r2,65535
  804f0c:	100b883a 	mov	r5,r2
  804f10:	1809883a 	mov	r4,r3
  804f14:	0803ed00 	call	803ed0 <validate>
  804f18:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK) {
  804f1c:	e0bffc17 	ldw	r2,-16(fp)
  804f20:	10008c1e 	bne	r2,zero,805154 <f_sync+0x270>
      if (fp->flag & FA__WRITTEN) { /* Has the file been written? */
  804f24:	e0bfff17 	ldw	r2,-4(fp)
  804f28:	10800183 	ldbu	r2,6(r2)
  804f2c:	10803fcc 	andi	r2,r2,255
  804f30:	1080080c 	andi	r2,r2,32
  804f34:	10008726 	beq	r2,zero,805154 <f_sync+0x270>
#if !_FS_TINY  /* Write-back dirty buffer */
         if (fp->flag & FA__DIRTY) {
  804f38:	e0bfff17 	ldw	r2,-4(fp)
  804f3c:	10800183 	ldbu	r2,6(r2)
  804f40:	10803fcc 	andi	r2,r2,255
  804f44:	1080100c 	andi	r2,r2,64
  804f48:	10001726 	beq	r2,zero,804fa8 <f_sync+0xc4>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  804f4c:	e0bfff17 	ldw	r2,-4(fp)
  804f50:	10800017 	ldw	r2,0(r2)
  804f54:	10800043 	ldbu	r2,1(r2)
  804f58:	10c03fcc 	andi	r3,r2,255
  804f5c:	e0bfff17 	ldw	r2,-4(fp)
  804f60:	11000904 	addi	r4,r2,36
  804f64:	e0bfff17 	ldw	r2,-4(fp)
  804f68:	10800617 	ldw	r2,24(r2)
  804f6c:	01c00044 	movi	r7,1
  804f70:	100d883a 	mov	r6,r2
  804f74:	200b883a 	mov	r5,r4
  804f78:	1809883a 	mov	r4,r3
  804f7c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  804f80:	10000226 	beq	r2,zero,804f8c <f_sync+0xa8>
               LEAVE_FF(fp->fs, FR_DISK_ERR);
  804f84:	00800044 	movi	r2,1
  804f88:	00007306 	br	805158 <f_sync+0x274>
            fp->flag &= ~FA__DIRTY;
  804f8c:	e0bfff17 	ldw	r2,-4(fp)
  804f90:	10c00183 	ldbu	r3,6(r2)
  804f94:	00bfefc4 	movi	r2,-65
  804f98:	1884703a 	and	r2,r3,r2
  804f9c:	1007883a 	mov	r3,r2
  804fa0:	e0bfff17 	ldw	r2,-4(fp)
  804fa4:	10c00185 	stb	r3,6(r2)
         }
#endif
         /* Update the directory entry */
         res = move_window(fp->fs, fp->dir_sect);
  804fa8:	e0bfff17 	ldw	r2,-4(fp)
  804fac:	10c00017 	ldw	r3,0(r2)
  804fb0:	e0bfff17 	ldw	r2,-4(fp)
  804fb4:	10800717 	ldw	r2,28(r2)
  804fb8:	100b883a 	mov	r5,r2
  804fbc:	1809883a 	mov	r4,r3
  804fc0:	080175c0 	call	80175c <move_window>
  804fc4:	e0bffc15 	stw	r2,-16(fp)
         if (res == FR_OK) {
  804fc8:	e0bffc17 	ldw	r2,-16(fp)
  804fcc:	1000611e 	bne	r2,zero,805154 <f_sync+0x270>
            dir = fp->dir_ptr;
  804fd0:	e0bfff17 	ldw	r2,-4(fp)
  804fd4:	10800817 	ldw	r2,32(r2)
  804fd8:	e0bffd15 	stw	r2,-12(fp)
            dir[DIR_Attr] |= AM_ARC;               /* Set archive bit */
  804fdc:	e0bffd17 	ldw	r2,-12(fp)
  804fe0:	108002c4 	addi	r2,r2,11
  804fe4:	e0fffd17 	ldw	r3,-12(fp)
  804fe8:	18c002c4 	addi	r3,r3,11
  804fec:	18c00003 	ldbu	r3,0(r3)
  804ff0:	18c00814 	ori	r3,r3,32
  804ff4:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_FileSize, fp->fsize);    /* Update file size */
  804ff8:	e0bffd17 	ldw	r2,-12(fp)
  804ffc:	10800704 	addi	r2,r2,28
  805000:	e0ffff17 	ldw	r3,-4(fp)
  805004:	18c00317 	ldw	r3,12(r3)
  805008:	10c00005 	stb	r3,0(r2)
  80500c:	e0bffd17 	ldw	r2,-12(fp)
  805010:	10800744 	addi	r2,r2,29
  805014:	e0ffff17 	ldw	r3,-4(fp)
  805018:	18c00317 	ldw	r3,12(r3)
  80501c:	18ffffcc 	andi	r3,r3,65535
  805020:	1807d23a 	srai	r3,r3,8
  805024:	10c00005 	stb	r3,0(r2)
  805028:	e0bffd17 	ldw	r2,-12(fp)
  80502c:	10800784 	addi	r2,r2,30
  805030:	e0ffff17 	ldw	r3,-4(fp)
  805034:	18c00317 	ldw	r3,12(r3)
  805038:	1806d43a 	srli	r3,r3,16
  80503c:	10c00005 	stb	r3,0(r2)
  805040:	e0bffd17 	ldw	r2,-12(fp)
  805044:	108007c4 	addi	r2,r2,31
  805048:	e0ffff17 	ldw	r3,-4(fp)
  80504c:	18c00317 	ldw	r3,12(r3)
  805050:	1806d63a 	srli	r3,r3,24
  805054:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, fp->sclust);             /* Update start cluster */
  805058:	e0bffd17 	ldw	r2,-12(fp)
  80505c:	10800684 	addi	r2,r2,26
  805060:	e0ffff17 	ldw	r3,-4(fp)
  805064:	18c00417 	ldw	r3,16(r3)
  805068:	10c00005 	stb	r3,0(r2)
  80506c:	e0bffd17 	ldw	r2,-12(fp)
  805070:	108006c4 	addi	r2,r2,27
  805074:	e0ffff17 	ldw	r3,-4(fp)
  805078:	18c00417 	ldw	r3,16(r3)
  80507c:	18ffffcc 	andi	r3,r3,65535
  805080:	1807d23a 	srai	r3,r3,8
  805084:	10c00005 	stb	r3,0(r2)
  805088:	e0bffd17 	ldw	r2,-12(fp)
  80508c:	10800504 	addi	r2,r2,20
  805090:	e0ffff17 	ldw	r3,-4(fp)
  805094:	18c00417 	ldw	r3,16(r3)
  805098:	1806d43a 	srli	r3,r3,16
  80509c:	10c00005 	stb	r3,0(r2)
  8050a0:	e0bffd17 	ldw	r2,-12(fp)
  8050a4:	10800544 	addi	r2,r2,21
  8050a8:	e0ffff17 	ldw	r3,-4(fp)
  8050ac:	18c00417 	ldw	r3,16(r3)
  8050b0:	1806d43a 	srli	r3,r3,16
  8050b4:	1807d23a 	srai	r3,r3,8
  8050b8:	10c00005 	stb	r3,0(r2)
            tim = get_fattime();                /* Update updated time */
  8050bc:	080155c0 	call	80155c <get_fattime>
  8050c0:	e0bffe15 	stw	r2,-8(fp)
            ST_DWORD(dir+DIR_WrtTime, tim);
  8050c4:	e0bffd17 	ldw	r2,-12(fp)
  8050c8:	10800584 	addi	r2,r2,22
  8050cc:	e0fffe17 	ldw	r3,-8(fp)
  8050d0:	10c00005 	stb	r3,0(r2)
  8050d4:	e0bffd17 	ldw	r2,-12(fp)
  8050d8:	108005c4 	addi	r2,r2,23
  8050dc:	e0fffe17 	ldw	r3,-8(fp)
  8050e0:	18ffffcc 	andi	r3,r3,65535
  8050e4:	1807d23a 	srai	r3,r3,8
  8050e8:	10c00005 	stb	r3,0(r2)
  8050ec:	e0bffd17 	ldw	r2,-12(fp)
  8050f0:	10800604 	addi	r2,r2,24
  8050f4:	e0fffe17 	ldw	r3,-8(fp)
  8050f8:	1806d43a 	srli	r3,r3,16
  8050fc:	10c00005 	stb	r3,0(r2)
  805100:	e0bffd17 	ldw	r2,-12(fp)
  805104:	10800644 	addi	r2,r2,25
  805108:	e0fffe17 	ldw	r3,-8(fp)
  80510c:	1806d63a 	srli	r3,r3,24
  805110:	10c00005 	stb	r3,0(r2)
            fp->flag &= ~FA__WRITTEN;
  805114:	e0bfff17 	ldw	r2,-4(fp)
  805118:	10c00183 	ldbu	r3,6(r2)
  80511c:	00bff7c4 	movi	r2,-33
  805120:	1884703a 	and	r2,r3,r2
  805124:	1007883a 	mov	r3,r2
  805128:	e0bfff17 	ldw	r2,-4(fp)
  80512c:	10c00185 	stb	r3,6(r2)
            fp->fs->wflag = 1;
  805130:	e0bfff17 	ldw	r2,-4(fp)
  805134:	10800017 	ldw	r2,0(r2)
  805138:	00c00044 	movi	r3,1
  80513c:	10c00105 	stb	r3,4(r2)
            res = sync(fp->fs);
  805140:	e0bfff17 	ldw	r2,-4(fp)
  805144:	10800017 	ldw	r2,0(r2)
  805148:	1009883a 	mov	r4,r2
  80514c:	08018b80 	call	8018b8 <sync>
  805150:	e0bffc15 	stw	r2,-16(fp)
         }
      }
   }

   LEAVE_FF(fp->fs, res);
  805154:	e0bffc17 	ldw	r2,-16(fp)
}
  805158:	e037883a 	mov	sp,fp
  80515c:	dfc00117 	ldw	ra,4(sp)
  805160:	df000017 	ldw	fp,0(sp)
  805164:	dec00204 	addi	sp,sp,8
  805168:	f800283a 	ret

0080516c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
   FIL *fp     /* Pointer to the file object to be closed */
)
{
  80516c:	defffc04 	addi	sp,sp,-16
  805170:	dfc00315 	stw	ra,12(sp)
  805174:	df000215 	stw	fp,8(sp)
  805178:	df000204 	addi	fp,sp,8
  80517c:	e13fff15 	stw	r4,-4(fp)
   res = validate(fs, fp->id);
   if (res == FR_OK) fp->fs = 0; /* Discard file object */
   LEAVE_FF(fs, res);

#else
   res = f_sync(fp);    /* Flush cached data */
  805180:	e13fff17 	ldw	r4,-4(fp)
  805184:	0804ee40 	call	804ee4 <f_sync>
  805188:	e0bffe15 	stw	r2,-8(fp)
#else
      res = dec_lock(fp->lockid);
#endif
   }
#endif
   if (res == FR_OK) fp->fs = 0; /* Discard file object */
  80518c:	e0bffe17 	ldw	r2,-8(fp)
  805190:	1000021e 	bne	r2,zero,80519c <f_close+0x30>
  805194:	e0bfff17 	ldw	r2,-4(fp)
  805198:	10000015 	stw	zero,0(r2)
   return res;
  80519c:	e0bffe17 	ldw	r2,-8(fp)
#endif
}
  8051a0:	e037883a 	mov	sp,fp
  8051a4:	dfc00117 	ldw	ra,4(sp)
  8051a8:	df000017 	ldw	fp,0(sp)
  8051ac:	dec00204 	addi	sp,sp,8
  8051b0:	f800283a 	ret

008051b4 <f_lseek>:

FRESULT f_lseek (
   FIL *fp,          /* Pointer to the file object */
   uint32_t ofs      /* File pointer from top of file */
)
{
  8051b4:	defff604 	addi	sp,sp,-40
  8051b8:	dfc00915 	stw	ra,36(sp)
  8051bc:	df000815 	stw	fp,32(sp)
  8051c0:	dc000715 	stw	r16,28(sp)
  8051c4:	df000804 	addi	fp,sp,32
  8051c8:	e13ffd15 	stw	r4,-12(fp)
  8051cc:	e17ffe15 	stw	r5,-8(fp)
   FRESULT res;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
  8051d0:	e0bffd17 	ldw	r2,-12(fp)
  8051d4:	10c00017 	ldw	r3,0(r2)
  8051d8:	e0bffd17 	ldw	r2,-12(fp)
  8051dc:	1080010b 	ldhu	r2,4(r2)
  8051e0:	10bfffcc 	andi	r2,r2,65535
  8051e4:	100b883a 	mov	r5,r2
  8051e8:	1809883a 	mov	r4,r3
  8051ec:	0803ed00 	call	803ed0 <validate>
  8051f0:	e0bffa15 	stw	r2,-24(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
  8051f4:	e0bffa17 	ldw	r2,-24(fp)
  8051f8:	10000226 	beq	r2,zero,805204 <f_lseek+0x50>
  8051fc:	e0bffa17 	ldw	r2,-24(fp)
  805200:	00012206 	br	80568c <f_lseek+0x4d8>
   if (fp->flag & FA__ERROR)        /* Check abort flag */
  805204:	e0bffd17 	ldw	r2,-12(fp)
  805208:	10800183 	ldbu	r2,6(r2)
  80520c:	10803fcc 	andi	r2,r2,255
  805210:	1080201c 	xori	r2,r2,128
  805214:	10bfe004 	addi	r2,r2,-128
  805218:	1000020e 	bge	r2,zero,805224 <f_lseek+0x70>
      LEAVE_FF(fp->fs, FR_INT_ERR);
  80521c:	00800084 	movi	r2,2
  805220:	00011a06 	br	80568c <f_lseek+0x4d8>

   /* Normal Seek */
   {
      uint32_t clst, bcs, nsect, ifptr;

      if (ofs > fp->fsize              /* In read-only mode, clip offset with the file size */
  805224:	e0bffd17 	ldw	r2,-12(fp)
  805228:	10c00317 	ldw	r3,12(r2)
  80522c:	e0bffe17 	ldw	r2,-8(fp)
  805230:	1880082e 	bgeu	r3,r2,805254 <f_lseek+0xa0>
#if !_FS_READONLY
          && !(fp->flag & FA_WRITE)
  805234:	e0bffd17 	ldw	r2,-12(fp)
  805238:	10800183 	ldbu	r2,6(r2)
  80523c:	10803fcc 	andi	r2,r2,255
  805240:	1080008c 	andi	r2,r2,2
  805244:	1000031e 	bne	r2,zero,805254 <f_lseek+0xa0>
#endif
         ) ofs = fp->fsize;
  805248:	e0bffd17 	ldw	r2,-12(fp)
  80524c:	10800317 	ldw	r2,12(r2)
  805250:	e0bffe15 	stw	r2,-8(fp)

      ifptr = fp->fptr;
  805254:	e0bffd17 	ldw	r2,-12(fp)
  805258:	10800217 	ldw	r2,8(r2)
  80525c:	e0bffb15 	stw	r2,-20(fp)
      fp->fptr = nsect = 0;
  805260:	e03ff915 	stw	zero,-28(fp)
  805264:	e0bffd17 	ldw	r2,-12(fp)
  805268:	e0fff917 	ldw	r3,-28(fp)
  80526c:	10c00215 	stw	r3,8(r2)
      if (ofs) {
  805270:	e0bffe17 	ldw	r2,-8(fp)
  805274:	1000b226 	beq	r2,zero,805540 <f_lseek+0x38c>
         bcs = (uint32_t)fp->fs->csize * SS(fp->fs);  /* Cluster size (byte) */
  805278:	e0bffd17 	ldw	r2,-12(fp)
  80527c:	10800017 	ldw	r2,0(r2)
  805280:	10800083 	ldbu	r2,2(r2)
  805284:	10803fcc 	andi	r2,r2,255
  805288:	1004927a 	slli	r2,r2,9
  80528c:	e0bffc15 	stw	r2,-16(fp)
         if (ifptr > 0 &&
  805290:	e0bffb17 	ldw	r2,-20(fp)
  805294:	10001c26 	beq	r2,zero,805308 <f_lseek+0x154>
            (ofs - 1) / bcs >= (ifptr - 1) / bcs) {   /* When seek to same or following cluster, */
  805298:	e0bffe17 	ldw	r2,-8(fp)
  80529c:	10bfffc4 	addi	r2,r2,-1
  8052a0:	e17ffc17 	ldw	r5,-16(fp)
  8052a4:	1009883a 	mov	r4,r2
  8052a8:	080a4a00 	call	80a4a0 <__udivsi3>
  8052ac:	1021883a 	mov	r16,r2
  8052b0:	e0bffb17 	ldw	r2,-20(fp)
  8052b4:	10bfffc4 	addi	r2,r2,-1
  8052b8:	e17ffc17 	ldw	r5,-16(fp)
  8052bc:	1009883a 	mov	r4,r2
  8052c0:	080a4a00 	call	80a4a0 <__udivsi3>

      ifptr = fp->fptr;
      fp->fptr = nsect = 0;
      if (ofs) {
         bcs = (uint32_t)fp->fs->csize * SS(fp->fs);  /* Cluster size (byte) */
         if (ifptr > 0 &&
  8052c4:	80801036 	bltu	r16,r2,805308 <f_lseek+0x154>
            (ofs - 1) / bcs >= (ifptr - 1) / bcs) {   /* When seek to same or following cluster, */
            fp->fptr = (ifptr - 1) & ~(bcs - 1);   /* start from the current cluster */
  8052c8:	e0bffb17 	ldw	r2,-20(fp)
  8052cc:	10ffffc4 	addi	r3,r2,-1
  8052d0:	e0bffc17 	ldw	r2,-16(fp)
  8052d4:	0085c83a 	sub	r2,zero,r2
  8052d8:	1886703a 	and	r3,r3,r2
  8052dc:	e0bffd17 	ldw	r2,-12(fp)
  8052e0:	10c00215 	stw	r3,8(r2)
            ofs -= fp->fptr;
  8052e4:	e0bffd17 	ldw	r2,-12(fp)
  8052e8:	10800217 	ldw	r2,8(r2)
  8052ec:	e0fffe17 	ldw	r3,-8(fp)
  8052f0:	1885c83a 	sub	r2,r3,r2
  8052f4:	e0bffe15 	stw	r2,-8(fp)
            clst = fp->clust;
  8052f8:	e0bffd17 	ldw	r2,-12(fp)
  8052fc:	10800517 	ldw	r2,20(r2)
  805300:	e0bff815 	stw	r2,-32(fp)
  805304:	00002906 	br	8053ac <f_lseek+0x1f8>
         } else {                         /* When seek to back cluster, */
            clst = fp->sclust;                  /* start from the first cluster */
  805308:	e0bffd17 	ldw	r2,-12(fp)
  80530c:	10800417 	ldw	r2,16(r2)
  805310:	e0bff815 	stw	r2,-32(fp)
#if !_FS_READONLY
            if (clst == 0) {                 /* If no cluster chain, create a new chain */
  805314:	e0bff817 	ldw	r2,-32(fp)
  805318:	1000211e 	bne	r2,zero,8053a0 <f_lseek+0x1ec>
               clst = create_chain(fp->fs, 0);
  80531c:	e0bffd17 	ldw	r2,-12(fp)
  805320:	10800017 	ldw	r2,0(r2)
  805324:	000b883a 	mov	r5,zero
  805328:	1009883a 	mov	r4,r2
  80532c:	08022700 	call	802270 <create_chain>
  805330:	e0bff815 	stw	r2,-32(fp)
               if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
  805334:	e0bff817 	ldw	r2,-32(fp)
  805338:	10800058 	cmpnei	r2,r2,1
  80533c:	1000091e 	bne	r2,zero,805364 <f_lseek+0x1b0>
  805340:	e0bffd17 	ldw	r2,-12(fp)
  805344:	10c00183 	ldbu	r3,6(r2)
  805348:	00bfe004 	movi	r2,-128
  80534c:	1884b03a 	or	r2,r3,r2
  805350:	1007883a 	mov	r3,r2
  805354:	e0bffd17 	ldw	r2,-12(fp)
  805358:	10c00185 	stb	r3,6(r2)
  80535c:	00800084 	movi	r2,2
  805360:	0000ca06 	br	80568c <f_lseek+0x4d8>
               if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  805364:	e0bff817 	ldw	r2,-32(fp)
  805368:	10bfffd8 	cmpnei	r2,r2,-1
  80536c:	1000091e 	bne	r2,zero,805394 <f_lseek+0x1e0>
  805370:	e0bffd17 	ldw	r2,-12(fp)
  805374:	10c00183 	ldbu	r3,6(r2)
  805378:	00bfe004 	movi	r2,-128
  80537c:	1884b03a 	or	r2,r3,r2
  805380:	1007883a 	mov	r3,r2
  805384:	e0bffd17 	ldw	r2,-12(fp)
  805388:	10c00185 	stb	r3,6(r2)
  80538c:	00800044 	movi	r2,1
  805390:	0000be06 	br	80568c <f_lseek+0x4d8>
               fp->sclust = clst;
  805394:	e0bffd17 	ldw	r2,-12(fp)
  805398:	e0fff817 	ldw	r3,-32(fp)
  80539c:	10c00415 	stw	r3,16(r2)
            }
#endif
            fp->clust = clst;
  8053a0:	e0bffd17 	ldw	r2,-12(fp)
  8053a4:	e0fff817 	ldw	r3,-32(fp)
  8053a8:	10c00515 	stw	r3,20(r2)
         }
         if (clst != 0) {
  8053ac:	e0bff817 	ldw	r2,-32(fp)
  8053b0:	10006326 	beq	r2,zero,805540 <f_lseek+0x38c>
            while (ofs > bcs) {                 /* Cluster following loop */
  8053b4:	00004006 	br	8054b8 <f_lseek+0x304>
#if !_FS_READONLY
               if (fp->flag & FA_WRITE) {       /* Check if in write mode or not */
  8053b8:	e0bffd17 	ldw	r2,-12(fp)
  8053bc:	10800183 	ldbu	r2,6(r2)
  8053c0:	10803fcc 	andi	r2,r2,255
  8053c4:	1080008c 	andi	r2,r2,2
  8053c8:	10000b26 	beq	r2,zero,8053f8 <f_lseek+0x244>
                  clst = create_chain(fp->fs, clst);  /* Force stretch if in write mode */
  8053cc:	e0bffd17 	ldw	r2,-12(fp)
  8053d0:	10800017 	ldw	r2,0(r2)
  8053d4:	e17ff817 	ldw	r5,-32(fp)
  8053d8:	1009883a 	mov	r4,r2
  8053dc:	08022700 	call	802270 <create_chain>
  8053e0:	e0bff815 	stw	r2,-32(fp)
                  if (clst == 0) {           /* When disk gets full, clip file size */
  8053e4:	e0bff817 	ldw	r2,-32(fp)
  8053e8:	1000091e 	bne	r2,zero,805410 <f_lseek+0x25c>
                     ofs = bcs; break;
  8053ec:	e0bffc17 	ldw	r2,-16(fp)
  8053f0:	e0bffe15 	stw	r2,-8(fp)
  8053f4:	00003306 	br	8054c4 <f_lseek+0x310>
                  }
               } else
#endif
                  clst = get_fat(fp->fs, clst); /* Follow cluster chain if not in write mode */
  8053f8:	e0bffd17 	ldw	r2,-12(fp)
  8053fc:	10800017 	ldw	r2,0(r2)
  805400:	e17ff817 	ldw	r5,-32(fp)
  805404:	1009883a 	mov	r4,r2
  805408:	0801b440 	call	801b44 <get_fat>
  80540c:	e0bff815 	stw	r2,-32(fp)
               if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
  805410:	e0bff817 	ldw	r2,-32(fp)
  805414:	10bfffd8 	cmpnei	r2,r2,-1
  805418:	1000091e 	bne	r2,zero,805440 <f_lseek+0x28c>
  80541c:	e0bffd17 	ldw	r2,-12(fp)
  805420:	10c00183 	ldbu	r3,6(r2)
  805424:	00bfe004 	movi	r2,-128
  805428:	1884b03a 	or	r2,r3,r2
  80542c:	1007883a 	mov	r3,r2
  805430:	e0bffd17 	ldw	r2,-12(fp)
  805434:	10c00185 	stb	r3,6(r2)
  805438:	00800044 	movi	r2,1
  80543c:	00009306 	br	80568c <f_lseek+0x4d8>
               if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
  805440:	e0bff817 	ldw	r2,-32(fp)
  805444:	108000b0 	cmpltui	r2,r2,2
  805448:	1000051e 	bne	r2,zero,805460 <f_lseek+0x2ac>
  80544c:	e0bffd17 	ldw	r2,-12(fp)
  805450:	10800017 	ldw	r2,0(r2)
  805454:	10800617 	ldw	r2,24(r2)
  805458:	e0fff817 	ldw	r3,-32(fp)
  80545c:	18800936 	bltu	r3,r2,805484 <f_lseek+0x2d0>
  805460:	e0bffd17 	ldw	r2,-12(fp)
  805464:	10c00183 	ldbu	r3,6(r2)
  805468:	00bfe004 	movi	r2,-128
  80546c:	1884b03a 	or	r2,r3,r2
  805470:	1007883a 	mov	r3,r2
  805474:	e0bffd17 	ldw	r2,-12(fp)
  805478:	10c00185 	stb	r3,6(r2)
  80547c:	00800084 	movi	r2,2
  805480:	00008206 	br	80568c <f_lseek+0x4d8>
               fp->clust = clst;
  805484:	e0bffd17 	ldw	r2,-12(fp)
  805488:	e0fff817 	ldw	r3,-32(fp)
  80548c:	10c00515 	stw	r3,20(r2)
               fp->fptr += bcs;
  805490:	e0bffd17 	ldw	r2,-12(fp)
  805494:	10c00217 	ldw	r3,8(r2)
  805498:	e0bffc17 	ldw	r2,-16(fp)
  80549c:	1887883a 	add	r3,r3,r2
  8054a0:	e0bffd17 	ldw	r2,-12(fp)
  8054a4:	10c00215 	stw	r3,8(r2)
               ofs -= bcs;
  8054a8:	e0fffe17 	ldw	r3,-8(fp)
  8054ac:	e0bffc17 	ldw	r2,-16(fp)
  8054b0:	1885c83a 	sub	r2,r3,r2
  8054b4:	e0bffe15 	stw	r2,-8(fp)
            }
#endif
            fp->clust = clst;
         }
         if (clst != 0) {
            while (ofs > bcs) {                 /* Cluster following loop */
  8054b8:	e0bffe17 	ldw	r2,-8(fp)
  8054bc:	e0fffc17 	ldw	r3,-16(fp)
  8054c0:	18bfbd36 	bltu	r3,r2,8053b8 <__alt_data_end+0xff8053b8>
               if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
               fp->clust = clst;
               fp->fptr += bcs;
               ofs -= bcs;
            }
            fp->fptr += ofs;
  8054c4:	e0bffd17 	ldw	r2,-12(fp)
  8054c8:	10c00217 	ldw	r3,8(r2)
  8054cc:	e0bffe17 	ldw	r2,-8(fp)
  8054d0:	1887883a 	add	r3,r3,r2
  8054d4:	e0bffd17 	ldw	r2,-12(fp)
  8054d8:	10c00215 	stw	r3,8(r2)
            if (ofs % SS(fp->fs)) {
  8054dc:	e0bffe17 	ldw	r2,-8(fp)
  8054e0:	10807fcc 	andi	r2,r2,511
  8054e4:	10001626 	beq	r2,zero,805540 <f_lseek+0x38c>
               nsect = clust2sect(fp->fs, clst);   /* Current sector */
  8054e8:	e0bffd17 	ldw	r2,-12(fp)
  8054ec:	10800017 	ldw	r2,0(r2)
  8054f0:	e17ff817 	ldw	r5,-32(fp)
  8054f4:	1009883a 	mov	r4,r2
  8054f8:	0801ad80 	call	801ad8 <clust2sect>
  8054fc:	e0bff915 	stw	r2,-28(fp)
               if (!nsect) ABORT(fp->fs, FR_INT_ERR);
  805500:	e0bff917 	ldw	r2,-28(fp)
  805504:	1000091e 	bne	r2,zero,80552c <f_lseek+0x378>
  805508:	e0bffd17 	ldw	r2,-12(fp)
  80550c:	10c00183 	ldbu	r3,6(r2)
  805510:	00bfe004 	movi	r2,-128
  805514:	1884b03a 	or	r2,r3,r2
  805518:	1007883a 	mov	r3,r2
  80551c:	e0bffd17 	ldw	r2,-12(fp)
  805520:	10c00185 	stb	r3,6(r2)
  805524:	00800084 	movi	r2,2
  805528:	00005806 	br	80568c <f_lseek+0x4d8>
               nsect += ofs / SS(fp->fs);
  80552c:	e0bffe17 	ldw	r2,-8(fp)
  805530:	1004d27a 	srli	r2,r2,9
  805534:	e0fff917 	ldw	r3,-28(fp)
  805538:	1885883a 	add	r2,r3,r2
  80553c:	e0bff915 	stw	r2,-28(fp)
            }
         }
      }
      if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) { /* Fill sector cache if needed */
  805540:	e0bffd17 	ldw	r2,-12(fp)
  805544:	10800217 	ldw	r2,8(r2)
  805548:	10807fcc 	andi	r2,r2,511
  80554c:	10003f26 	beq	r2,zero,80564c <f_lseek+0x498>
  805550:	e0bffd17 	ldw	r2,-12(fp)
  805554:	10c00617 	ldw	r3,24(r2)
  805558:	e0bff917 	ldw	r2,-28(fp)
  80555c:	18803b26 	beq	r3,r2,80564c <f_lseek+0x498>
#if !_FS_TINY
#if !_FS_READONLY
         if (fp->flag & FA__DIRTY) {         /* Write-back dirty sector cache */
  805560:	e0bffd17 	ldw	r2,-12(fp)
  805564:	10800183 	ldbu	r2,6(r2)
  805568:	10803fcc 	andi	r2,r2,255
  80556c:	1080100c 	andi	r2,r2,64
  805570:	10001e26 	beq	r2,zero,8055ec <f_lseek+0x438>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
  805574:	e0bffd17 	ldw	r2,-12(fp)
  805578:	10800017 	ldw	r2,0(r2)
  80557c:	10800043 	ldbu	r2,1(r2)
  805580:	10c03fcc 	andi	r3,r2,255
  805584:	e0bffd17 	ldw	r2,-12(fp)
  805588:	11000904 	addi	r4,r2,36
  80558c:	e0bffd17 	ldw	r2,-12(fp)
  805590:	10800617 	ldw	r2,24(r2)
  805594:	01c00044 	movi	r7,1
  805598:	100d883a 	mov	r6,r2
  80559c:	200b883a 	mov	r5,r4
  8055a0:	1809883a 	mov	r4,r3
  8055a4:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  8055a8:	10000926 	beq	r2,zero,8055d0 <f_lseek+0x41c>
               ABORT(fp->fs, FR_DISK_ERR);
  8055ac:	e0bffd17 	ldw	r2,-12(fp)
  8055b0:	10c00183 	ldbu	r3,6(r2)
  8055b4:	00bfe004 	movi	r2,-128
  8055b8:	1884b03a 	or	r2,r3,r2
  8055bc:	1007883a 	mov	r3,r2
  8055c0:	e0bffd17 	ldw	r2,-12(fp)
  8055c4:	10c00185 	stb	r3,6(r2)
  8055c8:	00800044 	movi	r2,1
  8055cc:	00002f06 	br	80568c <f_lseek+0x4d8>
            fp->flag &= ~FA__DIRTY;
  8055d0:	e0bffd17 	ldw	r2,-12(fp)
  8055d4:	10c00183 	ldbu	r3,6(r2)
  8055d8:	00bfefc4 	movi	r2,-65
  8055dc:	1884703a 	and	r2,r3,r2
  8055e0:	1007883a 	mov	r3,r2
  8055e4:	e0bffd17 	ldw	r2,-12(fp)
  8055e8:	10c00185 	stb	r3,6(r2)
         }
#endif
         if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK) /* Fill sector cache */
  8055ec:	e0bffd17 	ldw	r2,-12(fp)
  8055f0:	10800017 	ldw	r2,0(r2)
  8055f4:	10800043 	ldbu	r2,1(r2)
  8055f8:	10c03fcc 	andi	r3,r2,255
  8055fc:	e0bffd17 	ldw	r2,-12(fp)
  805600:	10800904 	addi	r2,r2,36
  805604:	01c00044 	movi	r7,1
  805608:	e1bff917 	ldw	r6,-28(fp)
  80560c:	100b883a 	mov	r5,r2
  805610:	1809883a 	mov	r4,r3
  805614:	0800e080 	call	800e08 <ffs_DiskIORead>
  805618:	10000926 	beq	r2,zero,805640 <f_lseek+0x48c>
            ABORT(fp->fs, FR_DISK_ERR);
  80561c:	e0bffd17 	ldw	r2,-12(fp)
  805620:	10c00183 	ldbu	r3,6(r2)
  805624:	00bfe004 	movi	r2,-128
  805628:	1884b03a 	or	r2,r3,r2
  80562c:	1007883a 	mov	r3,r2
  805630:	e0bffd17 	ldw	r2,-12(fp)
  805634:	10c00185 	stb	r3,6(r2)
  805638:	00800044 	movi	r2,1
  80563c:	00001306 	br	80568c <f_lseek+0x4d8>
#endif
         fp->dsect = nsect;
  805640:	e0bffd17 	ldw	r2,-12(fp)
  805644:	e0fff917 	ldw	r3,-28(fp)
  805648:	10c00615 	stw	r3,24(r2)
      }
#if !_FS_READONLY
      if (fp->fptr > fp->fsize) {         /* Set file change flag if the file size is extended */
  80564c:	e0bffd17 	ldw	r2,-12(fp)
  805650:	10800217 	ldw	r2,8(r2)
  805654:	e0fffd17 	ldw	r3,-12(fp)
  805658:	18c00317 	ldw	r3,12(r3)
  80565c:	18800a2e 	bgeu	r3,r2,805688 <f_lseek+0x4d4>
         fp->fsize = fp->fptr;
  805660:	e0bffd17 	ldw	r2,-12(fp)
  805664:	10c00217 	ldw	r3,8(r2)
  805668:	e0bffd17 	ldw	r2,-12(fp)
  80566c:	10c00315 	stw	r3,12(r2)
         fp->flag |= FA__WRITTEN;
  805670:	e0bffd17 	ldw	r2,-12(fp)
  805674:	10800183 	ldbu	r2,6(r2)
  805678:	10800814 	ori	r2,r2,32
  80567c:	1007883a 	mov	r3,r2
  805680:	e0bffd17 	ldw	r2,-12(fp)
  805684:	10c00185 	stb	r3,6(r2)
      }
#endif
   }

   LEAVE_FF(fp->fs, res);
  805688:	e0bffa17 	ldw	r2,-24(fp)
}
  80568c:	e6ffff04 	addi	sp,fp,-4
  805690:	dfc00217 	ldw	ra,8(sp)
  805694:	df000117 	ldw	fp,4(sp)
  805698:	dc000017 	ldw	r16,0(sp)
  80569c:	dec00304 	addi	sp,sp,12
  8056a0:	f800283a 	ret

008056a4 <f_opendir>:

FRESULT f_opendir (
   DIR *dj,       /* Pointer to directory object to create */
   const TCHAR *path /* Pointer to the directory path */
)
{
  8056a4:	defff804 	addi	sp,sp,-32
  8056a8:	dfc00715 	stw	ra,28(sp)
  8056ac:	df000615 	stw	fp,24(sp)
  8056b0:	df000604 	addi	fp,sp,24
  8056b4:	e13ffe15 	stw	r4,-8(fp)
  8056b8:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj->fs, 0);
  8056bc:	e0fffe17 	ldw	r3,-8(fp)
  8056c0:	e0bfff04 	addi	r2,fp,-4
  8056c4:	000d883a 	mov	r6,zero
  8056c8:	180b883a 	mov	r5,r3
  8056cc:	1009883a 	mov	r4,r2
  8056d0:	08035900 	call	803590 <chk_mounted>
  8056d4:	e0bffa15 	stw	r2,-24(fp)
   if (res == FR_OK) {
  8056d8:	e0bffa17 	ldw	r2,-24(fp)
  8056dc:	1000471e 	bne	r2,zero,8057fc <f_opendir+0x158>

      INIT_BUF(*dj);
  8056e0:	e0bffe17 	ldw	r2,-8(fp)
  8056e4:	e0fffb04 	addi	r3,fp,-20
  8056e8:	10c00615 	stw	r3,24(r2)
      res = follow_path(dj, path);        /* Follow the path to the directory */
  8056ec:	e0bfff17 	ldw	r2,-4(fp)
  8056f0:	100b883a 	mov	r5,r2
  8056f4:	e13ffe17 	ldw	r4,-8(fp)
  8056f8:	08032080 	call	803208 <follow_path>
  8056fc:	e0bffa15 	stw	r2,-24(fp)
      FREE_BUF();
      if (res == FR_OK) {                 /* Follow completed */
  805700:	e0bffa17 	ldw	r2,-24(fp)
  805704:	1000381e 	bne	r2,zero,8057e8 <f_opendir+0x144>
         if (dj->dir) {                /* It is not the root dir */
  805708:	e0bffe17 	ldw	r2,-8(fp)
  80570c:	10800517 	ldw	r2,20(r2)
  805710:	10002a26 	beq	r2,zero,8057bc <f_opendir+0x118>
            if (dj->dir[DIR_Attr] & AM_DIR) {   /* The object is a directory */
  805714:	e0bffe17 	ldw	r2,-8(fp)
  805718:	10800517 	ldw	r2,20(r2)
  80571c:	108002c4 	addi	r2,r2,11
  805720:	10800003 	ldbu	r2,0(r2)
  805724:	10803fcc 	andi	r2,r2,255
  805728:	1080040c 	andi	r2,r2,16
  80572c:	10002126 	beq	r2,zero,8057b4 <f_opendir+0x110>
               dj->sclust = LD_CLUST(dj->dir);
  805730:	e0bffe17 	ldw	r2,-8(fp)
  805734:	10800517 	ldw	r2,20(r2)
  805738:	10800544 	addi	r2,r2,21
  80573c:	10800003 	ldbu	r2,0(r2)
  805740:	10803fcc 	andi	r2,r2,255
  805744:	1004923a 	slli	r2,r2,8
  805748:	1007883a 	mov	r3,r2
  80574c:	e0bffe17 	ldw	r2,-8(fp)
  805750:	10800517 	ldw	r2,20(r2)
  805754:	10800504 	addi	r2,r2,20
  805758:	10800003 	ldbu	r2,0(r2)
  80575c:	10803fcc 	andi	r2,r2,255
  805760:	1884b03a 	or	r2,r3,r2
  805764:	10bfffcc 	andi	r2,r2,65535
  805768:	1006943a 	slli	r3,r2,16
  80576c:	e0bffe17 	ldw	r2,-8(fp)
  805770:	10800517 	ldw	r2,20(r2)
  805774:	108006c4 	addi	r2,r2,27
  805778:	10800003 	ldbu	r2,0(r2)
  80577c:	10803fcc 	andi	r2,r2,255
  805780:	1004923a 	slli	r2,r2,8
  805784:	1009883a 	mov	r4,r2
  805788:	e0bffe17 	ldw	r2,-8(fp)
  80578c:	10800517 	ldw	r2,20(r2)
  805790:	10800684 	addi	r2,r2,26
  805794:	10800003 	ldbu	r2,0(r2)
  805798:	10803fcc 	andi	r2,r2,255
  80579c:	2084b03a 	or	r2,r4,r2
  8057a0:	10bfffcc 	andi	r2,r2,65535
  8057a4:	1886b03a 	or	r3,r3,r2
  8057a8:	e0bffe17 	ldw	r2,-8(fp)
  8057ac:	10c00215 	stw	r3,8(r2)
  8057b0:	00000206 	br	8057bc <f_opendir+0x118>
            } else {                /* The object is not a directory */
               res = FR_NO_PATH;
  8057b4:	00800144 	movi	r2,5
  8057b8:	e0bffa15 	stw	r2,-24(fp)
            }
         }
         if (res == FR_OK) {
  8057bc:	e0bffa17 	ldw	r2,-24(fp)
  8057c0:	1000091e 	bne	r2,zero,8057e8 <f_opendir+0x144>
            dj->id = dj->fs->id;
  8057c4:	e0bffe17 	ldw	r2,-8(fp)
  8057c8:	10800017 	ldw	r2,0(r2)
  8057cc:	10c0018b 	ldhu	r3,6(r2)
  8057d0:	e0bffe17 	ldw	r2,-8(fp)
  8057d4:	10c0010d 	sth	r3,4(r2)
            res = dir_sdi(dj, 0);         /* Rewind dir */
  8057d8:	000b883a 	mov	r5,zero
  8057dc:	e13ffe17 	ldw	r4,-8(fp)
  8057e0:	080244c0 	call	80244c <dir_sdi>
  8057e4:	e0bffa15 	stw	r2,-24(fp)
         }
      }
      if (res == FR_NO_FILE) res = FR_NO_PATH;
  8057e8:	e0bffa17 	ldw	r2,-24(fp)
  8057ec:	10800118 	cmpnei	r2,r2,4
  8057f0:	1000021e 	bne	r2,zero,8057fc <f_opendir+0x158>
  8057f4:	00800144 	movi	r2,5
  8057f8:	e0bffa15 	stw	r2,-24(fp)
   }

   LEAVE_FF(dj->fs, res);
  8057fc:	e0bffa17 	ldw	r2,-24(fp)
}
  805800:	e037883a 	mov	sp,fp
  805804:	dfc00117 	ldw	ra,4(sp)
  805808:	df000017 	ldw	fp,0(sp)
  80580c:	dec00204 	addi	sp,sp,8
  805810:	f800283a 	ret

00805814 <f_readdir>:

FRESULT f_readdir (
   DIR *dj,       /* Pointer to the open directory object */
   FILINFO *fno      /* Pointer to file information to return */
)
{
  805814:	defff804 	addi	sp,sp,-32
  805818:	dfc00715 	stw	ra,28(sp)
  80581c:	df000615 	stw	fp,24(sp)
  805820:	df000604 	addi	fp,sp,24
  805824:	e13ffe15 	stw	r4,-8(fp)
  805828:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DEF_NAMEBUF;


   res = validate(dj->fs, dj->id);        /* Check validity of the object */
  80582c:	e0bffe17 	ldw	r2,-8(fp)
  805830:	10c00017 	ldw	r3,0(r2)
  805834:	e0bffe17 	ldw	r2,-8(fp)
  805838:	1080010b 	ldhu	r2,4(r2)
  80583c:	10bfffcc 	andi	r2,r2,65535
  805840:	100b883a 	mov	r5,r2
  805844:	1809883a 	mov	r4,r3
  805848:	0803ed00 	call	803ed0 <validate>
  80584c:	e0bffa15 	stw	r2,-24(fp)
   if (res == FR_OK) {
  805850:	e0bffa17 	ldw	r2,-24(fp)
  805854:	1000221e 	bne	r2,zero,8058e0 <f_readdir+0xcc>

      if (!fno) {
  805858:	e0bfff17 	ldw	r2,-4(fp)
  80585c:	1000051e 	bne	r2,zero,805874 <f_readdir+0x60>
         res = dir_sdi(dj, 0);         /* Rewind the directory object */
  805860:	000b883a 	mov	r5,zero
  805864:	e13ffe17 	ldw	r4,-8(fp)
  805868:	080244c0 	call	80244c <dir_sdi>
  80586c:	e0bffa15 	stw	r2,-24(fp)
  805870:	00001b06 	br	8058e0 <f_readdir+0xcc>
      } else {
         INIT_BUF(*dj);
  805874:	e0bffe17 	ldw	r2,-8(fp)
  805878:	e0fffb04 	addi	r3,fp,-20
  80587c:	10c00615 	stw	r3,24(r2)
         res = dir_read(dj);           /* Read an directory item */
  805880:	e13ffe17 	ldw	r4,-8(fp)
  805884:	0802a1c0 	call	802a1c <dir_read>
  805888:	e0bffa15 	stw	r2,-24(fp)
         if (res == FR_NO_FILE) {      /* Reached end of dir */
  80588c:	e0bffa17 	ldw	r2,-24(fp)
  805890:	10800118 	cmpnei	r2,r2,4
  805894:	1000031e 	bne	r2,zero,8058a4 <f_readdir+0x90>
            dj->sect = 0;
  805898:	e0bffe17 	ldw	r2,-8(fp)
  80589c:	10000415 	stw	zero,16(r2)
            res = FR_OK;
  8058a0:	e03ffa15 	stw	zero,-24(fp)
         }
         if (res == FR_OK) {           /* A valid entry is found */
  8058a4:	e0bffa17 	ldw	r2,-24(fp)
  8058a8:	10000d1e 	bne	r2,zero,8058e0 <f_readdir+0xcc>

            get_fileinfo(dj, fno);     /* Get the object information */
  8058ac:	e17fff17 	ldw	r5,-4(fp)
  8058b0:	e13ffe17 	ldw	r4,-8(fp)
  8058b4:	0802fcc0 	call	802fcc <get_fileinfo>
            res = dir_next(dj, 0);     /* Increment index for next */
  8058b8:	000b883a 	mov	r5,zero
  8058bc:	e13ffe17 	ldw	r4,-8(fp)
  8058c0:	08026380 	call	802638 <dir_next>
  8058c4:	e0bffa15 	stw	r2,-24(fp)
            if (res == FR_NO_FILE) {
  8058c8:	e0bffa17 	ldw	r2,-24(fp)
  8058cc:	10800118 	cmpnei	r2,r2,4
  8058d0:	1000031e 	bne	r2,zero,8058e0 <f_readdir+0xcc>

               dj->sect = 0;
  8058d4:	e0bffe17 	ldw	r2,-8(fp)
  8058d8:	10000415 	stw	zero,16(r2)
               res = FR_OK;
  8058dc:	e03ffa15 	stw	zero,-24(fp)
         }
         FREE_BUF();
      }
   }

   LEAVE_FF(dj->fs, res);
  8058e0:	e0bffa17 	ldw	r2,-24(fp)
}
  8058e4:	e037883a 	mov	sp,fp
  8058e8:	dfc00117 	ldw	ra,4(sp)
  8058ec:	df000017 	ldw	fp,0(sp)
  8058f0:	dec00204 	addi	sp,sp,8
  8058f4:	f800283a 	ret

008058f8 <f_stat>:

FRESULT f_stat (
   const TCHAR *path,   /* Pointer to the file path */
   FILINFO *fno      /* Pointer to file information to return */
)
{
  8058f8:	defff104 	addi	sp,sp,-60
  8058fc:	dfc00e15 	stw	ra,56(sp)
  805900:	df000d15 	stw	fp,52(sp)
  805904:	df000d04 	addi	fp,sp,52
  805908:	e13ffe15 	stw	r4,-8(fp)
  80590c:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DIR dj;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 0);
  805910:	e0fff404 	addi	r3,fp,-48
  805914:	e0bffe04 	addi	r2,fp,-8
  805918:	000d883a 	mov	r6,zero
  80591c:	180b883a 	mov	r5,r3
  805920:	1009883a 	mov	r4,r2
  805924:	08035900 	call	803590 <chk_mounted>
  805928:	e0bff315 	stw	r2,-52(fp)
   if (res == FR_OK) {
  80592c:	e0bff317 	ldw	r2,-52(fp)
  805930:	1000131e 	bne	r2,zero,805980 <f_stat+0x88>
      INIT_BUF(dj);
  805934:	e0bffb04 	addi	r2,fp,-20
  805938:	e0bffa15 	stw	r2,-24(fp)
      res = follow_path(&dj, path); /* Follow the file path */
  80593c:	e0fffe17 	ldw	r3,-8(fp)
  805940:	e0bff404 	addi	r2,fp,-48
  805944:	180b883a 	mov	r5,r3
  805948:	1009883a 	mov	r4,r2
  80594c:	08032080 	call	803208 <follow_path>
  805950:	e0bff315 	stw	r2,-52(fp)
      if (res == FR_OK) {           /* Follow completed */
  805954:	e0bff317 	ldw	r2,-52(fp)
  805958:	1000091e 	bne	r2,zero,805980 <f_stat+0x88>
         if (dj.dir)    /* Found an object */
  80595c:	e0bff917 	ldw	r2,-28(fp)
  805960:	10000526 	beq	r2,zero,805978 <f_stat+0x80>
            get_fileinfo(&dj, fno);
  805964:	e0bff404 	addi	r2,fp,-48
  805968:	e17fff17 	ldw	r5,-4(fp)
  80596c:	1009883a 	mov	r4,r2
  805970:	0802fcc0 	call	802fcc <get_fileinfo>
  805974:	00000206 	br	805980 <f_stat+0x88>
         else        /* It is root dir */
            res = FR_INVALID_NAME;
  805978:	00800184 	movi	r2,6
  80597c:	e0bff315 	stw	r2,-52(fp)
      }
      FREE_BUF();
   }

   LEAVE_FF(dj.fs, res);
  805980:	e0bff317 	ldw	r2,-52(fp)
}
  805984:	e037883a 	mov	sp,fp
  805988:	dfc00117 	ldw	ra,4(sp)
  80598c:	df000017 	ldw	fp,0(sp)
  805990:	dec00204 	addi	sp,sp,8
  805994:	f800283a 	ret

00805998 <f_getfree>:
FRESULT f_getfree (
   const TCHAR *path,   /* Pointer to the logical drive number (root dir) */
   uint32_t *nclst,     /* Pointer to the variable to return number of free clusters */
   FATFS **fatfs     /* Pointer to pointer to corresponding file system object to return */
)
{
  805998:	defff304 	addi	sp,sp,-52
  80599c:	dfc00c15 	stw	ra,48(sp)
  8059a0:	df000b15 	stw	fp,44(sp)
  8059a4:	df000b04 	addi	fp,sp,44
  8059a8:	e13ffd15 	stw	r4,-12(fp)
  8059ac:	e17ffe15 	stw	r5,-8(fp)
  8059b0:	e1bfff15 	stw	r6,-4(fp)
   uint32_t i;
   uint8_t fat, *p;


   /* Get drive number */
   res = chk_mounted(&path, fatfs, 0);
  8059b4:	e0bffd04 	addi	r2,fp,-12
  8059b8:	000d883a 	mov	r6,zero
  8059bc:	e17fff17 	ldw	r5,-4(fp)
  8059c0:	1009883a 	mov	r4,r2
  8059c4:	08035900 	call	803590 <chk_mounted>
  8059c8:	e0bff515 	stw	r2,-44(fp)
   if (res == FR_OK) {
  8059cc:	e0bff517 	ldw	r2,-44(fp)
  8059d0:	1000a61e 	bne	r2,zero,805c6c <f_getfree+0x2d4>
      /* If free_clust is valid, return it without full cluster scan */
      if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
  8059d4:	e0bfff17 	ldw	r2,-4(fp)
  8059d8:	10800017 	ldw	r2,0(r2)
  8059dc:	10800417 	ldw	r2,16(r2)
  8059e0:	e0ffff17 	ldw	r3,-4(fp)
  8059e4:	18c00017 	ldw	r3,0(r3)
  8059e8:	18c00617 	ldw	r3,24(r3)
  8059ec:	18ffff84 	addi	r3,r3,-2
  8059f0:	18800636 	bltu	r3,r2,805a0c <f_getfree+0x74>
         *nclst = (*fatfs)->free_clust;
  8059f4:	e0bfff17 	ldw	r2,-4(fp)
  8059f8:	10800017 	ldw	r2,0(r2)
  8059fc:	10c00417 	ldw	r3,16(r2)
  805a00:	e0bffe17 	ldw	r2,-8(fp)
  805a04:	10c00015 	stw	r3,0(r2)
  805a08:	00009806 	br	805c6c <f_getfree+0x2d4>
      } else {
         /* Get number of free clusters */
         fat = (*fatfs)->fs_type;
  805a0c:	e0bfff17 	ldw	r2,-4(fp)
  805a10:	10800017 	ldw	r2,0(r2)
  805a14:	10800003 	ldbu	r2,0(r2)
  805a18:	e0bffb05 	stb	r2,-20(fp)
         n = 0;
  805a1c:	e03ff615 	stw	zero,-40(fp)
         if (fat == FS_FAT12) {
  805a20:	e0bffb03 	ldbu	r2,-20(fp)
  805a24:	10800058 	cmpnei	r2,r2,1
  805a28:	1000221e 	bne	r2,zero,805ab4 <f_getfree+0x11c>
            clst = 2;
  805a2c:	00800084 	movi	r2,2
  805a30:	e0bff715 	stw	r2,-36(fp)
            do {
               stat = get_fat(*fatfs, clst);
  805a34:	e0bfff17 	ldw	r2,-4(fp)
  805a38:	10800017 	ldw	r2,0(r2)
  805a3c:	e17ff717 	ldw	r5,-36(fp)
  805a40:	1009883a 	mov	r4,r2
  805a44:	0801b440 	call	801b44 <get_fat>
  805a48:	e0bffc15 	stw	r2,-16(fp)
               if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
  805a4c:	e0bffc17 	ldw	r2,-16(fp)
  805a50:	10bfffd8 	cmpnei	r2,r2,-1
  805a54:	1000031e 	bne	r2,zero,805a64 <f_getfree+0xcc>
  805a58:	00800044 	movi	r2,1
  805a5c:	e0bff515 	stw	r2,-44(fp)
  805a60:	00007406 	br	805c34 <f_getfree+0x29c>
               if (stat == 1) { res = FR_INT_ERR; break; }
  805a64:	e0bffc17 	ldw	r2,-16(fp)
  805a68:	10800058 	cmpnei	r2,r2,1
  805a6c:	1000031e 	bne	r2,zero,805a7c <f_getfree+0xe4>
  805a70:	00800084 	movi	r2,2
  805a74:	e0bff515 	stw	r2,-44(fp)
  805a78:	00006e06 	br	805c34 <f_getfree+0x29c>
               if (stat == 0) n++;
  805a7c:	e0bffc17 	ldw	r2,-16(fp)
  805a80:	1000031e 	bne	r2,zero,805a90 <f_getfree+0xf8>
  805a84:	e0bff617 	ldw	r2,-40(fp)
  805a88:	10800044 	addi	r2,r2,1
  805a8c:	e0bff615 	stw	r2,-40(fp)
            } while (++clst < (*fatfs)->n_fatent);
  805a90:	e0bff717 	ldw	r2,-36(fp)
  805a94:	10800044 	addi	r2,r2,1
  805a98:	e0bff715 	stw	r2,-36(fp)
  805a9c:	e0bfff17 	ldw	r2,-4(fp)
  805aa0:	10800017 	ldw	r2,0(r2)
  805aa4:	10800617 	ldw	r2,24(r2)
  805aa8:	e0fff717 	ldw	r3,-36(fp)
  805aac:	18bfe136 	bltu	r3,r2,805a34 <__alt_data_end+0xff805a34>
  805ab0:	00006006 	br	805c34 <f_getfree+0x29c>
         } else {
            clst = (*fatfs)->n_fatent;
  805ab4:	e0bfff17 	ldw	r2,-4(fp)
  805ab8:	10800017 	ldw	r2,0(r2)
  805abc:	10800617 	ldw	r2,24(r2)
  805ac0:	e0bff715 	stw	r2,-36(fp)
            sect = (*fatfs)->fatbase;
  805ac4:	e0bfff17 	ldw	r2,-4(fp)
  805ac8:	10800017 	ldw	r2,0(r2)
  805acc:	10800817 	ldw	r2,32(r2)
  805ad0:	e0bff815 	stw	r2,-32(fp)
            i = 0; p = 0;
  805ad4:	e03ff915 	stw	zero,-28(fp)
  805ad8:	e03ffa15 	stw	zero,-24(fp)
            do {
               if (!i) {
  805adc:	e0bff917 	ldw	r2,-28(fp)
  805ae0:	1000101e 	bne	r2,zero,805b24 <f_getfree+0x18c>
                  res = move_window(*fatfs, sect++);
  805ae4:	e0bfff17 	ldw	r2,-4(fp)
  805ae8:	11000017 	ldw	r4,0(r2)
  805aec:	e0bff817 	ldw	r2,-32(fp)
  805af0:	10c00044 	addi	r3,r2,1
  805af4:	e0fff815 	stw	r3,-32(fp)
  805af8:	100b883a 	mov	r5,r2
  805afc:	080175c0 	call	80175c <move_window>
  805b00:	e0bff515 	stw	r2,-44(fp)
                  if (res != FR_OK) break;
  805b04:	e0bff517 	ldw	r2,-44(fp)
  805b08:	1000491e 	bne	r2,zero,805c30 <f_getfree+0x298>
                  p = (*fatfs)->win;
  805b0c:	e0bfff17 	ldw	r2,-4(fp)
  805b10:	10800017 	ldw	r2,0(r2)
  805b14:	10800c04 	addi	r2,r2,48
  805b18:	e0bffa15 	stw	r2,-24(fp)
                  i = SS(*fatfs);
  805b1c:	00808004 	movi	r2,512
  805b20:	e0bff915 	stw	r2,-28(fp)
               }
               if (fat == FS_FAT16) {
  805b24:	e0bffb03 	ldbu	r2,-20(fp)
  805b28:	10800098 	cmpnei	r2,r2,2
  805b2c:	1000181e 	bne	r2,zero,805b90 <f_getfree+0x1f8>
                  if (LD_WORD(p) == 0) n++;
  805b30:	e0bffa17 	ldw	r2,-24(fp)
  805b34:	10800044 	addi	r2,r2,1
  805b38:	10800003 	ldbu	r2,0(r2)
  805b3c:	10803fcc 	andi	r2,r2,255
  805b40:	1004923a 	slli	r2,r2,8
  805b44:	1007883a 	mov	r3,r2
  805b48:	e0bffa17 	ldw	r2,-24(fp)
  805b4c:	10800003 	ldbu	r2,0(r2)
  805b50:	10803fcc 	andi	r2,r2,255
  805b54:	1884b03a 	or	r2,r3,r2
  805b58:	10bfffcc 	andi	r2,r2,65535
  805b5c:	10a0001c 	xori	r2,r2,32768
  805b60:	10a00004 	addi	r2,r2,-32768
  805b64:	1000031e 	bne	r2,zero,805b74 <f_getfree+0x1dc>
  805b68:	e0bff617 	ldw	r2,-40(fp)
  805b6c:	10800044 	addi	r2,r2,1
  805b70:	e0bff615 	stw	r2,-40(fp)
                  p += 2; i -= 2;
  805b74:	e0bffa17 	ldw	r2,-24(fp)
  805b78:	10800084 	addi	r2,r2,2
  805b7c:	e0bffa15 	stw	r2,-24(fp)
  805b80:	e0bff917 	ldw	r2,-28(fp)
  805b84:	10bfff84 	addi	r2,r2,-2
  805b88:	e0bff915 	stw	r2,-28(fp)
  805b8c:	00002206 	br	805c18 <f_getfree+0x280>
               } else {
                  if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
  805b90:	e0bffa17 	ldw	r2,-24(fp)
  805b94:	108000c4 	addi	r2,r2,3
  805b98:	10800003 	ldbu	r2,0(r2)
  805b9c:	10803fcc 	andi	r2,r2,255
  805ba0:	1006963a 	slli	r3,r2,24
  805ba4:	e0bffa17 	ldw	r2,-24(fp)
  805ba8:	10800084 	addi	r2,r2,2
  805bac:	10800003 	ldbu	r2,0(r2)
  805bb0:	10803fcc 	andi	r2,r2,255
  805bb4:	1004943a 	slli	r2,r2,16
  805bb8:	1884b03a 	or	r2,r3,r2
  805bbc:	e0fffa17 	ldw	r3,-24(fp)
  805bc0:	18c00044 	addi	r3,r3,1
  805bc4:	18c00003 	ldbu	r3,0(r3)
  805bc8:	18c03fcc 	andi	r3,r3,255
  805bcc:	1806923a 	slli	r3,r3,8
  805bd0:	10c6b03a 	or	r3,r2,r3
  805bd4:	e0bffa17 	ldw	r2,-24(fp)
  805bd8:	10800003 	ldbu	r2,0(r2)
  805bdc:	10803fcc 	andi	r2,r2,255
  805be0:	1886b03a 	or	r3,r3,r2
  805be4:	00840034 	movhi	r2,4096
  805be8:	10bfffc4 	addi	r2,r2,-1
  805bec:	1884703a 	and	r2,r3,r2
  805bf0:	1000031e 	bne	r2,zero,805c00 <f_getfree+0x268>
  805bf4:	e0bff617 	ldw	r2,-40(fp)
  805bf8:	10800044 	addi	r2,r2,1
  805bfc:	e0bff615 	stw	r2,-40(fp)
                  p += 4; i -= 4;
  805c00:	e0bffa17 	ldw	r2,-24(fp)
  805c04:	10800104 	addi	r2,r2,4
  805c08:	e0bffa15 	stw	r2,-24(fp)
  805c0c:	e0bff917 	ldw	r2,-28(fp)
  805c10:	10bfff04 	addi	r2,r2,-4
  805c14:	e0bff915 	stw	r2,-28(fp)
               }
            } while (--clst);
  805c18:	e0bff717 	ldw	r2,-36(fp)
  805c1c:	10bfffc4 	addi	r2,r2,-1
  805c20:	e0bff715 	stw	r2,-36(fp)
  805c24:	e0bff717 	ldw	r2,-36(fp)
  805c28:	103fac1e 	bne	r2,zero,805adc <__alt_data_end+0xff805adc>
  805c2c:	00000106 	br	805c34 <f_getfree+0x29c>
            sect = (*fatfs)->fatbase;
            i = 0; p = 0;
            do {
               if (!i) {
                  res = move_window(*fatfs, sect++);
                  if (res != FR_OK) break;
  805c30:	0001883a 	nop
                  if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
                  p += 4; i -= 4;
               }
            } while (--clst);
         }
         (*fatfs)->free_clust = n;
  805c34:	e0bfff17 	ldw	r2,-4(fp)
  805c38:	10800017 	ldw	r2,0(r2)
  805c3c:	e0fff617 	ldw	r3,-40(fp)
  805c40:	10c00415 	stw	r3,16(r2)
         if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
  805c44:	e0bffb03 	ldbu	r2,-20(fp)
  805c48:	108000d8 	cmpnei	r2,r2,3
  805c4c:	1000041e 	bne	r2,zero,805c60 <f_getfree+0x2c8>
  805c50:	e0bfff17 	ldw	r2,-4(fp)
  805c54:	10800017 	ldw	r2,0(r2)
  805c58:	00c00044 	movi	r3,1
  805c5c:	10c00145 	stb	r3,5(r2)
         *nclst = n;
  805c60:	e0bffe17 	ldw	r2,-8(fp)
  805c64:	e0fff617 	ldw	r3,-40(fp)
  805c68:	10c00015 	stw	r3,0(r2)
      }
   }
   LEAVE_FF(*fatfs, res);
  805c6c:	e0bff517 	ldw	r2,-44(fp)
}
  805c70:	e037883a 	mov	sp,fp
  805c74:	dfc00117 	ldw	ra,4(sp)
  805c78:	df000017 	ldw	fp,0(sp)
  805c7c:	dec00204 	addi	sp,sp,8
  805c80:	f800283a 	ret

00805c84 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
   FIL *fp     /* Pointer to the file object */
)
{
  805c84:	defffb04 	addi	sp,sp,-20
  805c88:	dfc00415 	stw	ra,16(sp)
  805c8c:	df000315 	stw	fp,12(sp)
  805c90:	df000304 	addi	fp,sp,12
  805c94:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   uint32_t ncl;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
  805c98:	e0bfff17 	ldw	r2,-4(fp)
  805c9c:	10c00017 	ldw	r3,0(r2)
  805ca0:	e0bfff17 	ldw	r2,-4(fp)
  805ca4:	1080010b 	ldhu	r2,4(r2)
  805ca8:	10bfffcc 	andi	r2,r2,65535
  805cac:	100b883a 	mov	r5,r2
  805cb0:	1809883a 	mov	r4,r3
  805cb4:	0803ed00 	call	803ed0 <validate>
  805cb8:	e0bffd15 	stw	r2,-12(fp)
   if (res == FR_OK) {
  805cbc:	e0bffd17 	ldw	r2,-12(fp)
  805cc0:	1000101e 	bne	r2,zero,805d04 <f_truncate+0x80>
      if (fp->flag & FA__ERROR) {         /* Check abort flag */
  805cc4:	e0bfff17 	ldw	r2,-4(fp)
  805cc8:	10800183 	ldbu	r2,6(r2)
  805ccc:	10803fcc 	andi	r2,r2,255
  805cd0:	1080201c 	xori	r2,r2,128
  805cd4:	10bfe004 	addi	r2,r2,-128
  805cd8:	1000030e 	bge	r2,zero,805ce8 <f_truncate+0x64>
         res = FR_INT_ERR;
  805cdc:	00800084 	movi	r2,2
  805ce0:	e0bffd15 	stw	r2,-12(fp)
  805ce4:	00000706 	br	805d04 <f_truncate+0x80>
      } else {
         if (!(fp->flag & FA_WRITE))      /* Check access mode */
  805ce8:	e0bfff17 	ldw	r2,-4(fp)
  805cec:	10800183 	ldbu	r2,6(r2)
  805cf0:	10803fcc 	andi	r2,r2,255
  805cf4:	1080008c 	andi	r2,r2,2
  805cf8:	1000021e 	bne	r2,zero,805d04 <f_truncate+0x80>
            res = FR_DENIED;
  805cfc:	008001c4 	movi	r2,7
  805d00:	e0bffd15 	stw	r2,-12(fp)
      }
   }
   if (res == FR_OK) {
  805d04:	e0bffd17 	ldw	r2,-12(fp)
  805d08:	1000521e 	bne	r2,zero,805e54 <f_truncate+0x1d0>
      if (fp->fsize > fp->fptr) {
  805d0c:	e0bfff17 	ldw	r2,-4(fp)
  805d10:	10800317 	ldw	r2,12(r2)
  805d14:	e0ffff17 	ldw	r3,-4(fp)
  805d18:	18c00217 	ldw	r3,8(r3)
  805d1c:	1880442e 	bgeu	r3,r2,805e30 <f_truncate+0x1ac>
         fp->fsize = fp->fptr;   /* Set file size to current R/W point */
  805d20:	e0bfff17 	ldw	r2,-4(fp)
  805d24:	10c00217 	ldw	r3,8(r2)
  805d28:	e0bfff17 	ldw	r2,-4(fp)
  805d2c:	10c00315 	stw	r3,12(r2)
         fp->flag |= FA__WRITTEN;
  805d30:	e0bfff17 	ldw	r2,-4(fp)
  805d34:	10800183 	ldbu	r2,6(r2)
  805d38:	10800814 	ori	r2,r2,32
  805d3c:	1007883a 	mov	r3,r2
  805d40:	e0bfff17 	ldw	r2,-4(fp)
  805d44:	10c00185 	stb	r3,6(r2)
         if (fp->fptr == 0) { /* When set file size to zero, remove entire cluster chain */
  805d48:	e0bfff17 	ldw	r2,-4(fp)
  805d4c:	10800217 	ldw	r2,8(r2)
  805d50:	10000b1e 	bne	r2,zero,805d80 <f_truncate+0xfc>
            res = remove_chain(fp->fs, fp->sclust);
  805d54:	e0bfff17 	ldw	r2,-4(fp)
  805d58:	10c00017 	ldw	r3,0(r2)
  805d5c:	e0bfff17 	ldw	r2,-4(fp)
  805d60:	10800417 	ldw	r2,16(r2)
  805d64:	100b883a 	mov	r5,r2
  805d68:	1809883a 	mov	r4,r3
  805d6c:	08021540 	call	802154 <remove_chain>
  805d70:	e0bffd15 	stw	r2,-12(fp)
            fp->sclust = 0;
  805d74:	e0bfff17 	ldw	r2,-4(fp)
  805d78:	10000415 	stw	zero,16(r2)
  805d7c:	00002c06 	br	805e30 <f_truncate+0x1ac>
         } else {          /* When truncate a part of the file, remove remaining clusters */
            ncl = get_fat(fp->fs, fp->clust);
  805d80:	e0bfff17 	ldw	r2,-4(fp)
  805d84:	10c00017 	ldw	r3,0(r2)
  805d88:	e0bfff17 	ldw	r2,-4(fp)
  805d8c:	10800517 	ldw	r2,20(r2)
  805d90:	100b883a 	mov	r5,r2
  805d94:	1809883a 	mov	r4,r3
  805d98:	0801b440 	call	801b44 <get_fat>
  805d9c:	e0bffe15 	stw	r2,-8(fp)
            res = FR_OK;
  805da0:	e03ffd15 	stw	zero,-12(fp)
            if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
  805da4:	e0bffe17 	ldw	r2,-8(fp)
  805da8:	10bfffd8 	cmpnei	r2,r2,-1
  805dac:	1000021e 	bne	r2,zero,805db8 <f_truncate+0x134>
  805db0:	00800044 	movi	r2,1
  805db4:	e0bffd15 	stw	r2,-12(fp)
            if (ncl == 1) res = FR_INT_ERR;
  805db8:	e0bffe17 	ldw	r2,-8(fp)
  805dbc:	10800058 	cmpnei	r2,r2,1
  805dc0:	1000021e 	bne	r2,zero,805dcc <f_truncate+0x148>
  805dc4:	00800084 	movi	r2,2
  805dc8:	e0bffd15 	stw	r2,-12(fp)
            if (res == FR_OK && ncl < fp->fs->n_fatent) {
  805dcc:	e0bffd17 	ldw	r2,-12(fp)
  805dd0:	1000171e 	bne	r2,zero,805e30 <f_truncate+0x1ac>
  805dd4:	e0bfff17 	ldw	r2,-4(fp)
  805dd8:	10800017 	ldw	r2,0(r2)
  805ddc:	10800617 	ldw	r2,24(r2)
  805de0:	e0fffe17 	ldw	r3,-8(fp)
  805de4:	1880122e 	bgeu	r3,r2,805e30 <f_truncate+0x1ac>
               res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
  805de8:	e0bfff17 	ldw	r2,-4(fp)
  805dec:	10c00017 	ldw	r3,0(r2)
  805df0:	e0bfff17 	ldw	r2,-4(fp)
  805df4:	10800517 	ldw	r2,20(r2)
  805df8:	01840034 	movhi	r6,4096
  805dfc:	31bfffc4 	addi	r6,r6,-1
  805e00:	100b883a 	mov	r5,r2
  805e04:	1809883a 	mov	r4,r3
  805e08:	0801dd40 	call	801dd4 <put_fat>
  805e0c:	e0bffd15 	stw	r2,-12(fp)
               if (res == FR_OK) res = remove_chain(fp->fs, ncl);
  805e10:	e0bffd17 	ldw	r2,-12(fp)
  805e14:	1000061e 	bne	r2,zero,805e30 <f_truncate+0x1ac>
  805e18:	e0bfff17 	ldw	r2,-4(fp)
  805e1c:	10800017 	ldw	r2,0(r2)
  805e20:	e17ffe17 	ldw	r5,-8(fp)
  805e24:	1009883a 	mov	r4,r2
  805e28:	08021540 	call	802154 <remove_chain>
  805e2c:	e0bffd15 	stw	r2,-12(fp)
            }
         }
      }
      if (res != FR_OK) fp->flag |= FA__ERROR;
  805e30:	e0bffd17 	ldw	r2,-12(fp)
  805e34:	10000726 	beq	r2,zero,805e54 <f_truncate+0x1d0>
  805e38:	e0bfff17 	ldw	r2,-4(fp)
  805e3c:	10c00183 	ldbu	r3,6(r2)
  805e40:	00bfe004 	movi	r2,-128
  805e44:	1884b03a 	or	r2,r3,r2
  805e48:	1007883a 	mov	r3,r2
  805e4c:	e0bfff17 	ldw	r2,-4(fp)
  805e50:	10c00185 	stb	r3,6(r2)
   }

   LEAVE_FF(fp->fs, res);
  805e54:	e0bffd17 	ldw	r2,-12(fp)
}
  805e58:	e037883a 	mov	sp,fp
  805e5c:	dfc00117 	ldw	ra,4(sp)
  805e60:	df000017 	ldw	fp,0(sp)
  805e64:	dec00204 	addi	sp,sp,8
  805e68:	f800283a 	ret

00805e6c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
   const TCHAR *path    /* Pointer to the file or directory path */
)
{
  805e6c:	deffe904 	addi	sp,sp,-92
  805e70:	dfc01615 	stw	ra,88(sp)
  805e74:	df001515 	stw	fp,84(sp)
  805e78:	df001504 	addi	fp,sp,84
  805e7c:	e13fff15 	stw	r4,-4(fp)
   uint8_t *dir;
   uint32_t dclst;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  805e80:	e0ffee04 	addi	r3,fp,-72
  805e84:	e0bfff04 	addi	r2,fp,-4
  805e88:	01800044 	movi	r6,1
  805e8c:	180b883a 	mov	r5,r3
  805e90:	1009883a 	mov	r4,r2
  805e94:	08035900 	call	803590 <chk_mounted>
  805e98:	e0bfeb15 	stw	r2,-84(fp)
   if (res == FR_OK) {
  805e9c:	e0bfeb17 	ldw	r2,-84(fp)
  805ea0:	1000721e 	bne	r2,zero,80606c <f_unlink+0x200>
      INIT_BUF(dj);
  805ea4:	e0bffc04 	addi	r2,fp,-16
  805ea8:	e0bff415 	stw	r2,-48(fp)
      res = follow_path(&dj, path);    /* Follow the file path */
  805eac:	e0ffff17 	ldw	r3,-4(fp)
  805eb0:	e0bfee04 	addi	r2,fp,-72
  805eb4:	180b883a 	mov	r5,r3
  805eb8:	1009883a 	mov	r4,r2
  805ebc:	08032080 	call	803208 <follow_path>
  805ec0:	e0bfeb15 	stw	r2,-84(fp)
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;        /* Cannot remove dot entry */
#if _FS_SHARE
      if (res == FR_OK) res = chk_lock(&dj, 2); /* Cannot remove open file */
#endif
      if (res == FR_OK) {              /* The object is accessible */
  805ec4:	e0bfeb17 	ldw	r2,-84(fp)
  805ec8:	1000681e 	bne	r2,zero,80606c <f_unlink+0x200>
         dir = dj.dir;
  805ecc:	e0bff317 	ldw	r2,-52(fp)
  805ed0:	e0bfec15 	stw	r2,-80(fp)
         if (!dir) {
  805ed4:	e0bfec17 	ldw	r2,-80(fp)
  805ed8:	1000031e 	bne	r2,zero,805ee8 <f_unlink+0x7c>
            res = FR_INVALID_NAME;     /* Cannot remove the start directory */
  805edc:	00800184 	movi	r2,6
  805ee0:	e0bfeb15 	stw	r2,-84(fp)
  805ee4:	00000806 	br	805f08 <f_unlink+0x9c>
         } else {
            if (dir[DIR_Attr] & AM_RDO)
  805ee8:	e0bfec17 	ldw	r2,-80(fp)
  805eec:	108002c4 	addi	r2,r2,11
  805ef0:	10800003 	ldbu	r2,0(r2)
  805ef4:	10803fcc 	andi	r2,r2,255
  805ef8:	1080004c 	andi	r2,r2,1
  805efc:	10000226 	beq	r2,zero,805f08 <f_unlink+0x9c>
               res = FR_DENIED;     /* Cannot remove R/O object */
  805f00:	008001c4 	movi	r2,7
  805f04:	e0bfeb15 	stw	r2,-84(fp)
         }
         dclst = LD_CLUST(dir);
  805f08:	e0bfec17 	ldw	r2,-80(fp)
  805f0c:	10800544 	addi	r2,r2,21
  805f10:	10800003 	ldbu	r2,0(r2)
  805f14:	10803fcc 	andi	r2,r2,255
  805f18:	1004923a 	slli	r2,r2,8
  805f1c:	1007883a 	mov	r3,r2
  805f20:	e0bfec17 	ldw	r2,-80(fp)
  805f24:	10800504 	addi	r2,r2,20
  805f28:	10800003 	ldbu	r2,0(r2)
  805f2c:	10803fcc 	andi	r2,r2,255
  805f30:	1884b03a 	or	r2,r3,r2
  805f34:	10bfffcc 	andi	r2,r2,65535
  805f38:	1006943a 	slli	r3,r2,16
  805f3c:	e0bfec17 	ldw	r2,-80(fp)
  805f40:	108006c4 	addi	r2,r2,27
  805f44:	10800003 	ldbu	r2,0(r2)
  805f48:	10803fcc 	andi	r2,r2,255
  805f4c:	1004923a 	slli	r2,r2,8
  805f50:	1009883a 	mov	r4,r2
  805f54:	e0bfec17 	ldw	r2,-80(fp)
  805f58:	10800684 	addi	r2,r2,26
  805f5c:	10800003 	ldbu	r2,0(r2)
  805f60:	10803fcc 	andi	r2,r2,255
  805f64:	2084b03a 	or	r2,r4,r2
  805f68:	10bfffcc 	andi	r2,r2,65535
  805f6c:	1884b03a 	or	r2,r3,r2
  805f70:	e0bfed15 	stw	r2,-76(fp)
         if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) { /* Is it a sub-dir? */
  805f74:	e0bfeb17 	ldw	r2,-84(fp)
  805f78:	1000271e 	bne	r2,zero,806018 <f_unlink+0x1ac>
  805f7c:	e0bfec17 	ldw	r2,-80(fp)
  805f80:	108002c4 	addi	r2,r2,11
  805f84:	10800003 	ldbu	r2,0(r2)
  805f88:	10803fcc 	andi	r2,r2,255
  805f8c:	1080040c 	andi	r2,r2,16
  805f90:	10002126 	beq	r2,zero,806018 <f_unlink+0x1ac>
            if (dclst < 2) {
  805f94:	e0bfed17 	ldw	r2,-76(fp)
  805f98:	108000a8 	cmpgeui	r2,r2,2
  805f9c:	1000031e 	bne	r2,zero,805fac <f_unlink+0x140>
               res = FR_INT_ERR;
  805fa0:	00800084 	movi	r2,2
  805fa4:	e0bfeb15 	stw	r2,-84(fp)
  805fa8:	00001b06 	br	806018 <f_unlink+0x1ac>
            } else {
               mem_cpy(&sdj, &dj, sizeof(DIR)); /* Check if the sub-dir is empty or not */
  805fac:	e0ffee04 	addi	r3,fp,-72
  805fb0:	e0bff504 	addi	r2,fp,-44
  805fb4:	01800704 	movi	r6,28
  805fb8:	180b883a 	mov	r5,r3
  805fbc:	1009883a 	mov	r4,r2
  805fc0:	08015880 	call	801588 <mem_cpy>
               sdj.sclust = dclst;
  805fc4:	e0bfed17 	ldw	r2,-76(fp)
  805fc8:	e0bff715 	stw	r2,-36(fp)
               res = dir_sdi(&sdj, 2);    /* Exclude dot entries */
  805fcc:	e0bff504 	addi	r2,fp,-44
  805fd0:	01400084 	movi	r5,2
  805fd4:	1009883a 	mov	r4,r2
  805fd8:	080244c0 	call	80244c <dir_sdi>
  805fdc:	e0bfeb15 	stw	r2,-84(fp)
               if (res == FR_OK) {
  805fe0:	e0bfeb17 	ldw	r2,-84(fp)
  805fe4:	10000c1e 	bne	r2,zero,806018 <f_unlink+0x1ac>
                  res = dir_read(&sdj);
  805fe8:	e0bff504 	addi	r2,fp,-44
  805fec:	1009883a 	mov	r4,r2
  805ff0:	0802a1c0 	call	802a1c <dir_read>
  805ff4:	e0bfeb15 	stw	r2,-84(fp)
                  if (res == FR_OK        /* Not empty dir */
  805ff8:	e0bfeb17 	ldw	r2,-84(fp)
  805ffc:	1000021e 	bne	r2,zero,806008 <f_unlink+0x19c>
#if _FS_RPATH
                  || dclst == sdj.fs->cdir   /* Current dir */
#endif
                  ) res = FR_DENIED;
  806000:	008001c4 	movi	r2,7
  806004:	e0bfeb15 	stw	r2,-84(fp)
                  if (res == FR_NO_FILE) res = FR_OK; /* Empty */
  806008:	e0bfeb17 	ldw	r2,-84(fp)
  80600c:	10800118 	cmpnei	r2,r2,4
  806010:	1000011e 	bne	r2,zero,806018 <f_unlink+0x1ac>
  806014:	e03feb15 	stw	zero,-84(fp)
               }
            }
         }
         if (res == FR_OK) {
  806018:	e0bfeb17 	ldw	r2,-84(fp)
  80601c:	1000131e 	bne	r2,zero,80606c <f_unlink+0x200>
            res = dir_remove(&dj);     /* Remove the directory entry */
  806020:	e0bfee04 	addi	r2,fp,-72
  806024:	1009883a 	mov	r4,r2
  806028:	0802c480 	call	802c48 <dir_remove>
  80602c:	e0bfeb15 	stw	r2,-84(fp)
            if (res == FR_OK) {
  806030:	e0bfeb17 	ldw	r2,-84(fp)
  806034:	10000d1e 	bne	r2,zero,80606c <f_unlink+0x200>
               if (dclst)           /* Remove the cluster chain if exist */
  806038:	e0bfed17 	ldw	r2,-76(fp)
  80603c:	10000526 	beq	r2,zero,806054 <f_unlink+0x1e8>
                  res = remove_chain(dj.fs, dclst);
  806040:	e0bfee17 	ldw	r2,-72(fp)
  806044:	e17fed17 	ldw	r5,-76(fp)
  806048:	1009883a 	mov	r4,r2
  80604c:	08021540 	call	802154 <remove_chain>
  806050:	e0bfeb15 	stw	r2,-84(fp)
               if (res == FR_OK) res = sync(dj.fs);
  806054:	e0bfeb17 	ldw	r2,-84(fp)
  806058:	1000041e 	bne	r2,zero,80606c <f_unlink+0x200>
  80605c:	e0bfee17 	ldw	r2,-72(fp)
  806060:	1009883a 	mov	r4,r2
  806064:	08018b80 	call	8018b8 <sync>
  806068:	e0bfeb15 	stw	r2,-84(fp)
            }
         }
      }
      FREE_BUF();
   }
   LEAVE_FF(dj.fs, res);
  80606c:	e0bfeb17 	ldw	r2,-84(fp)
}
  806070:	e037883a 	mov	sp,fp
  806074:	dfc00117 	ldw	ra,4(sp)
  806078:	df000017 	ldw	fp,0(sp)
  80607c:	dec00204 	addi	sp,sp,8
  806080:	f800283a 	ret

00806084 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
   const TCHAR *path    /* Pointer to the directory path */
)
{
  806084:	deffec04 	addi	sp,sp,-80
  806088:	dfc01315 	stw	ra,76(sp)
  80608c:	df001215 	stw	fp,72(sp)
  806090:	df001204 	addi	fp,sp,72
  806094:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   DIR dj;
   uint8_t *dir, n;
   uint32_t dsc, dcl, pcl, tim = get_fattime();
  806098:	080155c0 	call	80155c <get_fattime>
  80609c:	e0bff215 	stw	r2,-56(fp)
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  8060a0:	e0fff504 	addi	r3,fp,-44
  8060a4:	e0bfff04 	addi	r2,fp,-4
  8060a8:	01800044 	movi	r6,1
  8060ac:	180b883a 	mov	r5,r3
  8060b0:	1009883a 	mov	r4,r2
  8060b4:	08035900 	call	803590 <chk_mounted>
  8060b8:	e0bfee15 	stw	r2,-72(fp)
   if (res == FR_OK) {
  8060bc:	e0bfee17 	ldw	r2,-72(fp)
  8060c0:	1000f81e 	bne	r2,zero,8064a4 <f_mkdir+0x420>
      INIT_BUF(dj);
  8060c4:	e0bffc04 	addi	r2,fp,-16
  8060c8:	e0bffb15 	stw	r2,-20(fp)
      res = follow_path(&dj, path);       /* Follow the file path */
  8060cc:	e0ffff17 	ldw	r3,-4(fp)
  8060d0:	e0bff504 	addi	r2,fp,-44
  8060d4:	180b883a 	mov	r5,r3
  8060d8:	1009883a 	mov	r4,r2
  8060dc:	08032080 	call	803208 <follow_path>
  8060e0:	e0bfee15 	stw	r2,-72(fp)
      if (res == FR_OK) res = FR_EXIST;      /* Any object with same name is already existing */
  8060e4:	e0bfee17 	ldw	r2,-72(fp)
  8060e8:	1000021e 	bne	r2,zero,8060f4 <f_mkdir+0x70>
  8060ec:	00800204 	movi	r2,8
  8060f0:	e0bfee15 	stw	r2,-72(fp)
      if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_NO_FILE) {            /* Can create a new directory */
  8060f4:	e0bfee17 	ldw	r2,-72(fp)
  8060f8:	10800118 	cmpnei	r2,r2,4
  8060fc:	1000e91e 	bne	r2,zero,8064a4 <f_mkdir+0x420>
         dcl = create_chain(dj.fs, 0);    /* Allocate a cluster for the new directory table */
  806100:	e0bff517 	ldw	r2,-44(fp)
  806104:	000b883a 	mov	r5,zero
  806108:	1009883a 	mov	r4,r2
  80610c:	08022700 	call	802270 <create_chain>
  806110:	e0bff315 	stw	r2,-52(fp)
         res = FR_OK;
  806114:	e03fee15 	stw	zero,-72(fp)
         if (dcl == 0) res = FR_DENIED;      /* No space to allocate a new cluster */
  806118:	e0bff317 	ldw	r2,-52(fp)
  80611c:	1000021e 	bne	r2,zero,806128 <f_mkdir+0xa4>
  806120:	008001c4 	movi	r2,7
  806124:	e0bfee15 	stw	r2,-72(fp)
         if (dcl == 1) res = FR_INT_ERR;
  806128:	e0bff317 	ldw	r2,-52(fp)
  80612c:	10800058 	cmpnei	r2,r2,1
  806130:	1000021e 	bne	r2,zero,80613c <f_mkdir+0xb8>
  806134:	00800084 	movi	r2,2
  806138:	e0bfee15 	stw	r2,-72(fp)
         if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
  80613c:	e0bff317 	ldw	r2,-52(fp)
  806140:	10bfffd8 	cmpnei	r2,r2,-1
  806144:	1000021e 	bne	r2,zero,806150 <f_mkdir+0xcc>
  806148:	00800044 	movi	r2,1
  80614c:	e0bfee15 	stw	r2,-72(fp)
         if (res == FR_OK)             /* Flush FAT */
  806150:	e0bfee17 	ldw	r2,-72(fp)
  806154:	1000051e 	bne	r2,zero,80616c <f_mkdir+0xe8>
            res = move_window(dj.fs, 0);
  806158:	e0bff517 	ldw	r2,-44(fp)
  80615c:	000b883a 	mov	r5,zero
  806160:	1009883a 	mov	r4,r2
  806164:	080175c0 	call	80175c <move_window>
  806168:	e0bfee15 	stw	r2,-72(fp)
         if (res == FR_OK) {              /* Initialize the new directory table */
  80616c:	e0bfee17 	ldw	r2,-72(fp)
  806170:	1000891e 	bne	r2,zero,806398 <f_mkdir+0x314>
            dsc = clust2sect(dj.fs, dcl);
  806174:	e0bff517 	ldw	r2,-44(fp)
  806178:	e17ff317 	ldw	r5,-52(fp)
  80617c:	1009883a 	mov	r4,r2
  806180:	0801ad80 	call	801ad8 <clust2sect>
  806184:	e0bff015 	stw	r2,-64(fp)
            dir = dj.fs->win;
  806188:	e0bff517 	ldw	r2,-44(fp)
  80618c:	10800c04 	addi	r2,r2,48
  806190:	e0bff415 	stw	r2,-48(fp)
            mem_set(dir, 0, SS(dj.fs));
  806194:	01808004 	movi	r6,512
  806198:	000b883a 	mov	r5,zero
  80619c:	e13ff417 	ldw	r4,-48(fp)
  8061a0:	08015f80 	call	8015f8 <mem_set>
            mem_set(dir+DIR_Name, ' ', 8+3); /* Create "." entry */
  8061a4:	018002c4 	movi	r6,11
  8061a8:	01400804 	movi	r5,32
  8061ac:	e13ff417 	ldw	r4,-48(fp)
  8061b0:	08015f80 	call	8015f8 <mem_set>
            dir[DIR_Name] = '.';
  8061b4:	e0bff417 	ldw	r2,-48(fp)
  8061b8:	00c00b84 	movi	r3,46
  8061bc:	10c00005 	stb	r3,0(r2)
            dir[DIR_Attr] = AM_DIR;
  8061c0:	e0bff417 	ldw	r2,-48(fp)
  8061c4:	108002c4 	addi	r2,r2,11
  8061c8:	00c00404 	movi	r3,16
  8061cc:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_WrtTime, tim);
  8061d0:	e0bff417 	ldw	r2,-48(fp)
  8061d4:	10800584 	addi	r2,r2,22
  8061d8:	e0fff217 	ldw	r3,-56(fp)
  8061dc:	10c00005 	stb	r3,0(r2)
  8061e0:	e0bff417 	ldw	r2,-48(fp)
  8061e4:	108005c4 	addi	r2,r2,23
  8061e8:	e0fff217 	ldw	r3,-56(fp)
  8061ec:	18ffffcc 	andi	r3,r3,65535
  8061f0:	1807d23a 	srai	r3,r3,8
  8061f4:	10c00005 	stb	r3,0(r2)
  8061f8:	e0bff417 	ldw	r2,-48(fp)
  8061fc:	10800604 	addi	r2,r2,24
  806200:	e0fff217 	ldw	r3,-56(fp)
  806204:	1806d43a 	srli	r3,r3,16
  806208:	10c00005 	stb	r3,0(r2)
  80620c:	e0bff417 	ldw	r2,-48(fp)
  806210:	10800644 	addi	r2,r2,25
  806214:	e0fff217 	ldw	r3,-56(fp)
  806218:	1806d63a 	srli	r3,r3,24
  80621c:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, dcl);
  806220:	e0bff417 	ldw	r2,-48(fp)
  806224:	10800684 	addi	r2,r2,26
  806228:	e0fff317 	ldw	r3,-52(fp)
  80622c:	10c00005 	stb	r3,0(r2)
  806230:	e0bff417 	ldw	r2,-48(fp)
  806234:	108006c4 	addi	r2,r2,27
  806238:	e0fff317 	ldw	r3,-52(fp)
  80623c:	18ffffcc 	andi	r3,r3,65535
  806240:	1807d23a 	srai	r3,r3,8
  806244:	10c00005 	stb	r3,0(r2)
  806248:	e0bff417 	ldw	r2,-48(fp)
  80624c:	10800504 	addi	r2,r2,20
  806250:	e0fff317 	ldw	r3,-52(fp)
  806254:	1806d43a 	srli	r3,r3,16
  806258:	10c00005 	stb	r3,0(r2)
  80625c:	e0bff417 	ldw	r2,-48(fp)
  806260:	10800544 	addi	r2,r2,21
  806264:	e0fff317 	ldw	r3,-52(fp)
  806268:	1806d43a 	srli	r3,r3,16
  80626c:	1807d23a 	srai	r3,r3,8
  806270:	10c00005 	stb	r3,0(r2)
            mem_cpy(dir+SZ_DIR, dir, SZ_DIR);   /* Create ".." entry */
  806274:	e0bff417 	ldw	r2,-48(fp)
  806278:	10800804 	addi	r2,r2,32
  80627c:	01800804 	movi	r6,32
  806280:	e17ff417 	ldw	r5,-48(fp)
  806284:	1009883a 	mov	r4,r2
  806288:	08015880 	call	801588 <mem_cpy>
            dir[33] = '.'; pcl = dj.sclust;
  80628c:	e0bff417 	ldw	r2,-48(fp)
  806290:	10800844 	addi	r2,r2,33
  806294:	00c00b84 	movi	r3,46
  806298:	10c00005 	stb	r3,0(r2)
  80629c:	e0bff717 	ldw	r2,-36(fp)
  8062a0:	e0bff115 	stw	r2,-60(fp)
            if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
  8062a4:	e0bff517 	ldw	r2,-44(fp)
  8062a8:	10800003 	ldbu	r2,0(r2)
  8062ac:	10803fcc 	andi	r2,r2,255
  8062b0:	108000d8 	cmpnei	r2,r2,3
  8062b4:	1000051e 	bne	r2,zero,8062cc <f_mkdir+0x248>
  8062b8:	e0bff517 	ldw	r2,-44(fp)
  8062bc:	10c00917 	ldw	r3,36(r2)
  8062c0:	e0bff117 	ldw	r2,-60(fp)
  8062c4:	1880011e 	bne	r3,r2,8062cc <f_mkdir+0x248>
               pcl = 0;
  8062c8:	e03ff115 	stw	zero,-60(fp)
            ST_CLUST(dir+SZ_DIR, pcl);
  8062cc:	e0bff417 	ldw	r2,-48(fp)
  8062d0:	10800e84 	addi	r2,r2,58
  8062d4:	e0fff117 	ldw	r3,-60(fp)
  8062d8:	10c00005 	stb	r3,0(r2)
  8062dc:	e0bff417 	ldw	r2,-48(fp)
  8062e0:	10800ec4 	addi	r2,r2,59
  8062e4:	e0fff117 	ldw	r3,-60(fp)
  8062e8:	18ffffcc 	andi	r3,r3,65535
  8062ec:	1807d23a 	srai	r3,r3,8
  8062f0:	10c00005 	stb	r3,0(r2)
  8062f4:	e0bff417 	ldw	r2,-48(fp)
  8062f8:	10800d04 	addi	r2,r2,52
  8062fc:	e0fff117 	ldw	r3,-60(fp)
  806300:	1806d43a 	srli	r3,r3,16
  806304:	10c00005 	stb	r3,0(r2)
  806308:	e0bff417 	ldw	r2,-48(fp)
  80630c:	10800d44 	addi	r2,r2,53
  806310:	e0fff117 	ldw	r3,-60(fp)
  806314:	1806d43a 	srli	r3,r3,16
  806318:	1807d23a 	srai	r3,r3,8
  80631c:	10c00005 	stb	r3,0(r2)
            for (n = dj.fs->csize; n; n--) { /* Write dot entries and clear following sectors */
  806320:	e0bff517 	ldw	r2,-44(fp)
  806324:	10800083 	ldbu	r2,2(r2)
  806328:	e0bfef05 	stb	r2,-68(fp)
  80632c:	00001606 	br	806388 <f_mkdir+0x304>
               dj.fs->winsect = dsc++;
  806330:	e0fff517 	ldw	r3,-44(fp)
  806334:	e0bff017 	ldw	r2,-64(fp)
  806338:	11000044 	addi	r4,r2,1
  80633c:	e13ff015 	stw	r4,-64(fp)
  806340:	18800b15 	stw	r2,44(r3)
               dj.fs->wflag = 1;
  806344:	e0bff517 	ldw	r2,-44(fp)
  806348:	00c00044 	movi	r3,1
  80634c:	10c00105 	stb	r3,4(r2)
               res = move_window(dj.fs, 0);
  806350:	e0bff517 	ldw	r2,-44(fp)
  806354:	000b883a 	mov	r5,zero
  806358:	1009883a 	mov	r4,r2
  80635c:	080175c0 	call	80175c <move_window>
  806360:	e0bfee15 	stw	r2,-72(fp)
               if (res != FR_OK) break;
  806364:	e0bfee17 	ldw	r2,-72(fp)
  806368:	10000a1e 	bne	r2,zero,806394 <f_mkdir+0x310>
               mem_set(dir, 0, SS(dj.fs));
  80636c:	01808004 	movi	r6,512
  806370:	000b883a 	mov	r5,zero
  806374:	e13ff417 	ldw	r4,-48(fp)
  806378:	08015f80 	call	8015f8 <mem_set>
            mem_cpy(dir+SZ_DIR, dir, SZ_DIR);   /* Create ".." entry */
            dir[33] = '.'; pcl = dj.sclust;
            if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
               pcl = 0;
            ST_CLUST(dir+SZ_DIR, pcl);
            for (n = dj.fs->csize; n; n--) { /* Write dot entries and clear following sectors */
  80637c:	e0bfef03 	ldbu	r2,-68(fp)
  806380:	10bfffc4 	addi	r2,r2,-1
  806384:	e0bfef05 	stb	r2,-68(fp)
  806388:	e0bfef03 	ldbu	r2,-68(fp)
  80638c:	103fe81e 	bne	r2,zero,806330 <__alt_data_end+0xff806330>
  806390:	00000106 	br	806398 <f_mkdir+0x314>
               dj.fs->winsect = dsc++;
               dj.fs->wflag = 1;
               res = move_window(dj.fs, 0);
               if (res != FR_OK) break;
  806394:	0001883a 	nop
               mem_set(dir, 0, SS(dj.fs));
            }
         }
         if (res == FR_OK) res = dir_register(&dj);   /* Register the object to the directoy */
  806398:	e0bfee17 	ldw	r2,-72(fp)
  80639c:	1000041e 	bne	r2,zero,8063b0 <f_mkdir+0x32c>
  8063a0:	e0bff504 	addi	r2,fp,-44
  8063a4:	1009883a 	mov	r4,r2
  8063a8:	0802b240 	call	802b24 <dir_register>
  8063ac:	e0bfee15 	stw	r2,-72(fp)
         if (res != FR_OK) {
  8063b0:	e0bfee17 	ldw	r2,-72(fp)
  8063b4:	10000526 	beq	r2,zero,8063cc <f_mkdir+0x348>
            remove_chain(dj.fs, dcl);        /* Could not register, remove cluster chain */
  8063b8:	e0bff517 	ldw	r2,-44(fp)
  8063bc:	e17ff317 	ldw	r5,-52(fp)
  8063c0:	1009883a 	mov	r4,r2
  8063c4:	08021540 	call	802154 <remove_chain>
  8063c8:	00003606 	br	8064a4 <f_mkdir+0x420>
         } else {
            dir = dj.dir;
  8063cc:	e0bffa17 	ldw	r2,-24(fp)
  8063d0:	e0bff415 	stw	r2,-48(fp)
            dir[DIR_Attr] = AM_DIR;          /* Attribute */
  8063d4:	e0bff417 	ldw	r2,-48(fp)
  8063d8:	108002c4 	addi	r2,r2,11
  8063dc:	00c00404 	movi	r3,16
  8063e0:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_WrtTime, tim);     /* Created time */
  8063e4:	e0bff417 	ldw	r2,-48(fp)
  8063e8:	10800584 	addi	r2,r2,22
  8063ec:	e0fff217 	ldw	r3,-56(fp)
  8063f0:	10c00005 	stb	r3,0(r2)
  8063f4:	e0bff417 	ldw	r2,-48(fp)
  8063f8:	108005c4 	addi	r2,r2,23
  8063fc:	e0fff217 	ldw	r3,-56(fp)
  806400:	18ffffcc 	andi	r3,r3,65535
  806404:	1807d23a 	srai	r3,r3,8
  806408:	10c00005 	stb	r3,0(r2)
  80640c:	e0bff417 	ldw	r2,-48(fp)
  806410:	10800604 	addi	r2,r2,24
  806414:	e0fff217 	ldw	r3,-56(fp)
  806418:	1806d43a 	srli	r3,r3,16
  80641c:	10c00005 	stb	r3,0(r2)
  806420:	e0bff417 	ldw	r2,-48(fp)
  806424:	10800644 	addi	r2,r2,25
  806428:	e0fff217 	ldw	r3,-56(fp)
  80642c:	1806d63a 	srli	r3,r3,24
  806430:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, dcl);              /* Table start cluster */
  806434:	e0bff417 	ldw	r2,-48(fp)
  806438:	10800684 	addi	r2,r2,26
  80643c:	e0fff317 	ldw	r3,-52(fp)
  806440:	10c00005 	stb	r3,0(r2)
  806444:	e0bff417 	ldw	r2,-48(fp)
  806448:	108006c4 	addi	r2,r2,27
  80644c:	e0fff317 	ldw	r3,-52(fp)
  806450:	18ffffcc 	andi	r3,r3,65535
  806454:	1807d23a 	srai	r3,r3,8
  806458:	10c00005 	stb	r3,0(r2)
  80645c:	e0bff417 	ldw	r2,-48(fp)
  806460:	10800504 	addi	r2,r2,20
  806464:	e0fff317 	ldw	r3,-52(fp)
  806468:	1806d43a 	srli	r3,r3,16
  80646c:	10c00005 	stb	r3,0(r2)
  806470:	e0bff417 	ldw	r2,-48(fp)
  806474:	10800544 	addi	r2,r2,21
  806478:	e0fff317 	ldw	r3,-52(fp)
  80647c:	1806d43a 	srli	r3,r3,16
  806480:	1807d23a 	srai	r3,r3,8
  806484:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
  806488:	e0bff517 	ldw	r2,-44(fp)
  80648c:	00c00044 	movi	r3,1
  806490:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
  806494:	e0bff517 	ldw	r2,-44(fp)
  806498:	1009883a 	mov	r4,r2
  80649c:	08018b80 	call	8018b8 <sync>
  8064a0:	e0bfee15 	stw	r2,-72(fp)
         }
      }
      FREE_BUF();
   }

   LEAVE_FF(dj.fs, res);
  8064a4:	e0bfee17 	ldw	r2,-72(fp)
}
  8064a8:	e037883a 	mov	sp,fp
  8064ac:	dfc00117 	ldw	ra,4(sp)
  8064b0:	df000017 	ldw	fp,0(sp)
  8064b4:	dec00204 	addi	sp,sp,8
  8064b8:	f800283a 	ret

008064bc <f_chmod>:
FRESULT f_chmod (
   const TCHAR *path,   /* Pointer to the file path */
   uint8_t value,       /* Attribute bits */
   uint8_t mask         /* Attribute mask to change */
)
{
  8064bc:	deffef04 	addi	sp,sp,-68
  8064c0:	dfc01015 	stw	ra,64(sp)
  8064c4:	df000f15 	stw	fp,60(sp)
  8064c8:	df000f04 	addi	fp,sp,60
  8064cc:	e13ffd15 	stw	r4,-12(fp)
  8064d0:	2807883a 	mov	r3,r5
  8064d4:	3005883a 	mov	r2,r6
  8064d8:	e0fffe05 	stb	r3,-8(fp)
  8064dc:	e0bfff05 	stb	r2,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  8064e0:	e0fff304 	addi	r3,fp,-52
  8064e4:	e0bffd04 	addi	r2,fp,-12
  8064e8:	01800044 	movi	r6,1
  8064ec:	180b883a 	mov	r5,r3
  8064f0:	1009883a 	mov	r4,r2
  8064f4:	08035900 	call	803590 <chk_mounted>
  8064f8:	e0bff115 	stw	r2,-60(fp)
   if (res == FR_OK) {
  8064fc:	e0bff117 	ldw	r2,-60(fp)
  806500:	10002b1e 	bne	r2,zero,8065b0 <f_chmod+0xf4>
      INIT_BUF(dj);
  806504:	e0bffa04 	addi	r2,fp,-24
  806508:	e0bff915 	stw	r2,-28(fp)
      res = follow_path(&dj, path);    /* Follow the file path */
  80650c:	e0fffd17 	ldw	r3,-12(fp)
  806510:	e0bff304 	addi	r2,fp,-52
  806514:	180b883a 	mov	r5,r3
  806518:	1009883a 	mov	r4,r2
  80651c:	08032080 	call	803208 <follow_path>
  806520:	e0bff115 	stw	r2,-60(fp)
      FREE_BUF();
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_OK) {
  806524:	e0bff117 	ldw	r2,-60(fp)
  806528:	1000211e 	bne	r2,zero,8065b0 <f_chmod+0xf4>
         dir = dj.dir;
  80652c:	e0bff817 	ldw	r2,-32(fp)
  806530:	e0bff215 	stw	r2,-56(fp)
         if (!dir) {                /* Is it a root directory? */
  806534:	e0bff217 	ldw	r2,-56(fp)
  806538:	1000031e 	bne	r2,zero,806548 <f_chmod+0x8c>
            res = FR_INVALID_NAME;
  80653c:	00800184 	movi	r2,6
  806540:	e0bff115 	stw	r2,-60(fp)
  806544:	00001a06 	br	8065b0 <f_chmod+0xf4>
         } else {                /* File or sub directory */
            mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;   /* Valid attribute mask */
  806548:	e0bfff03 	ldbu	r2,-4(fp)
  80654c:	108009cc 	andi	r2,r2,39
  806550:	e0bfff05 	stb	r2,-4(fp)
            dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (uint8_t)~mask);   /* Apply attribute change */
  806554:	e0bff217 	ldw	r2,-56(fp)
  806558:	108002c4 	addi	r2,r2,11
  80655c:	e0fff217 	ldw	r3,-56(fp)
  806560:	18c002c4 	addi	r3,r3,11
  806564:	19000003 	ldbu	r4,0(r3)
  806568:	e0fffe03 	ldbu	r3,-8(fp)
  80656c:	20c6f03a 	xor	r3,r4,r3
  806570:	1809883a 	mov	r4,r3
  806574:	e0ffff03 	ldbu	r3,-4(fp)
  806578:	20c6703a 	and	r3,r4,r3
  80657c:	1809883a 	mov	r4,r3
  806580:	e0fff217 	ldw	r3,-56(fp)
  806584:	18c002c4 	addi	r3,r3,11
  806588:	18c00003 	ldbu	r3,0(r3)
  80658c:	20c6f03a 	xor	r3,r4,r3
  806590:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
  806594:	e0bff317 	ldw	r2,-52(fp)
  806598:	00c00044 	movi	r3,1
  80659c:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
  8065a0:	e0bff317 	ldw	r2,-52(fp)
  8065a4:	1009883a 	mov	r4,r2
  8065a8:	08018b80 	call	8018b8 <sync>
  8065ac:	e0bff115 	stw	r2,-60(fp)
         }
      }
   }

   LEAVE_FF(dj.fs, res);
  8065b0:	e0bff117 	ldw	r2,-60(fp)
}
  8065b4:	e037883a 	mov	sp,fp
  8065b8:	dfc00117 	ldw	ra,4(sp)
  8065bc:	df000017 	ldw	fp,0(sp)
  8065c0:	dec00204 	addi	sp,sp,8
  8065c4:	f800283a 	ret

008065c8 <f_utime>:

FRESULT f_utime (
   const TCHAR *path,   /* Pointer to the file/directory name */
   const FILINFO *fno   /* Pointer to the time stamp to be set */
)
{
  8065c8:	defff004 	addi	sp,sp,-64
  8065cc:	dfc00f15 	stw	ra,60(sp)
  8065d0:	df000e15 	stw	fp,56(sp)
  8065d4:	df000e04 	addi	fp,sp,56
  8065d8:	e13ffe15 	stw	r4,-8(fp)
  8065dc:	e17fff15 	stw	r5,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
  8065e0:	e0fff404 	addi	r3,fp,-48
  8065e4:	e0bffe04 	addi	r2,fp,-8
  8065e8:	01800044 	movi	r6,1
  8065ec:	180b883a 	mov	r5,r3
  8065f0:	1009883a 	mov	r4,r2
  8065f4:	08035900 	call	803590 <chk_mounted>
  8065f8:	e0bff215 	stw	r2,-56(fp)
   if (res == FR_OK) {
  8065fc:	e0bff217 	ldw	r2,-56(fp)
  806600:	1000301e 	bne	r2,zero,8066c4 <f_utime+0xfc>
      INIT_BUF(dj);
  806604:	e0bffb04 	addi	r2,fp,-20
  806608:	e0bffa15 	stw	r2,-24(fp)
      res = follow_path(&dj, path); /* Follow the file path */
  80660c:	e0fffe17 	ldw	r3,-8(fp)
  806610:	e0bff404 	addi	r2,fp,-48
  806614:	180b883a 	mov	r5,r3
  806618:	1009883a 	mov	r4,r2
  80661c:	08032080 	call	803208 <follow_path>
  806620:	e0bff215 	stw	r2,-56(fp)
      FREE_BUF();
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_OK) {
  806624:	e0bff217 	ldw	r2,-56(fp)
  806628:	1000261e 	bne	r2,zero,8066c4 <f_utime+0xfc>
         dir = dj.dir;
  80662c:	e0bff917 	ldw	r2,-28(fp)
  806630:	e0bff315 	stw	r2,-52(fp)
         if (!dir) {             /* Root directory */
  806634:	e0bff317 	ldw	r2,-52(fp)
  806638:	1000031e 	bne	r2,zero,806648 <f_utime+0x80>
            res = FR_INVALID_NAME;
  80663c:	00800184 	movi	r2,6
  806640:	e0bff215 	stw	r2,-56(fp)
  806644:	00001f06 	br	8066c4 <f_utime+0xfc>
         } else {             /* File or sub-directory */
            ST_WORD(dir+DIR_WrtTime, fno->ftime);
  806648:	e0bff317 	ldw	r2,-52(fp)
  80664c:	10800584 	addi	r2,r2,22
  806650:	e0ffff17 	ldw	r3,-4(fp)
  806654:	18c0018b 	ldhu	r3,6(r3)
  806658:	10c00005 	stb	r3,0(r2)
  80665c:	e0bff317 	ldw	r2,-52(fp)
  806660:	108005c4 	addi	r2,r2,23
  806664:	e0ffff17 	ldw	r3,-4(fp)
  806668:	18c0018b 	ldhu	r3,6(r3)
  80666c:	18ffffcc 	andi	r3,r3,65535
  806670:	1806d23a 	srli	r3,r3,8
  806674:	10c00005 	stb	r3,0(r2)
            ST_WORD(dir+DIR_WrtDate, fno->fdate);
  806678:	e0bff317 	ldw	r2,-52(fp)
  80667c:	10800604 	addi	r2,r2,24
  806680:	e0ffff17 	ldw	r3,-4(fp)
  806684:	18c0010b 	ldhu	r3,4(r3)
  806688:	10c00005 	stb	r3,0(r2)
  80668c:	e0bff317 	ldw	r2,-52(fp)
  806690:	10800644 	addi	r2,r2,25
  806694:	e0ffff17 	ldw	r3,-4(fp)
  806698:	18c0010b 	ldhu	r3,4(r3)
  80669c:	18ffffcc 	andi	r3,r3,65535
  8066a0:	1806d23a 	srli	r3,r3,8
  8066a4:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
  8066a8:	e0bff417 	ldw	r2,-48(fp)
  8066ac:	00c00044 	movi	r3,1
  8066b0:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
  8066b4:	e0bff417 	ldw	r2,-48(fp)
  8066b8:	1009883a 	mov	r4,r2
  8066bc:	08018b80 	call	8018b8 <sync>
  8066c0:	e0bff215 	stw	r2,-56(fp)
         }
      }
   }

   LEAVE_FF(dj.fs, res);
  8066c4:	e0bff217 	ldw	r2,-56(fp)
}
  8066c8:	e037883a 	mov	sp,fp
  8066cc:	dfc00117 	ldw	ra,4(sp)
  8066d0:	df000017 	ldw	fp,0(sp)
  8066d4:	dec00204 	addi	sp,sp,8
  8066d8:	f800283a 	ret

008066dc <f_rename>:

FRESULT f_rename (
   const TCHAR *path_old,  /* Pointer to the old name */
   const TCHAR *path_new   /* Pointer to the new name */
)
{
  8066dc:	deffe204 	addi	sp,sp,-120
  8066e0:	dfc01d15 	stw	ra,116(sp)
  8066e4:	df001c15 	stw	fp,112(sp)
  8066e8:	df001c04 	addi	fp,sp,112
  8066ec:	e13ffe15 	stw	r4,-8(fp)
  8066f0:	e17fff15 	stw	r5,-4(fp)
   uint8_t buf[21], *dir;
   uint32_t dw;
   DEF_NAMEBUF;


   res = chk_mounted(&path_old, &djo.fs, 1);
  8066f4:	e0ffe704 	addi	r3,fp,-100
  8066f8:	e0bffe04 	addi	r2,fp,-8
  8066fc:	01800044 	movi	r6,1
  806700:	180b883a 	mov	r5,r3
  806704:	1009883a 	mov	r4,r2
  806708:	08035900 	call	803590 <chk_mounted>
  80670c:	e0bfe415 	stw	r2,-112(fp)
   if (res == FR_OK) {
  806710:	e0bfe417 	ldw	r2,-112(fp)
  806714:	1000b01e 	bne	r2,zero,8069d8 <f_rename+0x2fc>
      djn.fs = djo.fs;
  806718:	e0bfe717 	ldw	r2,-100(fp)
  80671c:	e0bfee15 	stw	r2,-72(fp)
      INIT_BUF(djo);
  806720:	e0bffa44 	addi	r2,fp,-23
  806724:	e0bfed15 	stw	r2,-76(fp)
      res = follow_path(&djo, path_old);     /* Check old object */
  806728:	e0fffe17 	ldw	r3,-8(fp)
  80672c:	e0bfe704 	addi	r2,fp,-100
  806730:	180b883a 	mov	r5,r3
  806734:	1009883a 	mov	r4,r2
  806738:	08032080 	call	803208 <follow_path>
  80673c:	e0bfe415 	stw	r2,-112(fp)
      if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
#if _FS_SHARE
      if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
      if (res == FR_OK) {                 /* Old object is found */
  806740:	e0bfe417 	ldw	r2,-112(fp)
  806744:	1000a41e 	bne	r2,zero,8069d8 <f_rename+0x2fc>
         if (!djo.dir) {                  /* Is root dir? */
  806748:	e0bfec17 	ldw	r2,-80(fp)
  80674c:	1000031e 	bne	r2,zero,80675c <f_rename+0x80>
            res = FR_NO_FILE;
  806750:	00800104 	movi	r2,4
  806754:	e0bfe415 	stw	r2,-112(fp)
  806758:	00009f06 	br	8069d8 <f_rename+0x2fc>
         } else {
            mem_cpy(buf, djo.dir+DIR_Attr, 21);    /* Save the object information except for name */
  80675c:	e0bfec17 	ldw	r2,-80(fp)
  806760:	10c002c4 	addi	r3,r2,11
  806764:	e0bff504 	addi	r2,fp,-44
  806768:	01800544 	movi	r6,21
  80676c:	180b883a 	mov	r5,r3
  806770:	1009883a 	mov	r4,r2
  806774:	08015880 	call	801588 <mem_cpy>
            mem_cpy(&djn, &djo, sizeof(DIR));      /* Check new object */
  806778:	e0ffe704 	addi	r3,fp,-100
  80677c:	e0bfee04 	addi	r2,fp,-72
  806780:	01800704 	movi	r6,28
  806784:	180b883a 	mov	r5,r3
  806788:	1009883a 	mov	r4,r2
  80678c:	08015880 	call	801588 <mem_cpy>
            res = follow_path(&djn, path_new);
  806790:	e0bfee04 	addi	r2,fp,-72
  806794:	e17fff17 	ldw	r5,-4(fp)
  806798:	1009883a 	mov	r4,r2
  80679c:	08032080 	call	803208 <follow_path>
  8067a0:	e0bfe415 	stw	r2,-112(fp)
            if (res == FR_OK) res = FR_EXIST;      /* The new object name is already existing */
  8067a4:	e0bfe417 	ldw	r2,-112(fp)
  8067a8:	1000021e 	bne	r2,zero,8067b4 <f_rename+0xd8>
  8067ac:	00800204 	movi	r2,8
  8067b0:	e0bfe415 	stw	r2,-112(fp)
            if (res == FR_NO_FILE) {            /* Is it a valid path and no name collision? */
  8067b4:	e0bfe417 	ldw	r2,-112(fp)
  8067b8:	10800118 	cmpnei	r2,r2,4
  8067bc:	1000861e 	bne	r2,zero,8069d8 <f_rename+0x2fc>
/* Start critical section that any interruption or error can cause cross-link */
               res = dir_register(&djn);        /* Register the new entry */
  8067c0:	e0bfee04 	addi	r2,fp,-72
  8067c4:	1009883a 	mov	r4,r2
  8067c8:	0802b240 	call	802b24 <dir_register>
  8067cc:	e0bfe415 	stw	r2,-112(fp)
               if (res == FR_OK) {
  8067d0:	e0bfe417 	ldw	r2,-112(fp)
  8067d4:	1000801e 	bne	r2,zero,8069d8 <f_rename+0x2fc>
                  dir = djn.dir;             /* Copy object information except for name */
  8067d8:	e0bff317 	ldw	r2,-52(fp)
  8067dc:	e0bfe515 	stw	r2,-108(fp)
                  mem_cpy(dir+13, buf+2, 19);
  8067e0:	e0bfe517 	ldw	r2,-108(fp)
  8067e4:	10c00344 	addi	r3,r2,13
  8067e8:	e0bff504 	addi	r2,fp,-44
  8067ec:	10800084 	addi	r2,r2,2
  8067f0:	018004c4 	movi	r6,19
  8067f4:	100b883a 	mov	r5,r2
  8067f8:	1809883a 	mov	r4,r3
  8067fc:	08015880 	call	801588 <mem_cpy>
                  dir[DIR_Attr] = buf[0] | AM_ARC;
  806800:	e0bfe517 	ldw	r2,-108(fp)
  806804:	108002c4 	addi	r2,r2,11
  806808:	e0fff503 	ldbu	r3,-44(fp)
  80680c:	18c00814 	ori	r3,r3,32
  806810:	10c00005 	stb	r3,0(r2)
                  djo.fs->wflag = 1;
  806814:	e0bfe717 	ldw	r2,-100(fp)
  806818:	00c00044 	movi	r3,1
  80681c:	10c00105 	stb	r3,4(r2)
                  if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {    /* Update .. entry in the directory if needed */
  806820:	e0ffe917 	ldw	r3,-92(fp)
  806824:	e0bff017 	ldw	r2,-64(fp)
  806828:	18805f26 	beq	r3,r2,8069a8 <f_rename+0x2cc>
  80682c:	e0bfe517 	ldw	r2,-108(fp)
  806830:	108002c4 	addi	r2,r2,11
  806834:	10800003 	ldbu	r2,0(r2)
  806838:	10803fcc 	andi	r2,r2,255
  80683c:	1080040c 	andi	r2,r2,16
  806840:	10005926 	beq	r2,zero,8069a8 <f_rename+0x2cc>
                     dw = clust2sect(djn.fs, LD_CLUST(dir));
  806844:	e13fee17 	ldw	r4,-72(fp)
  806848:	e0bfe517 	ldw	r2,-108(fp)
  80684c:	10800544 	addi	r2,r2,21
  806850:	10800003 	ldbu	r2,0(r2)
  806854:	10803fcc 	andi	r2,r2,255
  806858:	1004923a 	slli	r2,r2,8
  80685c:	1007883a 	mov	r3,r2
  806860:	e0bfe517 	ldw	r2,-108(fp)
  806864:	10800504 	addi	r2,r2,20
  806868:	10800003 	ldbu	r2,0(r2)
  80686c:	10803fcc 	andi	r2,r2,255
  806870:	1884b03a 	or	r2,r3,r2
  806874:	10bfffcc 	andi	r2,r2,65535
  806878:	1006943a 	slli	r3,r2,16
  80687c:	e0bfe517 	ldw	r2,-108(fp)
  806880:	108006c4 	addi	r2,r2,27
  806884:	10800003 	ldbu	r2,0(r2)
  806888:	10803fcc 	andi	r2,r2,255
  80688c:	1004923a 	slli	r2,r2,8
  806890:	100b883a 	mov	r5,r2
  806894:	e0bfe517 	ldw	r2,-108(fp)
  806898:	10800684 	addi	r2,r2,26
  80689c:	10800003 	ldbu	r2,0(r2)
  8068a0:	10803fcc 	andi	r2,r2,255
  8068a4:	2884b03a 	or	r2,r5,r2
  8068a8:	10bfffcc 	andi	r2,r2,65535
  8068ac:	1884b03a 	or	r2,r3,r2
  8068b0:	100b883a 	mov	r5,r2
  8068b4:	0801ad80 	call	801ad8 <clust2sect>
  8068b8:	e0bfe615 	stw	r2,-104(fp)
                     if (!dw) {
  8068bc:	e0bfe617 	ldw	r2,-104(fp)
  8068c0:	1000031e 	bne	r2,zero,8068d0 <f_rename+0x1f4>
                        res = FR_INT_ERR;
  8068c4:	00800084 	movi	r2,2
  8068c8:	e0bfe415 	stw	r2,-112(fp)
  8068cc:	00003606 	br	8069a8 <f_rename+0x2cc>
                     } else {
                        res = move_window(djn.fs, dw);
  8068d0:	e0bfee17 	ldw	r2,-72(fp)
  8068d4:	e17fe617 	ldw	r5,-104(fp)
  8068d8:	1009883a 	mov	r4,r2
  8068dc:	080175c0 	call	80175c <move_window>
  8068e0:	e0bfe415 	stw	r2,-112(fp)
                        dir = djn.fs->win+SZ_DIR;  /* .. entry */
  8068e4:	e0bfee17 	ldw	r2,-72(fp)
  8068e8:	10800c04 	addi	r2,r2,48
  8068ec:	10800804 	addi	r2,r2,32
  8068f0:	e0bfe515 	stw	r2,-108(fp)
                        if (res == FR_OK && dir[1] == '.') {
  8068f4:	e0bfe417 	ldw	r2,-112(fp)
  8068f8:	10002b1e 	bne	r2,zero,8069a8 <f_rename+0x2cc>
  8068fc:	e0bfe517 	ldw	r2,-108(fp)
  806900:	10800044 	addi	r2,r2,1
  806904:	10800003 	ldbu	r2,0(r2)
  806908:	10803fcc 	andi	r2,r2,255
  80690c:	10800b98 	cmpnei	r2,r2,46
  806910:	1000251e 	bne	r2,zero,8069a8 <f_rename+0x2cc>
                           dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
  806914:	e0bfee17 	ldw	r2,-72(fp)
  806918:	10800003 	ldbu	r2,0(r2)
  80691c:	10803fcc 	andi	r2,r2,255
  806920:	108000d8 	cmpnei	r2,r2,3
  806924:	1000041e 	bne	r2,zero,806938 <f_rename+0x25c>
  806928:	e0fff017 	ldw	r3,-64(fp)
  80692c:	e0bfee17 	ldw	r2,-72(fp)
  806930:	10800917 	ldw	r2,36(r2)
  806934:	18800226 	beq	r3,r2,806940 <f_rename+0x264>
  806938:	e0bff017 	ldw	r2,-64(fp)
  80693c:	00000106 	br	806944 <f_rename+0x268>
  806940:	0005883a 	mov	r2,zero
  806944:	e0bfe615 	stw	r2,-104(fp)
                           ST_CLUST(dir, dw);
  806948:	e0bfe517 	ldw	r2,-108(fp)
  80694c:	10800684 	addi	r2,r2,26
  806950:	e0ffe617 	ldw	r3,-104(fp)
  806954:	10c00005 	stb	r3,0(r2)
  806958:	e0bfe517 	ldw	r2,-108(fp)
  80695c:	108006c4 	addi	r2,r2,27
  806960:	e0ffe617 	ldw	r3,-104(fp)
  806964:	18ffffcc 	andi	r3,r3,65535
  806968:	1807d23a 	srai	r3,r3,8
  80696c:	10c00005 	stb	r3,0(r2)
  806970:	e0bfe517 	ldw	r2,-108(fp)
  806974:	10800504 	addi	r2,r2,20
  806978:	e0ffe617 	ldw	r3,-104(fp)
  80697c:	1806d43a 	srli	r3,r3,16
  806980:	10c00005 	stb	r3,0(r2)
  806984:	e0bfe517 	ldw	r2,-108(fp)
  806988:	10800544 	addi	r2,r2,21
  80698c:	e0ffe617 	ldw	r3,-104(fp)
  806990:	1806d43a 	srli	r3,r3,16
  806994:	1807d23a 	srai	r3,r3,8
  806998:	10c00005 	stb	r3,0(r2)
                           djn.fs->wflag = 1;
  80699c:	e0bfee17 	ldw	r2,-72(fp)
  8069a0:	00c00044 	movi	r3,1
  8069a4:	10c00105 	stb	r3,4(r2)
                        }
                     }
                  }
                  if (res == FR_OK) {
  8069a8:	e0bfe417 	ldw	r2,-112(fp)
  8069ac:	10000a1e 	bne	r2,zero,8069d8 <f_rename+0x2fc>
                     res = dir_remove(&djo);    /* Remove old entry */
  8069b0:	e0bfe704 	addi	r2,fp,-100
  8069b4:	1009883a 	mov	r4,r2
  8069b8:	0802c480 	call	802c48 <dir_remove>
  8069bc:	e0bfe415 	stw	r2,-112(fp)
                     if (res == FR_OK)
  8069c0:	e0bfe417 	ldw	r2,-112(fp)
  8069c4:	1000041e 	bne	r2,zero,8069d8 <f_rename+0x2fc>
                        res = sync(djo.fs);
  8069c8:	e0bfe717 	ldw	r2,-100(fp)
  8069cc:	1009883a 	mov	r4,r2
  8069d0:	08018b80 	call	8018b8 <sync>
  8069d4:	e0bfe415 	stw	r2,-112(fp)
            }
         }
      }
      FREE_BUF();
   }
   LEAVE_FF(djo.fs, res);
  8069d8:	e0bfe417 	ldw	r2,-112(fp)
}
  8069dc:	e037883a 	mov	sp,fp
  8069e0:	dfc00117 	ldw	ra,4(sp)
  8069e4:	df000017 	ldw	fp,0(sp)
  8069e8:	dec00204 	addi	sp,sp,8
  8069ec:	f800283a 	ret

008069f0 <f_mkfs>:
FRESULT f_mkfs (
   uint8_t drv,      /* Logical drive number */
   uint8_t sfd,      /* Partitioning rule 0:FDISK, 1:SFD */
   uint32_t au        /* Allocation unit size [bytes] */
)
{
  8069f0:	deffea04 	addi	sp,sp,-88
  8069f4:	dfc01515 	stw	ra,84(sp)
  8069f8:	df001415 	stw	fp,80(sp)
  8069fc:	df001404 	addi	fp,sp,80
  806a00:	2007883a 	mov	r3,r4
  806a04:	2805883a 	mov	r2,r5
  806a08:	e1bfff15 	stw	r6,-4(fp)
  806a0c:	e0fffd05 	stb	r3,-12(fp)
  806a10:	e0bffe05 	stb	r2,-8(fp)
   FATFS *fs;
   DSTATUS stat;


   /* Check mounted drive and clear work area */
   if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
  806a14:	e0bffd03 	ldbu	r2,-12(fp)
  806a18:	10000226 	beq	r2,zero,806a24 <f_mkfs+0x34>
  806a1c:	008002c4 	movi	r2,11
  806a20:	00039e06 	br	80789c <f_mkfs+0xeac>
   if (sfd > 1) return FR_INVALID_PARAMETER;
  806a24:	e0bffe03 	ldbu	r2,-8(fp)
  806a28:	108000b0 	cmpltui	r2,r2,2
  806a2c:	1000021e 	bne	r2,zero,806a38 <f_mkfs+0x48>
  806a30:	008004c4 	movi	r2,19
  806a34:	00039906 	br	80789c <f_mkfs+0xeac>
   if (au & (au - 1)) return FR_INVALID_PARAMETER;
  806a38:	e0bfff17 	ldw	r2,-4(fp)
  806a3c:	10ffffc4 	addi	r3,r2,-1
  806a40:	e0bfff17 	ldw	r2,-4(fp)
  806a44:	1884703a 	and	r2,r3,r2
  806a48:	10000226 	beq	r2,zero,806a54 <f_mkfs+0x64>
  806a4c:	008004c4 	movi	r2,19
  806a50:	00039206 	br	80789c <f_mkfs+0xeac>
   fs = FatFs[drv];
  806a54:	e0bffd03 	ldbu	r2,-12(fp)
  806a58:	1085883a 	add	r2,r2,r2
  806a5c:	1087883a 	add	r3,r2,r2
  806a60:	d0a74604 	addi	r2,gp,-25320
  806a64:	1885883a 	add	r2,r3,r2
  806a68:	10800017 	ldw	r2,0(r2)
  806a6c:	e0bff315 	stw	r2,-52(fp)
   if (!fs) return FR_NOT_ENABLED;
  806a70:	e0bff317 	ldw	r2,-52(fp)
  806a74:	1000021e 	bne	r2,zero,806a80 <f_mkfs+0x90>
  806a78:	00800304 	movi	r2,12
  806a7c:	00038706 	br	80789c <f_mkfs+0xeac>
   fs->fs_type = 0;
  806a80:	e0bff317 	ldw	r2,-52(fp)
  806a84:	10000005 	stb	zero,0(r2)
   pdrv = LD2PD(drv);   /* Physical drive */
  806a88:	e0bffd03 	ldbu	r2,-12(fp)
  806a8c:	e0bff405 	stb	r2,-48(fp)
   part = LD2PT(drv);   /* Partition (0:auto detect, 1-4:get from partition table)*/
  806a90:	e03ff445 	stb	zero,-47(fp)

   /* Get disk statics */
   stat = disk_initialize(pdrv);
  806a94:	e0bff403 	ldbu	r2,-48(fp)
  806a98:	1009883a 	mov	r4,r2
  806a9c:	0800b840 	call	800b84 <ffs_DiskIOInitialize>
  806aa0:	e0bff485 	stb	r2,-46(fp)
   if (stat & STA_NOINIT) return FR_NOT_READY;
  806aa4:	e0bff483 	ldbu	r2,-46(fp)
  806aa8:	1080004c 	andi	r2,r2,1
  806aac:	10000226 	beq	r2,zero,806ab8 <f_mkfs+0xc8>
  806ab0:	008000c4 	movi	r2,3
  806ab4:	00037906 	br	80789c <f_mkfs+0xeac>
   if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
  806ab8:	e0bff483 	ldbu	r2,-46(fp)
  806abc:	1080010c 	andi	r2,r2,4
  806ac0:	10000226 	beq	r2,zero,806acc <f_mkfs+0xdc>
  806ac4:	00800284 	movi	r2,10
  806ac8:	00037406 	br	80789c <f_mkfs+0xeac>
      if (!tbl[4]) return FR_MKFS_ABORTED;   /* No partition? */
      b_vol = LD_DWORD(tbl+8);   /* Volume start sector */
      n_vol = LD_DWORD(tbl+12);  /* Volume size */
   } else {
      /* Create a partition in this function */
      if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
  806acc:	e0bff403 	ldbu	r2,-48(fp)
  806ad0:	e0fffc04 	addi	r3,fp,-16
  806ad4:	180d883a 	mov	r6,r3
  806ad8:	01400044 	movi	r5,1
  806adc:	1009883a 	mov	r4,r2
  806ae0:	08010980 	call	801098 <ffs_DiskIOIoctl>
  806ae4:	1000031e 	bne	r2,zero,806af4 <f_mkfs+0x104>
  806ae8:	e0bffc17 	ldw	r2,-16(fp)
  806aec:	10802028 	cmpgeui	r2,r2,128
  806af0:	1000021e 	bne	r2,zero,806afc <f_mkfs+0x10c>
         return FR_DISK_ERR;
  806af4:	00800044 	movi	r2,1
  806af8:	00036806 	br	80789c <f_mkfs+0xeac>
      b_vol = (sfd) ? 0 : 63;    /* Volume start sector */
  806afc:	e0bffe03 	ldbu	r2,-8(fp)
  806b00:	10000226 	beq	r2,zero,806b0c <f_mkfs+0x11c>
  806b04:	0005883a 	mov	r2,zero
  806b08:	00000106 	br	806b10 <f_mkfs+0x120>
  806b0c:	00800fc4 	movi	r2,63
  806b10:	e0bff515 	stw	r2,-44(fp)
      n_vol -= b_vol;            /* Volume size */
  806b14:	e0fffc17 	ldw	r3,-16(fp)
  806b18:	e0bff517 	ldw	r2,-44(fp)
  806b1c:	1885c83a 	sub	r2,r3,r2
  806b20:	e0bffc15 	stw	r2,-16(fp)
   }

   if (!au) {           /* AU auto selection */
  806b24:	e0bfff17 	ldw	r2,-4(fp)
  806b28:	10001b1e 	bne	r2,zero,806b98 <f_mkfs+0x1a8>
      vs = n_vol / (2000 / (SS(fs) / 512));
  806b2c:	e0bffc17 	ldw	r2,-16(fp)
  806b30:	0141f404 	movi	r5,2000
  806b34:	1009883a 	mov	r4,r2
  806b38:	080a4a00 	call	80a4a0 <__udivsi3>
  806b3c:	e0bff615 	stw	r2,-40(fp)
      for (i = 0; vs < vst[i]; i++) ;
  806b40:	e03fee15 	stw	zero,-72(fp)
  806b44:	00000306 	br	806b54 <f_mkfs+0x164>
  806b48:	e0bfee17 	ldw	r2,-72(fp)
  806b4c:	10800044 	addi	r2,r2,1
  806b50:	e0bfee15 	stw	r2,-72(fp)
  806b54:	00802074 	movhi	r2,129
  806b58:	1088cc04 	addi	r2,r2,9008
  806b5c:	e0ffee17 	ldw	r3,-72(fp)
  806b60:	18c7883a 	add	r3,r3,r3
  806b64:	10c5883a 	add	r2,r2,r3
  806b68:	1080000b 	ldhu	r2,0(r2)
  806b6c:	10bfffcc 	andi	r2,r2,65535
  806b70:	e0fff617 	ldw	r3,-40(fp)
  806b74:	18bff436 	bltu	r3,r2,806b48 <__alt_data_end+0xff806b48>
      au = cst[i];
  806b78:	00802074 	movhi	r2,129
  806b7c:	1088d184 	addi	r2,r2,9030
  806b80:	e0ffee17 	ldw	r3,-72(fp)
  806b84:	18c7883a 	add	r3,r3,r3
  806b88:	10c5883a 	add	r2,r2,r3
  806b8c:	1080000b 	ldhu	r2,0(r2)
  806b90:	10bfffcc 	andi	r2,r2,65535
  806b94:	e0bfff15 	stw	r2,-4(fp)
   }
   au /= SS(fs);     /* Number of sectors per cluster */
  806b98:	e0bfff17 	ldw	r2,-4(fp)
  806b9c:	1004d27a 	srli	r2,r2,9
  806ba0:	e0bfff15 	stw	r2,-4(fp)
   if (au == 0) au = 1;
  806ba4:	e0bfff17 	ldw	r2,-4(fp)
  806ba8:	1000021e 	bne	r2,zero,806bb4 <f_mkfs+0x1c4>
  806bac:	00800044 	movi	r2,1
  806bb0:	e0bfff15 	stw	r2,-4(fp)
   if (au > 128) au = 128;
  806bb4:	e0bfff17 	ldw	r2,-4(fp)
  806bb8:	10802070 	cmpltui	r2,r2,129
  806bbc:	1000021e 	bne	r2,zero,806bc8 <f_mkfs+0x1d8>
  806bc0:	00802004 	movi	r2,128
  806bc4:	e0bfff15 	stw	r2,-4(fp)

   /* Pre-compute number of clusters and FAT syb-type */
   n_clst = n_vol / au;
  806bc8:	e0bffc17 	ldw	r2,-16(fp)
  806bcc:	e17fff17 	ldw	r5,-4(fp)
  806bd0:	1009883a 	mov	r4,r2
  806bd4:	080a4a00 	call	80a4a0 <__udivsi3>
  806bd8:	e0bff715 	stw	r2,-36(fp)
   fmt = FS_FAT12;
  806bdc:	00800044 	movi	r2,1
  806be0:	e0bfec05 	stb	r2,-80(fp)
   if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
  806be4:	e0bff717 	ldw	r2,-36(fp)
  806be8:	1083fdb0 	cmpltui	r2,r2,4086
  806bec:	1000021e 	bne	r2,zero,806bf8 <f_mkfs+0x208>
  806bf0:	00800084 	movi	r2,2
  806bf4:	e0bfec05 	stb	r2,-80(fp)
   if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
  806bf8:	e0bff717 	ldw	r2,-36(fp)
  806bfc:	10bffdb0 	cmpltui	r2,r2,65526
  806c00:	1000021e 	bne	r2,zero,806c0c <f_mkfs+0x21c>
  806c04:	008000c4 	movi	r2,3
  806c08:	e0bfec05 	stb	r2,-80(fp)

   /* Determine offset and size of FAT structure */
   if (fmt == FS_FAT32) {
  806c0c:	e0bfec03 	ldbu	r2,-80(fp)
  806c10:	108000d8 	cmpnei	r2,r2,3
  806c14:	10000b1e 	bne	r2,zero,806c44 <f_mkfs+0x254>
      n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
  806c18:	e0bff717 	ldw	r2,-36(fp)
  806c1c:	10802084 	addi	r2,r2,130
  806c20:	1085883a 	add	r2,r2,r2
  806c24:	1085883a 	add	r2,r2,r2
  806c28:	10bfffc4 	addi	r2,r2,-1
  806c2c:	1004d27a 	srli	r2,r2,9
  806c30:	e0bff115 	stw	r2,-60(fp)
      n_rsv = 32;
  806c34:	00800804 	movi	r2,32
  806c38:	e0bff015 	stw	r2,-64(fp)
      n_dir = 0;
  806c3c:	e03ff215 	stw	zero,-56(fp)
  806c40:	00001706 	br	806ca0 <f_mkfs+0x2b0>
   } else {
      n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
  806c44:	e0bfec03 	ldbu	r2,-80(fp)
  806c48:	10800058 	cmpnei	r2,r2,1
  806c4c:	1000081e 	bne	r2,zero,806c70 <f_mkfs+0x280>
  806c50:	e0fff717 	ldw	r3,-36(fp)
  806c54:	1805883a 	mov	r2,r3
  806c58:	1085883a 	add	r2,r2,r2
  806c5c:	10c5883a 	add	r2,r2,r3
  806c60:	10800044 	addi	r2,r2,1
  806c64:	1004d07a 	srli	r2,r2,1
  806c68:	108000c4 	addi	r2,r2,3
  806c6c:	00000306 	br	806c7c <f_mkfs+0x28c>
  806c70:	e0bff717 	ldw	r2,-36(fp)
  806c74:	10800084 	addi	r2,r2,2
  806c78:	1085883a 	add	r2,r2,r2
  806c7c:	e0bff115 	stw	r2,-60(fp)
      n_fat = (n_fat + SS(fs) - 1) / SS(fs);
  806c80:	e0bff117 	ldw	r2,-60(fp)
  806c84:	10807fc4 	addi	r2,r2,511
  806c88:	1004d27a 	srli	r2,r2,9
  806c8c:	e0bff115 	stw	r2,-60(fp)
      n_rsv = 1;
  806c90:	00800044 	movi	r2,1
  806c94:	e0bff015 	stw	r2,-64(fp)
      n_dir = (uint32_t)N_ROOTDIR * SZ_DIR / SS(fs);
  806c98:	00800804 	movi	r2,32
  806c9c:	e0bff215 	stw	r2,-56(fp)
   }
   b_fat = b_vol + n_rsv;           /* FAT area start sector */
  806ca0:	e0fff517 	ldw	r3,-44(fp)
  806ca4:	e0bff017 	ldw	r2,-64(fp)
  806ca8:	1885883a 	add	r2,r3,r2
  806cac:	e0bfef15 	stw	r2,-68(fp)
   b_dir = b_fat + n_fat * N_FATS;     /* Directory area start sector */
  806cb0:	e0ffef17 	ldw	r3,-68(fp)
  806cb4:	e0bff117 	ldw	r2,-60(fp)
  806cb8:	1885883a 	add	r2,r3,r2
  806cbc:	e0bff815 	stw	r2,-32(fp)
   b_data = b_dir + n_dir;          /* Data area start sector */
  806cc0:	e0fff817 	ldw	r3,-32(fp)
  806cc4:	e0bff217 	ldw	r2,-56(fp)
  806cc8:	1885883a 	add	r2,r3,r2
  806ccc:	e0bff915 	stw	r2,-28(fp)
   if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED; /* Too small volume */
  806cd0:	e0fff917 	ldw	r3,-28(fp)
  806cd4:	e0bfff17 	ldw	r2,-4(fp)
  806cd8:	1887883a 	add	r3,r3,r2
  806cdc:	e0bff517 	ldw	r2,-44(fp)
  806ce0:	1885c83a 	sub	r2,r3,r2
  806ce4:	e0fffc17 	ldw	r3,-16(fp)
  806ce8:	1880022e 	bgeu	r3,r2,806cf4 <f_mkfs+0x304>
  806cec:	00800384 	movi	r2,14
  806cf0:	0002ea06 	br	80789c <f_mkfs+0xeac>

   /* Align data start sector to erase block boundary (for flash memory media) */
   if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
  806cf4:	e0bff403 	ldbu	r2,-48(fp)
  806cf8:	e0fffb04 	addi	r3,fp,-20
  806cfc:	180d883a 	mov	r6,r3
  806d00:	014000c4 	movi	r5,3
  806d04:	1009883a 	mov	r4,r2
  806d08:	08010980 	call	801098 <ffs_DiskIOIoctl>
  806d0c:	1000051e 	bne	r2,zero,806d24 <f_mkfs+0x334>
  806d10:	e0bffb17 	ldw	r2,-20(fp)
  806d14:	10000326 	beq	r2,zero,806d24 <f_mkfs+0x334>
  806d18:	e0bffb17 	ldw	r2,-20(fp)
  806d1c:	10a00070 	cmpltui	r2,r2,32769
  806d20:	1000021e 	bne	r2,zero,806d2c <f_mkfs+0x33c>
  806d24:	00800044 	movi	r2,1
  806d28:	e0bffb15 	stw	r2,-20(fp)
   n = (b_data + n - 1) & ~(n - 1); /* Next nearest erase block from current data start */
  806d2c:	e0fffb17 	ldw	r3,-20(fp)
  806d30:	e0bff917 	ldw	r2,-28(fp)
  806d34:	1885883a 	add	r2,r3,r2
  806d38:	10ffffc4 	addi	r3,r2,-1
  806d3c:	e0bffb17 	ldw	r2,-20(fp)
  806d40:	0085c83a 	sub	r2,zero,r2
  806d44:	1884703a 	and	r2,r3,r2
  806d48:	e0bffb15 	stw	r2,-20(fp)
   n = (n - b_data) / N_FATS;
  806d4c:	e0fffb17 	ldw	r3,-20(fp)
  806d50:	e0bff917 	ldw	r2,-28(fp)
  806d54:	1885c83a 	sub	r2,r3,r2
  806d58:	e0bffb15 	stw	r2,-20(fp)
   if (fmt == FS_FAT32) {     /* FAT32: Move FAT offset */
  806d5c:	e0bfec03 	ldbu	r2,-80(fp)
  806d60:	108000d8 	cmpnei	r2,r2,3
  806d64:	1000091e 	bne	r2,zero,806d8c <f_mkfs+0x39c>
      n_rsv += n;
  806d68:	e0bffb17 	ldw	r2,-20(fp)
  806d6c:	e0fff017 	ldw	r3,-64(fp)
  806d70:	1885883a 	add	r2,r3,r2
  806d74:	e0bff015 	stw	r2,-64(fp)
      b_fat += n;
  806d78:	e0bffb17 	ldw	r2,-20(fp)
  806d7c:	e0ffef17 	ldw	r3,-68(fp)
  806d80:	1885883a 	add	r2,r3,r2
  806d84:	e0bfef15 	stw	r2,-68(fp)
  806d88:	00000406 	br	806d9c <f_mkfs+0x3ac>
   } else {             /* FAT12/16: Expand FAT size */
      n_fat += n;
  806d8c:	e0bffb17 	ldw	r2,-20(fp)
  806d90:	e0fff117 	ldw	r3,-60(fp)
  806d94:	1885883a 	add	r2,r3,r2
  806d98:	e0bff115 	stw	r2,-60(fp)
   }

   /* Determine number of clusters and final check of validity of the FAT sub-type */
   n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
  806d9c:	e0fffc17 	ldw	r3,-16(fp)
  806da0:	e0bff017 	ldw	r2,-64(fp)
  806da4:	1887c83a 	sub	r3,r3,r2
  806da8:	e0bff117 	ldw	r2,-60(fp)
  806dac:	1887c83a 	sub	r3,r3,r2
  806db0:	e0bff217 	ldw	r2,-56(fp)
  806db4:	1885c83a 	sub	r2,r3,r2
  806db8:	e17fff17 	ldw	r5,-4(fp)
  806dbc:	1009883a 	mov	r4,r2
  806dc0:	080a4a00 	call	80a4a0 <__udivsi3>
  806dc4:	e0bff715 	stw	r2,-36(fp)
   if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
  806dc8:	e0bfec03 	ldbu	r2,-80(fp)
  806dcc:	10800098 	cmpnei	r2,r2,2
  806dd0:	1000031e 	bne	r2,zero,806de0 <f_mkfs+0x3f0>
  806dd4:	e0bff717 	ldw	r2,-36(fp)
  806dd8:	1083fdb0 	cmpltui	r2,r2,4086
  806ddc:	1000061e 	bne	r2,zero,806df8 <f_mkfs+0x408>
      || (fmt == FS_FAT32 && n_clst < MIN_FAT32))
  806de0:	e0bfec03 	ldbu	r2,-80(fp)
  806de4:	108000d8 	cmpnei	r2,r2,3
  806de8:	1000051e 	bne	r2,zero,806e00 <f_mkfs+0x410>
  806dec:	e0bff717 	ldw	r2,-36(fp)
  806df0:	10bffda8 	cmpgeui	r2,r2,65526
  806df4:	1000021e 	bne	r2,zero,806e00 <f_mkfs+0x410>
      return FR_MKFS_ABORTED;
  806df8:	00800384 	movi	r2,14
  806dfc:	0002a706 	br	80789c <f_mkfs+0xeac>

   switch (fmt) { /* Determine system ID for partition table */
  806e00:	e0bfec03 	ldbu	r2,-80(fp)
  806e04:	10c00060 	cmpeqi	r3,r2,1
  806e08:	1800031e 	bne	r3,zero,806e18 <f_mkfs+0x428>
  806e0c:	108000a0 	cmpeqi	r2,r2,2
  806e10:	1000041e 	bne	r2,zero,806e24 <f_mkfs+0x434>
  806e14:	00000b06 	br	806e44 <f_mkfs+0x454>
   case FS_FAT12: sys = 0x01; break;
  806e18:	00800044 	movi	r2,1
  806e1c:	e0bfec85 	stb	r2,-78(fp)
  806e20:	00000a06 	br	806e4c <f_mkfs+0x45c>
   case FS_FAT16: sys = (n_vol < 0x10000) ? 0x04 : 0x06; break;
  806e24:	e0bffc17 	ldw	r2,-16(fp)
  806e28:	00ffffd4 	movui	r3,65535
  806e2c:	18800236 	bltu	r3,r2,806e38 <f_mkfs+0x448>
  806e30:	00800104 	movi	r2,4
  806e34:	00000106 	br	806e3c <f_mkfs+0x44c>
  806e38:	00800184 	movi	r2,6
  806e3c:	e0bfec85 	stb	r2,-78(fp)
  806e40:	00000206 	br	806e4c <f_mkfs+0x45c>
   default:       sys = 0x0C;
  806e44:	00800304 	movi	r2,12
  806e48:	e0bfec85 	stb	r2,-78(fp)
      tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
      tbl[4] = sys;
      if (disk_write(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
      md = 0xF8;
   } else {
      if (sfd) {  /* No patition table (SFD) */
  806e4c:	e0bffe03 	ldbu	r2,-8(fp)
  806e50:	10000326 	beq	r2,zero,806e60 <f_mkfs+0x470>
         md = 0xF0;
  806e54:	00bffc04 	movi	r2,-16
  806e58:	e0bfec45 	stb	r2,-79(fp)
  806e5c:	00006206 	br	806fe8 <f_mkfs+0x5f8>
      } else { /* Create partition table (FDISK) */
         mem_set(fs->win, 0, SS(fs));
  806e60:	e0bff317 	ldw	r2,-52(fp)
  806e64:	10800c04 	addi	r2,r2,48
  806e68:	01808004 	movi	r6,512
  806e6c:	000b883a 	mov	r5,zero
  806e70:	1009883a 	mov	r4,r2
  806e74:	08015f80 	call	8015f8 <mem_set>
         tbl = fs->win+MBR_Table;   /* Create partiton table for single partition in the drive */
  806e78:	e0bff317 	ldw	r2,-52(fp)
  806e7c:	10800c04 	addi	r2,r2,48
  806e80:	10806f84 	addi	r2,r2,446
  806e84:	e0bffa15 	stw	r2,-24(fp)
         tbl[1] = 1;                /* Partition start head */
  806e88:	e0bffa17 	ldw	r2,-24(fp)
  806e8c:	10800044 	addi	r2,r2,1
  806e90:	00c00044 	movi	r3,1
  806e94:	10c00005 	stb	r3,0(r2)
         tbl[2] = 1;                /* Partition start sector */
  806e98:	e0bffa17 	ldw	r2,-24(fp)
  806e9c:	10800084 	addi	r2,r2,2
  806ea0:	00c00044 	movi	r3,1
  806ea4:	10c00005 	stb	r3,0(r2)
         tbl[3] = 0;                /* Partition start cylinder */
  806ea8:	e0bffa17 	ldw	r2,-24(fp)
  806eac:	108000c4 	addi	r2,r2,3
  806eb0:	10000005 	stb	zero,0(r2)
         tbl[4] = sys;              /* System type */
  806eb4:	e0bffa17 	ldw	r2,-24(fp)
  806eb8:	10800104 	addi	r2,r2,4
  806ebc:	e0ffec83 	ldbu	r3,-78(fp)
  806ec0:	10c00005 	stb	r3,0(r2)
         tbl[5] = 254;              /* Partition end head */
  806ec4:	e0bffa17 	ldw	r2,-24(fp)
  806ec8:	10800144 	addi	r2,r2,5
  806ecc:	00ffff84 	movi	r3,-2
  806ed0:	10c00005 	stb	r3,0(r2)
         n = (b_vol + n_vol) / 63 / 255;
  806ed4:	e0fffc17 	ldw	r3,-16(fp)
  806ed8:	e0bff517 	ldw	r2,-44(fp)
  806edc:	1885883a 	add	r2,r3,r2
  806ee0:	014fb044 	movi	r5,16065
  806ee4:	1009883a 	mov	r4,r2
  806ee8:	080a4a00 	call	80a4a0 <__udivsi3>
  806eec:	e0bffb15 	stw	r2,-20(fp)
         tbl[6] = (uint8_t)((n >> 2) | 63);  /* Partiiton end sector */
  806ef0:	e0bffa17 	ldw	r2,-24(fp)
  806ef4:	10800184 	addi	r2,r2,6
  806ef8:	e0fffb17 	ldw	r3,-20(fp)
  806efc:	1806d0ba 	srli	r3,r3,2
  806f00:	18c00fd4 	ori	r3,r3,63
  806f04:	10c00005 	stb	r3,0(r2)
         tbl[7] = (uint8_t)n;          /* End cylinder */
  806f08:	e0bffa17 	ldw	r2,-24(fp)
  806f0c:	108001c4 	addi	r2,r2,7
  806f10:	e0fffb17 	ldw	r3,-20(fp)
  806f14:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+8, 63);       /* Partition start in LBA */
  806f18:	e0bffa17 	ldw	r2,-24(fp)
  806f1c:	10800204 	addi	r2,r2,8
  806f20:	00c00fc4 	movi	r3,63
  806f24:	10c00005 	stb	r3,0(r2)
  806f28:	e0bffa17 	ldw	r2,-24(fp)
  806f2c:	10800244 	addi	r2,r2,9
  806f30:	10000005 	stb	zero,0(r2)
  806f34:	e0bffa17 	ldw	r2,-24(fp)
  806f38:	10800284 	addi	r2,r2,10
  806f3c:	10000005 	stb	zero,0(r2)
  806f40:	e0bffa17 	ldw	r2,-24(fp)
  806f44:	108002c4 	addi	r2,r2,11
  806f48:	10000005 	stb	zero,0(r2)
         ST_DWORD(tbl+12, n_vol);      /* Partition size in LBA */
  806f4c:	e0bffa17 	ldw	r2,-24(fp)
  806f50:	10800304 	addi	r2,r2,12
  806f54:	e0fffc17 	ldw	r3,-16(fp)
  806f58:	10c00005 	stb	r3,0(r2)
  806f5c:	e0bffa17 	ldw	r2,-24(fp)
  806f60:	10800344 	addi	r2,r2,13
  806f64:	e0fffc17 	ldw	r3,-16(fp)
  806f68:	18ffffcc 	andi	r3,r3,65535
  806f6c:	1807d23a 	srai	r3,r3,8
  806f70:	10c00005 	stb	r3,0(r2)
  806f74:	e0bffa17 	ldw	r2,-24(fp)
  806f78:	10800384 	addi	r2,r2,14
  806f7c:	e0fffc17 	ldw	r3,-16(fp)
  806f80:	1806d43a 	srli	r3,r3,16
  806f84:	10c00005 	stb	r3,0(r2)
  806f88:	e0bffa17 	ldw	r2,-24(fp)
  806f8c:	108003c4 	addi	r2,r2,15
  806f90:	e0fffc17 	ldw	r3,-16(fp)
  806f94:	1806d63a 	srli	r3,r3,24
  806f98:	10c00005 	stb	r3,0(r2)
         ST_WORD(fs->win+BS_55AA, 0xAA55);   /* MBR signature */
  806f9c:	e0bff317 	ldw	r2,-52(fp)
  806fa0:	00c01544 	movi	r3,85
  806fa4:	10c08b85 	stb	r3,558(r2)
  806fa8:	e0bff317 	ldw	r2,-52(fp)
  806fac:	00ffea84 	movi	r3,-86
  806fb0:	10c08bc5 	stb	r3,559(r2)
         if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)  /* Write it to the MBR sector */
  806fb4:	e0fff403 	ldbu	r3,-48(fp)
  806fb8:	e0bff317 	ldw	r2,-52(fp)
  806fbc:	10800c04 	addi	r2,r2,48
  806fc0:	01c00044 	movi	r7,1
  806fc4:	000d883a 	mov	r6,zero
  806fc8:	100b883a 	mov	r5,r2
  806fcc:	1809883a 	mov	r4,r3
  806fd0:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  806fd4:	10000226 	beq	r2,zero,806fe0 <f_mkfs+0x5f0>
            return FR_DISK_ERR;
  806fd8:	00800044 	movi	r2,1
  806fdc:	00022f06 	br	80789c <f_mkfs+0xeac>
         md = 0xF8;
  806fe0:	00bffe04 	movi	r2,-8
  806fe4:	e0bfec45 	stb	r2,-79(fp)
      }
   }

   /* Create BPB in the VBR */
   tbl = fs->win;                   /* Clear sector */
  806fe8:	e0bff317 	ldw	r2,-52(fp)
  806fec:	10800c04 	addi	r2,r2,48
  806ff0:	e0bffa15 	stw	r2,-24(fp)
   mem_set(tbl, 0, SS(fs));
  806ff4:	01808004 	movi	r6,512
  806ff8:	000b883a 	mov	r5,zero
  806ffc:	e13ffa17 	ldw	r4,-24(fp)
  807000:	08015f80 	call	8015f8 <mem_set>
   mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
  807004:	018002c4 	movi	r6,11
  807008:	01402074 	movhi	r5,129
  80700c:	29489f04 	addi	r5,r5,8828
  807010:	e13ffa17 	ldw	r4,-24(fp)
  807014:	08015880 	call	801588 <mem_cpy>
   i = SS(fs);                      /* Sector size */
  807018:	00808004 	movi	r2,512
  80701c:	e0bfee15 	stw	r2,-72(fp)
   ST_WORD(tbl+BPB_BytsPerSec, i);
  807020:	e0bffa17 	ldw	r2,-24(fp)
  807024:	108002c4 	addi	r2,r2,11
  807028:	e0ffee17 	ldw	r3,-72(fp)
  80702c:	10c00005 	stb	r3,0(r2)
  807030:	e0bffa17 	ldw	r2,-24(fp)
  807034:	10800304 	addi	r2,r2,12
  807038:	e0ffee17 	ldw	r3,-72(fp)
  80703c:	18ffffcc 	andi	r3,r3,65535
  807040:	1807d23a 	srai	r3,r3,8
  807044:	10c00005 	stb	r3,0(r2)
   tbl[BPB_SecPerClus] = (uint8_t)au;        /* Sectors per cluster */
  807048:	e0bffa17 	ldw	r2,-24(fp)
  80704c:	10800344 	addi	r2,r2,13
  807050:	e0ffff17 	ldw	r3,-4(fp)
  807054:	10c00005 	stb	r3,0(r2)
   ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);    /* Reserved sectors */
  807058:	e0bffa17 	ldw	r2,-24(fp)
  80705c:	10800384 	addi	r2,r2,14
  807060:	e0fff017 	ldw	r3,-64(fp)
  807064:	10c00005 	stb	r3,0(r2)
  807068:	e0bffa17 	ldw	r2,-24(fp)
  80706c:	108003c4 	addi	r2,r2,15
  807070:	e0fff017 	ldw	r3,-64(fp)
  807074:	18ffffcc 	andi	r3,r3,65535
  807078:	1807d23a 	srai	r3,r3,8
  80707c:	10c00005 	stb	r3,0(r2)
   tbl[BPB_NumFATs] = N_FATS;          /* Number of FATs */
  807080:	e0bffa17 	ldw	r2,-24(fp)
  807084:	10800404 	addi	r2,r2,16
  807088:	00c00044 	movi	r3,1
  80708c:	10c00005 	stb	r3,0(r2)
   i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR; /* Number of rootdir entries */
  807090:	e0bfec03 	ldbu	r2,-80(fp)
  807094:	108000d8 	cmpnei	r2,r2,3
  807098:	1000021e 	bne	r2,zero,8070a4 <f_mkfs+0x6b4>
  80709c:	0005883a 	mov	r2,zero
  8070a0:	00000106 	br	8070a8 <f_mkfs+0x6b8>
  8070a4:	00808004 	movi	r2,512
  8070a8:	e0bfee15 	stw	r2,-72(fp)
   ST_WORD(tbl+BPB_RootEntCnt, i);
  8070ac:	e0bffa17 	ldw	r2,-24(fp)
  8070b0:	10800444 	addi	r2,r2,17
  8070b4:	e0ffee17 	ldw	r3,-72(fp)
  8070b8:	10c00005 	stb	r3,0(r2)
  8070bc:	e0bffa17 	ldw	r2,-24(fp)
  8070c0:	10800484 	addi	r2,r2,18
  8070c4:	e0ffee17 	ldw	r3,-72(fp)
  8070c8:	18ffffcc 	andi	r3,r3,65535
  8070cc:	1807d23a 	srai	r3,r3,8
  8070d0:	10c00005 	stb	r3,0(r2)
   if (n_vol < 0x10000) {              /* Number of total sectors */
  8070d4:	e0bffc17 	ldw	r2,-16(fp)
  8070d8:	00ffffd4 	movui	r3,65535
  8070dc:	18800b36 	bltu	r3,r2,80710c <f_mkfs+0x71c>
      ST_WORD(tbl+BPB_TotSec16, n_vol);
  8070e0:	e0bffa17 	ldw	r2,-24(fp)
  8070e4:	108004c4 	addi	r2,r2,19
  8070e8:	e0fffc17 	ldw	r3,-16(fp)
  8070ec:	10c00005 	stb	r3,0(r2)
  8070f0:	e0bffa17 	ldw	r2,-24(fp)
  8070f4:	10800504 	addi	r2,r2,20
  8070f8:	e0fffc17 	ldw	r3,-16(fp)
  8070fc:	18ffffcc 	andi	r3,r3,65535
  807100:	1807d23a 	srai	r3,r3,8
  807104:	10c00005 	stb	r3,0(r2)
  807108:	00001406 	br	80715c <f_mkfs+0x76c>
   } else {
      ST_DWORD(tbl+BPB_TotSec32, n_vol);
  80710c:	e0bffa17 	ldw	r2,-24(fp)
  807110:	10800804 	addi	r2,r2,32
  807114:	e0fffc17 	ldw	r3,-16(fp)
  807118:	10c00005 	stb	r3,0(r2)
  80711c:	e0bffa17 	ldw	r2,-24(fp)
  807120:	10800844 	addi	r2,r2,33
  807124:	e0fffc17 	ldw	r3,-16(fp)
  807128:	18ffffcc 	andi	r3,r3,65535
  80712c:	1807d23a 	srai	r3,r3,8
  807130:	10c00005 	stb	r3,0(r2)
  807134:	e0bffa17 	ldw	r2,-24(fp)
  807138:	10800884 	addi	r2,r2,34
  80713c:	e0fffc17 	ldw	r3,-16(fp)
  807140:	1806d43a 	srli	r3,r3,16
  807144:	10c00005 	stb	r3,0(r2)
  807148:	e0bffa17 	ldw	r2,-24(fp)
  80714c:	108008c4 	addi	r2,r2,35
  807150:	e0fffc17 	ldw	r3,-16(fp)
  807154:	1806d63a 	srli	r3,r3,24
  807158:	10c00005 	stb	r3,0(r2)
   }
   tbl[BPB_Media] = md;             /* Media descriptor */
  80715c:	e0bffa17 	ldw	r2,-24(fp)
  807160:	10800544 	addi	r2,r2,21
  807164:	e0ffec43 	ldbu	r3,-79(fp)
  807168:	10c00005 	stb	r3,0(r2)
   ST_WORD(tbl+BPB_SecPerTrk, 63);        /* Number of sectors per track */
  80716c:	e0bffa17 	ldw	r2,-24(fp)
  807170:	10800604 	addi	r2,r2,24
  807174:	00c00fc4 	movi	r3,63
  807178:	10c00005 	stb	r3,0(r2)
  80717c:	e0bffa17 	ldw	r2,-24(fp)
  807180:	10800644 	addi	r2,r2,25
  807184:	10000005 	stb	zero,0(r2)
   ST_WORD(tbl+BPB_NumHeads, 255);        /* Number of heads */
  807188:	e0bffa17 	ldw	r2,-24(fp)
  80718c:	10800684 	addi	r2,r2,26
  807190:	00ffffc4 	movi	r3,-1
  807194:	10c00005 	stb	r3,0(r2)
  807198:	e0bffa17 	ldw	r2,-24(fp)
  80719c:	108006c4 	addi	r2,r2,27
  8071a0:	10000005 	stb	zero,0(r2)
   ST_DWORD(tbl+BPB_HiddSec, b_vol);      /* Hidden sectors */
  8071a4:	e0bffa17 	ldw	r2,-24(fp)
  8071a8:	10800704 	addi	r2,r2,28
  8071ac:	e0fff517 	ldw	r3,-44(fp)
  8071b0:	10c00005 	stb	r3,0(r2)
  8071b4:	e0bffa17 	ldw	r2,-24(fp)
  8071b8:	10800744 	addi	r2,r2,29
  8071bc:	e0fff517 	ldw	r3,-44(fp)
  8071c0:	18ffffcc 	andi	r3,r3,65535
  8071c4:	1807d23a 	srai	r3,r3,8
  8071c8:	10c00005 	stb	r3,0(r2)
  8071cc:	e0bffa17 	ldw	r2,-24(fp)
  8071d0:	10800784 	addi	r2,r2,30
  8071d4:	e0fff517 	ldw	r3,-44(fp)
  8071d8:	1806d43a 	srli	r3,r3,16
  8071dc:	10c00005 	stb	r3,0(r2)
  8071e0:	e0bffa17 	ldw	r2,-24(fp)
  8071e4:	108007c4 	addi	r2,r2,31
  8071e8:	e0fff517 	ldw	r3,-44(fp)
  8071ec:	1806d63a 	srli	r3,r3,24
  8071f0:	10c00005 	stb	r3,0(r2)
   n = get_fattime();                  /* Use current time as VSN */
  8071f4:	080155c0 	call	80155c <get_fattime>
  8071f8:	e0bffb15 	stw	r2,-20(fp)
   if (fmt == FS_FAT32) {
  8071fc:	e0bfec03 	ldbu	r2,-80(fp)
  807200:	108000d8 	cmpnei	r2,r2,3
  807204:	1000531e 	bne	r2,zero,807354 <f_mkfs+0x964>
      ST_DWORD(tbl+BS_VolID32, n);     /* VSN */
  807208:	e0bffa17 	ldw	r2,-24(fp)
  80720c:	108010c4 	addi	r2,r2,67
  807210:	e0fffb17 	ldw	r3,-20(fp)
  807214:	10c00005 	stb	r3,0(r2)
  807218:	e0bffa17 	ldw	r2,-24(fp)
  80721c:	10801104 	addi	r2,r2,68
  807220:	e0fffb17 	ldw	r3,-20(fp)
  807224:	18ffffcc 	andi	r3,r3,65535
  807228:	1807d23a 	srai	r3,r3,8
  80722c:	10c00005 	stb	r3,0(r2)
  807230:	e0bffa17 	ldw	r2,-24(fp)
  807234:	10801144 	addi	r2,r2,69
  807238:	e0fffb17 	ldw	r3,-20(fp)
  80723c:	1806d43a 	srli	r3,r3,16
  807240:	10c00005 	stb	r3,0(r2)
  807244:	e0bffa17 	ldw	r2,-24(fp)
  807248:	10801184 	addi	r2,r2,70
  80724c:	e0fffb17 	ldw	r3,-20(fp)
  807250:	1806d63a 	srli	r3,r3,24
  807254:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+BPB_FATSz32, n_fat);   /* Number of sectors per FAT */
  807258:	e0bffa17 	ldw	r2,-24(fp)
  80725c:	10800904 	addi	r2,r2,36
  807260:	e0fff117 	ldw	r3,-60(fp)
  807264:	10c00005 	stb	r3,0(r2)
  807268:	e0bffa17 	ldw	r2,-24(fp)
  80726c:	10800944 	addi	r2,r2,37
  807270:	e0fff117 	ldw	r3,-60(fp)
  807274:	18ffffcc 	andi	r3,r3,65535
  807278:	1807d23a 	srai	r3,r3,8
  80727c:	10c00005 	stb	r3,0(r2)
  807280:	e0bffa17 	ldw	r2,-24(fp)
  807284:	10800984 	addi	r2,r2,38
  807288:	e0fff117 	ldw	r3,-60(fp)
  80728c:	1806d43a 	srli	r3,r3,16
  807290:	10c00005 	stb	r3,0(r2)
  807294:	e0bffa17 	ldw	r2,-24(fp)
  807298:	108009c4 	addi	r2,r2,39
  80729c:	e0fff117 	ldw	r3,-60(fp)
  8072a0:	1806d63a 	srli	r3,r3,24
  8072a4:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+BPB_RootClus, 2);      /* Root directory start cluster (2) */
  8072a8:	e0bffa17 	ldw	r2,-24(fp)
  8072ac:	10800b04 	addi	r2,r2,44
  8072b0:	00c00084 	movi	r3,2
  8072b4:	10c00005 	stb	r3,0(r2)
  8072b8:	e0bffa17 	ldw	r2,-24(fp)
  8072bc:	10800b44 	addi	r2,r2,45
  8072c0:	10000005 	stb	zero,0(r2)
  8072c4:	e0bffa17 	ldw	r2,-24(fp)
  8072c8:	10800b84 	addi	r2,r2,46
  8072cc:	10000005 	stb	zero,0(r2)
  8072d0:	e0bffa17 	ldw	r2,-24(fp)
  8072d4:	10800bc4 	addi	r2,r2,47
  8072d8:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BPB_FSInfo, 1);         /* FSInfo record offset (VBR+1) */
  8072dc:	e0bffa17 	ldw	r2,-24(fp)
  8072e0:	10800c04 	addi	r2,r2,48
  8072e4:	00c00044 	movi	r3,1
  8072e8:	10c00005 	stb	r3,0(r2)
  8072ec:	e0bffa17 	ldw	r2,-24(fp)
  8072f0:	10800c44 	addi	r2,r2,49
  8072f4:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BPB_BkBootSec, 6);      /* Backup boot record offset (VBR+6) */
  8072f8:	e0bffa17 	ldw	r2,-24(fp)
  8072fc:	10800c84 	addi	r2,r2,50
  807300:	00c00184 	movi	r3,6
  807304:	10c00005 	stb	r3,0(r2)
  807308:	e0bffa17 	ldw	r2,-24(fp)
  80730c:	10800cc4 	addi	r2,r2,51
  807310:	10000005 	stb	zero,0(r2)
      tbl[BS_DrvNum32] = 0x80;         /* Drive number */
  807314:	e0bffa17 	ldw	r2,-24(fp)
  807318:	10801004 	addi	r2,r2,64
  80731c:	00ffe004 	movi	r3,-128
  807320:	10c00005 	stb	r3,0(r2)
      tbl[BS_BootSig32] = 0x29;        /* Extended boot signature */
  807324:	e0bffa17 	ldw	r2,-24(fp)
  807328:	10801084 	addi	r2,r2,66
  80732c:	00c00a44 	movi	r3,41
  807330:	10c00005 	stb	r3,0(r2)
      mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);  /* Volume label, FAT signature */
  807334:	e0bffa17 	ldw	r2,-24(fp)
  807338:	108011c4 	addi	r2,r2,71
  80733c:	018004c4 	movi	r6,19
  807340:	01402074 	movhi	r5,129
  807344:	2948a204 	addi	r5,r5,8840
  807348:	1009883a 	mov	r4,r2
  80734c:	08015880 	call	801588 <mem_cpy>
  807350:	00002d06 	br	807408 <f_mkfs+0xa18>
   } else {
      ST_DWORD(tbl+BS_VolID, n);       /* VSN */
  807354:	e0bffa17 	ldw	r2,-24(fp)
  807358:	108009c4 	addi	r2,r2,39
  80735c:	e0fffb17 	ldw	r3,-20(fp)
  807360:	10c00005 	stb	r3,0(r2)
  807364:	e0bffa17 	ldw	r2,-24(fp)
  807368:	10800a04 	addi	r2,r2,40
  80736c:	e0fffb17 	ldw	r3,-20(fp)
  807370:	18ffffcc 	andi	r3,r3,65535
  807374:	1807d23a 	srai	r3,r3,8
  807378:	10c00005 	stb	r3,0(r2)
  80737c:	e0bffa17 	ldw	r2,-24(fp)
  807380:	10800a44 	addi	r2,r2,41
  807384:	e0fffb17 	ldw	r3,-20(fp)
  807388:	1806d43a 	srli	r3,r3,16
  80738c:	10c00005 	stb	r3,0(r2)
  807390:	e0bffa17 	ldw	r2,-24(fp)
  807394:	10800a84 	addi	r2,r2,42
  807398:	e0fffb17 	ldw	r3,-20(fp)
  80739c:	1806d63a 	srli	r3,r3,24
  8073a0:	10c00005 	stb	r3,0(r2)
      ST_WORD(tbl+BPB_FATSz16, n_fat); /* Number of sectors per FAT */
  8073a4:	e0bffa17 	ldw	r2,-24(fp)
  8073a8:	10800584 	addi	r2,r2,22
  8073ac:	e0fff117 	ldw	r3,-60(fp)
  8073b0:	10c00005 	stb	r3,0(r2)
  8073b4:	e0bffa17 	ldw	r2,-24(fp)
  8073b8:	108005c4 	addi	r2,r2,23
  8073bc:	e0fff117 	ldw	r3,-60(fp)
  8073c0:	18ffffcc 	andi	r3,r3,65535
  8073c4:	1807d23a 	srai	r3,r3,8
  8073c8:	10c00005 	stb	r3,0(r2)
      tbl[BS_DrvNum] = 0x80;           /* Drive number */
  8073cc:	e0bffa17 	ldw	r2,-24(fp)
  8073d0:	10800904 	addi	r2,r2,36
  8073d4:	00ffe004 	movi	r3,-128
  8073d8:	10c00005 	stb	r3,0(r2)
      tbl[BS_BootSig] = 0x29;          /* Extended boot signature */
  8073dc:	e0bffa17 	ldw	r2,-24(fp)
  8073e0:	10800984 	addi	r2,r2,38
  8073e4:	00c00a44 	movi	r3,41
  8073e8:	10c00005 	stb	r3,0(r2)
      mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19); /* Volume label, FAT signature */
  8073ec:	e0bffa17 	ldw	r2,-24(fp)
  8073f0:	10800ac4 	addi	r2,r2,43
  8073f4:	018004c4 	movi	r6,19
  8073f8:	01402074 	movhi	r5,129
  8073fc:	2948a704 	addi	r5,r5,8860
  807400:	1009883a 	mov	r4,r2
  807404:	08015880 	call	801588 <mem_cpy>
   }
   ST_WORD(tbl+BS_55AA, 0xAA55);       /* Signature (Offset is fixed here regardless of sector size) */
  807408:	e0bffa17 	ldw	r2,-24(fp)
  80740c:	10807f84 	addi	r2,r2,510
  807410:	00c01544 	movi	r3,85
  807414:	10c00005 	stb	r3,0(r2)
  807418:	e0bffa17 	ldw	r2,-24(fp)
  80741c:	10807fc4 	addi	r2,r2,511
  807420:	00ffea84 	movi	r3,-86
  807424:	10c00005 	stb	r3,0(r2)
   if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)  /* Write it to the VBR sector */
  807428:	e0bff403 	ldbu	r2,-48(fp)
  80742c:	01c00044 	movi	r7,1
  807430:	e1bff517 	ldw	r6,-44(fp)
  807434:	e17ffa17 	ldw	r5,-24(fp)
  807438:	1009883a 	mov	r4,r2
  80743c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  807440:	10000226 	beq	r2,zero,80744c <f_mkfs+0xa5c>
      return FR_DISK_ERR;
  807444:	00800044 	movi	r2,1
  807448:	00011406 	br	80789c <f_mkfs+0xeac>
   if (fmt == FS_FAT32)                   /* Write backup VBR if needed (VBR+6) */
  80744c:	e0bfec03 	ldbu	r2,-80(fp)
  807450:	108000d8 	cmpnei	r2,r2,3
  807454:	1000081e 	bne	r2,zero,807478 <f_mkfs+0xa88>
      disk_write(pdrv, tbl, b_vol + 6, 1);
  807458:	e0fff403 	ldbu	r3,-48(fp)
  80745c:	e0bff517 	ldw	r2,-44(fp)
  807460:	10800184 	addi	r2,r2,6
  807464:	01c00044 	movi	r7,1
  807468:	100d883a 	mov	r6,r2
  80746c:	e17ffa17 	ldw	r5,-24(fp)
  807470:	1809883a 	mov	r4,r3
  807474:	0800f280 	call	800f28 <ffs_DiskIOWrite>

   /* Initialize FAT area */
   wsect = b_fat;
  807478:	e0bfef17 	ldw	r2,-68(fp)
  80747c:	e0bfed15 	stw	r2,-76(fp)
   for (i = 0; i < N_FATS; i++) {      /* Initialize each FAT copy */
  807480:	e03fee15 	stw	zero,-72(fp)
  807484:	00008606 	br	8076a0 <f_mkfs+0xcb0>
      mem_set(tbl, 0, SS(fs));         /* 1st sector of the FAT  */
  807488:	01808004 	movi	r6,512
  80748c:	000b883a 	mov	r5,zero
  807490:	e13ffa17 	ldw	r4,-24(fp)
  807494:	08015f80 	call	8015f8 <mem_set>
      n = md;                       /* Media descriptor byte */
  807498:	e0bfec43 	ldbu	r2,-79(fp)
  80749c:	e0bffb15 	stw	r2,-20(fp)
      if (fmt != FS_FAT32) {
  8074a0:	e0bfec03 	ldbu	r2,-80(fp)
  8074a4:	108000e0 	cmpeqi	r2,r2,3
  8074a8:	10001f1e 	bne	r2,zero,807528 <f_mkfs+0xb38>
         n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
  8074ac:	e0bfec03 	ldbu	r2,-80(fp)
  8074b0:	10800058 	cmpnei	r2,r2,1
  8074b4:	1000031e 	bne	r2,zero,8074c4 <f_mkfs+0xad4>
  8074b8:	00804034 	movhi	r2,256
  8074bc:	10bfc004 	addi	r2,r2,-256
  8074c0:	00000106 	br	8074c8 <f_mkfs+0xad8>
  8074c4:	00bfc004 	movi	r2,-256
  8074c8:	e0fffb17 	ldw	r3,-20(fp)
  8074cc:	10c4b03a 	or	r2,r2,r3
  8074d0:	e0bffb15 	stw	r2,-20(fp)
         ST_DWORD(tbl+0, n);           /* Reserve cluster #0-1 (FAT12/16) */
  8074d4:	e0bffb17 	ldw	r2,-20(fp)
  8074d8:	1007883a 	mov	r3,r2
  8074dc:	e0bffa17 	ldw	r2,-24(fp)
  8074e0:	10c00005 	stb	r3,0(r2)
  8074e4:	e0bffa17 	ldw	r2,-24(fp)
  8074e8:	10800044 	addi	r2,r2,1
  8074ec:	e0fffb17 	ldw	r3,-20(fp)
  8074f0:	18ffffcc 	andi	r3,r3,65535
  8074f4:	1807d23a 	srai	r3,r3,8
  8074f8:	10c00005 	stb	r3,0(r2)
  8074fc:	e0bffa17 	ldw	r2,-24(fp)
  807500:	10800084 	addi	r2,r2,2
  807504:	e0fffb17 	ldw	r3,-20(fp)
  807508:	1806d43a 	srli	r3,r3,16
  80750c:	10c00005 	stb	r3,0(r2)
  807510:	e0bffa17 	ldw	r2,-24(fp)
  807514:	108000c4 	addi	r2,r2,3
  807518:	e0fffb17 	ldw	r3,-20(fp)
  80751c:	1806d63a 	srli	r3,r3,24
  807520:	10c00005 	stb	r3,0(r2)
  807524:	00003806 	br	807608 <f_mkfs+0xc18>
      } else {
         n |= 0xFFFFFF00;
  807528:	e0fffb17 	ldw	r3,-20(fp)
  80752c:	00bfc004 	movi	r2,-256
  807530:	1884b03a 	or	r2,r3,r2
  807534:	e0bffb15 	stw	r2,-20(fp)
         ST_DWORD(tbl+0, n);           /* Reserve cluster #0-1 (FAT32) */
  807538:	e0bffb17 	ldw	r2,-20(fp)
  80753c:	1007883a 	mov	r3,r2
  807540:	e0bffa17 	ldw	r2,-24(fp)
  807544:	10c00005 	stb	r3,0(r2)
  807548:	e0bffa17 	ldw	r2,-24(fp)
  80754c:	10800044 	addi	r2,r2,1
  807550:	e0fffb17 	ldw	r3,-20(fp)
  807554:	18ffffcc 	andi	r3,r3,65535
  807558:	1807d23a 	srai	r3,r3,8
  80755c:	10c00005 	stb	r3,0(r2)
  807560:	e0bffa17 	ldw	r2,-24(fp)
  807564:	10800084 	addi	r2,r2,2
  807568:	e0fffb17 	ldw	r3,-20(fp)
  80756c:	1806d43a 	srli	r3,r3,16
  807570:	10c00005 	stb	r3,0(r2)
  807574:	e0bffa17 	ldw	r2,-24(fp)
  807578:	108000c4 	addi	r2,r2,3
  80757c:	e0fffb17 	ldw	r3,-20(fp)
  807580:	1806d63a 	srli	r3,r3,24
  807584:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+4, 0xFFFFFFFF);
  807588:	e0bffa17 	ldw	r2,-24(fp)
  80758c:	10800104 	addi	r2,r2,4
  807590:	00ffffc4 	movi	r3,-1
  807594:	10c00005 	stb	r3,0(r2)
  807598:	e0bffa17 	ldw	r2,-24(fp)
  80759c:	10800144 	addi	r2,r2,5
  8075a0:	00ffffc4 	movi	r3,-1
  8075a4:	10c00005 	stb	r3,0(r2)
  8075a8:	e0bffa17 	ldw	r2,-24(fp)
  8075ac:	10800184 	addi	r2,r2,6
  8075b0:	00ffffc4 	movi	r3,-1
  8075b4:	10c00005 	stb	r3,0(r2)
  8075b8:	e0bffa17 	ldw	r2,-24(fp)
  8075bc:	108001c4 	addi	r2,r2,7
  8075c0:	00ffffc4 	movi	r3,-1
  8075c4:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+8, 0x0FFFFFFF);  /* Reserve cluster #2 for root dir */
  8075c8:	e0bffa17 	ldw	r2,-24(fp)
  8075cc:	10800204 	addi	r2,r2,8
  8075d0:	00ffffc4 	movi	r3,-1
  8075d4:	10c00005 	stb	r3,0(r2)
  8075d8:	e0bffa17 	ldw	r2,-24(fp)
  8075dc:	10800244 	addi	r2,r2,9
  8075e0:	00ffffc4 	movi	r3,-1
  8075e4:	10c00005 	stb	r3,0(r2)
  8075e8:	e0bffa17 	ldw	r2,-24(fp)
  8075ec:	10800284 	addi	r2,r2,10
  8075f0:	00ffffc4 	movi	r3,-1
  8075f4:	10c00005 	stb	r3,0(r2)
  8075f8:	e0bffa17 	ldw	r2,-24(fp)
  8075fc:	108002c4 	addi	r2,r2,11
  807600:	00c003c4 	movi	r3,15
  807604:	10c00005 	stb	r3,0(r2)
      }
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  807608:	e13ff403 	ldbu	r4,-48(fp)
  80760c:	e0bfed17 	ldw	r2,-76(fp)
  807610:	10c00044 	addi	r3,r2,1
  807614:	e0ffed15 	stw	r3,-76(fp)
  807618:	01c00044 	movi	r7,1
  80761c:	100d883a 	mov	r6,r2
  807620:	e17ffa17 	ldw	r5,-24(fp)
  807624:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  807628:	10000226 	beq	r2,zero,807634 <f_mkfs+0xc44>
         return FR_DISK_ERR;
  80762c:	00800044 	movi	r2,1
  807630:	00009a06 	br	80789c <f_mkfs+0xeac>
      mem_set(tbl, 0, SS(fs));         /* Fill following FAT entries with zero */
  807634:	01808004 	movi	r6,512
  807638:	000b883a 	mov	r5,zero
  80763c:	e13ffa17 	ldw	r4,-24(fp)
  807640:	08015f80 	call	8015f8 <mem_set>
      for (n = 1; n < n_fat; n++) {    /* This loop may take a time on FAT32 volume due to many single sector writes */
  807644:	00800044 	movi	r2,1
  807648:	e0bffb15 	stw	r2,-20(fp)
  80764c:	00000e06 	br	807688 <f_mkfs+0xc98>
         if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  807650:	e13ff403 	ldbu	r4,-48(fp)
  807654:	e0bfed17 	ldw	r2,-76(fp)
  807658:	10c00044 	addi	r3,r2,1
  80765c:	e0ffed15 	stw	r3,-76(fp)
  807660:	01c00044 	movi	r7,1
  807664:	100d883a 	mov	r6,r2
  807668:	e17ffa17 	ldw	r5,-24(fp)
  80766c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  807670:	10000226 	beq	r2,zero,80767c <f_mkfs+0xc8c>
            return FR_DISK_ERR;
  807674:	00800044 	movi	r2,1
  807678:	00008806 	br	80789c <f_mkfs+0xeac>
         ST_DWORD(tbl+8, 0x0FFFFFFF);  /* Reserve cluster #2 for root dir */
      }
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
         return FR_DISK_ERR;
      mem_set(tbl, 0, SS(fs));         /* Fill following FAT entries with zero */
      for (n = 1; n < n_fat; n++) {    /* This loop may take a time on FAT32 volume due to many single sector writes */
  80767c:	e0bffb17 	ldw	r2,-20(fp)
  807680:	10800044 	addi	r2,r2,1
  807684:	e0bffb15 	stw	r2,-20(fp)
  807688:	e0fffb17 	ldw	r3,-20(fp)
  80768c:	e0bff117 	ldw	r2,-60(fp)
  807690:	18bfef36 	bltu	r3,r2,807650 <__alt_data_end+0xff807650>
   if (fmt == FS_FAT32)                   /* Write backup VBR if needed (VBR+6) */
      disk_write(pdrv, tbl, b_vol + 6, 1);

   /* Initialize FAT area */
   wsect = b_fat;
   for (i = 0; i < N_FATS; i++) {      /* Initialize each FAT copy */
  807694:	e0bfee17 	ldw	r2,-72(fp)
  807698:	10800044 	addi	r2,r2,1
  80769c:	e0bfee15 	stw	r2,-72(fp)
  8076a0:	e0bfee17 	ldw	r2,-72(fp)
  8076a4:	103f7826 	beq	r2,zero,807488 <__alt_data_end+0xff807488>
            return FR_DISK_ERR;
      }
   }

   /* Initialize root directory */
   i = (fmt == FS_FAT32) ? au : n_dir;
  8076a8:	e0bfec03 	ldbu	r2,-80(fp)
  8076ac:	108000d8 	cmpnei	r2,r2,3
  8076b0:	1000021e 	bne	r2,zero,8076bc <f_mkfs+0xccc>
  8076b4:	e0bfff17 	ldw	r2,-4(fp)
  8076b8:	00000106 	br	8076c0 <f_mkfs+0xcd0>
  8076bc:	e0bff217 	ldw	r2,-56(fp)
  8076c0:	e0bfee15 	stw	r2,-72(fp)
   do {
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
  8076c4:	e13ff403 	ldbu	r4,-48(fp)
  8076c8:	e0bfed17 	ldw	r2,-76(fp)
  8076cc:	10c00044 	addi	r3,r2,1
  8076d0:	e0ffed15 	stw	r3,-76(fp)
  8076d4:	01c00044 	movi	r7,1
  8076d8:	100d883a 	mov	r6,r2
  8076dc:	e17ffa17 	ldw	r5,-24(fp)
  8076e0:	0800f280 	call	800f28 <ffs_DiskIOWrite>
  8076e4:	10000226 	beq	r2,zero,8076f0 <f_mkfs+0xd00>
         return FR_DISK_ERR;
  8076e8:	00800044 	movi	r2,1
  8076ec:	00006b06 	br	80789c <f_mkfs+0xeac>
   } while (--i);
  8076f0:	e0bfee17 	ldw	r2,-72(fp)
  8076f4:	10bfffc4 	addi	r2,r2,-1
  8076f8:	e0bfee15 	stw	r2,-72(fp)
  8076fc:	e0bfee17 	ldw	r2,-72(fp)
  807700:	103ff01e 	bne	r2,zero,8076c4 <__alt_data_end+0xff8076c4>
      disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
   }
#endif

   /* Create FSInfo if needed */
   if (fmt == FS_FAT32) {
  807704:	e0bfec03 	ldbu	r2,-80(fp)
  807708:	108000d8 	cmpnei	r2,r2,3
  80770c:	10005c1e 	bne	r2,zero,807880 <f_mkfs+0xe90>
      ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
  807710:	e0bffa17 	ldw	r2,-24(fp)
  807714:	00c01484 	movi	r3,82
  807718:	10c00005 	stb	r3,0(r2)
  80771c:	e0bffa17 	ldw	r2,-24(fp)
  807720:	10800044 	addi	r2,r2,1
  807724:	00c01484 	movi	r3,82
  807728:	10c00005 	stb	r3,0(r2)
  80772c:	e0bffa17 	ldw	r2,-24(fp)
  807730:	10800084 	addi	r2,r2,2
  807734:	00c01844 	movi	r3,97
  807738:	10c00005 	stb	r3,0(r2)
  80773c:	e0bffa17 	ldw	r2,-24(fp)
  807740:	108000c4 	addi	r2,r2,3
  807744:	00c01044 	movi	r3,65
  807748:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
  80774c:	e0bffa17 	ldw	r2,-24(fp)
  807750:	10807904 	addi	r2,r2,484
  807754:	00c01c84 	movi	r3,114
  807758:	10c00005 	stb	r3,0(r2)
  80775c:	e0bffa17 	ldw	r2,-24(fp)
  807760:	10807944 	addi	r2,r2,485
  807764:	00c01c84 	movi	r3,114
  807768:	10c00005 	stb	r3,0(r2)
  80776c:	e0bffa17 	ldw	r2,-24(fp)
  807770:	10807984 	addi	r2,r2,486
  807774:	00c01044 	movi	r3,65
  807778:	10c00005 	stb	r3,0(r2)
  80777c:	e0bffa17 	ldw	r2,-24(fp)
  807780:	108079c4 	addi	r2,r2,487
  807784:	00c01844 	movi	r3,97
  807788:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_Free_Count, n_clst - 1); /* Number of free clusters */
  80778c:	e0bffa17 	ldw	r2,-24(fp)
  807790:	10807a04 	addi	r2,r2,488
  807794:	e0fff717 	ldw	r3,-36(fp)
  807798:	18ffffc4 	addi	r3,r3,-1
  80779c:	10c00005 	stb	r3,0(r2)
  8077a0:	e0bffa17 	ldw	r2,-24(fp)
  8077a4:	10807a44 	addi	r2,r2,489
  8077a8:	e0fff717 	ldw	r3,-36(fp)
  8077ac:	18ffffc4 	addi	r3,r3,-1
  8077b0:	18ffffcc 	andi	r3,r3,65535
  8077b4:	1806d23a 	srli	r3,r3,8
  8077b8:	10c00005 	stb	r3,0(r2)
  8077bc:	e0bffa17 	ldw	r2,-24(fp)
  8077c0:	10807a84 	addi	r2,r2,490
  8077c4:	e0fff717 	ldw	r3,-36(fp)
  8077c8:	18ffffc4 	addi	r3,r3,-1
  8077cc:	1806d43a 	srli	r3,r3,16
  8077d0:	10c00005 	stb	r3,0(r2)
  8077d4:	e0bffa17 	ldw	r2,-24(fp)
  8077d8:	10807ac4 	addi	r2,r2,491
  8077dc:	e0fff717 	ldw	r3,-36(fp)
  8077e0:	18ffffc4 	addi	r3,r3,-1
  8077e4:	1806d63a 	srli	r3,r3,24
  8077e8:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_Nxt_Free, 2);            /* Last allocated cluster# */
  8077ec:	e0bffa17 	ldw	r2,-24(fp)
  8077f0:	10807b04 	addi	r2,r2,492
  8077f4:	00c00084 	movi	r3,2
  8077f8:	10c00005 	stb	r3,0(r2)
  8077fc:	e0bffa17 	ldw	r2,-24(fp)
  807800:	10807b44 	addi	r2,r2,493
  807804:	10000005 	stb	zero,0(r2)
  807808:	e0bffa17 	ldw	r2,-24(fp)
  80780c:	10807b84 	addi	r2,r2,494
  807810:	10000005 	stb	zero,0(r2)
  807814:	e0bffa17 	ldw	r2,-24(fp)
  807818:	10807bc4 	addi	r2,r2,495
  80781c:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BS_55AA, 0xAA55);
  807820:	e0bffa17 	ldw	r2,-24(fp)
  807824:	10807f84 	addi	r2,r2,510
  807828:	00c01544 	movi	r3,85
  80782c:	10c00005 	stb	r3,0(r2)
  807830:	e0bffa17 	ldw	r2,-24(fp)
  807834:	10807fc4 	addi	r2,r2,511
  807838:	00ffea84 	movi	r3,-86
  80783c:	10c00005 	stb	r3,0(r2)
      disk_write(pdrv, tbl, b_vol + 1, 1);   /* Write original (VBR+1) */
  807840:	e0fff403 	ldbu	r3,-48(fp)
  807844:	e0bff517 	ldw	r2,-44(fp)
  807848:	10800044 	addi	r2,r2,1
  80784c:	01c00044 	movi	r7,1
  807850:	100d883a 	mov	r6,r2
  807854:	e17ffa17 	ldw	r5,-24(fp)
  807858:	1809883a 	mov	r4,r3
  80785c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
      disk_write(pdrv, tbl, b_vol + 7, 1);   /* Write backup (VBR+7) */
  807860:	e0fff403 	ldbu	r3,-48(fp)
  807864:	e0bff517 	ldw	r2,-44(fp)
  807868:	108001c4 	addi	r2,r2,7
  80786c:	01c00044 	movi	r7,1
  807870:	100d883a 	mov	r6,r2
  807874:	e17ffa17 	ldw	r5,-24(fp)
  807878:	1809883a 	mov	r4,r3
  80787c:	0800f280 	call	800f28 <ffs_DiskIOWrite>
   }

   return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
  807880:	e0bff403 	ldbu	r2,-48(fp)
  807884:	000d883a 	mov	r6,zero
  807888:	000b883a 	mov	r5,zero
  80788c:	1009883a 	mov	r4,r2
  807890:	08010980 	call	801098 <ffs_DiskIOIoctl>
  807894:	1004c03a 	cmpne	r2,r2,zero
  807898:	10803fcc 	andi	r2,r2,255
}
  80789c:	e037883a 	mov	sp,fp
  8078a0:	dfc00117 	ldw	ra,4(sp)
  8078a4:	df000017 	ldw	fp,0(sp)
  8078a8:	dec00204 	addi	sp,sp,8
  8078ac:	f800283a 	ret

008078b0 <f_gets>:
TCHAR* f_gets (
   TCHAR* buff,   /* Pointer to the string buffer to read */
   int len,    /* Size of string buffer (characters) */
   FIL* fil    /* Pointer to the file object */
)
{
  8078b0:	defff704 	addi	sp,sp,-36
  8078b4:	dfc00815 	stw	ra,32(sp)
  8078b8:	df000715 	stw	fp,28(sp)
  8078bc:	df000704 	addi	fp,sp,28
  8078c0:	e13ffd15 	stw	r4,-12(fp)
  8078c4:	e17ffe15 	stw	r5,-8(fp)
  8078c8:	e1bfff15 	stw	r6,-4(fp)
   int n = 0;
  8078cc:	e03ff915 	stw	zero,-28(fp)
   TCHAR c, *p = buff;
  8078d0:	e0bffd17 	ldw	r2,-12(fp)
  8078d4:	e0bffa15 	stw	r2,-24(fp)
   uint8_t s[2];
   uint32_t rc;


   while (n < len - 1) {         /* Read bytes until buffer gets filled */
  8078d8:	00001706 	br	807938 <f_gets+0x88>
      f_read(fil, s, 1, &rc);
  8078dc:	e0fffc04 	addi	r3,fp,-16
  8078e0:	e0bffb44 	addi	r2,fp,-19
  8078e4:	180f883a 	mov	r7,r3
  8078e8:	01800044 	movi	r6,1
  8078ec:	100b883a 	mov	r5,r2
  8078f0:	e13fff17 	ldw	r4,-4(fp)
  8078f4:	08044780 	call	804478 <f_read>
      if (rc != 1) break;        /* Break on EOF or error */
  8078f8:	e0bffc17 	ldw	r2,-16(fp)
  8078fc:	10800060 	cmpeqi	r2,r2,1
  807900:	10001226 	beq	r2,zero,80794c <f_gets+0x9c>
      c = s[0];
  807904:	e0bffb43 	ldbu	r2,-19(fp)
  807908:	e0bffb05 	stb	r2,-20(fp)
      }
#endif
#if _USE_STRFUNC >= 2
      if (c == '\r') continue;   /* Strip '\r' */
#endif
      *p++ = c;
  80790c:	e0bffa17 	ldw	r2,-24(fp)
  807910:	10c00044 	addi	r3,r2,1
  807914:	e0fffa15 	stw	r3,-24(fp)
  807918:	e0fffb03 	ldbu	r3,-20(fp)
  80791c:	10c00005 	stb	r3,0(r2)
      n++;
  807920:	e0bff917 	ldw	r2,-28(fp)
  807924:	10800044 	addi	r2,r2,1
  807928:	e0bff915 	stw	r2,-28(fp)
      if (c == '\n') break;      /* Break on EOL */
  80792c:	e0bffb07 	ldb	r2,-20(fp)
  807930:	10800298 	cmpnei	r2,r2,10
  807934:	10000726 	beq	r2,zero,807954 <f_gets+0xa4>
   TCHAR c, *p = buff;
   uint8_t s[2];
   uint32_t rc;


   while (n < len - 1) {         /* Read bytes until buffer gets filled */
  807938:	e0bffe17 	ldw	r2,-8(fp)
  80793c:	10bfffc4 	addi	r2,r2,-1
  807940:	e0fff917 	ldw	r3,-28(fp)
  807944:	18bfe516 	blt	r3,r2,8078dc <__alt_data_end+0xff8078dc>
  807948:	00000306 	br	807958 <f_gets+0xa8>
      f_read(fil, s, 1, &rc);
      if (rc != 1) break;        /* Break on EOF or error */
  80794c:	0001883a 	nop
  807950:	00000106 	br	807958 <f_gets+0xa8>
#if _USE_STRFUNC >= 2
      if (c == '\r') continue;   /* Strip '\r' */
#endif
      *p++ = c;
      n++;
      if (c == '\n') break;      /* Break on EOL */
  807954:	0001883a 	nop
   }
   *p = 0;
  807958:	e0bffa17 	ldw	r2,-24(fp)
  80795c:	10000005 	stb	zero,0(r2)
   return n ? buff : 0;       /* When no data read (eof or error), return with error. */
  807960:	e0bff917 	ldw	r2,-28(fp)
  807964:	10000226 	beq	r2,zero,807970 <f_gets+0xc0>
  807968:	e0bffd17 	ldw	r2,-12(fp)
  80796c:	00000106 	br	807974 <f_gets+0xc4>
  807970:	0005883a 	mov	r2,zero
}
  807974:	e037883a 	mov	sp,fp
  807978:	dfc00117 	ldw	ra,4(sp)
  80797c:	df000017 	ldw	fp,0(sp)
  807980:	dec00204 	addi	sp,sp,8
  807984:	f800283a 	ret

00807988 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
   TCHAR c, /* A character to be output */
   FIL* fil /* Pointer to the file object */
)
{
  807988:	defff904 	addi	sp,sp,-28
  80798c:	dfc00615 	stw	ra,24(sp)
  807990:	df000515 	stw	fp,20(sp)
  807994:	df000504 	addi	fp,sp,20
  807998:	2005883a 	mov	r2,r4
  80799c:	e17fff15 	stw	r5,-4(fp)
  8079a0:	e0bffe05 	stb	r2,-8(fp)
         s[2] = (uint8_t)(0x80 | (c & 0x3F));
         btw = 3;
      }
   }
#else          /* Write the character without conversion */
   s[0] = (uint8_t)c;
  8079a4:	e0bffe03 	ldbu	r2,-8(fp)
  8079a8:	e0bffd05 	stb	r2,-12(fp)
   btw = 1;
  8079ac:	00800044 	movi	r2,1
  8079b0:	e0bffb15 	stw	r2,-20(fp)
#endif
   f_write(fil, s, btw, &bw);    /* Write the char to the file */
  8079b4:	e0fffc04 	addi	r3,fp,-16
  8079b8:	e0bffd04 	addi	r2,fp,-12
  8079bc:	180f883a 	mov	r7,r3
  8079c0:	e1bffb17 	ldw	r6,-20(fp)
  8079c4:	100b883a 	mov	r5,r2
  8079c8:	e13fff17 	ldw	r4,-4(fp)
  8079cc:	08049600 	call	804960 <f_write>
   return (bw == btw) ? 1 : EOF; /* Return the result */
  8079d0:	e0fffc17 	ldw	r3,-16(fp)
  8079d4:	e0bffb17 	ldw	r2,-20(fp)
  8079d8:	1880021e 	bne	r3,r2,8079e4 <f_putc+0x5c>
  8079dc:	00800044 	movi	r2,1
  8079e0:	00000106 	br	8079e8 <f_putc+0x60>
  8079e4:	00bfffc4 	movi	r2,-1
}
  8079e8:	e037883a 	mov	sp,fp
  8079ec:	dfc00117 	ldw	ra,4(sp)
  8079f0:	df000017 	ldw	fp,0(sp)
  8079f4:	dec00204 	addi	sp,sp,8
  8079f8:	f800283a 	ret

008079fc <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
   const TCHAR* str, /* Pointer to the string to be output */
   FIL* fil       /* Pointer to the file object */
)
{
  8079fc:	defffb04 	addi	sp,sp,-20
  807a00:	dfc00415 	stw	ra,16(sp)
  807a04:	df000315 	stw	fp,12(sp)
  807a08:	df000304 	addi	fp,sp,12
  807a0c:	e13ffe15 	stw	r4,-8(fp)
  807a10:	e17fff15 	stw	r5,-4(fp)
   int n;


   for (n = 0; *str; str++, n++) {
  807a14:	e03ffd15 	stw	zero,-12(fp)
  807a18:	00001206 	br	807a64 <f_puts+0x68>
      if (f_putc(*str, fil) == EOF) return EOF;
  807a1c:	e0bffe17 	ldw	r2,-8(fp)
  807a20:	10800003 	ldbu	r2,0(r2)
  807a24:	10803fcc 	andi	r2,r2,255
  807a28:	1080201c 	xori	r2,r2,128
  807a2c:	10bfe004 	addi	r2,r2,-128
  807a30:	e17fff17 	ldw	r5,-4(fp)
  807a34:	1009883a 	mov	r4,r2
  807a38:	08079880 	call	807988 <f_putc>
  807a3c:	10bfffd8 	cmpnei	r2,r2,-1
  807a40:	1000021e 	bne	r2,zero,807a4c <f_puts+0x50>
  807a44:	00bfffc4 	movi	r2,-1
  807a48:	00000d06 	br	807a80 <f_puts+0x84>
)
{
   int n;


   for (n = 0; *str; str++, n++) {
  807a4c:	e0bffe17 	ldw	r2,-8(fp)
  807a50:	10800044 	addi	r2,r2,1
  807a54:	e0bffe15 	stw	r2,-8(fp)
  807a58:	e0bffd17 	ldw	r2,-12(fp)
  807a5c:	10800044 	addi	r2,r2,1
  807a60:	e0bffd15 	stw	r2,-12(fp)
  807a64:	e0bffe17 	ldw	r2,-8(fp)
  807a68:	10800003 	ldbu	r2,0(r2)
  807a6c:	10803fcc 	andi	r2,r2,255
  807a70:	1080201c 	xori	r2,r2,128
  807a74:	10bfe004 	addi	r2,r2,-128
  807a78:	103fe81e 	bne	r2,zero,807a1c <__alt_data_end+0xff807a1c>
      if (f_putc(*str, fil) == EOF) return EOF;
   }
   return n;
  807a7c:	e0bffd17 	ldw	r2,-12(fp)
}
  807a80:	e037883a 	mov	sp,fp
  807a84:	dfc00117 	ldw	ra,4(sp)
  807a88:	df000017 	ldw	fp,0(sp)
  807a8c:	dec00204 	addi	sp,sp,8
  807a90:	f800283a 	ret

00807a94 <f_printf>:
int f_printf (
   FIL* fil,         /* Pointer to the file object */
   const TCHAR* str, /* Pointer to the format string */
   ...               /* Optional arguments... */
)
{
  807a94:	deffeb04 	addi	sp,sp,-84
  807a98:	dfc01215 	stw	ra,72(sp)
  807a9c:	df001115 	stw	fp,68(sp)
  807aa0:	df001104 	addi	fp,sp,68
  807aa4:	e13ffe15 	stw	r4,-8(fp)
  807aa8:	e17fff15 	stw	r5,-4(fp)
  807aac:	e1800215 	stw	r6,8(fp)
  807ab0:	e1c00315 	stw	r7,12(fp)
   uint32_t v;
   TCHAR c, d, s[16], *p;
   int res, chc, cc;


   va_start(arp, str);
  807ab4:	e0800204 	addi	r2,fp,8
  807ab8:	e0bff915 	stw	r2,-28(fp)

   for (cc = res = 0; cc != EOF; res += cc) {
  807abc:	e03ff515 	stw	zero,-44(fp)
  807ac0:	e0bff517 	ldw	r2,-44(fp)
  807ac4:	e0bff715 	stw	r2,-36(fp)
  807ac8:	00017806 	br	8080ac <f_printf+0x618>
      c = *str++;
  807acc:	e0bfff17 	ldw	r2,-4(fp)
  807ad0:	10c00044 	addi	r3,r2,1
  807ad4:	e0ffff15 	stw	r3,-4(fp)
  807ad8:	10800003 	ldbu	r2,0(r2)
  807adc:	e0bff405 	stb	r2,-48(fp)
      if (c == 0) break;         /* End of string */
  807ae0:	e0bff407 	ldb	r2,-48(fp)
  807ae4:	10017526 	beq	r2,zero,8080bc <f_printf+0x628>
      if (c != '%') {            /* Non escape character */
  807ae8:	e0bff407 	ldb	r2,-48(fp)
  807aec:	10800960 	cmpeqi	r2,r2,37
  807af0:	10000b1e 	bne	r2,zero,807b20 <f_printf+0x8c>
         cc = f_putc(c, fil);
  807af4:	e0bff407 	ldb	r2,-48(fp)
  807af8:	e17ffe17 	ldw	r5,-8(fp)
  807afc:	1009883a 	mov	r4,r2
  807b00:	08079880 	call	807988 <f_putc>
  807b04:	e0bff715 	stw	r2,-36(fp)
         if (cc != EOF) cc = 1;
  807b08:	e0bff717 	ldw	r2,-36(fp)
  807b0c:	10bfffe0 	cmpeqi	r2,r2,-1
  807b10:	10015f1e 	bne	r2,zero,808090 <f_printf+0x5fc>
  807b14:	00800044 	movi	r2,1
  807b18:	e0bff715 	stw	r2,-36(fp)
         continue;
  807b1c:	00015c06 	br	808090 <f_printf+0x5fc>
      }
      w = f = 0;
  807b20:	e03fef05 	stb	zero,-68(fp)
  807b24:	e03ff215 	stw	zero,-56(fp)
      c = *str++;
  807b28:	e0bfff17 	ldw	r2,-4(fp)
  807b2c:	10c00044 	addi	r3,r2,1
  807b30:	e0ffff15 	stw	r3,-4(fp)
  807b34:	10800003 	ldbu	r2,0(r2)
  807b38:	e0bff405 	stb	r2,-48(fp)
      if (c == '0') {            /* Flag: '0' padding */
  807b3c:	e0bff407 	ldb	r2,-48(fp)
  807b40:	10800c18 	cmpnei	r2,r2,48
  807b44:	1000081e 	bne	r2,zero,807b68 <f_printf+0xd4>
         f = 1; c = *str++;
  807b48:	00800044 	movi	r2,1
  807b4c:	e0bfef05 	stb	r2,-68(fp)
  807b50:	e0bfff17 	ldw	r2,-4(fp)
  807b54:	10c00044 	addi	r3,r2,1
  807b58:	e0ffff15 	stw	r3,-4(fp)
  807b5c:	10800003 	ldbu	r2,0(r2)
  807b60:	e0bff405 	stb	r2,-48(fp)
  807b64:	00001606 	br	807bc0 <f_printf+0x12c>
      } else {
         if (c == '-') {         /* Flag: left justified */
  807b68:	e0bff407 	ldb	r2,-48(fp)
  807b6c:	10800b58 	cmpnei	r2,r2,45
  807b70:	1000131e 	bne	r2,zero,807bc0 <f_printf+0x12c>
            f = 2; c = *str++;
  807b74:	00800084 	movi	r2,2
  807b78:	e0bfef05 	stb	r2,-68(fp)
  807b7c:	e0bfff17 	ldw	r2,-4(fp)
  807b80:	10c00044 	addi	r3,r2,1
  807b84:	e0ffff15 	stw	r3,-4(fp)
  807b88:	10800003 	ldbu	r2,0(r2)
  807b8c:	e0bff405 	stb	r2,-48(fp)
         }
      }
      while (IsDigit(c)) {    /* Precision */
  807b90:	00000b06 	br	807bc0 <f_printf+0x12c>
         w = w * 10 + c - '0';
  807b94:	e0bff217 	ldw	r2,-56(fp)
  807b98:	10c002a4 	muli	r3,r2,10
  807b9c:	e0bff407 	ldb	r2,-48(fp)
  807ba0:	1885883a 	add	r2,r3,r2
  807ba4:	10bff404 	addi	r2,r2,-48
  807ba8:	e0bff215 	stw	r2,-56(fp)
         c = *str++;
  807bac:	e0bfff17 	ldw	r2,-4(fp)
  807bb0:	10c00044 	addi	r3,r2,1
  807bb4:	e0ffff15 	stw	r3,-4(fp)
  807bb8:	10800003 	ldbu	r2,0(r2)
  807bbc:	e0bff405 	stb	r2,-48(fp)
      } else {
         if (c == '-') {         /* Flag: left justified */
            f = 2; c = *str++;
         }
      }
      while (IsDigit(c)) {    /* Precision */
  807bc0:	e0bff407 	ldb	r2,-48(fp)
  807bc4:	10800c10 	cmplti	r2,r2,48
  807bc8:	1000031e 	bne	r2,zero,807bd8 <f_printf+0x144>
  807bcc:	e0bff407 	ldb	r2,-48(fp)
  807bd0:	10800e90 	cmplti	r2,r2,58
  807bd4:	103fef1e 	bne	r2,zero,807b94 <__alt_data_end+0xff807b94>
         w = w * 10 + c - '0';
         c = *str++;
      }
      if (c == 'l' || c == 'L') {   /* Prefix: Size is long int */
  807bd8:	e0bff407 	ldb	r2,-48(fp)
  807bdc:	10801b20 	cmpeqi	r2,r2,108
  807be0:	1000031e 	bne	r2,zero,807bf0 <f_printf+0x15c>
  807be4:	e0bff407 	ldb	r2,-48(fp)
  807be8:	10801318 	cmpnei	r2,r2,76
  807bec:	1000081e 	bne	r2,zero,807c10 <f_printf+0x17c>
         f |= 4; c = *str++;
  807bf0:	e0bfef03 	ldbu	r2,-68(fp)
  807bf4:	10800114 	ori	r2,r2,4
  807bf8:	e0bfef05 	stb	r2,-68(fp)
  807bfc:	e0bfff17 	ldw	r2,-4(fp)
  807c00:	10c00044 	addi	r3,r2,1
  807c04:	e0ffff15 	stw	r3,-4(fp)
  807c08:	10800003 	ldbu	r2,0(r2)
  807c0c:	e0bff405 	stb	r2,-48(fp)
      }
      if (!c) break;
  807c10:	e0bff407 	ldb	r2,-48(fp)
  807c14:	10012b26 	beq	r2,zero,8080c4 <f_printf+0x630>
      d = c;
  807c18:	e0bff403 	ldbu	r2,-48(fp)
  807c1c:	e0bff445 	stb	r2,-47(fp)
      if (IsLower(d)) d -= 0x20;
  807c20:	e0bff447 	ldb	r2,-47(fp)
  807c24:	10801850 	cmplti	r2,r2,97
  807c28:	1000061e 	bne	r2,zero,807c44 <f_printf+0x1b0>
  807c2c:	e0bff447 	ldb	r2,-47(fp)
  807c30:	10801ec8 	cmpgei	r2,r2,123
  807c34:	1000031e 	bne	r2,zero,807c44 <f_printf+0x1b0>
  807c38:	e0bff443 	ldbu	r2,-47(fp)
  807c3c:	10bff804 	addi	r2,r2,-32
  807c40:	e0bff445 	stb	r2,-47(fp)
      switch (d) {            /* Type is... */
  807c44:	e0bff447 	ldb	r2,-47(fp)
  807c48:	10bfef84 	addi	r2,r2,-66
  807c4c:	10c005e8 	cmpgeui	r3,r2,23
  807c50:	1800751e 	bne	r3,zero,807e28 <f_printf+0x394>
  807c54:	100690ba 	slli	r3,r2,2
  807c58:	00802034 	movhi	r2,128
  807c5c:	109f1b04 	addi	r2,r2,31852
  807c60:	1885883a 	add	r2,r3,r2
  807c64:	10800017 	ldw	r2,0(r2)
  807c68:	1000683a 	jmp	r2
  807c6c:	00807df8 	rdprs	r2,zero,503
  807c70:	00807dc8 	cmpgei	r2,zero,503
  807c74:	00807e10 	cmplti	r2,zero,504
  807c78:	00807e28 	cmpgeui	r2,zero,504
  807c7c:	00807e28 	cmpgeui	r2,zero,504
  807c80:	00807e28 	cmpgeui	r2,zero,504
  807c84:	00807e28 	cmpgeui	r2,zero,504
  807c88:	00807e28 	cmpgeui	r2,zero,504
  807c8c:	00807e28 	cmpgeui	r2,zero,504
  807c90:	00807e28 	cmpgeui	r2,zero,504
  807c94:	00807e28 	cmpgeui	r2,zero,504
  807c98:	00807e28 	cmpgeui	r2,zero,504
  807c9c:	00807e28 	cmpgeui	r2,zero,504
  807ca0:	00807e04 	movi	r2,504
  807ca4:	00807e28 	cmpgeui	r2,zero,504
  807ca8:	00807e28 	cmpgeui	r2,zero,504
  807cac:	00807e28 	cmpgeui	r2,zero,504
  807cb0:	00807cc8 	cmpgei	r2,zero,499
  807cb4:	00807e28 	cmpgeui	r2,zero,504
  807cb8:	00807e10 	cmplti	r2,zero,504
  807cbc:	00807e28 	cmpgeui	r2,zero,504
  807cc0:	00807e28 	cmpgeui	r2,zero,504
  807cc4:	00807e1c 	xori	r2,zero,504
      case 'S' :              /* String */
         p = va_arg(arp, TCHAR*);
  807cc8:	e0bff917 	ldw	r2,-28(fp)
  807ccc:	10c00104 	addi	r3,r2,4
  807cd0:	e0fff915 	stw	r3,-28(fp)
  807cd4:	10800017 	ldw	r2,0(r2)
  807cd8:	e0bff815 	stw	r2,-32(fp)
         for (j = 0; p[j]; j++) ;
  807cdc:	e03ff115 	stw	zero,-60(fp)
  807ce0:	00000306 	br	807cf0 <f_printf+0x25c>
  807ce4:	e0bff117 	ldw	r2,-60(fp)
  807ce8:	10800044 	addi	r2,r2,1
  807cec:	e0bff115 	stw	r2,-60(fp)
  807cf0:	e0fff817 	ldw	r3,-32(fp)
  807cf4:	e0bff117 	ldw	r2,-60(fp)
  807cf8:	1885883a 	add	r2,r3,r2
  807cfc:	10800003 	ldbu	r2,0(r2)
  807d00:	10803fcc 	andi	r2,r2,255
  807d04:	1080201c 	xori	r2,r2,128
  807d08:	10bfe004 	addi	r2,r2,-128
  807d0c:	103ff51e 	bne	r2,zero,807ce4 <__alt_data_end+0xff807ce4>
         chc = 0;
  807d10:	e03ff615 	stw	zero,-40(fp)
         if (!(f & 2)) {
  807d14:	e0bfef03 	ldbu	r2,-68(fp)
  807d18:	1080008c 	andi	r2,r2,2
  807d1c:	10000e1e 	bne	r2,zero,807d58 <f_printf+0x2c4>
            while (j++ < w) chc += (cc = f_putc(' ', fil));
  807d20:	00000806 	br	807d44 <f_printf+0x2b0>
  807d24:	e17ffe17 	ldw	r5,-8(fp)
  807d28:	01000804 	movi	r4,32
  807d2c:	08079880 	call	807988 <f_putc>
  807d30:	e0bff715 	stw	r2,-36(fp)
  807d34:	e0bff717 	ldw	r2,-36(fp)
  807d38:	e0fff617 	ldw	r3,-40(fp)
  807d3c:	1885883a 	add	r2,r3,r2
  807d40:	e0bff615 	stw	r2,-40(fp)
  807d44:	e0bff117 	ldw	r2,-60(fp)
  807d48:	10c00044 	addi	r3,r2,1
  807d4c:	e0fff115 	stw	r3,-60(fp)
  807d50:	e0fff217 	ldw	r3,-56(fp)
  807d54:	10fff336 	bltu	r2,r3,807d24 <__alt_data_end+0xff807d24>
         }
         chc += (cc = f_puts(p, fil));
  807d58:	e17ffe17 	ldw	r5,-8(fp)
  807d5c:	e13ff817 	ldw	r4,-32(fp)
  807d60:	08079fc0 	call	8079fc <f_puts>
  807d64:	e0bff715 	stw	r2,-36(fp)
  807d68:	e0bff717 	ldw	r2,-36(fp)
  807d6c:	e0fff617 	ldw	r3,-40(fp)
  807d70:	1885883a 	add	r2,r3,r2
  807d74:	e0bff615 	stw	r2,-40(fp)
         while (j++ < w) chc += (cc = f_putc(' ', fil));
  807d78:	00000806 	br	807d9c <f_printf+0x308>
  807d7c:	e17ffe17 	ldw	r5,-8(fp)
  807d80:	01000804 	movi	r4,32
  807d84:	08079880 	call	807988 <f_putc>
  807d88:	e0bff715 	stw	r2,-36(fp)
  807d8c:	e0bff717 	ldw	r2,-36(fp)
  807d90:	e0fff617 	ldw	r3,-40(fp)
  807d94:	1885883a 	add	r2,r3,r2
  807d98:	e0bff615 	stw	r2,-40(fp)
  807d9c:	e0bff117 	ldw	r2,-60(fp)
  807da0:	10c00044 	addi	r3,r2,1
  807da4:	e0fff115 	stw	r3,-60(fp)
  807da8:	e0fff217 	ldw	r3,-56(fp)
  807dac:	10fff336 	bltu	r2,r3,807d7c <__alt_data_end+0xff807d7c>
         if (cc != EOF) cc = chc;
  807db0:	e0bff717 	ldw	r2,-36(fp)
  807db4:	10bfffe0 	cmpeqi	r2,r2,-1
  807db8:	1000b71e 	bne	r2,zero,808098 <f_printf+0x604>
  807dbc:	e0bff617 	ldw	r2,-40(fp)
  807dc0:	e0bff715 	stw	r2,-36(fp)
         continue;
  807dc4:	0000b406 	br	808098 <f_printf+0x604>
      case 'C' :              /* Character */
         cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
  807dc8:	e0bff917 	ldw	r2,-28(fp)
  807dcc:	10c00104 	addi	r3,r2,4
  807dd0:	e0fff915 	stw	r3,-28(fp)
  807dd4:	10800017 	ldw	r2,0(r2)
  807dd8:	10803fcc 	andi	r2,r2,255
  807ddc:	1080201c 	xori	r2,r2,128
  807de0:	10bfe004 	addi	r2,r2,-128
  807de4:	e17ffe17 	ldw	r5,-8(fp)
  807de8:	1009883a 	mov	r4,r2
  807dec:	08079880 	call	807988 <f_putc>
  807df0:	e0bff715 	stw	r2,-36(fp)
  807df4:	0000a906 	br	80809c <f_printf+0x608>
      case 'B' :              /* Binary */
         r = 2; break;
  807df8:	00800084 	movi	r2,2
  807dfc:	e0bfef45 	stb	r2,-67(fp)
  807e00:	00000f06 	br	807e40 <f_printf+0x3ac>
      case 'O' :              /* Octal */
         r = 8; break;
  807e04:	00800204 	movi	r2,8
  807e08:	e0bfef45 	stb	r2,-67(fp)
  807e0c:	00000c06 	br	807e40 <f_printf+0x3ac>
      case 'D' :              /* Signed decimal */
      case 'U' :              /* Unsigned decimal */
         r = 10; break;
  807e10:	00800284 	movi	r2,10
  807e14:	e0bfef45 	stb	r2,-67(fp)
  807e18:	00000906 	br	807e40 <f_printf+0x3ac>
      case 'X' :              /* Hexdecimal */
         r = 16; break;
  807e1c:	00800404 	movi	r2,16
  807e20:	e0bfef45 	stb	r2,-67(fp)
  807e24:	00000606 	br	807e40 <f_printf+0x3ac>
      default:             /* Unknown type (passthrough) */
         cc = f_putc(c, fil); continue;
  807e28:	e0bff407 	ldb	r2,-48(fp)
  807e2c:	e17ffe17 	ldw	r5,-8(fp)
  807e30:	1009883a 	mov	r4,r2
  807e34:	08079880 	call	807988 <f_putc>
  807e38:	e0bff715 	stw	r2,-36(fp)
  807e3c:	00009706 	br	80809c <f_printf+0x608>
      }

      /* Get an argument and put it in numeral */
      v = (f & 4) ? (uint32_t)va_arg(arp, long) : ((d == 'D') ? (uint32_t)(long)va_arg(arp, int) : (uint32_t)va_arg(arp, unsigned int));
  807e40:	e0bfef03 	ldbu	r2,-68(fp)
  807e44:	1080010c 	andi	r2,r2,4
  807e48:	10000526 	beq	r2,zero,807e60 <f_printf+0x3cc>
  807e4c:	e0bff917 	ldw	r2,-28(fp)
  807e50:	10c00104 	addi	r3,r2,4
  807e54:	e0fff915 	stw	r3,-28(fp)
  807e58:	10800017 	ldw	r2,0(r2)
  807e5c:	00000c06 	br	807e90 <f_printf+0x3fc>
  807e60:	e0bff447 	ldb	r2,-47(fp)
  807e64:	10801118 	cmpnei	r2,r2,68
  807e68:	1000051e 	bne	r2,zero,807e80 <f_printf+0x3ec>
  807e6c:	e0bff917 	ldw	r2,-28(fp)
  807e70:	10c00104 	addi	r3,r2,4
  807e74:	e0fff915 	stw	r3,-28(fp)
  807e78:	10800017 	ldw	r2,0(r2)
  807e7c:	00000406 	br	807e90 <f_printf+0x3fc>
  807e80:	e0bff917 	ldw	r2,-28(fp)
  807e84:	10c00104 	addi	r3,r2,4
  807e88:	e0fff915 	stw	r3,-28(fp)
  807e8c:	10800017 	ldw	r2,0(r2)
  807e90:	e0bff315 	stw	r2,-52(fp)
      if (d == 'D' && (v & 0x80000000)) {
  807e94:	e0bff447 	ldb	r2,-47(fp)
  807e98:	10801118 	cmpnei	r2,r2,68
  807e9c:	1000081e 	bne	r2,zero,807ec0 <f_printf+0x42c>
  807ea0:	e0bff317 	ldw	r2,-52(fp)
  807ea4:	1000060e 	bge	r2,zero,807ec0 <f_printf+0x42c>
         v = 0 - v;
  807ea8:	e0bff317 	ldw	r2,-52(fp)
  807eac:	0085c83a 	sub	r2,zero,r2
  807eb0:	e0bff315 	stw	r2,-52(fp)
         f |= 8;
  807eb4:	e0bfef03 	ldbu	r2,-68(fp)
  807eb8:	10800214 	ori	r2,r2,8
  807ebc:	e0bfef05 	stb	r2,-68(fp)
      }
      i = 0;
  807ec0:	e03ff015 	stw	zero,-64(fp)
      do {
         d = (TCHAR)(v % r); v /= r;
  807ec4:	e0ffef43 	ldbu	r3,-67(fp)
  807ec8:	e0bff317 	ldw	r2,-52(fp)
  807ecc:	180b883a 	mov	r5,r3
  807ed0:	1009883a 	mov	r4,r2
  807ed4:	080a5040 	call	80a504 <__umodsi3>
  807ed8:	e0bff445 	stb	r2,-47(fp)
  807edc:	e0bfef43 	ldbu	r2,-67(fp)
  807ee0:	100b883a 	mov	r5,r2
  807ee4:	e13ff317 	ldw	r4,-52(fp)
  807ee8:	080a4a00 	call	80a4a0 <__udivsi3>
  807eec:	e0bff315 	stw	r2,-52(fp)
         if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
  807ef0:	e0bff447 	ldb	r2,-47(fp)
  807ef4:	10800290 	cmplti	r2,r2,10
  807ef8:	1000091e 	bne	r2,zero,807f20 <f_printf+0x48c>
  807efc:	e0bff407 	ldb	r2,-48(fp)
  807f00:	10801e18 	cmpnei	r2,r2,120
  807f04:	1000021e 	bne	r2,zero,807f10 <f_printf+0x47c>
  807f08:	008009c4 	movi	r2,39
  807f0c:	00000106 	br	807f14 <f_printf+0x480>
  807f10:	008001c4 	movi	r2,7
  807f14:	e0fff443 	ldbu	r3,-47(fp)
  807f18:	10c5883a 	add	r2,r2,r3
  807f1c:	e0bff445 	stb	r2,-47(fp)
         s[i++] = d + '0';
  807f20:	e0bff017 	ldw	r2,-64(fp)
  807f24:	10c00044 	addi	r3,r2,1
  807f28:	e0fff015 	stw	r3,-64(fp)
  807f2c:	e0fff443 	ldbu	r3,-47(fp)
  807f30:	18c00c04 	addi	r3,r3,48
  807f34:	1809883a 	mov	r4,r3
  807f38:	e0fffa04 	addi	r3,fp,-24
  807f3c:	1885883a 	add	r2,r3,r2
  807f40:	11000005 	stb	r4,0(r2)
      } while (v && i < sizeof(s) / sizeof(s[0]));
  807f44:	e0bff317 	ldw	r2,-52(fp)
  807f48:	10000326 	beq	r2,zero,807f58 <f_printf+0x4c4>
  807f4c:	e0bff017 	ldw	r2,-64(fp)
  807f50:	10800430 	cmpltui	r2,r2,16
  807f54:	103fdb1e 	bne	r2,zero,807ec4 <__alt_data_end+0xff807ec4>
      if (f & 8) s[i++] = '-';
  807f58:	e0bfef03 	ldbu	r2,-68(fp)
  807f5c:	1080020c 	andi	r2,r2,8
  807f60:	10000726 	beq	r2,zero,807f80 <f_printf+0x4ec>
  807f64:	e0bff017 	ldw	r2,-64(fp)
  807f68:	10c00044 	addi	r3,r2,1
  807f6c:	e0fff015 	stw	r3,-64(fp)
  807f70:	e0fffa04 	addi	r3,fp,-24
  807f74:	1885883a 	add	r2,r3,r2
  807f78:	00c00b44 	movi	r3,45
  807f7c:	10c00005 	stb	r3,0(r2)
      j = i; d = (f & 1) ? '0' : ' ';
  807f80:	e0bff017 	ldw	r2,-64(fp)
  807f84:	e0bff115 	stw	r2,-60(fp)
  807f88:	e0bfef03 	ldbu	r2,-68(fp)
  807f8c:	1080004c 	andi	r2,r2,1
  807f90:	10000226 	beq	r2,zero,807f9c <f_printf+0x508>
  807f94:	00800c04 	movi	r2,48
  807f98:	00000106 	br	807fa0 <f_printf+0x50c>
  807f9c:	00800804 	movi	r2,32
  807fa0:	e0bff445 	stb	r2,-47(fp)
      res = 0;
  807fa4:	e03ff515 	stw	zero,-44(fp)
      while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
  807fa8:	00000906 	br	807fd0 <f_printf+0x53c>
  807fac:	e0bff447 	ldb	r2,-47(fp)
  807fb0:	e17ffe17 	ldw	r5,-8(fp)
  807fb4:	1009883a 	mov	r4,r2
  807fb8:	08079880 	call	807988 <f_putc>
  807fbc:	e0bff715 	stw	r2,-36(fp)
  807fc0:	e0bff717 	ldw	r2,-36(fp)
  807fc4:	e0fff517 	ldw	r3,-44(fp)
  807fc8:	1885883a 	add	r2,r3,r2
  807fcc:	e0bff515 	stw	r2,-44(fp)
  807fd0:	e0bfef03 	ldbu	r2,-68(fp)
  807fd4:	1080008c 	andi	r2,r2,2
  807fd8:	1000051e 	bne	r2,zero,807ff0 <f_printf+0x55c>
  807fdc:	e0bff117 	ldw	r2,-60(fp)
  807fe0:	10c00044 	addi	r3,r2,1
  807fe4:	e0fff115 	stw	r3,-60(fp)
  807fe8:	e0fff217 	ldw	r3,-56(fp)
  807fec:	10ffef36 	bltu	r2,r3,807fac <__alt_data_end+0xff807fac>
      do res += (cc = f_putc(s[--i], fil)); while(i);
  807ff0:	e0bff017 	ldw	r2,-64(fp)
  807ff4:	10bfffc4 	addi	r2,r2,-1
  807ff8:	e0bff015 	stw	r2,-64(fp)
  807ffc:	e0fffa04 	addi	r3,fp,-24
  808000:	e0bff017 	ldw	r2,-64(fp)
  808004:	1885883a 	add	r2,r3,r2
  808008:	10800003 	ldbu	r2,0(r2)
  80800c:	10803fcc 	andi	r2,r2,255
  808010:	1080201c 	xori	r2,r2,128
  808014:	10bfe004 	addi	r2,r2,-128
  808018:	e17ffe17 	ldw	r5,-8(fp)
  80801c:	1009883a 	mov	r4,r2
  808020:	08079880 	call	807988 <f_putc>
  808024:	e0bff715 	stw	r2,-36(fp)
  808028:	e0bff717 	ldw	r2,-36(fp)
  80802c:	e0fff517 	ldw	r3,-44(fp)
  808030:	1885883a 	add	r2,r3,r2
  808034:	e0bff515 	stw	r2,-44(fp)
  808038:	e0bff017 	ldw	r2,-64(fp)
  80803c:	103fec1e 	bne	r2,zero,807ff0 <__alt_data_end+0xff807ff0>
      while (j++ < w) res += (cc = f_putc(' ', fil));
  808040:	00000806 	br	808064 <f_printf+0x5d0>
  808044:	e17ffe17 	ldw	r5,-8(fp)
  808048:	01000804 	movi	r4,32
  80804c:	08079880 	call	807988 <f_putc>
  808050:	e0bff715 	stw	r2,-36(fp)
  808054:	e0bff717 	ldw	r2,-36(fp)
  808058:	e0fff517 	ldw	r3,-44(fp)
  80805c:	1885883a 	add	r2,r3,r2
  808060:	e0bff515 	stw	r2,-44(fp)
  808064:	e0bff117 	ldw	r2,-60(fp)
  808068:	10c00044 	addi	r3,r2,1
  80806c:	e0fff115 	stw	r3,-60(fp)
  808070:	e0fff217 	ldw	r3,-56(fp)
  808074:	10fff336 	bltu	r2,r3,808044 <__alt_data_end+0xff808044>
      if (cc != EOF) cc = res;
  808078:	e0bff717 	ldw	r2,-36(fp)
  80807c:	10bfffe0 	cmpeqi	r2,r2,-1
  808080:	1000061e 	bne	r2,zero,80809c <f_printf+0x608>
  808084:	e0bff517 	ldw	r2,-44(fp)
  808088:	e0bff715 	stw	r2,-36(fp)
  80808c:	00000306 	br	80809c <f_printf+0x608>
      c = *str++;
      if (c == 0) break;         /* End of string */
      if (c != '%') {            /* Non escape character */
         cc = f_putc(c, fil);
         if (cc != EOF) cc = 1;
         continue;
  808090:	0001883a 	nop
  808094:	00000106 	br	80809c <f_printf+0x608>
            while (j++ < w) chc += (cc = f_putc(' ', fil));
         }
         chc += (cc = f_puts(p, fil));
         while (j++ < w) chc += (cc = f_putc(' ', fil));
         if (cc != EOF) cc = chc;
         continue;
  808098:	0001883a 	nop
   int res, chc, cc;


   va_start(arp, str);

   for (cc = res = 0; cc != EOF; res += cc) {
  80809c:	e0fff517 	ldw	r3,-44(fp)
  8080a0:	e0bff717 	ldw	r2,-36(fp)
  8080a4:	1885883a 	add	r2,r3,r2
  8080a8:	e0bff515 	stw	r2,-44(fp)
  8080ac:	e0bff717 	ldw	r2,-36(fp)
  8080b0:	10bfffd8 	cmpnei	r2,r2,-1
  8080b4:	103e851e 	bne	r2,zero,807acc <__alt_data_end+0xff807acc>
  8080b8:	00000306 	br	8080c8 <f_printf+0x634>
      c = *str++;
      if (c == 0) break;         /* End of string */
  8080bc:	0001883a 	nop
  8080c0:	00000106 	br	8080c8 <f_printf+0x634>
         c = *str++;
      }
      if (c == 'l' || c == 'L') {   /* Prefix: Size is long int */
         f |= 4; c = *str++;
      }
      if (!c) break;
  8080c4:	0001883a 	nop
      while (j++ < w) res += (cc = f_putc(' ', fil));
      if (cc != EOF) cc = res;
   }

   va_end(arp);
   return (cc == EOF) ? cc : res;
  8080c8:	e0bff717 	ldw	r2,-36(fp)
  8080cc:	10bfffd8 	cmpnei	r2,r2,-1
  8080d0:	1000021e 	bne	r2,zero,8080dc <f_printf+0x648>
  8080d4:	e0bff717 	ldw	r2,-36(fp)
  8080d8:	00000106 	br	8080e0 <f_printf+0x64c>
  8080dc:	e0bff517 	ldw	r2,-44(fp)
}
  8080e0:	e037883a 	mov	sp,fp
  8080e4:	dfc00117 	ldw	ra,4(sp)
  8080e8:	df000017 	ldw	fp,0(sp)
  8080ec:	dec00404 	addi	sp,sp,16
  8080f0:	f800283a 	ret

008080f4 <isWav>:

/*=========================================================================*/
/*  DEFINE: Definition of all local Procedures                             */
/*=========================================================================*/

int isWav(const uint8_t* buf, uint64_t len) {
  8080f4:	defff904 	addi	sp,sp,-28
  8080f8:	dfc00615 	stw	ra,24(sp)
  8080fc:	df000515 	stw	fp,20(sp)
  808100:	df000504 	addi	fp,sp,20
  808104:	e13ffd15 	stw	r4,-12(fp)
  808108:	e17ffe15 	stw	r5,-8(fp)
  80810c:	e1bfff15 	stw	r6,-4(fp)
	// files with less than 12 bytes are not WAVs by definition
	if (len < 12) {
  808110:	e0bfff17 	ldw	r2,-4(fp)
  808114:	1000071e 	bne	r2,zero,808134 <isWav+0x40>
  808118:	e0bfff17 	ldw	r2,-4(fp)
  80811c:	1000031e 	bne	r2,zero,80812c <isWav+0x38>
  808120:	e0bffe17 	ldw	r2,-8(fp)
  808124:	10800328 	cmpgeui	r2,r2,12
  808128:	1000021e 	bne	r2,zero,808134 <isWav+0x40>
		return 0;
  80812c:	0005883a 	mov	r2,zero
  808130:	00002206 	br	8081bc <isWav+0xc8>
	}
	const uint8_t wav_form[] = {0x57, 0x41, 0x56, 0x45};
  808134:	008015c4 	movi	r2,87
  808138:	e0bffb05 	stb	r2,-20(fp)
  80813c:	00801044 	movi	r2,65
  808140:	e0bffb45 	stb	r2,-19(fp)
  808144:	00801584 	movi	r2,86
  808148:	e0bffb85 	stb	r2,-18(fp)
  80814c:	00801144 	movi	r2,69
  808150:	e0bffbc5 	stb	r2,-17(fp)
	const uint8_t riff_form[] = {0x52, 0x49, 0x46, 0x46};
  808154:	00801484 	movi	r2,82
  808158:	e0bffc05 	stb	r2,-16(fp)
  80815c:	00801244 	movi	r2,73
  808160:	e0bffc45 	stb	r2,-15(fp)
  808164:	00801184 	movi	r2,70
  808168:	e0bffc85 	stb	r2,-14(fp)
  80816c:	00801184 	movi	r2,70
  808170:	e0bffcc5 	stb	r2,-13(fp)

	if (memcmp(buf, riff_form, sizeof(riff_form)) != 0) {
  808174:	e0bffc04 	addi	r2,fp,-16
  808178:	01800104 	movi	r6,4
  80817c:	100b883a 	mov	r5,r2
  808180:	e13ffd17 	ldw	r4,-12(fp)
  808184:	080a6540 	call	80a654 <memcmp>
  808188:	10000226 	beq	r2,zero,808194 <isWav+0xa0>
		return 0;
  80818c:	0005883a 	mov	r2,zero
  808190:	00000a06 	br	8081bc <isWav+0xc8>
	}

	if (memcmp(buf+8, wav_form, sizeof(wav_form)) != 0) {
  808194:	e0bffd17 	ldw	r2,-12(fp)
  808198:	10800204 	addi	r2,r2,8
  80819c:	01800104 	movi	r6,4
  8081a0:	e17ffb04 	addi	r5,fp,-20
  8081a4:	1009883a 	mov	r4,r2
  8081a8:	080a6540 	call	80a654 <memcmp>
  8081ac:	10000226 	beq	r2,zero,8081b8 <isWav+0xc4>
		return 0;
  8081b0:	0005883a 	mov	r2,zero
  8081b4:	00000106 	br	8081bc <isWav+0xc8>
	}

	return 1;
  8081b8:	00800044 	movi	r2,1
}
  8081bc:	e037883a 	mov	sp,fp
  8081c0:	dfc00117 	ldw	ra,4(sp)
  8081c4:	df000017 	ldw	fp,0(sp)
  8081c8:	dec00204 	addi	sp,sp,8
  8081cc:	f800283a 	ret

008081d0 <TimerFunction>:
/*                                                                         */
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static alt_u32 TimerFunction(void *context) {
  8081d0:	defffd04 	addi	sp,sp,-12
  8081d4:	dfc00215 	stw	ra,8(sp)
  8081d8:	df000115 	stw	fp,4(sp)
  8081dc:	df000104 	addi	fp,sp,4
  8081e0:	e13fff15 	stw	r4,-4(fp)
	static unsigned short wTimer10ms = 0;

	(void) context;

	Systick++;
  8081e4:	d0a74817 	ldw	r2,-25312(gp)
  8081e8:	10800044 	addi	r2,r2,1
  8081ec:	d0a74815 	stw	r2,-25312(gp)
	wTimer10ms++;
  8081f0:	d0a7498b 	ldhu	r2,-25306(gp)
  8081f4:	10800044 	addi	r2,r2,1
  8081f8:	d0a7498d 	sth	r2,-25306(gp)
	Timer++; /* Performance counter for this module */
  8081fc:	d0a7490b 	ldhu	r2,-25308(gp)
  808200:	10800044 	addi	r2,r2,1
  808204:	d0a7490d 	sth	r2,-25308(gp)

	if (wTimer10ms == 10) {
  808208:	d0a7498b 	ldhu	r2,-25306(gp)
  80820c:	10bfffcc 	andi	r2,r2,65535
  808210:	10800298 	cmpnei	r2,r2,10
  808214:	1000021e 	bne	r2,zero,808220 <TimerFunction+0x50>
		wTimer10ms = 0;
  808218:	d027498d 	sth	zero,-25306(gp)
		ffs_DiskIOTimerproc(); /* Drive timer procedure of low level disk I/O module */
  80821c:	0800a780 	call	800a78 <ffs_DiskIOTimerproc>
	}

	return (1);
  808220:	00800044 	movi	r2,1
} /* TimerFunction */
  808224:	e037883a 	mov	sp,fp
  808228:	dfc00117 	ldw	ra,4(sp)
  80822c:	df000017 	ldw	fp,0(sp)
  808230:	dec00204 	addi	sp,sp,8
  808234:	f800283a 	ret

00808238 <IoInit>:
/*                                                                         */
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void IoInit(void) {
  808238:	defffe04 	addi	sp,sp,-8
  80823c:	dfc00115 	stw	ra,4(sp)
  808240:	df000015 	stw	fp,0(sp)
  808244:	d839883a 	mov	fp,sp
	uart0_init(115200);
  808248:	010000b4 	movhi	r4,2
  80824c:	21308004 	addi	r4,r4,-15872
  808250:	080a2f80 	call	80a2f8 <uart0_init>

	/* Init diskio interface */
	ffs_DiskIOInit();
  808254:	0800a4c0 	call	800a4c <ffs_DiskIOInit>

	//SetHighSpeed();

	/* Init timer system */
	alt_alarm_start(&alarm, 1, &TimerFunction, NULL);
  808258:	000f883a 	mov	r7,zero
  80825c:	01802074 	movhi	r6,129
  808260:	31a07404 	addi	r6,r6,-32304
  808264:	01400044 	movi	r5,1
  808268:	01002074 	movhi	r4,129
  80826c:	2119bf04 	addi	r4,r4,26364
  808270:	080d8cc0 	call	80d8cc <alt_alarm_start>

} /* IoInit */
  808274:	0001883a 	nop
  808278:	e037883a 	mov	sp,fp
  80827c:	dfc00117 	ldw	ra,4(sp)
  808280:	df000017 	ldw	fp,0(sp)
  808284:	dec00204 	addi	sp,sp,8
  808288:	f800283a 	ret

0080828c <scan_files>:
FATFS Fatfs[_VOLUMES]; /* File system object for each logical drive */
FIL File1, File2; /* File objects */
DIR Dir; /* Directory object */
uint8_t Buff[1024] __attribute__ ((aligned(4))); /* Working buffer */

static FRESULT scan_files(char *path) {
  80828c:	defff304 	addi	sp,sp,-52
  808290:	dfc00c15 	stw	ra,48(sp)
  808294:	df000b15 	stw	fp,44(sp)
  808298:	df000b04 	addi	fp,sp,44
  80829c:	e13fff15 	stw	r4,-4(fp)
	DIR dirs;
	FRESULT res;
	uint8_t i;
	char *fn;

	if ((res = f_opendir(&dirs, path)) == FR_OK) {
  8082a0:	e0bff804 	addi	r2,fp,-32
  8082a4:	e17fff17 	ldw	r5,-4(fp)
  8082a8:	1009883a 	mov	r4,r2
  8082ac:	08056a40 	call	8056a4 <f_opendir>
  8082b0:	e0bff515 	stw	r2,-44(fp)
  8082b4:	e0bff517 	ldw	r2,-44(fp)
  8082b8:	10003e1e 	bne	r2,zero,8083b4 <scan_files+0x128>
		i = (uint8_t) strlen(path);
  8082bc:	e13fff17 	ldw	r4,-4(fp)
  8082c0:	080ab4c0 	call	80ab4c <strlen>
  8082c4:	e0bff605 	stb	r2,-40(fp)
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
  8082c8:	00002b06 	br	808378 <scan_files+0xec>
			if (_FS_RPATH && Finfo.fname[0] == '.')
				continue;
#if _USE_LFN
			fn = *Finfo.lfname ? Finfo.lfname : Finfo.fname;
#else
			fn = Finfo.fname;
  8082cc:	00802074 	movhi	r2,129
  8082d0:	109ae644 	addi	r2,r2,27545
  8082d4:	e0bff715 	stw	r2,-36(fp)
#endif
			if (Finfo.fattrib & AM_DIR) {
  8082d8:	00802074 	movhi	r2,129
  8082dc:	109ae404 	addi	r2,r2,27536
  8082e0:	10800203 	ldbu	r2,8(r2)
  8082e4:	10803fcc 	andi	r2,r2,255
  8082e8:	1080040c 	andi	r2,r2,16
  8082ec:	10001926 	beq	r2,zero,808354 <scan_files+0xc8>
				acc_dirs++;
  8082f0:	d0a74a0b 	ldhu	r2,-25304(gp)
  8082f4:	10800044 	addi	r2,r2,1
  8082f8:	d0a74a0d 	sth	r2,-25304(gp)
				*(path + i) = '/';
  8082fc:	e0bff603 	ldbu	r2,-40(fp)
  808300:	e0ffff17 	ldw	r3,-4(fp)
  808304:	1885883a 	add	r2,r3,r2
  808308:	00c00bc4 	movi	r3,47
  80830c:	10c00005 	stb	r3,0(r2)
				strcpy(path + i + 1, fn);
  808310:	e0bff603 	ldbu	r2,-40(fp)
  808314:	10800044 	addi	r2,r2,1
  808318:	e0ffff17 	ldw	r3,-4(fp)
  80831c:	1885883a 	add	r2,r3,r2
  808320:	e17ff717 	ldw	r5,-36(fp)
  808324:	1009883a 	mov	r4,r2
  808328:	080aabc0 	call	80aabc <strcpy>
				res = scan_files(path);
  80832c:	e13fff17 	ldw	r4,-4(fp)
  808330:	080828c0 	call	80828c <scan_files>
  808334:	e0bff515 	stw	r2,-44(fp)
				*(path + i) = '\0';
  808338:	e0bff603 	ldbu	r2,-40(fp)
  80833c:	e0ffff17 	ldw	r3,-4(fp)
  808340:	1885883a 	add	r2,r3,r2
  808344:	10000005 	stb	zero,0(r2)
				if (res != FR_OK)
  808348:	e0bff517 	ldw	r2,-44(fp)
  80834c:	10000a26 	beq	r2,zero,808378 <scan_files+0xec>
					break;
  808350:	00001806 	br	8083b4 <scan_files+0x128>
			} else {
				//      xprintf("%s/%s\n", path, fn);
				acc_files++;
  808354:	d0a74a8b 	ldhu	r2,-25302(gp)
  808358:	10800044 	addi	r2,r2,1
  80835c:	d0a74a8d 	sth	r2,-25302(gp)
				acc_size += Finfo.fsize;
  808360:	00802074 	movhi	r2,129
  808364:	109ae404 	addi	r2,r2,27536
  808368:	10c00017 	ldw	r3,0(r2)
  80836c:	d0a74b17 	ldw	r2,-25300(gp)
  808370:	1885883a 	add	r2,r3,r2
  808374:	d0a74b15 	stw	r2,-25300(gp)
	uint8_t i;
	char *fn;

	if ((res = f_opendir(&dirs, path)) == FR_OK) {
		i = (uint8_t) strlen(path);
		while (((res = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0]) {
  808378:	e0bff804 	addi	r2,fp,-32
  80837c:	01402074 	movhi	r5,129
  808380:	295ae404 	addi	r5,r5,27536
  808384:	1009883a 	mov	r4,r2
  808388:	08058140 	call	805814 <f_readdir>
  80838c:	e0bff515 	stw	r2,-44(fp)
  808390:	e0bff517 	ldw	r2,-44(fp)
  808394:	1000071e 	bne	r2,zero,8083b4 <scan_files+0x128>
  808398:	00802074 	movhi	r2,129
  80839c:	109ae404 	addi	r2,r2,27536
  8083a0:	10800243 	ldbu	r2,9(r2)
  8083a4:	10803fcc 	andi	r2,r2,255
  8083a8:	1080201c 	xori	r2,r2,128
  8083ac:	10bfe004 	addi	r2,r2,-128
  8083b0:	103fc61e 	bne	r2,zero,8082cc <__alt_data_end+0xff8082cc>
				acc_size += Finfo.fsize;
			}
		}
	}

	return res;
  8083b4:	e0bff517 	ldw	r2,-44(fp)
}
  8083b8:	e037883a 	mov	sp,fp
  8083bc:	dfc00117 	ldw	ra,4(sp)
  8083c0:	df000017 	ldw	fp,0(sp)
  8083c4:	dec00204 	addi	sp,sp,8
  8083c8:	f800283a 	ret

008083cc <put_rc>:

//                put_rc(f_mount((uint8_t) p1, &Fatfs[p1]));

static
void put_rc(FRESULT rc) {
  8083cc:	defffb04 	addi	sp,sp,-20
  8083d0:	dfc00415 	stw	ra,16(sp)
  8083d4:	df000315 	stw	fp,12(sp)
  8083d8:	df000304 	addi	fp,sp,12
  8083dc:	e13fff15 	stw	r4,-4(fp)
	const char *str =
  8083e0:	00802074 	movhi	r2,129
  8083e4:	1088d704 	addi	r2,r2,9052
  8083e8:	e0bffd15 	stw	r2,-12(fp)
					"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
					"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
					"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (i = 0; i != rc && *str; i++) {
  8083ec:	e03ffe15 	stw	zero,-8(fp)
  8083f0:	00000c06 	br	808424 <put_rc+0x58>
		while (*str++)
  8083f4:	0001883a 	nop
  8083f8:	e0bffd17 	ldw	r2,-12(fp)
  8083fc:	10c00044 	addi	r3,r2,1
  808400:	e0fffd15 	stw	r3,-12(fp)
  808404:	10800003 	ldbu	r2,0(r2)
  808408:	10803fcc 	andi	r2,r2,255
  80840c:	1080201c 	xori	r2,r2,128
  808410:	10bfe004 	addi	r2,r2,-128
  808414:	103ff81e 	bne	r2,zero,8083f8 <__alt_data_end+0xff8083f8>
					"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
					"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
					"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (i = 0; i != rc && *str; i++) {
  808418:	e0bffe17 	ldw	r2,-8(fp)
  80841c:	10800044 	addi	r2,r2,1
  808420:	e0bffe15 	stw	r2,-8(fp)
  808424:	e0fffe17 	ldw	r3,-8(fp)
  808428:	e0bfff17 	ldw	r2,-4(fp)
  80842c:	18800626 	beq	r3,r2,808448 <put_rc+0x7c>
  808430:	e0bffd17 	ldw	r2,-12(fp)
  808434:	10800003 	ldbu	r2,0(r2)
  808438:	10803fcc 	andi	r2,r2,255
  80843c:	1080201c 	xori	r2,r2,128
  808440:	10bfe004 	addi	r2,r2,-128
  808444:	103feb1e 	bne	r2,zero,8083f4 <__alt_data_end+0xff8083f4>
		while (*str++)
			;
	}
	xprintf("rc=%u FR_%s\n", (uint32_t) rc, str);
  808448:	e1bffd17 	ldw	r6,-12(fp)
  80844c:	e17fff17 	ldw	r5,-4(fp)
  808450:	01002074 	movhi	r4,129
  808454:	21090c04 	addi	r4,r4,9264
  808458:	0809e540 	call	809e54 <xprintf>
}
  80845c:	0001883a 	nop
  808460:	e037883a 	mov	sp,fp
  808464:	dfc00117 	ldw	ra,4(sp)
  808468:	df000017 	ldw	fp,0(sp)
  80846c:	dec00204 	addi	sp,sp,8
  808470:	f800283a 	ret

00808474 <display_help>:

static
void display_help(void) {
  808474:	defffe04 	addi	sp,sp,-8
  808478:	dfc00115 	stw	ra,4(sp)
  80847c:	df000015 	stw	fp,0(sp)
  808480:	d839883a 	mov	fp,sp
	xputs("dd <phy_drv#> [<sector>] - Dump sector\n"
  808484:	01002074 	movhi	r4,129
  808488:	21091004 	addi	r4,r4,9280
  80848c:	0809c280 	call	809c28 <xputs>
			"fp -  (to be added by you) \n"
			"fr <len> - Read file\n"
			"fs [<path>] - Show logical drive status\n"
			"fz [<len>] - Get/Set transfer unit for fr/fw commands\n"
			"h view help (this)\n");
}
  808490:	0001883a 	nop
  808494:	e037883a 	mov	sp,fp
  808498:	dfc00117 	ldw	ra,4(sp)
  80849c:	df000017 	ldw	fp,0(sp)
  8084a0:	dec00204 	addi	sp,sp,8
  8084a4:	f800283a 	ret

008084a8 <main>:

/***************************************************************************/
/*  main                                                                   */
/***************************************************************************/
int main(void) {
  8084a8:	deffd604 	addi	sp,sp,-168
  8084ac:	dfc02915 	stw	ra,164(sp)
  8084b0:	df002815 	stw	fp,160(sp)
  8084b4:	dc002715 	stw	r16,156(sp)
  8084b8:	df002804 	addi	fp,sp,160
	int ii = 0;
  8084bc:	e03feb15 	stw	zero,-84(fp)
	int fifospace;
	char *ptr, *ptr2;
	long p1, p2, p3;
	uint8_t res, b1, drv = 0;
  8084c0:	e03fe105 	stb	zero,-124(fp)
	uint16_t w1;
	uint32_t s1, s2, cnt, blen = sizeof(Buff);
  8084c4:	00810004 	movi	r2,1024
  8084c8:	e0bfe315 	stw	r2,-116(fp)
	static const uint8_t ft[] = { 0, 12, 16, 32 };
	uint32_t ofs = 0, sect = 0, blk[2];
  8084cc:	e03fe415 	stw	zero,-112(fp)
  8084d0:	e03fe515 	stw	zero,-108(fp)
	alt_up_audio_dev * audio_dev;
	/* used for audio record/playback */
	unsigned int l_buf;
	unsigned int r_buf;
	// open the Audio port
	audio_dev = alt_up_audio_open_dev("/dev/Audio");
  8084d4:	01002074 	movhi	r4,129
  8084d8:	2109ac04 	addi	r4,r4,9904
  8084dc:	0810b680 	call	810b68 <alt_up_audio_open_dev>
  8084e0:	e0bfec15 	stw	r2,-80(fp)
	if (audio_dev == NULL)
  8084e4:	e0bfec17 	ldw	r2,-80(fp)
  8084e8:	1000041e 	bne	r2,zero,8084fc <main+0x54>
		alt_printf("Error: could not open audio device \n");
  8084ec:	01002074 	movhi	r4,129
  8084f0:	2109af04 	addi	r4,r4,9916
  8084f4:	080dfbc0 	call	80dfbc <alt_printf>
  8084f8:	00000306 	br	808508 <main+0x60>
	else
		alt_printf("Opened audio device \n");
  8084fc:	01002074 	movhi	r4,129
  808500:	2109b904 	addi	r4,r4,9956
  808504:	080dfbc0 	call	80dfbc <alt_printf>

	IoInit();
  808508:	08082380 	call	808238 <IoInit>

	IOWR(SEVEN_SEG_PIO_BASE, 1, 0x0007);
  80850c:	00c001c4 	movi	r3,7
  808510:	00804034 	movhi	r2,256
  808514:	10842104 	addi	r2,r2,4228
  808518:	10c00035 	stwio	r3,0(r2)

	xputs(PSTR("FatFs module test monitor\n"));
  80851c:	01002074 	movhi	r4,129
  808520:	2109bf04 	addi	r4,r4,9980
  808524:	0809c280 	call	809c28 <xputs>
	xputs(_USE_LFN ? "LFN Enabled" : "LFN Disabled");
  808528:	01002074 	movhi	r4,129
  80852c:	2109c604 	addi	r4,r4,10008
  808530:	0809c280 	call	809c28 <xputs>
	xprintf(", Code page: %u\n", _CODE_PAGE);
  808534:	01413884 	movi	r5,1250
  808538:	01002074 	movhi	r4,129
  80853c:	2109ca04 	addi	r4,r4,10024
  808540:	0809e540 	call	809e54 <xprintf>

	display_help();
  808544:	08084740 	call	808474 <display_help>
	Finfo.lfsize = sizeof(Lfname);
#endif

	for (;;) {

		get_line(Line, sizeof(Line));
  808548:	01404004 	movi	r5,256
  80854c:	01002074 	movhi	r4,129
  808550:	211c7a04 	addi	r4,r4,29160
  808554:	080a2380 	call	80a238 <get_line>

		ptr = Line;
  808558:	00802074 	movhi	r2,129
  80855c:	109c7a04 	addi	r2,r2,29160
  808560:	e0bff315 	stw	r2,-52(fp)
		switch (*ptr++) {
  808564:	e0bff317 	ldw	r2,-52(fp)
  808568:	10c00044 	addi	r3,r2,1
  80856c:	e0fff315 	stw	r3,-52(fp)
  808570:	10800003 	ldbu	r2,0(r2)
  808574:	10803fcc 	andi	r2,r2,255
  808578:	1080201c 	xori	r2,r2,128
  80857c:	10bfe004 	addi	r2,r2,-128
  808580:	10bfe784 	addi	r2,r2,-98
  808584:	10c00328 	cmpgeui	r3,r2,12
  808588:	183fef1e 	bne	r3,zero,808548 <__alt_data_end+0xff808548>
  80858c:	100690ba 	slli	r3,r2,2
  808590:	00802074 	movhi	r2,129
  808594:	10a16904 	addi	r2,r2,-31324
  808598:	1885883a 	add	r2,r3,r2
  80859c:	10800017 	ldw	r2,0(r2)
  8085a0:	1000683a 	jmp	r2
  8085a4:	00808b88 	cmpgei	r2,zero,558
  8085a8:	00808548 	cmpgei	r2,zero,533
  8085ac:	008086b8 	rdprs	r2,zero,538
  8085b0:	00808548 	cmpgei	r2,zero,533
  8085b4:	00808d34 	movhi	r2,564
  8085b8:	00808548 	cmpgei	r2,zero,533
  8085bc:	00809940 	call	80994 <__alt_mem_sdram_0-0x77f66c>
  8085c0:	00808548 	cmpgei	r2,zero,533
  8085c4:	00808548 	cmpgei	r2,zero,533
  8085c8:	00808548 	cmpgei	r2,zero,533
  8085cc:	00808548 	cmpgei	r2,zero,533
  8085d0:	008085d4 	movui	r2,535

		case 'm': /* System memroy/register controls */
			switch (*ptr++) {
  8085d4:	e0bff317 	ldw	r2,-52(fp)
  8085d8:	10c00044 	addi	r3,r2,1
  8085dc:	e0fff315 	stw	r3,-52(fp)
  8085e0:	10800003 	ldbu	r2,0(r2)
  8085e4:	10803fcc 	andi	r2,r2,255
  8085e8:	1080201c 	xori	r2,r2,128
  8085ec:	10bfe004 	addi	r2,r2,-128
  8085f0:	10801920 	cmpeqi	r2,r2,100
  8085f4:	1000011e 	bne	r2,zero,8085fc <main+0x154>
					put_dump((uint8_t *) ptr, (uint32_t) ptr, 16);
				if (p2)
					put_dump((uint8_t *) ptr, (uint32_t) ptr, p2);
				break;
			}
			break;
  8085f8:	0004d406 	br	80994c <main+0x14a4>
		switch (*ptr++) {

		case 'm': /* System memroy/register controls */
			switch (*ptr++) {
			case 'd': /* md <address> [<count>] - Dump memory */
				if (!xatoi(&ptr, &p1))
  8085fc:	e0fff404 	addi	r3,fp,-48
  808600:	e0bff304 	addi	r2,fp,-52
  808604:	180b883a 	mov	r5,r3
  808608:	1009883a 	mov	r4,r2
  80860c:	08099500 	call	809950 <xatoi>
  808610:	10002526 	beq	r2,zero,8086a8 <main+0x200>
					break;
				if (!xatoi(&ptr, &p2))
  808614:	e0fff504 	addi	r3,fp,-44
  808618:	e0bff304 	addi	r2,fp,-52
  80861c:	180b883a 	mov	r5,r3
  808620:	1009883a 	mov	r4,r2
  808624:	08099500 	call	809950 <xatoi>
  808628:	1000021e 	bne	r2,zero,808634 <main+0x18c>
					p2 = 128;
  80862c:	00802004 	movi	r2,128
  808630:	e0bff515 	stw	r2,-44(fp)
				for (ptr = (char *) p1; p2 >= 16; ptr += 16, p2 -= 16)
  808634:	e0bff417 	ldw	r2,-48(fp)
  808638:	e0bff315 	stw	r2,-52(fp)
  80863c:	00000c06 	br	808670 <main+0x1c8>
					put_dump((uint8_t *) ptr, (uint32_t) ptr, 16);
  808640:	e0bff317 	ldw	r2,-52(fp)
  808644:	e0fff317 	ldw	r3,-52(fp)
  808648:	01800404 	movi	r6,16
  80864c:	180b883a 	mov	r5,r3
  808650:	1009883a 	mov	r4,r2
  808654:	080a1180 	call	80a118 <put_dump>
			case 'd': /* md <address> [<count>] - Dump memory */
				if (!xatoi(&ptr, &p1))
					break;
				if (!xatoi(&ptr, &p2))
					p2 = 128;
				for (ptr = (char *) p1; p2 >= 16; ptr += 16, p2 -= 16)
  808658:	e0bff317 	ldw	r2,-52(fp)
  80865c:	10800404 	addi	r2,r2,16
  808660:	e0bff315 	stw	r2,-52(fp)
  808664:	e0bff517 	ldw	r2,-44(fp)
  808668:	10bffc04 	addi	r2,r2,-16
  80866c:	e0bff515 	stw	r2,-44(fp)
  808670:	e0bff517 	ldw	r2,-44(fp)
  808674:	10800408 	cmpgei	r2,r2,16
  808678:	103ff11e 	bne	r2,zero,808640 <__alt_data_end+0xff808640>
					put_dump((uint8_t *) ptr, (uint32_t) ptr, 16);
				if (p2)
  80867c:	e0bff517 	ldw	r2,-44(fp)
  808680:	10000b26 	beq	r2,zero,8086b0 <main+0x208>
					put_dump((uint8_t *) ptr, (uint32_t) ptr, p2);
  808684:	e0bff317 	ldw	r2,-52(fp)
  808688:	e0fff317 	ldw	r3,-52(fp)
  80868c:	1809883a 	mov	r4,r3
  808690:	e0fff517 	ldw	r3,-44(fp)
  808694:	180d883a 	mov	r6,r3
  808698:	200b883a 	mov	r5,r4
  80869c:	1009883a 	mov	r4,r2
  8086a0:	080a1180 	call	80a118 <put_dump>
				break;
  8086a4:	00000206 	br	8086b0 <main+0x208>

		case 'm': /* System memroy/register controls */
			switch (*ptr++) {
			case 'd': /* md <address> [<count>] - Dump memory */
				if (!xatoi(&ptr, &p1))
					break;
  8086a8:	0001883a 	nop
  8086ac:	0004a706 	br	80994c <main+0x14a4>
					p2 = 128;
				for (ptr = (char *) p1; p2 >= 16; ptr += 16, p2 -= 16)
					put_dump((uint8_t *) ptr, (uint32_t) ptr, 16);
				if (p2)
					put_dump((uint8_t *) ptr, (uint32_t) ptr, p2);
				break;
  8086b0:	0001883a 	nop
			}
			break;
  8086b4:	0004a506 	br	80994c <main+0x14a4>

		case 'd': /* Disk I/O layer controls */
			switch (*ptr++) {
  8086b8:	e0bff317 	ldw	r2,-52(fp)
  8086bc:	10c00044 	addi	r3,r2,1
  8086c0:	e0fff315 	stw	r3,-52(fp)
  8086c4:	10800003 	ldbu	r2,0(r2)
  8086c8:	10803fcc 	andi	r2,r2,255
  8086cc:	1080201c 	xori	r2,r2,128
  8086d0:	10bfe004 	addi	r2,r2,-128
  8086d4:	10c01920 	cmpeqi	r3,r2,100
  8086d8:	18000a1e 	bne	r3,zero,808704 <main+0x25c>
  8086dc:	10c01948 	cmpgei	r3,r2,101
  8086e0:	1800031e 	bne	r3,zero,8086f0 <main+0x248>
  8086e4:	108018e0 	cmpeqi	r2,r2,99
  8086e8:	1000e11e 	bne	r2,zero,808a70 <main+0x5c8>
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
					break;
				}
				break;
			}
			break; // end of Disk Controls //
  8086ec:	00049706 	br	80994c <main+0x14a4>
				break;
			}
			break;

		case 'd': /* Disk I/O layer controls */
			switch (*ptr++) {
  8086f0:	10c01a60 	cmpeqi	r3,r2,105
  8086f4:	1800461e 	bne	r3,zero,808810 <main+0x368>
  8086f8:	10801ce0 	cmpeqi	r2,r2,115
  8086fc:	1000541e 	bne	r2,zero,808850 <main+0x3a8>
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
					break;
				}
				break;
			}
			break; // end of Disk Controls //
  808700:	00049206 	br	80994c <main+0x14a4>
			break;

		case 'd': /* Disk I/O layer controls */
			switch (*ptr++) {
			case 'd': /* dd [<drv> [<lba>]] - Dump secrtor */
				if (!xatoi(&ptr, &p1)) {
  808704:	e0fff404 	addi	r3,fp,-48
  808708:	e0bff304 	addi	r2,fp,-52
  80870c:	180b883a 	mov	r5,r3
  808710:	1009883a 	mov	r4,r2
  808714:	08099500 	call	809950 <xatoi>
  808718:	1000031e 	bne	r2,zero,808728 <main+0x280>
					p1 = drv;
  80871c:	e0bfe103 	ldbu	r2,-124(fp)
  808720:	e0bff415 	stw	r2,-48(fp)
  808724:	00000806 	br	808748 <main+0x2a0>
				} else {
					if (!xatoi(&ptr, &p2))
  808728:	e0fff504 	addi	r3,fp,-44
  80872c:	e0bff304 	addi	r2,fp,-52
  808730:	180b883a 	mov	r5,r3
  808734:	1009883a 	mov	r4,r2
  808738:	08099500 	call	809950 <xatoi>
  80873c:	1000021e 	bne	r2,zero,808748 <main+0x2a0>
						p2 = sect;
  808740:	e0bfe517 	ldw	r2,-108(fp)
  808744:	e0bff515 	stw	r2,-44(fp)
				}
				drv = (uint8_t) p1;
  808748:	e0bff417 	ldw	r2,-48(fp)
  80874c:	e0bfe105 	stb	r2,-124(fp)
				sect = p2 + 1;
  808750:	e0bff517 	ldw	r2,-44(fp)
  808754:	10800044 	addi	r2,r2,1
  808758:	e0bfe515 	stw	r2,-108(fp)
				res = disk_read((uint8_t ) p1, Buff, p2, 1);
  80875c:	e0bff417 	ldw	r2,-48(fp)
  808760:	10803fcc 	andi	r2,r2,255
  808764:	e0fff517 	ldw	r3,-44(fp)
  808768:	01c00044 	movi	r7,1
  80876c:	180d883a 	mov	r6,r3
  808770:	01402074 	movhi	r5,129
  808774:	295aea04 	addi	r5,r5,27560
  808778:	1009883a 	mov	r4,r2
  80877c:	0800e080 	call	800e08 <ffs_DiskIORead>
  808780:	e0bfed05 	stb	r2,-76(fp)
				if (res) {
  808784:	e0bfed03 	ldbu	r2,-76(fp)
  808788:	10000626 	beq	r2,zero,8087a4 <main+0x2fc>
					xprintf("rc=%d\n", (uint16_t) res);
  80878c:	e0bfed03 	ldbu	r2,-76(fp)
  808790:	100b883a 	mov	r5,r2
  808794:	01002074 	movhi	r4,129
  808798:	2109cf04 	addi	r4,r4,10044
  80879c:	0809e540 	call	809e54 <xprintf>
					break;
  8087a0:	0000f806 	br	808b84 <main+0x6dc>
				}
				xprintf("D:%lu S:%lu\n", p1, p2);
  8087a4:	e0bff417 	ldw	r2,-48(fp)
  8087a8:	e0fff517 	ldw	r3,-44(fp)
  8087ac:	180d883a 	mov	r6,r3
  8087b0:	100b883a 	mov	r5,r2
  8087b4:	01002074 	movhi	r4,129
  8087b8:	2109d104 	addi	r4,r4,10052
  8087bc:	0809e540 	call	809e54 <xprintf>
				for (ptr = (char *) Buff, ofs = 0; ofs < 0x200;
  8087c0:	00802074 	movhi	r2,129
  8087c4:	109aea04 	addi	r2,r2,27560
  8087c8:	e0bff315 	stw	r2,-52(fp)
  8087cc:	e03fe415 	stw	zero,-112(fp)
  8087d0:	00000b06 	br	808800 <main+0x358>
						ptr += 16, ofs += 16)
					put_dump((uint8_t *) ptr, ofs, 16);
  8087d4:	e0bff317 	ldw	r2,-52(fp)
  8087d8:	01800404 	movi	r6,16
  8087dc:	e17fe417 	ldw	r5,-112(fp)
  8087e0:	1009883a 	mov	r4,r2
  8087e4:	080a1180 	call	80a118 <put_dump>
					xprintf("rc=%d\n", (uint16_t) res);
					break;
				}
				xprintf("D:%lu S:%lu\n", p1, p2);
				for (ptr = (char *) Buff, ofs = 0; ofs < 0x200;
						ptr += 16, ofs += 16)
  8087e8:	e0bff317 	ldw	r2,-52(fp)
  8087ec:	10800404 	addi	r2,r2,16
  8087f0:	e0bff315 	stw	r2,-52(fp)
  8087f4:	e0bfe417 	ldw	r2,-112(fp)
  8087f8:	10800404 	addi	r2,r2,16
  8087fc:	e0bfe415 	stw	r2,-112(fp)
				if (res) {
					xprintf("rc=%d\n", (uint16_t) res);
					break;
				}
				xprintf("D:%lu S:%lu\n", p1, p2);
				for (ptr = (char *) Buff, ofs = 0; ofs < 0x200;
  808800:	e0bfe417 	ldw	r2,-112(fp)
  808804:	10808030 	cmpltui	r2,r2,512
  808808:	103ff21e 	bne	r2,zero,8087d4 <__alt_data_end+0xff8087d4>
						ptr += 16, ofs += 16)
					put_dump((uint8_t *) ptr, ofs, 16);
				break;
  80880c:	0000dd06 	br	808b84 <main+0x6dc>

			case 'i': /* di <drv> - Initialize disk */
				if (!xatoi(&ptr, &p1))
  808810:	e0fff404 	addi	r3,fp,-48
  808814:	e0bff304 	addi	r2,fp,-52
  808818:	180b883a 	mov	r5,r3
  80881c:	1009883a 	mov	r4,r2
  808820:	08099500 	call	809950 <xatoi>
  808824:	1000d026 	beq	r2,zero,808b68 <main+0x6c0>
					break;
				xprintf("rc=%d\n", (uint16_t) disk_initialize((uint8_t ) p1));
  808828:	e0bff417 	ldw	r2,-48(fp)
  80882c:	10803fcc 	andi	r2,r2,255
  808830:	1009883a 	mov	r4,r2
  808834:	0800b840 	call	800b84 <ffs_DiskIOInitialize>
  808838:	10803fcc 	andi	r2,r2,255
  80883c:	100b883a 	mov	r5,r2
  808840:	01002074 	movhi	r4,129
  808844:	2109cf04 	addi	r4,r4,10044
  808848:	0809e540 	call	809e54 <xprintf>
				break;
  80884c:	0000cd06 	br	808b84 <main+0x6dc>

			case 's': /* ds <drv> - Show disk status */
				if (!xatoi(&ptr, &p1))
  808850:	e0fff404 	addi	r3,fp,-48
  808854:	e0bff304 	addi	r2,fp,-52
  808858:	180b883a 	mov	r5,r3
  80885c:	1009883a 	mov	r4,r2
  808860:	08099500 	call	809950 <xatoi>
  808864:	1000c226 	beq	r2,zero,808b70 <main+0x6c8>
					break;
				if (disk_ioctl((uint8_t) p1, GET_SECTOR_COUNT, &p2) == RES_OK) {
  808868:	e0bff417 	ldw	r2,-48(fp)
  80886c:	10803fcc 	andi	r2,r2,255
  808870:	e0fff504 	addi	r3,fp,-44
  808874:	180d883a 	mov	r6,r3
  808878:	01400044 	movi	r5,1
  80887c:	1009883a 	mov	r4,r2
  808880:	08010980 	call	801098 <ffs_DiskIOIoctl>
  808884:	1000051e 	bne	r2,zero,80889c <main+0x3f4>
					xprintf("Drive size: %lu sectors\n", p2);
  808888:	e0bff517 	ldw	r2,-44(fp)
  80888c:	100b883a 	mov	r5,r2
  808890:	01002074 	movhi	r4,129
  808894:	2109d504 	addi	r4,r4,10068
  808898:	0809e540 	call	809e54 <xprintf>
				}
				if (disk_ioctl((uint8_t) p1, GET_SECTOR_SIZE, &w1) == RES_OK) {
  80889c:	e0bff417 	ldw	r2,-48(fp)
  8088a0:	10803fcc 	andi	r2,r2,255
  8088a4:	e0fff784 	addi	r3,fp,-34
  8088a8:	180d883a 	mov	r6,r3
  8088ac:	01400084 	movi	r5,2
  8088b0:	1009883a 	mov	r4,r2
  8088b4:	08010980 	call	801098 <ffs_DiskIOIoctl>
  8088b8:	1000061e 	bne	r2,zero,8088d4 <main+0x42c>
					xprintf("Sector size: %u bytes\n", w1);
  8088bc:	e0bff78b 	ldhu	r2,-34(fp)
  8088c0:	10bfffcc 	andi	r2,r2,65535
  8088c4:	100b883a 	mov	r5,r2
  8088c8:	01002074 	movhi	r4,129
  8088cc:	2109dc04 	addi	r4,r4,10096
  8088d0:	0809e540 	call	809e54 <xprintf>
				}
				if (disk_ioctl((uint8_t) p1, GET_BLOCK_SIZE, &p2) == RES_OK) {
  8088d4:	e0bff417 	ldw	r2,-48(fp)
  8088d8:	10803fcc 	andi	r2,r2,255
  8088dc:	e0fff504 	addi	r3,fp,-44
  8088e0:	180d883a 	mov	r6,r3
  8088e4:	014000c4 	movi	r5,3
  8088e8:	1009883a 	mov	r4,r2
  8088ec:	08010980 	call	801098 <ffs_DiskIOIoctl>
  8088f0:	1000051e 	bne	r2,zero,808908 <main+0x460>
					xprintf("Block size: %lu sectors\n", p2);
  8088f4:	e0bff517 	ldw	r2,-44(fp)
  8088f8:	100b883a 	mov	r5,r2
  8088fc:	01002074 	movhi	r4,129
  808900:	2109e204 	addi	r4,r4,10120
  808904:	0809e540 	call	809e54 <xprintf>
				}
				if (disk_ioctl((uint8_t) p1, MMC_GET_TYPE, &b1) == RES_OK) {
  808908:	e0bff417 	ldw	r2,-48(fp)
  80890c:	10803fcc 	andi	r2,r2,255
  808910:	e0fff704 	addi	r3,fp,-36
  808914:	180d883a 	mov	r6,r3
  808918:	01400284 	movi	r5,10
  80891c:	1009883a 	mov	r4,r2
  808920:	08010980 	call	801098 <ffs_DiskIOIoctl>
  808924:	1000061e 	bne	r2,zero,808940 <main+0x498>
					xprintf("MMC/SDC type: %u\n", b1);
  808928:	e0bff703 	ldbu	r2,-36(fp)
  80892c:	10803fcc 	andi	r2,r2,255
  808930:	100b883a 	mov	r5,r2
  808934:	01002074 	movhi	r4,129
  808938:	2109e904 	addi	r4,r4,10148
  80893c:	0809e540 	call	809e54 <xprintf>
				}
				if (disk_ioctl((uint8_t) p1, MMC_GET_CSD, Buff) == RES_OK) {
  808940:	e0bff417 	ldw	r2,-48(fp)
  808944:	10803fcc 	andi	r2,r2,255
  808948:	01802074 	movhi	r6,129
  80894c:	319aea04 	addi	r6,r6,27560
  808950:	014002c4 	movi	r5,11
  808954:	1009883a 	mov	r4,r2
  808958:	08010980 	call	801098 <ffs_DiskIOIoctl>
  80895c:	1000081e 	bne	r2,zero,808980 <main+0x4d8>
					xputs("CSD:\n");
  808960:	01002074 	movhi	r4,129
  808964:	2109ee04 	addi	r4,r4,10168
  808968:	0809c280 	call	809c28 <xputs>
					put_dump(Buff, 0, 16);
  80896c:	01800404 	movi	r6,16
  808970:	000b883a 	mov	r5,zero
  808974:	01002074 	movhi	r4,129
  808978:	211aea04 	addi	r4,r4,27560
  80897c:	080a1180 	call	80a118 <put_dump>
				}
				if (disk_ioctl((uint8_t) p1, MMC_GET_CID, Buff) == RES_OK) {
  808980:	e0bff417 	ldw	r2,-48(fp)
  808984:	10803fcc 	andi	r2,r2,255
  808988:	01802074 	movhi	r6,129
  80898c:	319aea04 	addi	r6,r6,27560
  808990:	01400304 	movi	r5,12
  808994:	1009883a 	mov	r4,r2
  808998:	08010980 	call	801098 <ffs_DiskIOIoctl>
  80899c:	1000081e 	bne	r2,zero,8089c0 <main+0x518>
					xputs("CID:\n");
  8089a0:	01002074 	movhi	r4,129
  8089a4:	2109f004 	addi	r4,r4,10176
  8089a8:	0809c280 	call	809c28 <xputs>
					put_dump(Buff, 0, 16);
  8089ac:	01800404 	movi	r6,16
  8089b0:	000b883a 	mov	r5,zero
  8089b4:	01002074 	movhi	r4,129
  8089b8:	211aea04 	addi	r4,r4,27560
  8089bc:	080a1180 	call	80a118 <put_dump>
				}
				if (disk_ioctl((uint8_t) p1, MMC_GET_OCR, Buff) == RES_OK) {
  8089c0:	e0bff417 	ldw	r2,-48(fp)
  8089c4:	10803fcc 	andi	r2,r2,255
  8089c8:	01802074 	movhi	r6,129
  8089cc:	319aea04 	addi	r6,r6,27560
  8089d0:	01400344 	movi	r5,13
  8089d4:	1009883a 	mov	r4,r2
  8089d8:	08010980 	call	801098 <ffs_DiskIOIoctl>
  8089dc:	1000081e 	bne	r2,zero,808a00 <main+0x558>
					xputs("OCR:\n");
  8089e0:	01002074 	movhi	r4,129
  8089e4:	2109f204 	addi	r4,r4,10184
  8089e8:	0809c280 	call	809c28 <xputs>
					put_dump(Buff, 0, 4);
  8089ec:	01800104 	movi	r6,4
  8089f0:	000b883a 	mov	r5,zero
  8089f4:	01002074 	movhi	r4,129
  8089f8:	211aea04 	addi	r4,r4,27560
  8089fc:	080a1180 	call	80a118 <put_dump>
				}
				if (disk_ioctl((uint8_t) p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
  808a00:	e0bff417 	ldw	r2,-48(fp)
  808a04:	10803fcc 	andi	r2,r2,255
  808a08:	01802074 	movhi	r6,129
  808a0c:	319aea04 	addi	r6,r6,27560
  808a10:	01400384 	movi	r5,14
  808a14:	1009883a 	mov	r4,r2
  808a18:	08010980 	call	801098 <ffs_DiskIOIoctl>
  808a1c:	1000561e 	bne	r2,zero,808b78 <main+0x6d0>
					xputs("SD Status:\n");
  808a20:	01002074 	movhi	r4,129
  808a24:	2109f404 	addi	r4,r4,10192
  808a28:	0809c280 	call	809c28 <xputs>
					for (s1 = 0; s1 < 64; s1 += 16)
  808a2c:	e03fe215 	stw	zero,-120(fp)
  808a30:	00000b06 	br	808a60 <main+0x5b8>
						put_dump(Buff + s1, s1, 16);
  808a34:	e0ffe217 	ldw	r3,-120(fp)
  808a38:	00802074 	movhi	r2,129
  808a3c:	109aea04 	addi	r2,r2,27560
  808a40:	1885883a 	add	r2,r3,r2
  808a44:	01800404 	movi	r6,16
  808a48:	e17fe217 	ldw	r5,-120(fp)
  808a4c:	1009883a 	mov	r4,r2
  808a50:	080a1180 	call	80a118 <put_dump>
					xputs("OCR:\n");
					put_dump(Buff, 0, 4);
				}
				if (disk_ioctl((uint8_t) p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
					xputs("SD Status:\n");
					for (s1 = 0; s1 < 64; s1 += 16)
  808a54:	e0bfe217 	ldw	r2,-120(fp)
  808a58:	10800404 	addi	r2,r2,16
  808a5c:	e0bfe215 	stw	r2,-120(fp)
  808a60:	e0bfe217 	ldw	r2,-120(fp)
  808a64:	10801030 	cmpltui	r2,r2,64
  808a68:	103ff21e 	bne	r2,zero,808a34 <__alt_data_end+0xff808a34>
						put_dump(Buff + s1, s1, 16);
				}
				break;
  808a6c:	00004206 	br	808b78 <main+0x6d0>

			case 'c': /* Disk ioctl */
				switch (*ptr++) {
  808a70:	e0bff317 	ldw	r2,-52(fp)
  808a74:	10c00044 	addi	r3,r2,1
  808a78:	e0fff315 	stw	r3,-52(fp)
  808a7c:	10800003 	ldbu	r2,0(r2)
  808a80:	10803fcc 	andi	r2,r2,255
  808a84:	1080201c 	xori	r2,r2,128
  808a88:	10bfe004 	addi	r2,r2,-128
  808a8c:	10c01960 	cmpeqi	r3,r2,101
  808a90:	1800141e 	bne	r3,zero,808ae4 <main+0x63c>
  808a94:	10801ce0 	cmpeqi	r2,r2,115
  808a98:	1000011e 	bne	r2,zero,808aa0 <main+0x5f8>
						break;
					xprintf("rc=%d\n",
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
					break;
				}
				break;
  808a9c:	00003806 	br	808b80 <main+0x6d8>
				break;

			case 'c': /* Disk ioctl */
				switch (*ptr++) {
				case 's': /* dcs <drv> - CTRL_SYNC */
					if (!xatoi(&ptr, &p1))
  808aa0:	e0fff404 	addi	r3,fp,-48
  808aa4:	e0bff304 	addi	r2,fp,-52
  808aa8:	180b883a 	mov	r5,r3
  808aac:	1009883a 	mov	r4,r2
  808ab0:	08099500 	call	809950 <xatoi>
  808ab4:	10002a26 	beq	r2,zero,808b60 <main+0x6b8>
						break;
					xprintf("rc=%d\n", disk_ioctl((uint8_t ) p1, CTRL_SYNC, 0));
  808ab8:	e0bff417 	ldw	r2,-48(fp)
  808abc:	10803fcc 	andi	r2,r2,255
  808ac0:	000d883a 	mov	r6,zero
  808ac4:	000b883a 	mov	r5,zero
  808ac8:	1009883a 	mov	r4,r2
  808acc:	08010980 	call	801098 <ffs_DiskIOIoctl>
  808ad0:	100b883a 	mov	r5,r2
  808ad4:	01002074 	movhi	r4,129
  808ad8:	2109cf04 	addi	r4,r4,10044
  808adc:	0809e540 	call	809e54 <xprintf>
					break;
  808ae0:	00002006 	br	808b64 <main+0x6bc>
				case 'e': /* dce <drv> <start> <end> - CTRL_ERASE_SECTOR */
					if (!xatoi(&ptr, &p1) || !xatoi(&ptr, (long *) &blk[0])
  808ae4:	e0fff404 	addi	r3,fp,-48
  808ae8:	e0bff304 	addi	r2,fp,-52
  808aec:	180b883a 	mov	r5,r3
  808af0:	1009883a 	mov	r4,r2
  808af4:	08099500 	call	809950 <xatoi>
  808af8:	10002126 	beq	r2,zero,808b80 <main+0x6d8>
  808afc:	e0fffa04 	addi	r3,fp,-24
  808b00:	e0bff304 	addi	r2,fp,-52
  808b04:	180b883a 	mov	r5,r3
  808b08:	1009883a 	mov	r4,r2
  808b0c:	08099500 	call	809950 <xatoi>
  808b10:	10001b26 	beq	r2,zero,808b80 <main+0x6d8>
							|| !xatoi(&ptr, (long *) &blk[1]))
  808b14:	e0bffa04 	addi	r2,fp,-24
  808b18:	10c00104 	addi	r3,r2,4
  808b1c:	e0bff304 	addi	r2,fp,-52
  808b20:	180b883a 	mov	r5,r3
  808b24:	1009883a 	mov	r4,r2
  808b28:	08099500 	call	809950 <xatoi>
  808b2c:	10001426 	beq	r2,zero,808b80 <main+0x6d8>
						break;
					xprintf("rc=%d\n",
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
  808b30:	e0bff417 	ldw	r2,-48(fp)
  808b34:	10803fcc 	andi	r2,r2,255
  808b38:	e0fffa04 	addi	r3,fp,-24
  808b3c:	180d883a 	mov	r6,r3
  808b40:	01400104 	movi	r5,4
  808b44:	1009883a 	mov	r4,r2
  808b48:	08010980 	call	801098 <ffs_DiskIOIoctl>
					break;
				case 'e': /* dce <drv> <start> <end> - CTRL_ERASE_SECTOR */
					if (!xatoi(&ptr, &p1) || !xatoi(&ptr, (long *) &blk[0])
							|| !xatoi(&ptr, (long *) &blk[1]))
						break;
					xprintf("rc=%d\n",
  808b4c:	100b883a 	mov	r5,r2
  808b50:	01002074 	movhi	r4,129
  808b54:	2109cf04 	addi	r4,r4,10044
  808b58:	0809e540 	call	809e54 <xprintf>
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
					break;
  808b5c:	00000106 	br	808b64 <main+0x6bc>

			case 'c': /* Disk ioctl */
				switch (*ptr++) {
				case 's': /* dcs <drv> - CTRL_SYNC */
					if (!xatoi(&ptr, &p1))
						break;
  808b60:	0001883a 	nop
						break;
					xprintf("rc=%d\n",
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
					break;
				}
				break;
  808b64:	00000606 	br	808b80 <main+0x6d8>
					put_dump((uint8_t *) ptr, ofs, 16);
				break;

			case 'i': /* di <drv> - Initialize disk */
				if (!xatoi(&ptr, &p1))
					break;
  808b68:	0001883a 	nop
  808b6c:	00037706 	br	80994c <main+0x14a4>
				xprintf("rc=%d\n", (uint16_t) disk_initialize((uint8_t ) p1));
				break;

			case 's': /* ds <drv> - Show disk status */
				if (!xatoi(&ptr, &p1))
					break;
  808b70:	0001883a 	nop
  808b74:	00037506 	br	80994c <main+0x14a4>
				if (disk_ioctl((uint8_t) p1, MMC_GET_SDSTAT, Buff) == RES_OK) {
					xputs("SD Status:\n");
					for (s1 = 0; s1 < 64; s1 += 16)
						put_dump(Buff + s1, s1, 16);
				}
				break;
  808b78:	0001883a 	nop
  808b7c:	00037306 	br	80994c <main+0x14a4>
						break;
					xprintf("rc=%d\n",
							disk_ioctl((uint8_t ) p1, CTRL_ERASE_SECTOR, blk));
					break;
				}
				break;
  808b80:	0001883a 	nop
			}
			break; // end of Disk Controls //
  808b84:	00037106 	br	80994c <main+0x14a4>

		case 'b': /* Buffer controls */
			switch (*ptr++) {
  808b88:	e0bff317 	ldw	r2,-52(fp)
  808b8c:	10c00044 	addi	r3,r2,1
  808b90:	e0fff315 	stw	r3,-52(fp)
  808b94:	10800003 	ldbu	r2,0(r2)
  808b98:	10803fcc 	andi	r2,r2,255
  808b9c:	1080201c 	xori	r2,r2,128
  808ba0:	10bfe004 	addi	r2,r2,-128
  808ba4:	10c019a0 	cmpeqi	r3,r2,102
  808ba8:	18004c1e 	bne	r3,zero,808cdc <main+0x834>
  808bac:	10c01ca0 	cmpeqi	r3,r2,114
  808bb0:	1800241e 	bne	r3,zero,808c44 <main+0x79c>
  808bb4:	10801920 	cmpeqi	r2,r2,100
  808bb8:	1000011e 	bne	r2,zero,808bc0 <main+0x718>
					break;
				memset(Buff, (uint8_t) p1, sizeof(Buff));
				break;

			}
			break; // end of Buffer Controls //
  808bbc:	00036306 	br	80994c <main+0x14a4>
			break; // end of Disk Controls //

		case 'b': /* Buffer controls */
			switch (*ptr++) {
			case 'd': /* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1))
  808bc0:	e0fff404 	addi	r3,fp,-48
  808bc4:	e0bff304 	addi	r2,fp,-52
  808bc8:	180b883a 	mov	r5,r3
  808bcc:	1009883a 	mov	r4,r2
  808bd0:	08099500 	call	809950 <xatoi>
  808bd4:	10004f26 	beq	r2,zero,808d14 <main+0x86c>
					break;
				for (ptr = (char *) &Buff[p1], ofs = p1, cnt = 32; cnt;
  808bd8:	e0fff417 	ldw	r3,-48(fp)
  808bdc:	00802074 	movhi	r2,129
  808be0:	109aea04 	addi	r2,r2,27560
  808be4:	1885883a 	add	r2,r3,r2
  808be8:	e0bff315 	stw	r2,-52(fp)
  808bec:	e0bff417 	ldw	r2,-48(fp)
  808bf0:	e0bfe415 	stw	r2,-112(fp)
  808bf4:	00800804 	movi	r2,32
  808bf8:	e0bff915 	stw	r2,-28(fp)
  808bfc:	00000e06 	br	808c38 <main+0x790>
						cnt--, ptr += 16, ofs += 16)
					put_dump((uint8_t *) ptr, ofs, 16);
  808c00:	e0bff317 	ldw	r2,-52(fp)
  808c04:	01800404 	movi	r6,16
  808c08:	e17fe417 	ldw	r5,-112(fp)
  808c0c:	1009883a 	mov	r4,r2
  808c10:	080a1180 	call	80a118 <put_dump>
			switch (*ptr++) {
			case 'd': /* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1))
					break;
				for (ptr = (char *) &Buff[p1], ofs = p1, cnt = 32; cnt;
						cnt--, ptr += 16, ofs += 16)
  808c14:	e0bff917 	ldw	r2,-28(fp)
  808c18:	10bfffc4 	addi	r2,r2,-1
  808c1c:	e0bff915 	stw	r2,-28(fp)
  808c20:	e0bff317 	ldw	r2,-52(fp)
  808c24:	10800404 	addi	r2,r2,16
  808c28:	e0bff315 	stw	r2,-52(fp)
  808c2c:	e0bfe417 	ldw	r2,-112(fp)
  808c30:	10800404 	addi	r2,r2,16
  808c34:	e0bfe415 	stw	r2,-112(fp)
		case 'b': /* Buffer controls */
			switch (*ptr++) {
			case 'd': /* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1))
					break;
				for (ptr = (char *) &Buff[p1], ofs = p1, cnt = 32; cnt;
  808c38:	e0bff917 	ldw	r2,-28(fp)
  808c3c:	103ff01e 	bne	r2,zero,808c00 <__alt_data_end+0xff808c00>
						cnt--, ptr += 16, ofs += 16)
					put_dump((uint8_t *) ptr, ofs, 16);
				break;
  808c40:	00003b06 	br	808d30 <main+0x888>

			case 'r': /* br <drv> <lba> [<num>] - Read disk into R/W buffer */
				if (!xatoi(&ptr, &p1))
  808c44:	e0fff404 	addi	r3,fp,-48
  808c48:	e0bff304 	addi	r2,fp,-52
  808c4c:	180b883a 	mov	r5,r3
  808c50:	1009883a 	mov	r4,r2
  808c54:	08099500 	call	809950 <xatoi>
  808c58:	10003026 	beq	r2,zero,808d1c <main+0x874>
					break;
				if (!xatoi(&ptr, &p2))
  808c5c:	e0fff504 	addi	r3,fp,-44
  808c60:	e0bff304 	addi	r2,fp,-52
  808c64:	180b883a 	mov	r5,r3
  808c68:	1009883a 	mov	r4,r2
  808c6c:	08099500 	call	809950 <xatoi>
  808c70:	10002c26 	beq	r2,zero,808d24 <main+0x87c>
					break;
				if (!xatoi(&ptr, &p3))
  808c74:	e0fff604 	addi	r3,fp,-40
  808c78:	e0bff304 	addi	r2,fp,-52
  808c7c:	180b883a 	mov	r5,r3
  808c80:	1009883a 	mov	r4,r2
  808c84:	08099500 	call	809950 <xatoi>
  808c88:	1000021e 	bne	r2,zero,808c94 <main+0x7ec>
					p3 = 1;
  808c8c:	00800044 	movi	r2,1
  808c90:	e0bff615 	stw	r2,-40(fp)
				xprintf("rc=%u\n",
						(uint16_t) disk_read((uint8_t ) p1, Buff, p2, p3));
  808c94:	e0bff417 	ldw	r2,-48(fp)
  808c98:	10c03fcc 	andi	r3,r2,255
  808c9c:	e0bff517 	ldw	r2,-44(fp)
  808ca0:	1009883a 	mov	r4,r2
  808ca4:	e0bff617 	ldw	r2,-40(fp)
  808ca8:	10803fcc 	andi	r2,r2,255
  808cac:	100f883a 	mov	r7,r2
  808cb0:	200d883a 	mov	r6,r4
  808cb4:	01402074 	movhi	r5,129
  808cb8:	295aea04 	addi	r5,r5,27560
  808cbc:	1809883a 	mov	r4,r3
  808cc0:	0800e080 	call	800e08 <ffs_DiskIORead>
					break;
				if (!xatoi(&ptr, &p2))
					break;
				if (!xatoi(&ptr, &p3))
					p3 = 1;
				xprintf("rc=%u\n",
  808cc4:	10bfffcc 	andi	r2,r2,65535
  808cc8:	100b883a 	mov	r5,r2
  808ccc:	01002074 	movhi	r4,129
  808cd0:	2109f704 	addi	r4,r4,10204
  808cd4:	0809e540 	call	809e54 <xprintf>
						(uint16_t) disk_read((uint8_t ) p1, Buff, p2, p3));
				break;
  808cd8:	00001506 	br	808d30 <main+0x888>

			case 'f': /* bf <val> - Fill working buffer */
				if (!xatoi(&ptr, &p1))
  808cdc:	e0fff404 	addi	r3,fp,-48
  808ce0:	e0bff304 	addi	r2,fp,-52
  808ce4:	180b883a 	mov	r5,r3
  808ce8:	1009883a 	mov	r4,r2
  808cec:	08099500 	call	809950 <xatoi>
  808cf0:	10000e26 	beq	r2,zero,808d2c <main+0x884>
					break;
				memset(Buff, (uint8_t) p1, sizeof(Buff));
  808cf4:	e0bff417 	ldw	r2,-48(fp)
  808cf8:	10803fcc 	andi	r2,r2,255
  808cfc:	01810004 	movi	r6,1024
  808d00:	100b883a 	mov	r5,r2
  808d04:	01002074 	movhi	r4,129
  808d08:	211aea04 	addi	r4,r4,27560
  808d0c:	080a8180 	call	80a818 <memset>
				break;
  808d10:	00000706 	br	808d30 <main+0x888>

		case 'b': /* Buffer controls */
			switch (*ptr++) {
			case 'd': /* bd <addr> - Dump R/W buffer */
				if (!xatoi(&ptr, &p1))
					break;
  808d14:	0001883a 	nop
  808d18:	00030c06 	br	80994c <main+0x14a4>
					put_dump((uint8_t *) ptr, ofs, 16);
				break;

			case 'r': /* br <drv> <lba> [<num>] - Read disk into R/W buffer */
				if (!xatoi(&ptr, &p1))
					break;
  808d1c:	0001883a 	nop
  808d20:	00030a06 	br	80994c <main+0x14a4>
				if (!xatoi(&ptr, &p2))
					break;
  808d24:	0001883a 	nop
  808d28:	00030806 	br	80994c <main+0x14a4>
						(uint16_t) disk_read((uint8_t ) p1, Buff, p2, p3));
				break;

			case 'f': /* bf <val> - Fill working buffer */
				if (!xatoi(&ptr, &p1))
					break;
  808d2c:	0001883a 	nop
				memset(Buff, (uint8_t) p1, sizeof(Buff));
				break;

			}
			break; // end of Buffer Controls //
  808d30:	00030606 	br	80994c <main+0x14a4>

		case 'f': /* FatFS API controls */
			switch (*ptr++) {
  808d34:	e0bff317 	ldw	r2,-52(fp)
  808d38:	10c00044 	addi	r3,r2,1
  808d3c:	e0fff315 	stw	r3,-52(fp)
  808d40:	10800003 	ldbu	r2,0(r2)
  808d44:	10803fcc 	andi	r2,r2,255
  808d48:	1080201c 	xori	r2,r2,128
  808d4c:	10bfe004 	addi	r2,r2,-128
  808d50:	10bfe744 	addi	r2,r2,-99
  808d54:	10c00628 	cmpgeui	r3,r2,24
  808d58:	1802fb1e 	bne	r3,zero,809948 <main+0x14a0>
  808d5c:	100690ba 	slli	r3,r2,2
  808d60:	00802074 	movhi	r2,129
  808d64:	10a35d04 	addi	r2,r2,-29324
  808d68:	1885883a 	add	r2,r3,r2
  808d6c:	10800017 	ldw	r2,0(r2)
  808d70:	1000683a 	jmp	r2
  808d74:	00808dd4 	movui	r2,567
  808d78:	00808dec 	andhi	r2,zero,567
  808d7c:	00808ec8 	cmpgei	r2,zero,571
  808d80:	00809948 	cmpgei	r2,zero,613
  808d84:	00809948 	cmpgei	r2,zero,613
  808d88:	00809948 	cmpgei	r2,zero,613
  808d8c:	00808f3c 	xorhi	r2,zero,572
  808d90:	00809948 	cmpgei	r2,zero,613
  808d94:	00809948 	cmpgei	r2,zero,613
  808d98:	00808f90 	cmplti	r2,zero,574
  808d9c:	00809948 	cmpgei	r2,zero,613
  808da0:	00809948 	cmpgei	r2,zero,613
  808da4:	00809280 	call	80928 <__alt_mem_sdram_0-0x77f6d8>
  808da8:	008092f0 	cmpltui	r2,zero,587
  808dac:	00809948 	cmpgei	r2,zero,613
  808db0:	00809620 	cmpeqi	r2,zero,600
  808db4:	00809738 	rdprs	r2,zero,604
  808db8:	00809948 	cmpgei	r2,zero,613
  808dbc:	00809948 	cmpgei	r2,zero,613
  808dc0:	00809948 	cmpgei	r2,zero,613
  808dc4:	00809948 	cmpgei	r2,zero,613
  808dc8:	00809948 	cmpgei	r2,zero,613
  808dcc:	00809948 	cmpgei	r2,zero,613
  808dd0:	008098c0 	call	8098c <__alt_mem_sdram_0-0x77f674>

			case 'c': /* fc - Close a file */
				put_rc(f_close(&File1));
  808dd4:	01002074 	movhi	r4,129
  808dd8:	211a5b04 	addi	r4,r4,26988
  808ddc:	080516c0 	call	80516c <f_close>
  808de0:	1009883a 	mov	r4,r2
  808de4:	08083cc0 	call	8083cc <put_rc>
				break;
  808de8:	0002d406 	br	80993c <main+0x1494>

			case 'd': /* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1))
  808dec:	e0fff404 	addi	r3,fp,-48
  808df0:	e0bff304 	addi	r2,fp,-52
  808df4:	180b883a 	mov	r5,r3
  808df8:	1009883a 	mov	r4,r2
  808dfc:	08099500 	call	809950 <xatoi>
  808e00:	1002c126 	beq	r2,zero,809908 <main+0x1460>
					break;
				ofs = File1.fptr;
  808e04:	00802074 	movhi	r2,129
  808e08:	109a5b04 	addi	r2,r2,26988
  808e0c:	10800217 	ldw	r2,8(r2)
  808e10:	e0bfe415 	stw	r2,-112(fp)
				while (p1) {
  808e14:	00002706 	br	808eb4 <main+0xa0c>
					if ((uint32_t) p1 >= 16) {
  808e18:	e0bff417 	ldw	r2,-48(fp)
  808e1c:	10800430 	cmpltui	r2,r2,16
  808e20:	1000061e 	bne	r2,zero,808e3c <main+0x994>
						cnt = 16;
  808e24:	00800404 	movi	r2,16
  808e28:	e0bff915 	stw	r2,-28(fp)
						p1 -= 16;
  808e2c:	e0bff417 	ldw	r2,-48(fp)
  808e30:	10bffc04 	addi	r2,r2,-16
  808e34:	e0bff415 	stw	r2,-48(fp)
  808e38:	00000306 	br	808e48 <main+0x9a0>
					} else {
						cnt = p1;
  808e3c:	e0bff417 	ldw	r2,-48(fp)
  808e40:	e0bff915 	stw	r2,-28(fp)
						p1 = 0;
  808e44:	e03ff415 	stw	zero,-48(fp)
					}
					res = f_read(&File1, Buff, cnt, &cnt);
  808e48:	e0bff917 	ldw	r2,-28(fp)
  808e4c:	e0fff904 	addi	r3,fp,-28
  808e50:	180f883a 	mov	r7,r3
  808e54:	100d883a 	mov	r6,r2
  808e58:	01402074 	movhi	r5,129
  808e5c:	295aea04 	addi	r5,r5,27560
  808e60:	01002074 	movhi	r4,129
  808e64:	211a5b04 	addi	r4,r4,26988
  808e68:	08044780 	call	804478 <f_read>
  808e6c:	e0bfed05 	stb	r2,-76(fp)
					if (res != FR_OK) {
  808e70:	e0bfed03 	ldbu	r2,-76(fp)
  808e74:	10000426 	beq	r2,zero,808e88 <main+0x9e0>
						put_rc(res);
  808e78:	e0bfed03 	ldbu	r2,-76(fp)
  808e7c:	1009883a 	mov	r4,r2
  808e80:	08083cc0 	call	8083cc <put_rc>
						break;
  808e84:	00000f06 	br	808ec4 <main+0xa1c>
					}
					if (!cnt)
  808e88:	e0bff917 	ldw	r2,-28(fp)
  808e8c:	10000c26 	beq	r2,zero,808ec0 <main+0xa18>
						break;

					put_dump(Buff, ofs, cnt);
  808e90:	e0bff917 	ldw	r2,-28(fp)
  808e94:	100d883a 	mov	r6,r2
  808e98:	e17fe417 	ldw	r5,-112(fp)
  808e9c:	01002074 	movhi	r4,129
  808ea0:	211aea04 	addi	r4,r4,27560
  808ea4:	080a1180 	call	80a118 <put_dump>
					ofs += 16;
  808ea8:	e0bfe417 	ldw	r2,-112(fp)
  808eac:	10800404 	addi	r2,r2,16
  808eb0:	e0bfe415 	stw	r2,-112(fp)

			case 'd': /* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1))
					break;
				ofs = File1.fptr;
				while (p1) {
  808eb4:	e0bff417 	ldw	r2,-48(fp)
  808eb8:	103fd71e 	bne	r2,zero,808e18 <__alt_data_end+0xff808e18>
						break;

					put_dump(Buff, ofs, cnt);
					ofs += 16;
				}
				break;
  808ebc:	00029f06 	br	80993c <main+0x1494>
					if (res != FR_OK) {
						put_rc(res);
						break;
					}
					if (!cnt)
						break;
  808ec0:	0001883a 	nop

					put_dump(Buff, ofs, cnt);
					ofs += 16;
				}
				break;
  808ec4:	00029d06 	br	80993c <main+0x1494>

			case 'e': /* fe - Seek file pointer */
				if (!xatoi(&ptr, &p1))
  808ec8:	e0fff404 	addi	r3,fp,-48
  808ecc:	e0bff304 	addi	r2,fp,-52
  808ed0:	180b883a 	mov	r5,r3
  808ed4:	1009883a 	mov	r4,r2
  808ed8:	08099500 	call	809950 <xatoi>
  808edc:	10028c26 	beq	r2,zero,809910 <main+0x1468>
					break;
				res = f_lseek(&File1, p1);
  808ee0:	e0bff417 	ldw	r2,-48(fp)
  808ee4:	100b883a 	mov	r5,r2
  808ee8:	01002074 	movhi	r4,129
  808eec:	211a5b04 	addi	r4,r4,26988
  808ef0:	08051b40 	call	8051b4 <f_lseek>
  808ef4:	e0bfed05 	stb	r2,-76(fp)
				put_rc(res);
  808ef8:	e0bfed03 	ldbu	r2,-76(fp)
  808efc:	1009883a 	mov	r4,r2
  808f00:	08083cc0 	call	8083cc <put_rc>
				if (res == FR_OK)
  808f04:	e0bfed03 	ldbu	r2,-76(fp)
  808f08:	1002831e 	bne	r2,zero,809918 <main+0x1470>
					xprintf("fptr=%lu(0x%lX)\n", File1.fptr, File1.fptr);
  808f0c:	00802074 	movhi	r2,129
  808f10:	109a5b04 	addi	r2,r2,26988
  808f14:	10c00217 	ldw	r3,8(r2)
  808f18:	00802074 	movhi	r2,129
  808f1c:	109a5b04 	addi	r2,r2,26988
  808f20:	10800217 	ldw	r2,8(r2)
  808f24:	100d883a 	mov	r6,r2
  808f28:	180b883a 	mov	r5,r3
  808f2c:	01002074 	movhi	r4,129
  808f30:	2109f904 	addi	r4,r4,10212
  808f34:	0809e540 	call	809e54 <xprintf>
				break;
  808f38:	00027706 	br	809918 <main+0x1470>

			case 'i': /* fi <vol> - Force initialized the logical drive */
				if (!xatoi(&ptr, &p1))
  808f3c:	e0fff404 	addi	r3,fp,-48
  808f40:	e0bff304 	addi	r2,fp,-52
  808f44:	180b883a 	mov	r5,r3
  808f48:	1009883a 	mov	r4,r2
  808f4c:	08099500 	call	809950 <xatoi>
  808f50:	10027326 	beq	r2,zero,809920 <main+0x1478>
					break;
				put_rc(f_mount((uint8_t) p1, &Fatfs[p1]));
  808f54:	e0bff417 	ldw	r2,-48(fp)
  808f58:	11003fcc 	andi	r4,r2,255
  808f5c:	e0bff417 	ldw	r2,-48(fp)
  808f60:	10c08c24 	muli	r3,r2,560
  808f64:	00802074 	movhi	r2,129
  808f68:	1099cf04 	addi	r2,r2,26428
  808f6c:	1885883a 	add	r2,r3,r2
  808f70:	100b883a 	mov	r5,r2
  808f74:	0803f600 	call	803f60 <f_mount>
  808f78:	1009883a 	mov	r4,r2
  808f7c:	08083cc0 	call	8083cc <put_rc>
				break;
  808f80:	00026e06 	br	80993c <main+0x1494>

			case 'l': /* fl [<path>] - Directory listing */
				while (*ptr == ' ')
					ptr++;
  808f84:	e0bff317 	ldw	r2,-52(fp)
  808f88:	10800044 	addi	r2,r2,1
  808f8c:	e0bff315 	stw	r2,-52(fp)
					break;
				put_rc(f_mount((uint8_t) p1, &Fatfs[p1]));
				break;

			case 'l': /* fl [<path>] - Directory listing */
				while (*ptr == ' ')
  808f90:	e0bff317 	ldw	r2,-52(fp)
  808f94:	10800003 	ldbu	r2,0(r2)
  808f98:	10803fcc 	andi	r2,r2,255
  808f9c:	1080201c 	xori	r2,r2,128
  808fa0:	10bfe004 	addi	r2,r2,-128
  808fa4:	10800820 	cmpeqi	r2,r2,32
  808fa8:	103ff61e 	bne	r2,zero,808f84 <__alt_data_end+0xff808f84>
					ptr++;
				res = f_opendir(&Dir, ptr);
  808fac:	e0bff317 	ldw	r2,-52(fp)
  808fb0:	100b883a 	mov	r5,r2
  808fb4:	01002074 	movhi	r4,129
  808fb8:	211c7304 	addi	r4,r4,29132
  808fbc:	08056a40 	call	8056a4 <f_opendir>
  808fc0:	e0bfed05 	stb	r2,-76(fp)
				if (res) // if res in non-zero there is an error; print the error.
  808fc4:	e0bfed03 	ldbu	r2,-76(fp)
  808fc8:	10000426 	beq	r2,zero,808fdc <main+0xb34>
				{
					put_rc(res);
  808fcc:	e0bfed03 	ldbu	r2,-76(fp)
  808fd0:	1009883a 	mov	r4,r2
  808fd4:	08083cc0 	call	8083cc <put_rc>
					break;
  808fd8:	00025806 	br	80993c <main+0x1494>
				}
				p1 = s1 = s2 = 0; // otherwise initialize the pointers and proceed.
  808fdc:	e03ff815 	stw	zero,-32(fp)
  808fe0:	e0bff817 	ldw	r2,-32(fp)
  808fe4:	e0bfe215 	stw	r2,-120(fp)
  808fe8:	e0bfe217 	ldw	r2,-120(fp)
  808fec:	e0bff415 	stw	r2,-48(fp)
				for (;;) {
					res = f_readdir(&Dir, &Finfo);
  808ff0:	01402074 	movhi	r5,129
  808ff4:	295ae404 	addi	r5,r5,27536
  808ff8:	01002074 	movhi	r4,129
  808ffc:	211c7304 	addi	r4,r4,29132
  809000:	08058140 	call	805814 <f_readdir>
  809004:	e0bfed05 	stb	r2,-76(fp)
					if ((res != FR_OK) || !Finfo.fname[0])
  809008:	e0bfed03 	ldbu	r2,-76(fp)
  80900c:	10007b1e 	bne	r2,zero,8091fc <main+0xd54>
  809010:	00802074 	movhi	r2,129
  809014:	109ae404 	addi	r2,r2,27536
  809018:	10800243 	ldbu	r2,9(r2)
  80901c:	10803fcc 	andi	r2,r2,255
  809020:	1080201c 	xori	r2,r2,128
  809024:	10bfe004 	addi	r2,r2,-128
  809028:	10007426 	beq	r2,zero,8091fc <main+0xd54>
						break;
					if (Finfo.fattrib & AM_DIR) {
  80902c:	00802074 	movhi	r2,129
  809030:	109ae404 	addi	r2,r2,27536
  809034:	10800203 	ldbu	r2,8(r2)
  809038:	10803fcc 	andi	r2,r2,255
  80903c:	1080040c 	andi	r2,r2,16
  809040:	10000426 	beq	r2,zero,809054 <main+0xbac>
						s2++;
  809044:	e0bff817 	ldw	r2,-32(fp)
  809048:	10800044 	addi	r2,r2,1
  80904c:	e0bff815 	stw	r2,-32(fp)
  809050:	00000906 	br	809078 <main+0xbd0>
					} else {
						s1++;
  809054:	e0bfe217 	ldw	r2,-120(fp)
  809058:	10800044 	addi	r2,r2,1
  80905c:	e0bfe215 	stw	r2,-120(fp)
						p1 += Finfo.fsize;
  809060:	00802074 	movhi	r2,129
  809064:	109ae404 	addi	r2,r2,27536
  809068:	10800017 	ldw	r2,0(r2)
  80906c:	e0fff417 	ldw	r3,-48(fp)
  809070:	10c5883a 	add	r2,r2,r3
  809074:	e0bff415 	stw	r2,-48(fp)
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
  809078:	00802074 	movhi	r2,129
  80907c:	109ae404 	addi	r2,r2,27536
  809080:	10800203 	ldbu	r2,8(r2)
  809084:	10803fcc 	andi	r2,r2,255
  809088:	1080040c 	andi	r2,r2,16
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  80908c:	10000226 	beq	r2,zero,809098 <main+0xbf0>
  809090:	01401104 	movi	r5,68
  809094:	00000106 	br	80909c <main+0xbf4>
  809098:	01400b44 	movi	r5,45
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
  80909c:	00802074 	movhi	r2,129
  8090a0:	109ae404 	addi	r2,r2,27536
  8090a4:	10800203 	ldbu	r2,8(r2)
  8090a8:	10803fcc 	andi	r2,r2,255
  8090ac:	1080004c 	andi	r2,r2,1
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  8090b0:	10000226 	beq	r2,zero,8090bc <main+0xc14>
  8090b4:	01801484 	movi	r6,82
  8090b8:	00000106 	br	8090c0 <main+0xc18>
  8090bc:	01800b44 	movi	r6,45
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
  8090c0:	00802074 	movhi	r2,129
  8090c4:	109ae404 	addi	r2,r2,27536
  8090c8:	10800203 	ldbu	r2,8(r2)
  8090cc:	10803fcc 	andi	r2,r2,255
  8090d0:	1080008c 	andi	r2,r2,2
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  8090d4:	10000226 	beq	r2,zero,8090e0 <main+0xc38>
  8090d8:	01c01204 	movi	r7,72
  8090dc:	00000106 	br	8090e4 <main+0xc3c>
  8090e0:	01c00b44 	movi	r7,45
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
  8090e4:	00802074 	movhi	r2,129
  8090e8:	109ae404 	addi	r2,r2,27536
  8090ec:	10800203 	ldbu	r2,8(r2)
  8090f0:	10803fcc 	andi	r2,r2,255
  8090f4:	1080010c 	andi	r2,r2,4
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  8090f8:	10000226 	beq	r2,zero,809104 <main+0xc5c>
  8090fc:	00c014c4 	movi	r3,83
  809100:	00000106 	br	809108 <main+0xc60>
  809104:	00c00b44 	movi	r3,45
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
							(Finfo.fattrib & AM_ARC) ? 'A' : '-',
  809108:	00802074 	movhi	r2,129
  80910c:	109ae404 	addi	r2,r2,27536
  809110:	10800203 	ldbu	r2,8(r2)
  809114:	10803fcc 	andi	r2,r2,255
  809118:	1080080c 	andi	r2,r2,32
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  80911c:	10000226 	beq	r2,zero,809128 <main+0xc80>
  809120:	01001044 	movi	r4,65
  809124:	00000106 	br	80912c <main+0xc84>
  809128:	01000b44 	movi	r4,45
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
							(Finfo.fattrib & AM_ARC) ? 'A' : '-',
							(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15,
  80912c:	00802074 	movhi	r2,129
  809130:	109ae404 	addi	r2,r2,27536
  809134:	1080010b 	ldhu	r2,4(r2)
  809138:	10bfffcc 	andi	r2,r2,65535
  80913c:	1004d27a 	srli	r2,r2,9
  809140:	10bfffcc 	andi	r2,r2,65535
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  809144:	1201ef04 	addi	r8,r2,1980
							(Finfo.fattrib & AM_DIR) ? 'D' : '-',
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
							(Finfo.fattrib & AM_ARC) ? 'A' : '-',
							(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15,
  809148:	00802074 	movhi	r2,129
  80914c:	109ae404 	addi	r2,r2,27536
  809150:	1080010b 	ldhu	r2,4(r2)
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  809154:	10bfffcc 	andi	r2,r2,65535
  809158:	1004d17a 	srli	r2,r2,5
  80915c:	10bfffcc 	andi	r2,r2,65535
  809160:	124003cc 	andi	r9,r2,15
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
							(Finfo.fattrib & AM_ARC) ? 'A' : '-',
							(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15,
							Finfo.fdate & 31, (Finfo.ftime >> 11),
  809164:	00802074 	movhi	r2,129
  809168:	109ae404 	addi	r2,r2,27536
  80916c:	1080010b 	ldhu	r2,4(r2)
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  809170:	10bfffcc 	andi	r2,r2,65535
  809174:	128007cc 	andi	r10,r2,31
							(Finfo.fattrib & AM_RDO) ? 'R' : '-',
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
							(Finfo.fattrib & AM_ARC) ? 'A' : '-',
							(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15,
							Finfo.fdate & 31, (Finfo.ftime >> 11),
  809178:	00802074 	movhi	r2,129
  80917c:	109ae404 	addi	r2,r2,27536
  809180:	1080018b 	ldhu	r2,6(r2)
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  809184:	10bfffcc 	andi	r2,r2,65535
  809188:	1004d2fa 	srli	r2,r2,11
  80918c:	12ffffcc 	andi	r11,r2,65535
							(Finfo.fattrib & AM_HID) ? 'H' : '-',
							(Finfo.fattrib & AM_SYS) ? 'S' : '-',
							(Finfo.fattrib & AM_ARC) ? 'A' : '-',
							(Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15,
							Finfo.fdate & 31, (Finfo.ftime >> 11),
							(Finfo.ftime >> 5) & 63, Finfo.fsize,
  809190:	00802074 	movhi	r2,129
  809194:	109ae404 	addi	r2,r2,27536
  809198:	1080018b 	ldhu	r2,6(r2)
						s2++;
					} else {
						s1++;
						p1 += Finfo.fsize;
					}
					xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
  80919c:	10bfffcc 	andi	r2,r2,65535
  8091a0:	1004d17a 	srli	r2,r2,5
  8091a4:	10bfffcc 	andi	r2,r2,65535
  8091a8:	13000fcc 	andi	r12,r2,63
  8091ac:	00802074 	movhi	r2,129
  8091b0:	109ae404 	addi	r2,r2,27536
  8091b4:	13400017 	ldw	r13,0(r2)
  8091b8:	00802074 	movhi	r2,129
  8091bc:	109ae644 	addi	r2,r2,27545
  8091c0:	d8800815 	stw	r2,32(sp)
  8091c4:	db400715 	stw	r13,28(sp)
  8091c8:	db000615 	stw	r12,24(sp)
  8091cc:	dac00515 	stw	r11,20(sp)
  8091d0:	da800415 	stw	r10,16(sp)
  8091d4:	da400315 	stw	r9,12(sp)
  8091d8:	da000215 	stw	r8,8(sp)
  8091dc:	d9000115 	stw	r4,4(sp)
  8091e0:	d8c00015 	stw	r3,0(sp)
  8091e4:	01002074 	movhi	r4,129
  8091e8:	2109fe04 	addi	r4,r4,10232
  8091ec:	0809e540 	call	809e54 <xprintf>
#if _USE_LFN
					for (p2 = strlen(Finfo.fname); p2 < 14; p2++)
					xputc(' ');
					xprintf("%s\n", Lfname);
#else
					xputc('\n');
  8091f0:	01000284 	movi	r4,10
  8091f4:	0809bd40 	call	809bd4 <xputc>
#endif
				}
  8091f8:	003f7d06 	br	808ff0 <__alt_data_end+0xff808ff0>
				xprintf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1,
  8091fc:	e0bff417 	ldw	r2,-48(fp)
  809200:	e0fff817 	ldw	r3,-32(fp)
  809204:	180f883a 	mov	r7,r3
  809208:	100d883a 	mov	r6,r2
  80920c:	e17fe217 	ldw	r5,-120(fp)
  809210:	01002074 	movhi	r4,129
  809214:	210a0904 	addi	r4,r4,10276
  809218:	0809e540 	call	809e54 <xprintf>
						s2);
				res = f_getfree(ptr, (uint32_t *) &p1, &fs);
  80921c:	e0bff317 	ldw	r2,-52(fp)
  809220:	e13ffc04 	addi	r4,fp,-16
  809224:	e0fff404 	addi	r3,fp,-48
  809228:	200d883a 	mov	r6,r4
  80922c:	180b883a 	mov	r5,r3
  809230:	1009883a 	mov	r4,r2
  809234:	08059980 	call	805998 <f_getfree>
  809238:	e0bfed05 	stb	r2,-76(fp)
				if (res == FR_OK)
  80923c:	e0bfed03 	ldbu	r2,-76(fp)
  809240:	10000b1e 	bne	r2,zero,809270 <main+0xdc8>
					xprintf(", %10lu bytes free\n", p1 * fs->csize * 512);
  809244:	e0bffc17 	ldw	r2,-16(fp)
  809248:	10800083 	ldbu	r2,2(r2)
  80924c:	10c03fcc 	andi	r3,r2,255
  809250:	e0bff417 	ldw	r2,-48(fp)
  809254:	1885383a 	mul	r2,r3,r2
  809258:	1004927a 	slli	r2,r2,9
  80925c:	100b883a 	mov	r5,r2
  809260:	01002074 	movhi	r4,129
  809264:	210a1404 	addi	r4,r4,10320
  809268:	0809e540 	call	809e54 <xprintf>
				else
					put_rc(res);
				break;
  80926c:	0001b306 	br	80993c <main+0x1494>
						s2);
				res = f_getfree(ptr, (uint32_t *) &p1, &fs);
				if (res == FR_OK)
					xprintf(", %10lu bytes free\n", p1 * fs->csize * 512);
				else
					put_rc(res);
  809270:	e0bfed03 	ldbu	r2,-76(fp)
  809274:	1009883a 	mov	r4,r2
  809278:	08083cc0 	call	8083cc <put_rc>
				break;
  80927c:	0001af06 	br	80993c <main+0x1494>

			case 'o': /* fo <mode> <file> - Open a file */
				if (!xatoi(&ptr, &p1))
  809280:	e0fff404 	addi	r3,fp,-48
  809284:	e0bff304 	addi	r2,fp,-52
  809288:	180b883a 	mov	r5,r3
  80928c:	1009883a 	mov	r4,r2
  809290:	08099500 	call	809950 <xatoi>
  809294:	1001a426 	beq	r2,zero,809928 <main+0x1480>
					break;
				while (*ptr == ' ')
  809298:	00000306 	br	8092a8 <main+0xe00>
					ptr++;
  80929c:	e0bff317 	ldw	r2,-52(fp)
  8092a0:	10800044 	addi	r2,r2,1
  8092a4:	e0bff315 	stw	r2,-52(fp)
				break;

			case 'o': /* fo <mode> <file> - Open a file */
				if (!xatoi(&ptr, &p1))
					break;
				while (*ptr == ' ')
  8092a8:	e0bff317 	ldw	r2,-52(fp)
  8092ac:	10800003 	ldbu	r2,0(r2)
  8092b0:	10803fcc 	andi	r2,r2,255
  8092b4:	1080201c 	xori	r2,r2,128
  8092b8:	10bfe004 	addi	r2,r2,-128
  8092bc:	10800820 	cmpeqi	r2,r2,32
  8092c0:	103ff61e 	bne	r2,zero,80929c <__alt_data_end+0xff80929c>
					ptr++;
				put_rc(f_open(&File1, ptr, (uint8_t) p1));
  8092c4:	e0fff317 	ldw	r3,-52(fp)
  8092c8:	e0bff417 	ldw	r2,-48(fp)
  8092cc:	10803fcc 	andi	r2,r2,255
  8092d0:	100d883a 	mov	r6,r2
  8092d4:	180b883a 	mov	r5,r3
  8092d8:	01002074 	movhi	r4,129
  8092dc:	211a5b04 	addi	r4,r4,26988
  8092e0:	0803ff40 	call	803ff4 <f_open>
  8092e4:	1009883a 	mov	r4,r2
  8092e8:	08083cc0 	call	8083cc <put_rc>
				break;
  8092ec:	00019306 	br	80993c <main+0x1494>

			case 'p': /* fp <len> - read and play file from current fp */
				if (!xatoi(&ptr, &p1))
  8092f0:	e0fff404 	addi	r3,fp,-48
  8092f4:	e0bff304 	addi	r2,fp,-52
  8092f8:	180b883a 	mov	r5,r3
  8092fc:	1009883a 	mov	r4,r2
  809300:	08099500 	call	809950 <xatoi>
  809304:	10018a26 	beq	r2,zero,809930 <main+0x1488>
					break;
				ofs = File1.fptr;
  809308:	00802074 	movhi	r2,129
  80930c:	109a5b04 	addi	r2,r2,26988
  809310:	10800217 	ldw	r2,8(r2)
  809314:	e0bfe415 	stw	r2,-112(fp)

				/* fseek over *.wav header */
				f_lseek(&File1, 44);
  809318:	01400b04 	movi	r5,44
  80931c:	01002074 	movhi	r4,129
  809320:	211a5b04 	addi	r4,r4,26988
  809324:	08051b40 	call	8051b4 <f_lseek>
				p1 -= 44;
  809328:	e0bff417 	ldw	r2,-48(fp)
  80932c:	10bff504 	addi	r2,r2,-44
  809330:	e0bff415 	stw	r2,-48(fp)

				/* Variable declaration */
				int i;
				int switch_0;
				int switch_1;
				int speed_conversion = 4;
  809334:	00800104 	movi	r2,4
  809338:	e0bfe715 	stw	r2,-100(fp)
				int mono = 0;
  80933c:	e03fe815 	stw	zero,-96(fp)
				uint32_t remaining_bytes_in_buff;

				switch_0 = IORD(SWITCH_PIO_BASE, 0) & 0x1;
  809340:	00804034 	movhi	r2,256
  809344:	10844004 	addi	r2,r2,4352
  809348:	10800037 	ldwio	r2,0(r2)
  80934c:	1080004c 	andi	r2,r2,1
  809350:	e0bfee15 	stw	r2,-72(fp)
				switch_1 = IORD(SWITCH_PIO_BASE, 0) & 0x2;
  809354:	00804034 	movhi	r2,256
  809358:	10844004 	addi	r2,r2,4352
  80935c:	10800037 	ldwio	r2,0(r2)
  809360:	1080008c 	andi	r2,r2,2
  809364:	e0bfef15 	stw	r2,-68(fp)

				if (!switch_0 && !switch_1) {
  809368:	e0bfee17 	ldw	r2,-72(fp)
  80936c:	1000081e 	bne	r2,zero,809390 <main+0xee8>
  809370:	e0bfef17 	ldw	r2,-68(fp)
  809374:	1000061e 	bne	r2,zero,809390 <main+0xee8>
					/* stereo and normal speed */
					printf("Normal Speed -- STEREO\n");
  809378:	01002074 	movhi	r4,129
  80937c:	210a1904 	addi	r4,r4,10340
  809380:	080aa200 	call	80aa20 <puts>
					speed_conversion = 4;
  809384:	00800104 	movi	r2,4
  809388:	e0bfe715 	stw	r2,-100(fp)
					mono = 0;
  80938c:	e03fe815 	stw	zero,-96(fp)
				}
				if (switch_0 && !switch_1) {
  809390:	e0bfee17 	ldw	r2,-72(fp)
  809394:	10000826 	beq	r2,zero,8093b8 <main+0xf10>
  809398:	e0bfef17 	ldw	r2,-68(fp)
  80939c:	1000061e 	bne	r2,zero,8093b8 <main+0xf10>
					/* stereo and half speed */
					printf("Half Speed -- STEREO\n");
  8093a0:	01002074 	movhi	r4,129
  8093a4:	210a1f04 	addi	r4,r4,10364
  8093a8:	080aa200 	call	80aa20 <puts>
					speed_conversion = 2;
  8093ac:	00800084 	movi	r2,2
  8093b0:	e0bfe715 	stw	r2,-100(fp)
					mono = 0;
  8093b4:	e03fe815 	stw	zero,-96(fp)
				}
				if (!switch_0 && switch_1) {
  8093b8:	e0bfee17 	ldw	r2,-72(fp)
  8093bc:	1000081e 	bne	r2,zero,8093e0 <main+0xf38>
  8093c0:	e0bfef17 	ldw	r2,-68(fp)
  8093c4:	10000626 	beq	r2,zero,8093e0 <main+0xf38>
					/* stereo and double speed */
					printf("Double Speed -- STEREO\n");
  8093c8:	01002074 	movhi	r4,129
  8093cc:	210a2504 	addi	r4,r4,10388
  8093d0:	080aa200 	call	80aa20 <puts>
					speed_conversion = 8;
  8093d4:	00800204 	movi	r2,8
  8093d8:	e0bfe715 	stw	r2,-100(fp)
					mono = 0;
  8093dc:	e03fe815 	stw	zero,-96(fp)
				}
				if (switch_0 && switch_1) {
  8093e0:	e0bfee17 	ldw	r2,-72(fp)
  8093e4:	10008826 	beq	r2,zero,809608 <main+0x1160>
  8093e8:	e0bfef17 	ldw	r2,-68(fp)
  8093ec:	10008626 	beq	r2,zero,809608 <main+0x1160>
					/* mono and normal speed */
					printf("Normal Speed -- MONO\n");
  8093f0:	01002074 	movhi	r4,129
  8093f4:	210a2b04 	addi	r4,r4,10412
  8093f8:	080aa200 	call	80aa20 <puts>
					speed_conversion = 4;
  8093fc:	00800104 	movi	r2,4
  809400:	e0bfe715 	stw	r2,-100(fp)
					mono = 1;
  809404:	00800044 	movi	r2,1
  809408:	e0bfe815 	stw	r2,-96(fp)
				}

				while (p1 > 0) {
  80940c:	00007e06 	br	809608 <main+0x1160>
					if ((uint32_t) p1 >= blen) {
  809410:	e0bff417 	ldw	r2,-48(fp)
  809414:	1007883a 	mov	r3,r2
  809418:	e0bfe317 	ldw	r2,-116(fp)
  80941c:	18800836 	bltu	r3,r2,809440 <main+0xf98>
						cnt = blen;
  809420:	e0bfe317 	ldw	r2,-116(fp)
  809424:	e0bff915 	stw	r2,-28(fp)
						p1 -= blen;
  809428:	e0bff417 	ldw	r2,-48(fp)
  80942c:	1007883a 	mov	r3,r2
  809430:	e0bfe317 	ldw	r2,-116(fp)
  809434:	1885c83a 	sub	r2,r3,r2
  809438:	e0bff415 	stw	r2,-48(fp)
  80943c:	00000306 	br	80944c <main+0xfa4>
					} else {
						cnt = p1;
  809440:	e0bff417 	ldw	r2,-48(fp)
  809444:	e0bff915 	stw	r2,-28(fp)
						p1 = 0;
  809448:	e03ff415 	stw	zero,-48(fp)
					}

					/* Read from file pointer */
					res = f_read(&File1, Buff, cnt, &s2);
  80944c:	e0bff917 	ldw	r2,-28(fp)
  809450:	e0fff804 	addi	r3,fp,-32
  809454:	180f883a 	mov	r7,r3
  809458:	100d883a 	mov	r6,r2
  80945c:	01402074 	movhi	r5,129
  809460:	295aea04 	addi	r5,r5,27560
  809464:	01002074 	movhi	r4,129
  809468:	211a5b04 	addi	r4,r4,26988
  80946c:	08044780 	call	804478 <f_read>
  809470:	e0bfed05 	stb	r2,-76(fp)
					if (res != FR_OK) {
  809474:	e0bfed03 	ldbu	r2,-76(fp)
  809478:	10000426 	beq	r2,zero,80948c <main+0xfe4>
						put_rc(res); // output a read error if a read error occurs
  80947c:	e0bfed03 	ldbu	r2,-76(fp)
  809480:	1009883a 	mov	r4,r2
  809484:	08083cc0 	call	8083cc <put_rc>
						break;
  809488:	00006106 	br	809610 <main+0x1168>
					}

					remaining_bytes_in_buff = s2;
  80948c:	e0bff817 	ldw	r2,-32(fp)
  809490:	e0bfe915 	stw	r2,-92(fp)

					while (remaining_bytes_in_buff > 0) {
  809494:	00005a06 	br	809600 <main+0x1158>
						uint32_t min_bytes_to_write;

						/* Space in the right FIFO */
						uint32_t right_space = (alt_up_audio_write_fifo_space(audio_dev, ALT_UP_AUDIO_RIGHT)) * speed_conversion;
  809498:	01400044 	movi	r5,1
  80949c:	e13fec17 	ldw	r4,-80(fp)
  8094a0:	0810f400 	call	810f40 <alt_up_audio_write_fifo_space>
  8094a4:	1007883a 	mov	r3,r2
  8094a8:	e0bfe717 	ldw	r2,-100(fp)
  8094ac:	1885383a 	mul	r2,r3,r2
  8094b0:	e0bff015 	stw	r2,-64(fp)
						/* Space of bytes in the left FIFO */
						uint32_t left_space = (alt_up_audio_write_fifo_space(audio_dev, ALT_UP_AUDIO_LEFT)) * speed_conversion;
  8094b4:	000b883a 	mov	r5,zero
  8094b8:	e13fec17 	ldw	r4,-80(fp)
  8094bc:	0810f400 	call	810f40 <alt_up_audio_write_fifo_space>
  8094c0:	1007883a 	mov	r3,r2
  8094c4:	e0bfe717 	ldw	r2,-100(fp)
  8094c8:	1885383a 	mul	r2,r3,r2
  8094cc:	e0bff115 	stw	r2,-60(fp)

						/* Calculate minimum space available in both FIFO */
						min_bytes_to_write = MIN(left_space, right_space);
  8094d0:	e0fff117 	ldw	r3,-60(fp)
  8094d4:	e0bff017 	ldw	r2,-64(fp)
  8094d8:	1880012e 	bgeu	r3,r2,8094e0 <main+0x1038>
  8094dc:	1805883a 	mov	r2,r3
  8094e0:	e0bfea15 	stw	r2,-88(fp)

						if (min_bytes_to_write > remaining_bytes_in_buff) {
  8094e4:	e0bfea17 	ldw	r2,-88(fp)
  8094e8:	e0ffe917 	ldw	r3,-92(fp)
  8094ec:	1880022e 	bgeu	r3,r2,8094f8 <main+0x1050>
							min_bytes_to_write = remaining_bytes_in_buff;
  8094f0:	e0bfe917 	ldw	r2,-92(fp)
  8094f4:	e0bfea15 	stw	r2,-88(fp)
						}

						/* Get the position of the next byte to be written to the FIFO in the buffer */
						uint32_t start_position_buff = s2 - remaining_bytes_in_buff;
  8094f8:	e0fff817 	ldw	r3,-32(fp)
  8094fc:	e0bfe917 	ldw	r2,-92(fp)
  809500:	1885c83a 	sub	r2,r3,r2
  809504:	e0bff215 	stw	r2,-56(fp)

						/* Loop from the next byte to be written to in the buffer to the minimum number of bytes available */
						for (i = start_position_buff; i < start_position_buff + min_bytes_to_write; i += speed_conversion) {
  809508:	e0bff217 	ldw	r2,-56(fp)
  80950c:	e0bfe615 	stw	r2,-104(fp)
  809510:	00003206 	br	8095dc <main+0x1134>
							/* Copy buffer data to right buffer and left buffer */
							memcpy(&l_buf, Buff + i, 2);
  809514:	e0ffe617 	ldw	r3,-104(fp)
  809518:	00802074 	movhi	r2,129
  80951c:	109aea04 	addi	r2,r2,27560
  809520:	1887883a 	add	r3,r3,r2
  809524:	e0bffd04 	addi	r2,fp,-12
  809528:	01800084 	movi	r6,2
  80952c:	180b883a 	mov	r5,r3
  809530:	1009883a 	mov	r4,r2
  809534:	080a6d00 	call	80a6d0 <memcpy>
							memcpy(&r_buf, Buff + i + 2, 2);
  809538:	e0bfe617 	ldw	r2,-104(fp)
  80953c:	10c00084 	addi	r3,r2,2
  809540:	00802074 	movhi	r2,129
  809544:	109aea04 	addi	r2,r2,27560
  809548:	1887883a 	add	r3,r3,r2
  80954c:	e0bffe04 	addi	r2,fp,-8
  809550:	01800084 	movi	r6,2
  809554:	180b883a 	mov	r5,r3
  809558:	1009883a 	mov	r4,r2
  80955c:	080a6d00 	call	80a6d0 <memcpy>

							/**
							 * if mono, then write `l_buf` to both right and left FIFO'Ss
							 * otherwise, write `l_buf` to left FIFO and `r_buf` to right FIFO
							 */
							if (mono) {
  809560:	e0bfe817 	ldw	r2,-96(fp)
  809564:	10000d26 	beq	r2,zero,80959c <main+0x10f4>
								alt_up_audio_write_fifo(audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
  809568:	e0bffd04 	addi	r2,fp,-12
  80956c:	000f883a 	mov	r7,zero
  809570:	01800044 	movi	r6,1
  809574:	100b883a 	mov	r5,r2
  809578:	e13fec17 	ldw	r4,-80(fp)
  80957c:	08111500 	call	811150 <alt_up_audio_write_fifo>
								alt_up_audio_write_fifo(audio_dev, &(l_buf), 1, ALT_UP_AUDIO_RIGHT);
  809580:	e0bffd04 	addi	r2,fp,-12
  809584:	01c00044 	movi	r7,1
  809588:	01800044 	movi	r6,1
  80958c:	100b883a 	mov	r5,r2
  809590:	e13fec17 	ldw	r4,-80(fp)
  809594:	08111500 	call	811150 <alt_up_audio_write_fifo>
  809598:	00000c06 	br	8095cc <main+0x1124>
							} else {
								alt_up_audio_write_fifo(audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
  80959c:	e0bffd04 	addi	r2,fp,-12
  8095a0:	000f883a 	mov	r7,zero
  8095a4:	01800044 	movi	r6,1
  8095a8:	100b883a 	mov	r5,r2
  8095ac:	e13fec17 	ldw	r4,-80(fp)
  8095b0:	08111500 	call	811150 <alt_up_audio_write_fifo>
								alt_up_audio_write_fifo(audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
  8095b4:	e0bffe04 	addi	r2,fp,-8
  8095b8:	01c00044 	movi	r7,1
  8095bc:	01800044 	movi	r6,1
  8095c0:	100b883a 	mov	r5,r2
  8095c4:	e13fec17 	ldw	r4,-80(fp)
  8095c8:	08111500 	call	811150 <alt_up_audio_write_fifo>

						/* Get the position of the next byte to be written to the FIFO in the buffer */
						uint32_t start_position_buff = s2 - remaining_bytes_in_buff;

						/* Loop from the next byte to be written to in the buffer to the minimum number of bytes available */
						for (i = start_position_buff; i < start_position_buff + min_bytes_to_write; i += speed_conversion) {
  8095cc:	e0ffe617 	ldw	r3,-104(fp)
  8095d0:	e0bfe717 	ldw	r2,-100(fp)
  8095d4:	1885883a 	add	r2,r3,r2
  8095d8:	e0bfe615 	stw	r2,-104(fp)
  8095dc:	e0fff217 	ldw	r3,-56(fp)
  8095e0:	e0bfea17 	ldw	r2,-88(fp)
  8095e4:	1885883a 	add	r2,r3,r2
  8095e8:	e0ffe617 	ldw	r3,-104(fp)
  8095ec:	18bfc936 	bltu	r3,r2,809514 <__alt_data_end+0xff809514>
								alt_up_audio_write_fifo(audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
							}
						}

						/* Update the number of remaining bytes in buffer */
						remaining_bytes_in_buff -= min_bytes_to_write;
  8095f0:	e0ffe917 	ldw	r3,-92(fp)
  8095f4:	e0bfea17 	ldw	r2,-88(fp)
  8095f8:	1885c83a 	sub	r2,r3,r2
  8095fc:	e0bfe915 	stw	r2,-92(fp)
						break;
					}

					remaining_bytes_in_buff = s2;

					while (remaining_bytes_in_buff > 0) {
  809600:	e0bfe917 	ldw	r2,-92(fp)
  809604:	103fa41e 	bne	r2,zero,809498 <__alt_data_end+0xff809498>
					printf("Normal Speed -- MONO\n");
					speed_conversion = 4;
					mono = 1;
				}

				while (p1 > 0) {
  809608:	e0bff417 	ldw	r2,-48(fp)
  80960c:	00bf8016 	blt	zero,r2,809410 <__alt_data_end+0xff809410>

						/* Update the number of remaining bytes in buffer */
						remaining_bytes_in_buff -= min_bytes_to_write;
					}
				}
				xprintf("done\n");
  809610:	01002074 	movhi	r4,129
  809614:	210a3104 	addi	r4,r4,10436
  809618:	0809e540 	call	809e54 <xprintf>
				break;
  80961c:	0000c706 	br	80993c <main+0x1494>
			case 'r': /* fr <len> - read file */
				if (!xatoi(&ptr, &p1))
  809620:	e0fff404 	addi	r3,fp,-48
  809624:	e0bff304 	addi	r2,fp,-52
  809628:	180b883a 	mov	r5,r3
  80962c:	1009883a 	mov	r4,r2
  809630:	08099500 	call	809950 <xatoi>
  809634:	1000c026 	beq	r2,zero,809938 <main+0x1490>
					break;
				p2 = 0;
  809638:	e03ff515 	stw	zero,-44(fp)
				Timer = 0;
  80963c:	d027490d 	sth	zero,-25308(gp)
				while (p1) {
  809640:	00002706 	br	8096e0 <main+0x1238>
					if ((uint32_t) p1 >= blen) {
  809644:	e0bff417 	ldw	r2,-48(fp)
  809648:	1007883a 	mov	r3,r2
  80964c:	e0bfe317 	ldw	r2,-116(fp)
  809650:	18800836 	bltu	r3,r2,809674 <main+0x11cc>
						cnt = blen;
  809654:	e0bfe317 	ldw	r2,-116(fp)
  809658:	e0bff915 	stw	r2,-28(fp)
						p1 -= blen;
  80965c:	e0bff417 	ldw	r2,-48(fp)
  809660:	1007883a 	mov	r3,r2
  809664:	e0bfe317 	ldw	r2,-116(fp)
  809668:	1885c83a 	sub	r2,r3,r2
  80966c:	e0bff415 	stw	r2,-48(fp)
  809670:	00000306 	br	809680 <main+0x11d8>
					} else {
						cnt = p1;
  809674:	e0bff417 	ldw	r2,-48(fp)
  809678:	e0bff915 	stw	r2,-28(fp)
						p1 = 0;
  80967c:	e03ff415 	stw	zero,-48(fp)
					}
					res = f_read(&File1, Buff, cnt, &s2);
  809680:	e0bff917 	ldw	r2,-28(fp)
  809684:	e0fff804 	addi	r3,fp,-32
  809688:	180f883a 	mov	r7,r3
  80968c:	100d883a 	mov	r6,r2
  809690:	01402074 	movhi	r5,129
  809694:	295aea04 	addi	r5,r5,27560
  809698:	01002074 	movhi	r4,129
  80969c:	211a5b04 	addi	r4,r4,26988
  8096a0:	08044780 	call	804478 <f_read>
  8096a4:	e0bfed05 	stb	r2,-76(fp)
					if (res != FR_OK) {
  8096a8:	e0bfed03 	ldbu	r2,-76(fp)
  8096ac:	10000426 	beq	r2,zero,8096c0 <main+0x1218>
						put_rc(res); // output a read error if a read error occurs
  8096b0:	e0bfed03 	ldbu	r2,-76(fp)
  8096b4:	1009883a 	mov	r4,r2
  8096b8:	08083cc0 	call	8083cc <put_rc>
						break;
  8096bc:	00000c06 	br	8096f0 <main+0x1248>
					}
					p2 += s2; // increment p2 by the s2 referenced value
  8096c0:	e0bff517 	ldw	r2,-44(fp)
  8096c4:	1007883a 	mov	r3,r2
  8096c8:	e0bff817 	ldw	r2,-32(fp)
  8096cc:	1885883a 	add	r2,r3,r2
  8096d0:	e0bff515 	stw	r2,-44(fp)
					if (cnt != s2) //error if cnt does not equal s2 referenced value ???
  8096d4:	e0fff917 	ldw	r3,-28(fp)
  8096d8:	e0bff817 	ldw	r2,-32(fp)
  8096dc:	1880031e 	bne	r3,r2,8096ec <main+0x1244>
			case 'r': /* fr <len> - read file */
				if (!xatoi(&ptr, &p1))
					break;
				p2 = 0;
				Timer = 0;
				while (p1) {
  8096e0:	e0bff417 	ldw	r2,-48(fp)
  8096e4:	103fd71e 	bne	r2,zero,809644 <__alt_data_end+0xff809644>
  8096e8:	00000106 	br	8096f0 <main+0x1248>
						put_rc(res); // output a read error if a read error occurs
						break;
					}
					p2 += s2; // increment p2 by the s2 referenced value
					if (cnt != s2) //error if cnt does not equal s2 referenced value ???
						break;
  8096ec:	0001883a 	nop
				}
				xprintf("%lu bytes read with %lu kB/sec.\n", p2,
  8096f0:	e43ff517 	ldw	r16,-44(fp)
						Timer ? (p2 / Timer) : 0);
  8096f4:	d0a7490b 	ldhu	r2,-25308(gp)
					}
					p2 += s2; // increment p2 by the s2 referenced value
					if (cnt != s2) //error if cnt does not equal s2 referenced value ???
						break;
				}
				xprintf("%lu bytes read with %lu kB/sec.\n", p2,
  8096f8:	10bfffcc 	andi	r2,r2,65535
  8096fc:	10000726 	beq	r2,zero,80971c <main+0x1274>
						Timer ? (p2 / Timer) : 0);
  809700:	e0bff517 	ldw	r2,-44(fp)
  809704:	d0e7490b 	ldhu	r3,-25308(gp)
  809708:	18ffffcc 	andi	r3,r3,65535
					}
					p2 += s2; // increment p2 by the s2 referenced value
					if (cnt != s2) //error if cnt does not equal s2 referenced value ???
						break;
				}
				xprintf("%lu bytes read with %lu kB/sec.\n", p2,
  80970c:	180b883a 	mov	r5,r3
  809710:	1009883a 	mov	r4,r2
  809714:	080a3a80 	call	80a3a8 <__divsi3>
  809718:	00000106 	br	809720 <main+0x1278>
  80971c:	0005883a 	mov	r2,zero
  809720:	100d883a 	mov	r6,r2
  809724:	800b883a 	mov	r5,r16
  809728:	01002074 	movhi	r4,129
  80972c:	210a3304 	addi	r4,r4,10444
  809730:	0809e540 	call	809e54 <xprintf>
						Timer ? (p2 / Timer) : 0);
				break;
  809734:	00008106 	br	80993c <main+0x1494>

			case 's': /* fs [<path>] - Show volume status */
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
  809738:	e0bff317 	ldw	r2,-52(fp)
  80973c:	e13ffc04 	addi	r4,fp,-16
  809740:	e0fff504 	addi	r3,fp,-44
  809744:	200d883a 	mov	r6,r4
  809748:	180b883a 	mov	r5,r3
  80974c:	1009883a 	mov	r4,r2
  809750:	08059980 	call	805998 <f_getfree>
  809754:	e0bfed05 	stb	r2,-76(fp)
				if (res) {
  809758:	e0bfed03 	ldbu	r2,-76(fp)
  80975c:	10000426 	beq	r2,zero,809770 <main+0x12c8>
					put_rc(res);
  809760:	e0bfed03 	ldbu	r2,-76(fp)
  809764:	1009883a 	mov	r4,r2
  809768:	08083cc0 	call	8083cc <put_rc>
					break;
  80976c:	00007306 	br	80993c <main+0x1494>
				}
				xprintf(
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
  809770:	e0bffc17 	ldw	r2,-16(fp)
  809774:	10800003 	ldbu	r2,0(r2)
  809778:	10803fcc 	andi	r2,r2,255
  80977c:	10c000cc 	andi	r3,r2,3
  809780:	d0a00044 	addi	r2,gp,-32767
  809784:	1885883a 	add	r2,r3,r2
  809788:	10800003 	ldbu	r2,0(r2)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  80978c:	12003fcc 	andi	r8,r2,255
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
  809790:	e0bffc17 	ldw	r2,-16(fp)
  809794:	10800083 	ldbu	r2,2(r2)
  809798:	10803fcc 	andi	r2,r2,255
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  80979c:	1012927a 	slli	r9,r2,9
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
  8097a0:	e0bffc17 	ldw	r2,-16(fp)
  8097a4:	108000c3 	ldbu	r2,3(r2)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  8097a8:	12803fcc 	andi	r10,r2,255
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
  8097ac:	e0bffc17 	ldw	r2,-16(fp)
  8097b0:	1080020b 	ldhu	r2,8(r2)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  8097b4:	10bfffcc 	andi	r2,r2,65535
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
  8097b8:	e0fffc17 	ldw	r3,-16(fp)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  8097bc:	18c00717 	ldw	r3,28(r3)
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
						(uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase,
  8097c0:	e13ffc17 	ldw	r4,-16(fp)
  8097c4:	21000617 	ldw	r4,24(r4)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  8097c8:	213fff84 	addi	r4,r4,-2
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
						(uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase,
  8097cc:	e17ffc17 	ldw	r5,-16(fp)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  8097d0:	29400817 	ldw	r5,32(r5)
						"FAT type = FAT%u\nBytes/Cluster = %lu\nNumber of FATs = %u\n"
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
						(uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase,
  8097d4:	e1bffc17 	ldw	r6,-16(fp)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  8097d8:	31800917 	ldw	r6,36(r6)
								"Root DIR entries = %u\nSectors/FAT = %lu\nNumber of clusters = %lu\n"
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
						(uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase,
						fs->database);
  8097dc:	e1fffc17 	ldw	r7,-16(fp)
				res = f_getfree(ptr, (uint32_t *) &p2, &fs);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf(
  8097e0:	39c00a17 	ldw	r7,40(r7)
  8097e4:	d9c00515 	stw	r7,20(sp)
  8097e8:	d9800415 	stw	r6,16(sp)
  8097ec:	d9400315 	stw	r5,12(sp)
  8097f0:	d9000215 	stw	r4,8(sp)
  8097f4:	d8c00115 	stw	r3,4(sp)
  8097f8:	d8800015 	stw	r2,0(sp)
  8097fc:	500f883a 	mov	r7,r10
  809800:	480d883a 	mov	r6,r9
  809804:	400b883a 	mov	r5,r8
  809808:	01002074 	movhi	r4,129
  80980c:	210a3c04 	addi	r4,r4,10480
  809810:	0809e540 	call	809e54 <xprintf>
								"FAT start (lba) = %lu\nDIR start (lba,clustor) = %lu\nData start (lba) = %lu\n\n...",
						ft[fs->fs_type & 3], (uint32_t) fs->csize * 512,
						fs->n_fats, fs->n_rootdir, fs->fsize,
						(uint32_t) fs->n_fatent - 2, fs->fatbase, fs->dirbase,
						fs->database);
				acc_size = acc_files = acc_dirs = 0;
  809814:	d0274a0d 	sth	zero,-25304(gp)
  809818:	d0a74a0b 	ldhu	r2,-25304(gp)
  80981c:	d0a74a8d 	sth	r2,-25302(gp)
  809820:	d0a74a8b 	ldhu	r2,-25302(gp)
  809824:	10bfffcc 	andi	r2,r2,65535
  809828:	d0a74b15 	stw	r2,-25300(gp)
				res = scan_files(ptr);
  80982c:	e0bff317 	ldw	r2,-52(fp)
  809830:	1009883a 	mov	r4,r2
  809834:	080828c0 	call	80828c <scan_files>
  809838:	e0bfed05 	stb	r2,-76(fp)
				if (res) {
  80983c:	e0bfed03 	ldbu	r2,-76(fp)
  809840:	10000426 	beq	r2,zero,809854 <main+0x13ac>
					put_rc(res);
  809844:	e0bfed03 	ldbu	r2,-76(fp)
  809848:	1009883a 	mov	r4,r2
  80984c:	08083cc0 	call	8083cc <put_rc>
					break;
  809850:	00003a06 	br	80993c <main+0x1494>
				}
				xprintf("\r%u files, %lu bytes.\n%u folders.\n"
  809854:	d0a74a8b 	ldhu	r2,-25302(gp)
  809858:	117fffcc 	andi	r5,r2,65535
  80985c:	d1a74b17 	ldw	r6,-25300(gp)
  809860:	d0a74a0b 	ldhu	r2,-25304(gp)
  809864:	11ffffcc 	andi	r7,r2,65535
						"%lu KB total disk space.\n%lu KB available.\n",
						acc_files, acc_size, acc_dirs,
						(fs->n_fatent - 2) * (fs->csize / 2),
  809868:	e0bffc17 	ldw	r2,-16(fp)
  80986c:	10800617 	ldw	r2,24(r2)
  809870:	10ffff84 	addi	r3,r2,-2
  809874:	e0bffc17 	ldw	r2,-16(fp)
  809878:	10800083 	ldbu	r2,2(r2)
				res = scan_files(ptr);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf("\r%u files, %lu bytes.\n%u folders.\n"
  80987c:	10803fcc 	andi	r2,r2,255
  809880:	1004d07a 	srli	r2,r2,1
  809884:	10803fcc 	andi	r2,r2,255
  809888:	1885383a 	mul	r2,r3,r2
						"%lu KB total disk space.\n%lu KB available.\n",
						acc_files, acc_size, acc_dirs,
						(fs->n_fatent - 2) * (fs->csize / 2),
						p2 * (fs->csize / 2));
  80988c:	e0fffc17 	ldw	r3,-16(fp)
  809890:	18c00083 	ldbu	r3,2(r3)
				res = scan_files(ptr);
				if (res) {
					put_rc(res);
					break;
				}
				xprintf("\r%u files, %lu bytes.\n%u folders.\n"
  809894:	18c03fcc 	andi	r3,r3,255
  809898:	1806d07a 	srli	r3,r3,1
  80989c:	19003fcc 	andi	r4,r3,255
  8098a0:	e0fff517 	ldw	r3,-44(fp)
  8098a4:	20c7383a 	mul	r3,r4,r3
  8098a8:	d8c00115 	stw	r3,4(sp)
  8098ac:	d8800015 	stw	r2,0(sp)
  8098b0:	01002074 	movhi	r4,129
  8098b4:	210a6f04 	addi	r4,r4,10684
  8098b8:	0809e540 	call	809e54 <xprintf>
						"%lu KB total disk space.\n%lu KB available.\n",
						acc_files, acc_size, acc_dirs,
						(fs->n_fatent - 2) * (fs->csize / 2),
						p2 * (fs->csize / 2));
				break;
  8098bc:	00001f06 	br	80993c <main+0x1494>

			case 'z': /* fz [<rw size>] - Change R/W length for fr/fw/fx command */
				if (xatoi(&ptr, &p1) && p1 >= 1 && p1 <= sizeof(Buff))
  8098c0:	e0fff404 	addi	r3,fp,-48
  8098c4:	e0bff304 	addi	r2,fp,-52
  8098c8:	180b883a 	mov	r5,r3
  8098cc:	1009883a 	mov	r4,r2
  8098d0:	08099500 	call	809950 <xatoi>
  8098d4:	10000726 	beq	r2,zero,8098f4 <main+0x144c>
  8098d8:	e0bff417 	ldw	r2,-48(fp)
  8098dc:	0080050e 	bge	zero,r2,8098f4 <main+0x144c>
  8098e0:	e0bff417 	ldw	r2,-48(fp)
  8098e4:	10810068 	cmpgeui	r2,r2,1025
  8098e8:	1000021e 	bne	r2,zero,8098f4 <main+0x144c>
					blen = p1;
  8098ec:	e0bff417 	ldw	r2,-48(fp)
  8098f0:	e0bfe315 	stw	r2,-116(fp)
				xprintf("blen=%u\n", blen);
  8098f4:	e17fe317 	ldw	r5,-116(fp)
  8098f8:	01002074 	movhi	r4,129
  8098fc:	210a8304 	addi	r4,r4,10764
  809900:	0809e540 	call	809e54 <xprintf>
				break;
  809904:	00000d06 	br	80993c <main+0x1494>
				put_rc(f_close(&File1));
				break;

			case 'd': /* fd <len> - read and dump file from current fp */
				if (!xatoi(&ptr, &p1))
					break;
  809908:	0001883a 	nop
  80990c:	00000e06 	br	809948 <main+0x14a0>
				}
				break;

			case 'e': /* fe - Seek file pointer */
				if (!xatoi(&ptr, &p1))
					break;
  809910:	0001883a 	nop
  809914:	00000c06 	br	809948 <main+0x14a0>
				res = f_lseek(&File1, p1);
				put_rc(res);
				if (res == FR_OK)
					xprintf("fptr=%lu(0x%lX)\n", File1.fptr, File1.fptr);
				break;
  809918:	0001883a 	nop
  80991c:	00000a06 	br	809948 <main+0x14a0>

			case 'i': /* fi <vol> - Force initialized the logical drive */
				if (!xatoi(&ptr, &p1))
					break;
  809920:	0001883a 	nop
  809924:	00000806 	br	809948 <main+0x14a0>
					put_rc(res);
				break;

			case 'o': /* fo <mode> <file> - Open a file */
				if (!xatoi(&ptr, &p1))
					break;
  809928:	0001883a 	nop
  80992c:	00000606 	br	809948 <main+0x14a0>
				put_rc(f_open(&File1, ptr, (uint8_t) p1));
				break;

			case 'p': /* fp <len> - read and play file from current fp */
				if (!xatoi(&ptr, &p1))
					break;
  809930:	0001883a 	nop
  809934:	00000406 	br	809948 <main+0x14a0>
				}
				xprintf("done\n");
				break;
			case 'r': /* fr <len> - read file */
				if (!xatoi(&ptr, &p1))
					break;
  809938:	0001883a 	nop
				if (xatoi(&ptr, &p1) && p1 >= 1 && p1 <= sizeof(Buff))
					blen = p1;
				xprintf("blen=%u\n", blen);
				break;
			}
			break; // end of FatFS API controls //
  80993c:	00000206 	br	809948 <main+0x14a0>

		case 'h':
			display_help();
  809940:	08084740 	call	808474 <display_help>
			break;
  809944:	00000106 	br	80994c <main+0x14a4>
				if (xatoi(&ptr, &p1) && p1 >= 1 && p1 <= sizeof(Buff))
					blen = p1;
				xprintf("blen=%u\n", blen);
				break;
			}
			break; // end of FatFS API controls //
  809948:	0001883a 	nop
		case 'h':
			display_help();
			break;

		}
	}
  80994c:	003afe06 	br	808548 <__alt_data_end+0xff808548>

00809950 <xatoi>:
#include <stdarg.h>
#include "monitor.h"
#include "uart.h"

int xatoi (char **str, long *res)
{
  809950:	defffb04 	addi	sp,sp,-20
  809954:	df000415 	stw	fp,16(sp)
  809958:	df000404 	addi	fp,sp,16
  80995c:	e13ffe15 	stw	r4,-8(fp)
  809960:	e17fff15 	stw	r5,-4(fp)
  unsigned long val;
  unsigned char c, radix, s = 0;
  809964:	e03ffd85 	stb	zero,-10(fp)


  while ((c = **str) == ' ') (*str)++;
  809968:	00000506 	br	809980 <xatoi+0x30>
  80996c:	e0bffe17 	ldw	r2,-8(fp)
  809970:	10800017 	ldw	r2,0(r2)
  809974:	10c00044 	addi	r3,r2,1
  809978:	e0bffe17 	ldw	r2,-8(fp)
  80997c:	10c00015 	stw	r3,0(r2)
  809980:	e0bffe17 	ldw	r2,-8(fp)
  809984:	10800017 	ldw	r2,0(r2)
  809988:	10800003 	ldbu	r2,0(r2)
  80998c:	e0bffd05 	stb	r2,-12(fp)
  809990:	e0bffd03 	ldbu	r2,-12(fp)
  809994:	10800820 	cmpeqi	r2,r2,32
  809998:	103ff41e 	bne	r2,zero,80996c <__alt_data_end+0xff80996c>
  if (c == '-') {
  80999c:	e0bffd03 	ldbu	r2,-12(fp)
  8099a0:	10800b58 	cmpnei	r2,r2,45
  8099a4:	10000b1e 	bne	r2,zero,8099d4 <xatoi+0x84>
    s = 1;
  8099a8:	00800044 	movi	r2,1
  8099ac:	e0bffd85 	stb	r2,-10(fp)
    c = *(++(*str));
  8099b0:	e0bffe17 	ldw	r2,-8(fp)
  8099b4:	10800017 	ldw	r2,0(r2)
  8099b8:	10c00044 	addi	r3,r2,1
  8099bc:	e0bffe17 	ldw	r2,-8(fp)
  8099c0:	10c00015 	stw	r3,0(r2)
  8099c4:	e0bffe17 	ldw	r2,-8(fp)
  8099c8:	10800017 	ldw	r2,0(r2)
  8099cc:	10800003 	ldbu	r2,0(r2)
  8099d0:	e0bffd05 	stb	r2,-12(fp)
  }
  if (c == '0') {
  8099d4:	e0bffd03 	ldbu	r2,-12(fp)
  8099d8:	10800c18 	cmpnei	r2,r2,48
  8099dc:	1000391e 	bne	r2,zero,809ac4 <xatoi+0x174>
    c = *(++(*str));
  8099e0:	e0bffe17 	ldw	r2,-8(fp)
  8099e4:	10800017 	ldw	r2,0(r2)
  8099e8:	10c00044 	addi	r3,r2,1
  8099ec:	e0bffe17 	ldw	r2,-8(fp)
  8099f0:	10c00015 	stw	r3,0(r2)
  8099f4:	e0bffe17 	ldw	r2,-8(fp)
  8099f8:	10800017 	ldw	r2,0(r2)
  8099fc:	10800003 	ldbu	r2,0(r2)
  809a00:	e0bffd05 	stb	r2,-12(fp)
    if (c <= ' ') {
  809a04:	e0bffd03 	ldbu	r2,-12(fp)
  809a08:	10800868 	cmpgeui	r2,r2,33
  809a0c:	1000041e 	bne	r2,zero,809a20 <xatoi+0xd0>
      *res = 0; return 1;
  809a10:	e0bfff17 	ldw	r2,-4(fp)
  809a14:	10000015 	stw	zero,0(r2)
  809a18:	00800044 	movi	r2,1
  809a1c:	00006906 	br	809bc4 <xatoi+0x274>
    }
    if (c == 'x') {
  809a20:	e0bffd03 	ldbu	r2,-12(fp)
  809a24:	10801e18 	cmpnei	r2,r2,120
  809a28:	10000c1e 	bne	r2,zero,809a5c <xatoi+0x10c>
      radix = 16;
  809a2c:	00800404 	movi	r2,16
  809a30:	e0bffd45 	stb	r2,-11(fp)
      c = *(++(*str));
  809a34:	e0bffe17 	ldw	r2,-8(fp)
  809a38:	10800017 	ldw	r2,0(r2)
  809a3c:	10c00044 	addi	r3,r2,1
  809a40:	e0bffe17 	ldw	r2,-8(fp)
  809a44:	10c00015 	stw	r3,0(r2)
  809a48:	e0bffe17 	ldw	r2,-8(fp)
  809a4c:	10800017 	ldw	r2,0(r2)
  809a50:	10800003 	ldbu	r2,0(r2)
  809a54:	e0bffd05 	stb	r2,-12(fp)
  809a58:	00002406 	br	809aec <xatoi+0x19c>
    } else {
      if (c == 'b') {
  809a5c:	e0bffd03 	ldbu	r2,-12(fp)
  809a60:	10801898 	cmpnei	r2,r2,98
  809a64:	10000c1e 	bne	r2,zero,809a98 <xatoi+0x148>
        radix = 2;
  809a68:	00800084 	movi	r2,2
  809a6c:	e0bffd45 	stb	r2,-11(fp)
        c = *(++(*str));
  809a70:	e0bffe17 	ldw	r2,-8(fp)
  809a74:	10800017 	ldw	r2,0(r2)
  809a78:	10c00044 	addi	r3,r2,1
  809a7c:	e0bffe17 	ldw	r2,-8(fp)
  809a80:	10c00015 	stw	r3,0(r2)
  809a84:	e0bffe17 	ldw	r2,-8(fp)
  809a88:	10800017 	ldw	r2,0(r2)
  809a8c:	10800003 	ldbu	r2,0(r2)
  809a90:	e0bffd05 	stb	r2,-12(fp)
  809a94:	00001506 	br	809aec <xatoi+0x19c>
      } else {
        if ((c >= '0')&&(c <= '9'))
  809a98:	e0bffd03 	ldbu	r2,-12(fp)
  809a9c:	10800c30 	cmpltui	r2,r2,48
  809aa0:	1000061e 	bne	r2,zero,809abc <xatoi+0x16c>
  809aa4:	e0bffd03 	ldbu	r2,-12(fp)
  809aa8:	10800ea8 	cmpgeui	r2,r2,58
  809aac:	1000031e 	bne	r2,zero,809abc <xatoi+0x16c>
          radix = 8;
  809ab0:	00800204 	movi	r2,8
  809ab4:	e0bffd45 	stb	r2,-11(fp)
  809ab8:	00000c06 	br	809aec <xatoi+0x19c>
        else
          return 0;
  809abc:	0005883a 	mov	r2,zero
  809ac0:	00004006 	br	809bc4 <xatoi+0x274>
      }
    }
  } else {
    if ((c < '1')||(c > '9'))
  809ac4:	e0bffd03 	ldbu	r2,-12(fp)
  809ac8:	10800c70 	cmpltui	r2,r2,49
  809acc:	1000031e 	bne	r2,zero,809adc <xatoi+0x18c>
  809ad0:	e0bffd03 	ldbu	r2,-12(fp)
  809ad4:	10800eb0 	cmpltui	r2,r2,58
  809ad8:	1000021e 	bne	r2,zero,809ae4 <xatoi+0x194>
      return 0;
  809adc:	0005883a 	mov	r2,zero
  809ae0:	00003806 	br	809bc4 <xatoi+0x274>
    radix = 10;
  809ae4:	00800284 	movi	r2,10
  809ae8:	e0bffd45 	stb	r2,-11(fp)
  }
  val = 0;
  809aec:	e03ffc15 	stw	zero,-16(fp)
  while (c > ' ') {
  809af0:	00002806 	br	809b94 <xatoi+0x244>
    if (c >= 'a') c -= 0x20;
  809af4:	e0bffd03 	ldbu	r2,-12(fp)
  809af8:	10801870 	cmpltui	r2,r2,97
  809afc:	1000031e 	bne	r2,zero,809b0c <xatoi+0x1bc>
  809b00:	e0bffd03 	ldbu	r2,-12(fp)
  809b04:	10bff804 	addi	r2,r2,-32
  809b08:	e0bffd05 	stb	r2,-12(fp)
    c -= '0';
  809b0c:	e0bffd03 	ldbu	r2,-12(fp)
  809b10:	10bff404 	addi	r2,r2,-48
  809b14:	e0bffd05 	stb	r2,-12(fp)
    if (c >= 17) {
  809b18:	e0bffd03 	ldbu	r2,-12(fp)
  809b1c:	10800470 	cmpltui	r2,r2,17
  809b20:	1000081e 	bne	r2,zero,809b44 <xatoi+0x1f4>
      c -= 7;
  809b24:	e0bffd03 	ldbu	r2,-12(fp)
  809b28:	10bffe44 	addi	r2,r2,-7
  809b2c:	e0bffd05 	stb	r2,-12(fp)
      if (c <= 9) return 0;
  809b30:	e0bffd03 	ldbu	r2,-12(fp)
  809b34:	108002a8 	cmpgeui	r2,r2,10
  809b38:	1000021e 	bne	r2,zero,809b44 <xatoi+0x1f4>
  809b3c:	0005883a 	mov	r2,zero
  809b40:	00002006 	br	809bc4 <xatoi+0x274>
    }
    if (c >= radix) return 0;
  809b44:	e0fffd03 	ldbu	r3,-12(fp)
  809b48:	e0bffd43 	ldbu	r2,-11(fp)
  809b4c:	18800236 	bltu	r3,r2,809b58 <xatoi+0x208>
  809b50:	0005883a 	mov	r2,zero
  809b54:	00001b06 	br	809bc4 <xatoi+0x274>
    val = val * radix + c;
  809b58:	e0fffd43 	ldbu	r3,-11(fp)
  809b5c:	e0bffc17 	ldw	r2,-16(fp)
  809b60:	1887383a 	mul	r3,r3,r2
  809b64:	e0bffd03 	ldbu	r2,-12(fp)
  809b68:	1885883a 	add	r2,r3,r2
  809b6c:	e0bffc15 	stw	r2,-16(fp)
    c = *(++(*str));
  809b70:	e0bffe17 	ldw	r2,-8(fp)
  809b74:	10800017 	ldw	r2,0(r2)
  809b78:	10c00044 	addi	r3,r2,1
  809b7c:	e0bffe17 	ldw	r2,-8(fp)
  809b80:	10c00015 	stw	r3,0(r2)
  809b84:	e0bffe17 	ldw	r2,-8(fp)
  809b88:	10800017 	ldw	r2,0(r2)
  809b8c:	10800003 	ldbu	r2,0(r2)
  809b90:	e0bffd05 	stb	r2,-12(fp)
    if ((c < '1')||(c > '9'))
      return 0;
    radix = 10;
  }
  val = 0;
  while (c > ' ') {
  809b94:	e0bffd03 	ldbu	r2,-12(fp)
  809b98:	10800868 	cmpgeui	r2,r2,33
  809b9c:	103fd51e 	bne	r2,zero,809af4 <__alt_data_end+0xff809af4>
    }
    if (c >= radix) return 0;
    val = val * radix + c;
    c = *(++(*str));
  }
  if (s) val = -val;
  809ba0:	e0bffd83 	ldbu	r2,-10(fp)
  809ba4:	10000326 	beq	r2,zero,809bb4 <xatoi+0x264>
  809ba8:	e0bffc17 	ldw	r2,-16(fp)
  809bac:	0085c83a 	sub	r2,zero,r2
  809bb0:	e0bffc15 	stw	r2,-16(fp)
  *res = val;
  809bb4:	e0fffc17 	ldw	r3,-16(fp)
  809bb8:	e0bfff17 	ldw	r2,-4(fp)
  809bbc:	10c00015 	stw	r3,0(r2)
  return 1;
  809bc0:	00800044 	movi	r2,1
}
  809bc4:	e037883a 	mov	sp,fp
  809bc8:	df000017 	ldw	fp,0(sp)
  809bcc:	dec00104 	addi	sp,sp,4
  809bd0:	f800283a 	ret

00809bd4 <xputc>:

void xputc (char c)
{
  809bd4:	defffd04 	addi	sp,sp,-12
  809bd8:	dfc00215 	stw	ra,8(sp)
  809bdc:	df000115 	stw	fp,4(sp)
  809be0:	df000104 	addi	fp,sp,4
  809be4:	2005883a 	mov	r2,r4
  809be8:	e0bfff05 	stb	r2,-4(fp)
  if (c == '\n') uart0_put('\r');
  809bec:	e0bfff07 	ldb	r2,-4(fp)
  809bf0:	10800298 	cmpnei	r2,r2,10
  809bf4:	1000021e 	bne	r2,zero,809c00 <xputc+0x2c>
  809bf8:	01000344 	movi	r4,13
  809bfc:	080a31c0 	call	80a31c <uart0_put>
  uart0_put(c);
  809c00:	e0bfff03 	ldbu	r2,-4(fp)
  809c04:	10803fcc 	andi	r2,r2,255
  809c08:	1009883a 	mov	r4,r2
  809c0c:	080a31c0 	call	80a31c <uart0_put>
}
  809c10:	0001883a 	nop
  809c14:	e037883a 	mov	sp,fp
  809c18:	dfc00117 	ldw	ra,4(sp)
  809c1c:	df000017 	ldw	fp,0(sp)
  809c20:	dec00204 	addi	sp,sp,8
  809c24:	f800283a 	ret

00809c28 <xputs>:

void xputs (const char* str)
{
  809c28:	defffd04 	addi	sp,sp,-12
  809c2c:	dfc00215 	stw	ra,8(sp)
  809c30:	df000115 	stw	fp,4(sp)
  809c34:	df000104 	addi	fp,sp,4
  809c38:	e13fff15 	stw	r4,-4(fp)
  while (*str)
  809c3c:	00000906 	br	809c64 <xputs+0x3c>
    xputc(*str++);
  809c40:	e0bfff17 	ldw	r2,-4(fp)
  809c44:	10c00044 	addi	r3,r2,1
  809c48:	e0ffff15 	stw	r3,-4(fp)
  809c4c:	10800003 	ldbu	r2,0(r2)
  809c50:	10803fcc 	andi	r2,r2,255
  809c54:	1080201c 	xori	r2,r2,128
  809c58:	10bfe004 	addi	r2,r2,-128
  809c5c:	1009883a 	mov	r4,r2
  809c60:	0809bd40 	call	809bd4 <xputc>
  uart0_put(c);
}

void xputs (const char* str)
{
  while (*str)
  809c64:	e0bfff17 	ldw	r2,-4(fp)
  809c68:	10800003 	ldbu	r2,0(r2)
  809c6c:	10803fcc 	andi	r2,r2,255
  809c70:	1080201c 	xori	r2,r2,128
  809c74:	10bfe004 	addi	r2,r2,-128
  809c78:	103ff11e 	bne	r2,zero,809c40 <__alt_data_end+0xff809c40>
    xputc(*str++);
}
  809c7c:	0001883a 	nop
  809c80:	e037883a 	mov	sp,fp
  809c84:	dfc00117 	ldw	ra,4(sp)
  809c88:	df000017 	ldw	fp,0(sp)
  809c8c:	dec00204 	addi	sp,sp,8
  809c90:	f800283a 	ret

00809c94 <xitoa>:




void xitoa (signed long val, signed char radix, signed char len)
{
  809c94:	defff304 	addi	sp,sp,-52
  809c98:	dfc00c15 	stw	ra,48(sp)
  809c9c:	df000b15 	stw	fp,44(sp)
  809ca0:	df000b04 	addi	fp,sp,44
  809ca4:	e13ffd15 	stw	r4,-12(fp)
  809ca8:	2807883a 	mov	r3,r5
  809cac:	3005883a 	mov	r2,r6
  809cb0:	e0fffe05 	stb	r3,-8(fp)
  809cb4:	e0bfff05 	stb	r2,-4(fp)
  unsigned char c, r, sgn = 0, pad = ' ';
  809cb8:	e03ff545 	stb	zero,-43(fp)
  809cbc:	00800804 	movi	r2,32
  809cc0:	e0bff585 	stb	r2,-42(fp)
  unsigned char s[20], i = 0;
  809cc4:	e03ff5c5 	stb	zero,-41(fp)
  unsigned long v;


  if (radix < 0) {
  809cc8:	e0bffe07 	ldb	r2,-8(fp)
  809ccc:	10000a0e 	bge	r2,zero,809cf8 <xitoa+0x64>
    radix = -radix;
  809cd0:	e0bffe03 	ldbu	r2,-8(fp)
  809cd4:	0085c83a 	sub	r2,zero,r2
  809cd8:	e0bffe05 	stb	r2,-8(fp)
    if (val < 0) {
  809cdc:	e0bffd17 	ldw	r2,-12(fp)
  809ce0:	1000050e 	bge	r2,zero,809cf8 <xitoa+0x64>
      val = -val;
  809ce4:	e0bffd17 	ldw	r2,-12(fp)
  809ce8:	0085c83a 	sub	r2,zero,r2
  809cec:	e0bffd15 	stw	r2,-12(fp)
      sgn = '-';
  809cf0:	00800b44 	movi	r2,45
  809cf4:	e0bff545 	stb	r2,-43(fp)
    }
  }
  v = val;
  809cf8:	e0bffd17 	ldw	r2,-12(fp)
  809cfc:	e0bff615 	stw	r2,-40(fp)
  r = radix;
  809d00:	e0bffe03 	ldbu	r2,-8(fp)
  809d04:	e0bff705 	stb	r2,-36(fp)
  if (len < 0) {
  809d08:	e0bfff07 	ldb	r2,-4(fp)
  809d0c:	1000050e 	bge	r2,zero,809d24 <xitoa+0x90>
    len = -len;
  809d10:	e0bfff03 	ldbu	r2,-4(fp)
  809d14:	0085c83a 	sub	r2,zero,r2
  809d18:	e0bfff05 	stb	r2,-4(fp)
    pad = '0';
  809d1c:	00800c04 	movi	r2,48
  809d20:	e0bff585 	stb	r2,-42(fp)
  }
  if (len > 20) return;
  809d24:	e0bfff07 	ldb	r2,-4(fp)
  809d28:	10800550 	cmplti	r2,r2,21
  809d2c:	10004326 	beq	r2,zero,809e3c <xitoa+0x1a8>
  do {
    c = (unsigned char)(v % r);
  809d30:	e0fff703 	ldbu	r3,-36(fp)
  809d34:	e0bff617 	ldw	r2,-40(fp)
  809d38:	180b883a 	mov	r5,r3
  809d3c:	1009883a 	mov	r4,r2
  809d40:	080a5040 	call	80a504 <__umodsi3>
  809d44:	e0bff505 	stb	r2,-44(fp)
    if (c >= 10) c += 7;
  809d48:	e0bff503 	ldbu	r2,-44(fp)
  809d4c:	108002b0 	cmpltui	r2,r2,10
  809d50:	1000031e 	bne	r2,zero,809d60 <xitoa+0xcc>
  809d54:	e0bff503 	ldbu	r2,-44(fp)
  809d58:	108001c4 	addi	r2,r2,7
  809d5c:	e0bff505 	stb	r2,-44(fp)
    c += '0';
  809d60:	e0bff503 	ldbu	r2,-44(fp)
  809d64:	10800c04 	addi	r2,r2,48
  809d68:	e0bff505 	stb	r2,-44(fp)
    s[i++] = c;
  809d6c:	e0bff5c3 	ldbu	r2,-41(fp)
  809d70:	10c00044 	addi	r3,r2,1
  809d74:	e0fff5c5 	stb	r3,-41(fp)
  809d78:	10803fcc 	andi	r2,r2,255
  809d7c:	e0fff744 	addi	r3,fp,-35
  809d80:	1885883a 	add	r2,r3,r2
  809d84:	e0fff503 	ldbu	r3,-44(fp)
  809d88:	10c00005 	stb	r3,0(r2)
    v /= r;
  809d8c:	e0bff703 	ldbu	r2,-36(fp)
  809d90:	100b883a 	mov	r5,r2
  809d94:	e13ff617 	ldw	r4,-40(fp)
  809d98:	080a4a00 	call	80a4a0 <__udivsi3>
  809d9c:	e0bff615 	stw	r2,-40(fp)
  } while (v);
  809da0:	e0bff617 	ldw	r2,-40(fp)
  809da4:	103fe21e 	bne	r2,zero,809d30 <__alt_data_end+0xff809d30>
  if (sgn) s[i++] = sgn;
  809da8:	e0bff543 	ldbu	r2,-43(fp)
  809dac:	10001126 	beq	r2,zero,809df4 <xitoa+0x160>
  809db0:	e0bff5c3 	ldbu	r2,-41(fp)
  809db4:	10c00044 	addi	r3,r2,1
  809db8:	e0fff5c5 	stb	r3,-41(fp)
  809dbc:	10803fcc 	andi	r2,r2,255
  809dc0:	e0fff744 	addi	r3,fp,-35
  809dc4:	1885883a 	add	r2,r3,r2
  809dc8:	e0fff543 	ldbu	r3,-43(fp)
  809dcc:	10c00005 	stb	r3,0(r2)
  while (i < len)
  809dd0:	00000806 	br	809df4 <xitoa+0x160>
    s[i++] = pad;
  809dd4:	e0bff5c3 	ldbu	r2,-41(fp)
  809dd8:	10c00044 	addi	r3,r2,1
  809ddc:	e0fff5c5 	stb	r3,-41(fp)
  809de0:	10803fcc 	andi	r2,r2,255
  809de4:	e0fff744 	addi	r3,fp,-35
  809de8:	1885883a 	add	r2,r3,r2
  809dec:	e0fff583 	ldbu	r3,-42(fp)
  809df0:	10c00005 	stb	r3,0(r2)
    c += '0';
    s[i++] = c;
    v /= r;
  } while (v);
  if (sgn) s[i++] = sgn;
  while (i < len)
  809df4:	e0fff5c3 	ldbu	r3,-41(fp)
  809df8:	e0bfff07 	ldb	r2,-4(fp)
  809dfc:	18bff516 	blt	r3,r2,809dd4 <__alt_data_end+0xff809dd4>
    s[i++] = pad;
  do
    xputc(s[--i]);
  809e00:	e0bff5c3 	ldbu	r2,-41(fp)
  809e04:	10bfffc4 	addi	r2,r2,-1
  809e08:	e0bff5c5 	stb	r2,-41(fp)
  809e0c:	e0bff5c3 	ldbu	r2,-41(fp)
  809e10:	e0fff744 	addi	r3,fp,-35
  809e14:	1885883a 	add	r2,r3,r2
  809e18:	10800003 	ldbu	r2,0(r2)
  809e1c:	10803fcc 	andi	r2,r2,255
  809e20:	1080201c 	xori	r2,r2,128
  809e24:	10bfe004 	addi	r2,r2,-128
  809e28:	1009883a 	mov	r4,r2
  809e2c:	0809bd40 	call	809bd4 <xputc>
  while (i);
  809e30:	e0bff5c3 	ldbu	r2,-41(fp)
  809e34:	103ff21e 	bne	r2,zero,809e00 <__alt_data_end+0xff809e00>
  809e38:	00000106 	br	809e40 <xitoa+0x1ac>
  r = radix;
  if (len < 0) {
    len = -len;
    pad = '0';
  }
  if (len > 20) return;
  809e3c:	0001883a 	nop
  while (i < len)
    s[i++] = pad;
  do
    xputc(s[--i]);
  while (i);
}
  809e40:	e037883a 	mov	sp,fp
  809e44:	dfc00117 	ldw	ra,4(sp)
  809e48:	df000017 	ldw	fp,0(sp)
  809e4c:	dec00204 	addi	sp,sp,8
  809e50:	f800283a 	ret

00809e54 <xprintf>:




void xprintf (const char* str, ...)
{
  809e54:	defff704 	addi	sp,sp,-36
  809e58:	dfc00515 	stw	ra,20(sp)
  809e5c:	df000415 	stw	fp,16(sp)
  809e60:	df000404 	addi	fp,sp,16
  809e64:	e13fff15 	stw	r4,-4(fp)
  809e68:	e1400215 	stw	r5,8(fp)
  809e6c:	e1800315 	stw	r6,12(fp)
  809e70:	e1c00415 	stw	r7,16(fp)
  va_list arp;
  char d, r, w, s, l;


  va_start(arp, str);
  809e74:	e0800204 	addi	r2,fp,8
  809e78:	e0bffe15 	stw	r2,-8(fp)

  while ((d = *str++) != 0) {
  809e7c:	00009506 	br	80a0d4 <xprintf+0x280>
    if (d != '%') {
  809e80:	e0bffc07 	ldb	r2,-16(fp)
  809e84:	10800960 	cmpeqi	r2,r2,37
  809e88:	1000041e 	bne	r2,zero,809e9c <xprintf+0x48>
      xputc(d); continue;
  809e8c:	e0bffc07 	ldb	r2,-16(fp)
  809e90:	1009883a 	mov	r4,r2
  809e94:	0809bd40 	call	809bd4 <xputc>
  809e98:	00008e06 	br	80a0d4 <xprintf+0x280>
    }
    d = *str++; w = r = s = l = 0;
  809e9c:	e0bfff17 	ldw	r2,-4(fp)
  809ea0:	10c00044 	addi	r3,r2,1
  809ea4:	e0ffff15 	stw	r3,-4(fp)
  809ea8:	10800003 	ldbu	r2,0(r2)
  809eac:	e0bffc05 	stb	r2,-16(fp)
  809eb0:	e03ffd05 	stb	zero,-12(fp)
  809eb4:	e0bffd03 	ldbu	r2,-12(fp)
  809eb8:	e0bffcc5 	stb	r2,-13(fp)
  809ebc:	e0bffcc3 	ldbu	r2,-13(fp)
  809ec0:	e0bffc45 	stb	r2,-15(fp)
  809ec4:	e0bffc43 	ldbu	r2,-15(fp)
  809ec8:	e0bffc85 	stb	r2,-14(fp)
    if (d == '0') {
  809ecc:	e0bffc07 	ldb	r2,-16(fp)
  809ed0:	10800c18 	cmpnei	r2,r2,48
  809ed4:	1000171e 	bne	r2,zero,809f34 <xprintf+0xe0>
      d = *str++; s = 1;
  809ed8:	e0bfff17 	ldw	r2,-4(fp)
  809edc:	10c00044 	addi	r3,r2,1
  809ee0:	e0ffff15 	stw	r3,-4(fp)
  809ee4:	10800003 	ldbu	r2,0(r2)
  809ee8:	e0bffc05 	stb	r2,-16(fp)
  809eec:	00800044 	movi	r2,1
  809ef0:	e0bffcc5 	stb	r2,-13(fp)
    }
    while ((d >= '0')&&(d <= '9')) {
  809ef4:	00000f06 	br	809f34 <xprintf+0xe0>
      w += w * 10 + (d - '0');
  809ef8:	e0bffc83 	ldbu	r2,-14(fp)
  809efc:	108002a4 	muli	r2,r2,10
  809f00:	1007883a 	mov	r3,r2
  809f04:	e0bffc03 	ldbu	r2,-16(fp)
  809f08:	1885883a 	add	r2,r3,r2
  809f0c:	1007883a 	mov	r3,r2
  809f10:	e0bffc83 	ldbu	r2,-14(fp)
  809f14:	1885883a 	add	r2,r3,r2
  809f18:	10bff404 	addi	r2,r2,-48
  809f1c:	e0bffc85 	stb	r2,-14(fp)
      d = *str++;
  809f20:	e0bfff17 	ldw	r2,-4(fp)
  809f24:	10c00044 	addi	r3,r2,1
  809f28:	e0ffff15 	stw	r3,-4(fp)
  809f2c:	10800003 	ldbu	r2,0(r2)
  809f30:	e0bffc05 	stb	r2,-16(fp)
    }
    d = *str++; w = r = s = l = 0;
    if (d == '0') {
      d = *str++; s = 1;
    }
    while ((d >= '0')&&(d <= '9')) {
  809f34:	e0bffc07 	ldb	r2,-16(fp)
  809f38:	10800c10 	cmplti	r2,r2,48
  809f3c:	1000031e 	bne	r2,zero,809f4c <xprintf+0xf8>
  809f40:	e0bffc07 	ldb	r2,-16(fp)
  809f44:	10800e90 	cmplti	r2,r2,58
  809f48:	103feb1e 	bne	r2,zero,809ef8 <__alt_data_end+0xff809ef8>
      w += w * 10 + (d - '0');
      d = *str++;
    }
    if (s) w = -w;
  809f4c:	e0bffcc7 	ldb	r2,-13(fp)
  809f50:	10000326 	beq	r2,zero,809f60 <xprintf+0x10c>
  809f54:	e0bffc83 	ldbu	r2,-14(fp)
  809f58:	0085c83a 	sub	r2,zero,r2
  809f5c:	e0bffc85 	stb	r2,-14(fp)
    if (d == 'l') {
  809f60:	e0bffc07 	ldb	r2,-16(fp)
  809f64:	10801b18 	cmpnei	r2,r2,108
  809f68:	1000071e 	bne	r2,zero,809f88 <xprintf+0x134>
      l = 1;
  809f6c:	00800044 	movi	r2,1
  809f70:	e0bffd05 	stb	r2,-12(fp)
      d = *str++;
  809f74:	e0bfff17 	ldw	r2,-4(fp)
  809f78:	10c00044 	addi	r3,r2,1
  809f7c:	e0ffff15 	stw	r3,-4(fp)
  809f80:	10800003 	ldbu	r2,0(r2)
  809f84:	e0bffc05 	stb	r2,-16(fp)
    }
    if (!d) break;
  809f88:	e0bffc07 	ldb	r2,-16(fp)
  809f8c:	10005926 	beq	r2,zero,80a0f4 <xprintf+0x2a0>
    if (d == 's') {
  809f90:	e0bffc07 	ldb	r2,-16(fp)
  809f94:	10801cd8 	cmpnei	r2,r2,115
  809f98:	1000071e 	bne	r2,zero,809fb8 <xprintf+0x164>
      xputs(va_arg(arp, char*));
  809f9c:	e0bffe17 	ldw	r2,-8(fp)
  809fa0:	10c00104 	addi	r3,r2,4
  809fa4:	e0fffe15 	stw	r3,-8(fp)
  809fa8:	10800017 	ldw	r2,0(r2)
  809fac:	1009883a 	mov	r4,r2
  809fb0:	0809c280 	call	809c28 <xputs>
      continue;
  809fb4:	00004706 	br	80a0d4 <xprintf+0x280>
    }
    if (d == 'c') {
  809fb8:	e0bffc07 	ldb	r2,-16(fp)
  809fbc:	108018d8 	cmpnei	r2,r2,99
  809fc0:	10000a1e 	bne	r2,zero,809fec <xprintf+0x198>
      // xputc(va_arg(arp, char));
      xputc(va_arg(arp, int));
  809fc4:	e0bffe17 	ldw	r2,-8(fp)
  809fc8:	10c00104 	addi	r3,r2,4
  809fcc:	e0fffe15 	stw	r3,-8(fp)
  809fd0:	10800017 	ldw	r2,0(r2)
  809fd4:	10803fcc 	andi	r2,r2,255
  809fd8:	1080201c 	xori	r2,r2,128
  809fdc:	10bfe004 	addi	r2,r2,-128
  809fe0:	1009883a 	mov	r4,r2
  809fe4:	0809bd40 	call	809bd4 <xputc>
      continue;
  809fe8:	00003a06 	br	80a0d4 <xprintf+0x280>
    }
    if (d == 'u') r = 10;
  809fec:	e0bffc07 	ldb	r2,-16(fp)
  809ff0:	10801d58 	cmpnei	r2,r2,117
  809ff4:	1000021e 	bne	r2,zero,80a000 <xprintf+0x1ac>
  809ff8:	00800284 	movi	r2,10
  809ffc:	e0bffc45 	stb	r2,-15(fp)
    if (d == 'd') r = -10;
  80a000:	e0bffc07 	ldb	r2,-16(fp)
  80a004:	10801918 	cmpnei	r2,r2,100
  80a008:	1000021e 	bne	r2,zero,80a014 <xprintf+0x1c0>
  80a00c:	00bffd84 	movi	r2,-10
  80a010:	e0bffc45 	stb	r2,-15(fp)
    if (d == 'X') r = 16;
  80a014:	e0bffc07 	ldb	r2,-16(fp)
  80a018:	10801618 	cmpnei	r2,r2,88
  80a01c:	1000021e 	bne	r2,zero,80a028 <xprintf+0x1d4>
  80a020:	00800404 	movi	r2,16
  80a024:	e0bffc45 	stb	r2,-15(fp)
    if (d == 'b') r = 2;
  80a028:	e0bffc07 	ldb	r2,-16(fp)
  80a02c:	10801898 	cmpnei	r2,r2,98
  80a030:	1000021e 	bne	r2,zero,80a03c <xprintf+0x1e8>
  80a034:	00800084 	movi	r2,2
  80a038:	e0bffc45 	stb	r2,-15(fp)
    if (!r) break;
  80a03c:	e0bffc47 	ldb	r2,-15(fp)
  80a040:	10002e26 	beq	r2,zero,80a0fc <xprintf+0x2a8>
    if (l) {
  80a044:	e0bffd07 	ldb	r2,-12(fp)
  80a048:	10000b26 	beq	r2,zero,80a078 <xprintf+0x224>
      xitoa((long)va_arg(arp, long), r, w);
  80a04c:	e0bffe17 	ldw	r2,-8(fp)
  80a050:	10c00104 	addi	r3,r2,4
  80a054:	e0fffe15 	stw	r3,-8(fp)
  80a058:	10800017 	ldw	r2,0(r2)
  80a05c:	e0fffc47 	ldb	r3,-15(fp)
  80a060:	e13ffc87 	ldb	r4,-14(fp)
  80a064:	200d883a 	mov	r6,r4
  80a068:	180b883a 	mov	r5,r3
  80a06c:	1009883a 	mov	r4,r2
  80a070:	0809c940 	call	809c94 <xitoa>
  80a074:	00001706 	br	80a0d4 <xprintf+0x280>
    } else {
      if (r > 0)
  80a078:	e0bffc47 	ldb	r2,-15(fp)
  80a07c:	00800b0e 	bge	zero,r2,80a0ac <xprintf+0x258>
        xitoa((unsigned long)va_arg(arp, int), r, w);
  80a080:	e0bffe17 	ldw	r2,-8(fp)
  80a084:	10c00104 	addi	r3,r2,4
  80a088:	e0fffe15 	stw	r3,-8(fp)
  80a08c:	10800017 	ldw	r2,0(r2)
  80a090:	e0fffc47 	ldb	r3,-15(fp)
  80a094:	e13ffc87 	ldb	r4,-14(fp)
  80a098:	200d883a 	mov	r6,r4
  80a09c:	180b883a 	mov	r5,r3
  80a0a0:	1009883a 	mov	r4,r2
  80a0a4:	0809c940 	call	809c94 <xitoa>
  80a0a8:	00000a06 	br	80a0d4 <xprintf+0x280>
      else
        xitoa((long)va_arg(arp, int), r, w);
  80a0ac:	e0bffe17 	ldw	r2,-8(fp)
  80a0b0:	10c00104 	addi	r3,r2,4
  80a0b4:	e0fffe15 	stw	r3,-8(fp)
  80a0b8:	10800017 	ldw	r2,0(r2)
  80a0bc:	e0fffc47 	ldb	r3,-15(fp)
  80a0c0:	e13ffc87 	ldb	r4,-14(fp)
  80a0c4:	200d883a 	mov	r6,r4
  80a0c8:	180b883a 	mov	r5,r3
  80a0cc:	1009883a 	mov	r4,r2
  80a0d0:	0809c940 	call	809c94 <xitoa>
  char d, r, w, s, l;


  va_start(arp, str);

  while ((d = *str++) != 0) {
  80a0d4:	e0bfff17 	ldw	r2,-4(fp)
  80a0d8:	10c00044 	addi	r3,r2,1
  80a0dc:	e0ffff15 	stw	r3,-4(fp)
  80a0e0:	10800003 	ldbu	r2,0(r2)
  80a0e4:	e0bffc05 	stb	r2,-16(fp)
  80a0e8:	e0bffc07 	ldb	r2,-16(fp)
  80a0ec:	103f641e 	bne	r2,zero,809e80 <__alt_data_end+0xff809e80>
        xitoa((long)va_arg(arp, int), r, w);
    }
  }

  va_end(arp);
}
  80a0f0:	00000306 	br	80a100 <xprintf+0x2ac>
    if (s) w = -w;
    if (d == 'l') {
      l = 1;
      d = *str++;
    }
    if (!d) break;
  80a0f4:	0001883a 	nop
  80a0f8:	00000106 	br	80a100 <xprintf+0x2ac>
    }
    if (d == 'u') r = 10;
    if (d == 'd') r = -10;
    if (d == 'X') r = 16;
    if (d == 'b') r = 2;
    if (!r) break;
  80a0fc:	0001883a 	nop
        xitoa((long)va_arg(arp, int), r, w);
    }
  }

  va_end(arp);
}
  80a100:	0001883a 	nop
  80a104:	e037883a 	mov	sp,fp
  80a108:	dfc00117 	ldw	ra,4(sp)
  80a10c:	df000017 	ldw	fp,0(sp)
  80a110:	dec00504 	addi	sp,sp,20
  80a114:	f800283a 	ret

0080a118 <put_dump>:




void put_dump (const unsigned char *buff, unsigned long ofs, int cnt)
{
  80a118:	defffa04 	addi	sp,sp,-24
  80a11c:	dfc00515 	stw	ra,20(sp)
  80a120:	df000415 	stw	fp,16(sp)
  80a124:	df000404 	addi	fp,sp,16
  80a128:	e13ffd15 	stw	r4,-12(fp)
  80a12c:	e17ffe15 	stw	r5,-8(fp)
  80a130:	e1bfff15 	stw	r6,-4(fp)
  unsigned char n;


  xprintf("%08lX ", ofs);
  80a134:	e17ffe17 	ldw	r5,-8(fp)
  80a138:	01002074 	movhi	r4,129
  80a13c:	210a8604 	addi	r4,r4,10776
  80a140:	0809e540 	call	809e54 <xprintf>
  for(n = 0; n < cnt; n++)
  80a144:	e03ffc05 	stb	zero,-16(fp)
  80a148:	00000c06 	br	80a17c <put_dump+0x64>
    xprintf(" %02X", buff[n]);
  80a14c:	e0bffc03 	ldbu	r2,-16(fp)
  80a150:	e0fffd17 	ldw	r3,-12(fp)
  80a154:	1885883a 	add	r2,r3,r2
  80a158:	10800003 	ldbu	r2,0(r2)
  80a15c:	10803fcc 	andi	r2,r2,255
  80a160:	100b883a 	mov	r5,r2
  80a164:	01002074 	movhi	r4,129
  80a168:	210a8804 	addi	r4,r4,10784
  80a16c:	0809e540 	call	809e54 <xprintf>
{
  unsigned char n;


  xprintf("%08lX ", ofs);
  for(n = 0; n < cnt; n++)
  80a170:	e0bffc03 	ldbu	r2,-16(fp)
  80a174:	10800044 	addi	r2,r2,1
  80a178:	e0bffc05 	stb	r2,-16(fp)
  80a17c:	e0fffc03 	ldbu	r3,-16(fp)
  80a180:	e0bfff17 	ldw	r2,-4(fp)
  80a184:	18bff116 	blt	r3,r2,80a14c <__alt_data_end+0xff80a14c>
    xprintf(" %02X", buff[n]);
  xputc(' ');
  80a188:	01000804 	movi	r4,32
  80a18c:	0809bd40 	call	809bd4 <xputc>
  for(n = 0; n < cnt; n++) {
  80a190:	e03ffc05 	stb	zero,-16(fp)
  80a194:	00001d06 	br	80a20c <put_dump+0xf4>
    if ((buff[n] < 0x20)||(buff[n] >= 0x7F))
  80a198:	e0bffc03 	ldbu	r2,-16(fp)
  80a19c:	e0fffd17 	ldw	r3,-12(fp)
  80a1a0:	1885883a 	add	r2,r3,r2
  80a1a4:	10800003 	ldbu	r2,0(r2)
  80a1a8:	10803fcc 	andi	r2,r2,255
  80a1ac:	10800830 	cmpltui	r2,r2,32
  80a1b0:	1000071e 	bne	r2,zero,80a1d0 <put_dump+0xb8>
  80a1b4:	e0bffc03 	ldbu	r2,-16(fp)
  80a1b8:	e0fffd17 	ldw	r3,-12(fp)
  80a1bc:	1885883a 	add	r2,r3,r2
  80a1c0:	10800003 	ldbu	r2,0(r2)
  80a1c4:	10803fcc 	andi	r2,r2,255
  80a1c8:	10801ff0 	cmpltui	r2,r2,127
  80a1cc:	1000031e 	bne	r2,zero,80a1dc <put_dump+0xc4>
      xputc('.');
  80a1d0:	01000b84 	movi	r4,46
  80a1d4:	0809bd40 	call	809bd4 <xputc>
  80a1d8:	00000906 	br	80a200 <put_dump+0xe8>
    else
      xputc(buff[n]);
  80a1dc:	e0bffc03 	ldbu	r2,-16(fp)
  80a1e0:	e0fffd17 	ldw	r3,-12(fp)
  80a1e4:	1885883a 	add	r2,r3,r2
  80a1e8:	10800003 	ldbu	r2,0(r2)
  80a1ec:	10803fcc 	andi	r2,r2,255
  80a1f0:	1080201c 	xori	r2,r2,128
  80a1f4:	10bfe004 	addi	r2,r2,-128
  80a1f8:	1009883a 	mov	r4,r2
  80a1fc:	0809bd40 	call	809bd4 <xputc>

  xprintf("%08lX ", ofs);
  for(n = 0; n < cnt; n++)
    xprintf(" %02X", buff[n]);
  xputc(' ');
  for(n = 0; n < cnt; n++) {
  80a200:	e0bffc03 	ldbu	r2,-16(fp)
  80a204:	10800044 	addi	r2,r2,1
  80a208:	e0bffc05 	stb	r2,-16(fp)
  80a20c:	e0fffc03 	ldbu	r3,-16(fp)
  80a210:	e0bfff17 	ldw	r2,-4(fp)
  80a214:	18bfe016 	blt	r3,r2,80a198 <__alt_data_end+0xff80a198>
    if ((buff[n] < 0x20)||(buff[n] >= 0x7F))
      xputc('.');
    else
      xputc(buff[n]);
  }
  xputc('\n');
  80a218:	01000284 	movi	r4,10
  80a21c:	0809bd40 	call	809bd4 <xputc>
}
  80a220:	0001883a 	nop
  80a224:	e037883a 	mov	sp,fp
  80a228:	dfc00117 	ldw	ra,4(sp)
  80a22c:	df000017 	ldw	fp,0(sp)
  80a230:	dec00204 	addi	sp,sp,8
  80a234:	f800283a 	ret

0080a238 <get_line>:




void get_line (char *buff, int len)
{
  80a238:	defffa04 	addi	sp,sp,-24
  80a23c:	dfc00515 	stw	ra,20(sp)
  80a240:	df000415 	stw	fp,16(sp)
  80a244:	df000404 	addi	fp,sp,16
  80a248:	e13ffe15 	stw	r4,-8(fp)
  80a24c:	e17fff15 	stw	r5,-4(fp)
  char c;
  int idx = 0;
  80a250:	e03ffc15 	stw	zero,-16(fp)
//while(1);

  for (;;) {
    c = xgetc();
  80a254:	080a3580 	call	80a358 <uart0_get>
  80a258:	e0bffd05 	stb	r2,-12(fp)
    //printf("%c",c);
    if (c == '\r')
  80a25c:	e0bffd07 	ldb	r2,-12(fp)
  80a260:	10800358 	cmpnei	r2,r2,13
  80a264:	10001926 	beq	r2,zero,80a2cc <get_line+0x94>
    	break;
    if ((c == '\b') && idx) {
  80a268:	e0bffd07 	ldb	r2,-12(fp)
  80a26c:	10800218 	cmpnei	r2,r2,8
  80a270:	1000051e 	bne	r2,zero,80a288 <get_line+0x50>
  80a274:	e0bffc17 	ldw	r2,-16(fp)
  80a278:	10000326 	beq	r2,zero,80a288 <get_line+0x50>
      idx--;
  80a27c:	e0bffc17 	ldw	r2,-16(fp)
  80a280:	10bfffc4 	addi	r2,r2,-1
  80a284:	e0bffc15 	stw	r2,-16(fp)
    }
    if (((unsigned char)c >= ' ') && (idx < len - 1)) {
  80a288:	e0bffd03 	ldbu	r2,-12(fp)
  80a28c:	10803fcc 	andi	r2,r2,255
  80a290:	10800830 	cmpltui	r2,r2,32
  80a294:	103fef1e 	bne	r2,zero,80a254 <__alt_data_end+0xff80a254>
  80a298:	e0bfff17 	ldw	r2,-4(fp)
  80a29c:	10bfffc4 	addi	r2,r2,-1
  80a2a0:	e0fffc17 	ldw	r3,-16(fp)
  80a2a4:	18bfeb0e 	bge	r3,r2,80a254 <__alt_data_end+0xff80a254>
    	//printf(" space ");
        buff[idx++] = c;
  80a2a8:	e0bffc17 	ldw	r2,-16(fp)
  80a2ac:	10c00044 	addi	r3,r2,1
  80a2b0:	e0fffc15 	stw	r3,-16(fp)
  80a2b4:	1007883a 	mov	r3,r2
  80a2b8:	e0bffe17 	ldw	r2,-8(fp)
  80a2bc:	10c5883a 	add	r2,r2,r3
  80a2c0:	e0fffd03 	ldbu	r3,-12(fp)
  80a2c4:	10c00005 	stb	r3,0(r2)
    }

  }
  80a2c8:	003fe206 	br	80a254 <__alt_data_end+0xff80a254>

  for (;;) {
    c = xgetc();
    //printf("%c",c);
    if (c == '\r')
    	break;
  80a2cc:	0001883a 	nop
    	//printf(" space ");
        buff[idx++] = c;
    }

  }
  buff[idx] = 0;
  80a2d0:	e0bffc17 	ldw	r2,-16(fp)
  80a2d4:	e0fffe17 	ldw	r3,-8(fp)
  80a2d8:	1885883a 	add	r2,r3,r2
  80a2dc:	10000005 	stb	zero,0(r2)
  //xputc('\n');
}
  80a2e0:	0001883a 	nop
  80a2e4:	e037883a 	mov	sp,fp
  80a2e8:	dfc00117 	ldw	ra,4(sp)
  80a2ec:	df000017 	ldw	fp,0(sp)
  80a2f0:	dec00204 	addi	sp,sp,8
  80a2f4:	f800283a 	ret

0080a2f8 <uart0_init>:
/*  In    : Baudrate                                                       */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void uart0_init (unsigned long Baudrate)
{
  80a2f8:	defffe04 	addi	sp,sp,-8
  80a2fc:	df000115 	stw	fp,4(sp)
  80a300:	df000104 	addi	fp,sp,4
  80a304:	e13fff15 	stw	r4,-4(fp)
//   /*
//    * Set baudrate
//    */
//   Divisor = (((UART_FREQ*10) / Baudrate) + 5) / 10;
//   IOWR_ALTERA_AVALON_UART_DIVISOR(UART_BASE, Divisor);
} /* uart0_init */
  80a308:	0001883a 	nop
  80a30c:	e037883a 	mov	sp,fp
  80a310:	df000017 	ldw	fp,0(sp)
  80a314:	dec00104 	addi	sp,sp,4
  80a318:	f800283a 	ret

0080a31c <uart0_put>:
/*  In    : Data                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void uart0_put (unsigned char ch)
{
  80a31c:	defffd04 	addi	sp,sp,-12
  80a320:	dfc00215 	stw	ra,8(sp)
  80a324:	df000115 	stw	fp,4(sp)
  80a328:	df000104 	addi	fp,sp,4
  80a32c:	2005883a 	mov	r2,r4
  80a330:	e0bfff05 	stb	r2,-4(fp)
//   {
//      status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
//   }
//   IOWR_ALTERA_AVALON_UART_TXDATA(UART_BASE, ch);

		printf("%c",ch);
  80a334:	e0bfff03 	ldbu	r2,-4(fp)
  80a338:	1009883a 	mov	r4,r2
  80a33c:	080a9480 	call	80a948 <putchar>



} /* uart0_put */
  80a340:	0001883a 	nop
  80a344:	e037883a 	mov	sp,fp
  80a348:	dfc00117 	ldw	ra,4(sp)
  80a34c:	df000017 	ldw	fp,0(sp)
  80a350:	dec00204 	addi	sp,sp,8
  80a354:	f800283a 	ret

0080a358 <uart0_get>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
unsigned char uart0_get (void)
{
  80a358:	defffd04 	addi	sp,sp,-12
  80a35c:	dfc00215 	stw	ra,8(sp)
  80a360:	df000115 	stw	fp,4(sp)
  80a364:	df000104 	addi	fp,sp,4
//   //printf("%d",(char) data & 0xFF);
//
//      return ((char) data & 0xFF);


   ch = getc(stdin);
  80a368:	d0a00317 	ldw	r2,-32756(gp)
  80a36c:	10800117 	ldw	r2,4(r2)
  80a370:	1009883a 	mov	r4,r2
  80a374:	080a5cc0 	call	80a5cc <getc>
  80a378:	e0bfff05 	stb	r2,-4(fp)
   if (ch == 10) ch = 13;
  80a37c:	e0bfff07 	ldb	r2,-4(fp)
  80a380:	10800298 	cmpnei	r2,r2,10
  80a384:	1000021e 	bne	r2,zero,80a390 <uart0_get+0x38>
  80a388:	00800344 	movi	r2,13
  80a38c:	e0bfff05 	stb	r2,-4(fp)

   return(ch);
  80a390:	e0bfff03 	ldbu	r2,-4(fp)

} /* uart0_get */
  80a394:	e037883a 	mov	sp,fp
  80a398:	dfc00117 	ldw	ra,4(sp)
  80a39c:	df000017 	ldw	fp,0(sp)
  80a3a0:	dec00204 	addi	sp,sp,8
  80a3a4:	f800283a 	ret

0080a3a8 <__divsi3>:
  80a3a8:	20001b16 	blt	r4,zero,80a418 <__divsi3+0x70>
  80a3ac:	000f883a 	mov	r7,zero
  80a3b0:	28001616 	blt	r5,zero,80a40c <__divsi3+0x64>
  80a3b4:	200d883a 	mov	r6,r4
  80a3b8:	29001a2e 	bgeu	r5,r4,80a424 <__divsi3+0x7c>
  80a3bc:	00800804 	movi	r2,32
  80a3c0:	00c00044 	movi	r3,1
  80a3c4:	00000106 	br	80a3cc <__divsi3+0x24>
  80a3c8:	10000d26 	beq	r2,zero,80a400 <__divsi3+0x58>
  80a3cc:	294b883a 	add	r5,r5,r5
  80a3d0:	10bfffc4 	addi	r2,r2,-1
  80a3d4:	18c7883a 	add	r3,r3,r3
  80a3d8:	293ffb36 	bltu	r5,r4,80a3c8 <__alt_data_end+0xff80a3c8>
  80a3dc:	0005883a 	mov	r2,zero
  80a3e0:	18000726 	beq	r3,zero,80a400 <__divsi3+0x58>
  80a3e4:	0005883a 	mov	r2,zero
  80a3e8:	31400236 	bltu	r6,r5,80a3f4 <__divsi3+0x4c>
  80a3ec:	314dc83a 	sub	r6,r6,r5
  80a3f0:	10c4b03a 	or	r2,r2,r3
  80a3f4:	1806d07a 	srli	r3,r3,1
  80a3f8:	280ad07a 	srli	r5,r5,1
  80a3fc:	183ffa1e 	bne	r3,zero,80a3e8 <__alt_data_end+0xff80a3e8>
  80a400:	38000126 	beq	r7,zero,80a408 <__divsi3+0x60>
  80a404:	0085c83a 	sub	r2,zero,r2
  80a408:	f800283a 	ret
  80a40c:	014bc83a 	sub	r5,zero,r5
  80a410:	39c0005c 	xori	r7,r7,1
  80a414:	003fe706 	br	80a3b4 <__alt_data_end+0xff80a3b4>
  80a418:	0109c83a 	sub	r4,zero,r4
  80a41c:	01c00044 	movi	r7,1
  80a420:	003fe306 	br	80a3b0 <__alt_data_end+0xff80a3b0>
  80a424:	00c00044 	movi	r3,1
  80a428:	003fee06 	br	80a3e4 <__alt_data_end+0xff80a3e4>

0080a42c <__modsi3>:
  80a42c:	20001716 	blt	r4,zero,80a48c <__modsi3+0x60>
  80a430:	000f883a 	mov	r7,zero
  80a434:	2005883a 	mov	r2,r4
  80a438:	28001216 	blt	r5,zero,80a484 <__modsi3+0x58>
  80a43c:	2900162e 	bgeu	r5,r4,80a498 <__modsi3+0x6c>
  80a440:	01800804 	movi	r6,32
  80a444:	00c00044 	movi	r3,1
  80a448:	00000106 	br	80a450 <__modsi3+0x24>
  80a44c:	30000a26 	beq	r6,zero,80a478 <__modsi3+0x4c>
  80a450:	294b883a 	add	r5,r5,r5
  80a454:	31bfffc4 	addi	r6,r6,-1
  80a458:	18c7883a 	add	r3,r3,r3
  80a45c:	293ffb36 	bltu	r5,r4,80a44c <__alt_data_end+0xff80a44c>
  80a460:	18000526 	beq	r3,zero,80a478 <__modsi3+0x4c>
  80a464:	1806d07a 	srli	r3,r3,1
  80a468:	11400136 	bltu	r2,r5,80a470 <__modsi3+0x44>
  80a46c:	1145c83a 	sub	r2,r2,r5
  80a470:	280ad07a 	srli	r5,r5,1
  80a474:	183ffb1e 	bne	r3,zero,80a464 <__alt_data_end+0xff80a464>
  80a478:	38000126 	beq	r7,zero,80a480 <__modsi3+0x54>
  80a47c:	0085c83a 	sub	r2,zero,r2
  80a480:	f800283a 	ret
  80a484:	014bc83a 	sub	r5,zero,r5
  80a488:	003fec06 	br	80a43c <__alt_data_end+0xff80a43c>
  80a48c:	0109c83a 	sub	r4,zero,r4
  80a490:	01c00044 	movi	r7,1
  80a494:	003fe706 	br	80a434 <__alt_data_end+0xff80a434>
  80a498:	00c00044 	movi	r3,1
  80a49c:	003ff106 	br	80a464 <__alt_data_end+0xff80a464>

0080a4a0 <__udivsi3>:
  80a4a0:	200d883a 	mov	r6,r4
  80a4a4:	2900152e 	bgeu	r5,r4,80a4fc <__udivsi3+0x5c>
  80a4a8:	28001416 	blt	r5,zero,80a4fc <__udivsi3+0x5c>
  80a4ac:	00800804 	movi	r2,32
  80a4b0:	00c00044 	movi	r3,1
  80a4b4:	00000206 	br	80a4c0 <__udivsi3+0x20>
  80a4b8:	10000e26 	beq	r2,zero,80a4f4 <__udivsi3+0x54>
  80a4bc:	28000516 	blt	r5,zero,80a4d4 <__udivsi3+0x34>
  80a4c0:	294b883a 	add	r5,r5,r5
  80a4c4:	10bfffc4 	addi	r2,r2,-1
  80a4c8:	18c7883a 	add	r3,r3,r3
  80a4cc:	293ffa36 	bltu	r5,r4,80a4b8 <__alt_data_end+0xff80a4b8>
  80a4d0:	18000826 	beq	r3,zero,80a4f4 <__udivsi3+0x54>
  80a4d4:	0005883a 	mov	r2,zero
  80a4d8:	31400236 	bltu	r6,r5,80a4e4 <__udivsi3+0x44>
  80a4dc:	314dc83a 	sub	r6,r6,r5
  80a4e0:	10c4b03a 	or	r2,r2,r3
  80a4e4:	1806d07a 	srli	r3,r3,1
  80a4e8:	280ad07a 	srli	r5,r5,1
  80a4ec:	183ffa1e 	bne	r3,zero,80a4d8 <__alt_data_end+0xff80a4d8>
  80a4f0:	f800283a 	ret
  80a4f4:	0005883a 	mov	r2,zero
  80a4f8:	f800283a 	ret
  80a4fc:	00c00044 	movi	r3,1
  80a500:	003ff406 	br	80a4d4 <__alt_data_end+0xff80a4d4>

0080a504 <__umodsi3>:
  80a504:	2005883a 	mov	r2,r4
  80a508:	2900122e 	bgeu	r5,r4,80a554 <__umodsi3+0x50>
  80a50c:	28001116 	blt	r5,zero,80a554 <__umodsi3+0x50>
  80a510:	01800804 	movi	r6,32
  80a514:	00c00044 	movi	r3,1
  80a518:	00000206 	br	80a524 <__umodsi3+0x20>
  80a51c:	30000c26 	beq	r6,zero,80a550 <__umodsi3+0x4c>
  80a520:	28000516 	blt	r5,zero,80a538 <__umodsi3+0x34>
  80a524:	294b883a 	add	r5,r5,r5
  80a528:	31bfffc4 	addi	r6,r6,-1
  80a52c:	18c7883a 	add	r3,r3,r3
  80a530:	293ffa36 	bltu	r5,r4,80a51c <__alt_data_end+0xff80a51c>
  80a534:	18000626 	beq	r3,zero,80a550 <__umodsi3+0x4c>
  80a538:	1806d07a 	srli	r3,r3,1
  80a53c:	11400136 	bltu	r2,r5,80a544 <__umodsi3+0x40>
  80a540:	1145c83a 	sub	r2,r2,r5
  80a544:	280ad07a 	srli	r5,r5,1
  80a548:	183ffb1e 	bne	r3,zero,80a538 <__alt_data_end+0xff80a538>
  80a54c:	f800283a 	ret
  80a550:	f800283a 	ret
  80a554:	00c00044 	movi	r3,1
  80a558:	003ff706 	br	80a538 <__alt_data_end+0xff80a538>

0080a55c <_getc_r>:
  80a55c:	defffd04 	addi	sp,sp,-12
  80a560:	dc000115 	stw	r16,4(sp)
  80a564:	dfc00215 	stw	ra,8(sp)
  80a568:	2021883a 	mov	r16,r4
  80a56c:	20000226 	beq	r4,zero,80a578 <_getc_r+0x1c>
  80a570:	20800e17 	ldw	r2,56(r4)
  80a574:	10000c26 	beq	r2,zero,80a5a8 <_getc_r+0x4c>
  80a578:	28800117 	ldw	r2,4(r5)
  80a57c:	10bfffc4 	addi	r2,r2,-1
  80a580:	28800115 	stw	r2,4(r5)
  80a584:	10000c16 	blt	r2,zero,80a5b8 <_getc_r+0x5c>
  80a588:	28800017 	ldw	r2,0(r5)
  80a58c:	10c00044 	addi	r3,r2,1
  80a590:	28c00015 	stw	r3,0(r5)
  80a594:	10800003 	ldbu	r2,0(r2)
  80a598:	dfc00217 	ldw	ra,8(sp)
  80a59c:	dc000117 	ldw	r16,4(sp)
  80a5a0:	dec00304 	addi	sp,sp,12
  80a5a4:	f800283a 	ret
  80a5a8:	d9400015 	stw	r5,0(sp)
  80a5ac:	080af340 	call	80af34 <__sinit>
  80a5b0:	d9400017 	ldw	r5,0(sp)
  80a5b4:	003ff006 	br	80a578 <__alt_data_end+0xff80a578>
  80a5b8:	8009883a 	mov	r4,r16
  80a5bc:	dfc00217 	ldw	ra,8(sp)
  80a5c0:	dc000117 	ldw	r16,4(sp)
  80a5c4:	dec00304 	addi	sp,sp,12
  80a5c8:	080aa341 	jmpi	80aa34 <__srget_r>

0080a5cc <getc>:
  80a5cc:	00802074 	movhi	r2,129
  80a5d0:	defffd04 	addi	sp,sp,-12
  80a5d4:	10926b04 	addi	r2,r2,18860
  80a5d8:	dc400115 	stw	r17,4(sp)
  80a5dc:	14400017 	ldw	r17,0(r2)
  80a5e0:	dc000015 	stw	r16,0(sp)
  80a5e4:	dfc00215 	stw	ra,8(sp)
  80a5e8:	2021883a 	mov	r16,r4
  80a5ec:	88000226 	beq	r17,zero,80a5f8 <getc+0x2c>
  80a5f0:	88800e17 	ldw	r2,56(r17)
  80a5f4:	10000d26 	beq	r2,zero,80a62c <getc+0x60>
  80a5f8:	80800117 	ldw	r2,4(r16)
  80a5fc:	10bfffc4 	addi	r2,r2,-1
  80a600:	80800115 	stw	r2,4(r16)
  80a604:	10000c16 	blt	r2,zero,80a638 <getc+0x6c>
  80a608:	80800017 	ldw	r2,0(r16)
  80a60c:	10c00044 	addi	r3,r2,1
  80a610:	80c00015 	stw	r3,0(r16)
  80a614:	10800003 	ldbu	r2,0(r2)
  80a618:	dfc00217 	ldw	ra,8(sp)
  80a61c:	dc400117 	ldw	r17,4(sp)
  80a620:	dc000017 	ldw	r16,0(sp)
  80a624:	dec00304 	addi	sp,sp,12
  80a628:	f800283a 	ret
  80a62c:	8809883a 	mov	r4,r17
  80a630:	080af340 	call	80af34 <__sinit>
  80a634:	003ff006 	br	80a5f8 <__alt_data_end+0xff80a5f8>
  80a638:	800b883a 	mov	r5,r16
  80a63c:	8809883a 	mov	r4,r17
  80a640:	dfc00217 	ldw	ra,8(sp)
  80a644:	dc400117 	ldw	r17,4(sp)
  80a648:	dc000017 	ldw	r16,0(sp)
  80a64c:	dec00304 	addi	sp,sp,12
  80a650:	080aa341 	jmpi	80aa34 <__srget_r>

0080a654 <memcmp>:
  80a654:	01c000c4 	movi	r7,3
  80a658:	3980192e 	bgeu	r7,r6,80a6c0 <memcmp+0x6c>
  80a65c:	2144b03a 	or	r2,r4,r5
  80a660:	11c4703a 	and	r2,r2,r7
  80a664:	10000f26 	beq	r2,zero,80a6a4 <memcmp+0x50>
  80a668:	20800003 	ldbu	r2,0(r4)
  80a66c:	28c00003 	ldbu	r3,0(r5)
  80a670:	10c0151e 	bne	r2,r3,80a6c8 <memcmp+0x74>
  80a674:	31bfff84 	addi	r6,r6,-2
  80a678:	01ffffc4 	movi	r7,-1
  80a67c:	00000406 	br	80a690 <memcmp+0x3c>
  80a680:	20800003 	ldbu	r2,0(r4)
  80a684:	28c00003 	ldbu	r3,0(r5)
  80a688:	31bfffc4 	addi	r6,r6,-1
  80a68c:	10c00e1e 	bne	r2,r3,80a6c8 <memcmp+0x74>
  80a690:	21000044 	addi	r4,r4,1
  80a694:	29400044 	addi	r5,r5,1
  80a698:	31fff91e 	bne	r6,r7,80a680 <__alt_data_end+0xff80a680>
  80a69c:	0005883a 	mov	r2,zero
  80a6a0:	f800283a 	ret
  80a6a4:	20c00017 	ldw	r3,0(r4)
  80a6a8:	28800017 	ldw	r2,0(r5)
  80a6ac:	18bfee1e 	bne	r3,r2,80a668 <__alt_data_end+0xff80a668>
  80a6b0:	31bfff04 	addi	r6,r6,-4
  80a6b4:	21000104 	addi	r4,r4,4
  80a6b8:	29400104 	addi	r5,r5,4
  80a6bc:	39bff936 	bltu	r7,r6,80a6a4 <__alt_data_end+0xff80a6a4>
  80a6c0:	303fe91e 	bne	r6,zero,80a668 <__alt_data_end+0xff80a668>
  80a6c4:	003ff506 	br	80a69c <__alt_data_end+0xff80a69c>
  80a6c8:	10c5c83a 	sub	r2,r2,r3
  80a6cc:	f800283a 	ret

0080a6d0 <memcpy>:
  80a6d0:	defffd04 	addi	sp,sp,-12
  80a6d4:	dfc00215 	stw	ra,8(sp)
  80a6d8:	dc400115 	stw	r17,4(sp)
  80a6dc:	dc000015 	stw	r16,0(sp)
  80a6e0:	00c003c4 	movi	r3,15
  80a6e4:	2005883a 	mov	r2,r4
  80a6e8:	1980452e 	bgeu	r3,r6,80a800 <memcpy+0x130>
  80a6ec:	2906b03a 	or	r3,r5,r4
  80a6f0:	18c000cc 	andi	r3,r3,3
  80a6f4:	1800441e 	bne	r3,zero,80a808 <memcpy+0x138>
  80a6f8:	347ffc04 	addi	r17,r6,-16
  80a6fc:	8822d13a 	srli	r17,r17,4
  80a700:	28c00104 	addi	r3,r5,4
  80a704:	23400104 	addi	r13,r4,4
  80a708:	8820913a 	slli	r16,r17,4
  80a70c:	2b000204 	addi	r12,r5,8
  80a710:	22c00204 	addi	r11,r4,8
  80a714:	84000504 	addi	r16,r16,20
  80a718:	2a800304 	addi	r10,r5,12
  80a71c:	22400304 	addi	r9,r4,12
  80a720:	2c21883a 	add	r16,r5,r16
  80a724:	2811883a 	mov	r8,r5
  80a728:	200f883a 	mov	r7,r4
  80a72c:	41000017 	ldw	r4,0(r8)
  80a730:	1fc00017 	ldw	ra,0(r3)
  80a734:	63c00017 	ldw	r15,0(r12)
  80a738:	39000015 	stw	r4,0(r7)
  80a73c:	53800017 	ldw	r14,0(r10)
  80a740:	6fc00015 	stw	ra,0(r13)
  80a744:	5bc00015 	stw	r15,0(r11)
  80a748:	4b800015 	stw	r14,0(r9)
  80a74c:	18c00404 	addi	r3,r3,16
  80a750:	39c00404 	addi	r7,r7,16
  80a754:	42000404 	addi	r8,r8,16
  80a758:	6b400404 	addi	r13,r13,16
  80a75c:	63000404 	addi	r12,r12,16
  80a760:	5ac00404 	addi	r11,r11,16
  80a764:	52800404 	addi	r10,r10,16
  80a768:	4a400404 	addi	r9,r9,16
  80a76c:	1c3fef1e 	bne	r3,r16,80a72c <__alt_data_end+0xff80a72c>
  80a770:	89c00044 	addi	r7,r17,1
  80a774:	380e913a 	slli	r7,r7,4
  80a778:	310003cc 	andi	r4,r6,15
  80a77c:	02c000c4 	movi	r11,3
  80a780:	11c7883a 	add	r3,r2,r7
  80a784:	29cb883a 	add	r5,r5,r7
  80a788:	5900212e 	bgeu	r11,r4,80a810 <memcpy+0x140>
  80a78c:	1813883a 	mov	r9,r3
  80a790:	2811883a 	mov	r8,r5
  80a794:	200f883a 	mov	r7,r4
  80a798:	42800017 	ldw	r10,0(r8)
  80a79c:	4a400104 	addi	r9,r9,4
  80a7a0:	39ffff04 	addi	r7,r7,-4
  80a7a4:	4abfff15 	stw	r10,-4(r9)
  80a7a8:	42000104 	addi	r8,r8,4
  80a7ac:	59fffa36 	bltu	r11,r7,80a798 <__alt_data_end+0xff80a798>
  80a7b0:	213fff04 	addi	r4,r4,-4
  80a7b4:	2008d0ba 	srli	r4,r4,2
  80a7b8:	318000cc 	andi	r6,r6,3
  80a7bc:	21000044 	addi	r4,r4,1
  80a7c0:	2109883a 	add	r4,r4,r4
  80a7c4:	2109883a 	add	r4,r4,r4
  80a7c8:	1907883a 	add	r3,r3,r4
  80a7cc:	290b883a 	add	r5,r5,r4
  80a7d0:	30000626 	beq	r6,zero,80a7ec <memcpy+0x11c>
  80a7d4:	198d883a 	add	r6,r3,r6
  80a7d8:	29c00003 	ldbu	r7,0(r5)
  80a7dc:	18c00044 	addi	r3,r3,1
  80a7e0:	29400044 	addi	r5,r5,1
  80a7e4:	19ffffc5 	stb	r7,-1(r3)
  80a7e8:	19bffb1e 	bne	r3,r6,80a7d8 <__alt_data_end+0xff80a7d8>
  80a7ec:	dfc00217 	ldw	ra,8(sp)
  80a7f0:	dc400117 	ldw	r17,4(sp)
  80a7f4:	dc000017 	ldw	r16,0(sp)
  80a7f8:	dec00304 	addi	sp,sp,12
  80a7fc:	f800283a 	ret
  80a800:	2007883a 	mov	r3,r4
  80a804:	003ff206 	br	80a7d0 <__alt_data_end+0xff80a7d0>
  80a808:	2007883a 	mov	r3,r4
  80a80c:	003ff106 	br	80a7d4 <__alt_data_end+0xff80a7d4>
  80a810:	200d883a 	mov	r6,r4
  80a814:	003fee06 	br	80a7d0 <__alt_data_end+0xff80a7d0>

0080a818 <memset>:
  80a818:	20c000cc 	andi	r3,r4,3
  80a81c:	2005883a 	mov	r2,r4
  80a820:	18004426 	beq	r3,zero,80a934 <memset+0x11c>
  80a824:	31ffffc4 	addi	r7,r6,-1
  80a828:	30004026 	beq	r6,zero,80a92c <memset+0x114>
  80a82c:	2813883a 	mov	r9,r5
  80a830:	200d883a 	mov	r6,r4
  80a834:	2007883a 	mov	r3,r4
  80a838:	00000406 	br	80a84c <memset+0x34>
  80a83c:	3a3fffc4 	addi	r8,r7,-1
  80a840:	31800044 	addi	r6,r6,1
  80a844:	38003926 	beq	r7,zero,80a92c <memset+0x114>
  80a848:	400f883a 	mov	r7,r8
  80a84c:	18c00044 	addi	r3,r3,1
  80a850:	32400005 	stb	r9,0(r6)
  80a854:	1a0000cc 	andi	r8,r3,3
  80a858:	403ff81e 	bne	r8,zero,80a83c <__alt_data_end+0xff80a83c>
  80a85c:	010000c4 	movi	r4,3
  80a860:	21c02d2e 	bgeu	r4,r7,80a918 <memset+0x100>
  80a864:	29003fcc 	andi	r4,r5,255
  80a868:	200c923a 	slli	r6,r4,8
  80a86c:	3108b03a 	or	r4,r6,r4
  80a870:	200c943a 	slli	r6,r4,16
  80a874:	218cb03a 	or	r6,r4,r6
  80a878:	010003c4 	movi	r4,15
  80a87c:	21c0182e 	bgeu	r4,r7,80a8e0 <memset+0xc8>
  80a880:	3b3ffc04 	addi	r12,r7,-16
  80a884:	6018d13a 	srli	r12,r12,4
  80a888:	1a000104 	addi	r8,r3,4
  80a88c:	1ac00204 	addi	r11,r3,8
  80a890:	6008913a 	slli	r4,r12,4
  80a894:	1a800304 	addi	r10,r3,12
  80a898:	1813883a 	mov	r9,r3
  80a89c:	21000504 	addi	r4,r4,20
  80a8a0:	1909883a 	add	r4,r3,r4
  80a8a4:	49800015 	stw	r6,0(r9)
  80a8a8:	41800015 	stw	r6,0(r8)
  80a8ac:	59800015 	stw	r6,0(r11)
  80a8b0:	51800015 	stw	r6,0(r10)
  80a8b4:	42000404 	addi	r8,r8,16
  80a8b8:	4a400404 	addi	r9,r9,16
  80a8bc:	5ac00404 	addi	r11,r11,16
  80a8c0:	52800404 	addi	r10,r10,16
  80a8c4:	413ff71e 	bne	r8,r4,80a8a4 <__alt_data_end+0xff80a8a4>
  80a8c8:	63000044 	addi	r12,r12,1
  80a8cc:	6018913a 	slli	r12,r12,4
  80a8d0:	39c003cc 	andi	r7,r7,15
  80a8d4:	010000c4 	movi	r4,3
  80a8d8:	1b07883a 	add	r3,r3,r12
  80a8dc:	21c00e2e 	bgeu	r4,r7,80a918 <memset+0x100>
  80a8e0:	1813883a 	mov	r9,r3
  80a8e4:	3811883a 	mov	r8,r7
  80a8e8:	010000c4 	movi	r4,3
  80a8ec:	49800015 	stw	r6,0(r9)
  80a8f0:	423fff04 	addi	r8,r8,-4
  80a8f4:	4a400104 	addi	r9,r9,4
  80a8f8:	223ffc36 	bltu	r4,r8,80a8ec <__alt_data_end+0xff80a8ec>
  80a8fc:	393fff04 	addi	r4,r7,-4
  80a900:	2008d0ba 	srli	r4,r4,2
  80a904:	39c000cc 	andi	r7,r7,3
  80a908:	21000044 	addi	r4,r4,1
  80a90c:	2109883a 	add	r4,r4,r4
  80a910:	2109883a 	add	r4,r4,r4
  80a914:	1907883a 	add	r3,r3,r4
  80a918:	38000526 	beq	r7,zero,80a930 <memset+0x118>
  80a91c:	19cf883a 	add	r7,r3,r7
  80a920:	19400005 	stb	r5,0(r3)
  80a924:	18c00044 	addi	r3,r3,1
  80a928:	38fffd1e 	bne	r7,r3,80a920 <__alt_data_end+0xff80a920>
  80a92c:	f800283a 	ret
  80a930:	f800283a 	ret
  80a934:	2007883a 	mov	r3,r4
  80a938:	300f883a 	mov	r7,r6
  80a93c:	003fc706 	br	80a85c <__alt_data_end+0xff80a85c>

0080a940 <_putchar_r>:
  80a940:	21800217 	ldw	r6,8(r4)
  80a944:	080c0141 	jmpi	80c014 <_putc_r>

0080a948 <putchar>:
  80a948:	00802074 	movhi	r2,129
  80a94c:	10926b04 	addi	r2,r2,18860
  80a950:	200b883a 	mov	r5,r4
  80a954:	11000017 	ldw	r4,0(r2)
  80a958:	21800217 	ldw	r6,8(r4)
  80a95c:	080c0141 	jmpi	80c014 <_putc_r>

0080a960 <_puts_r>:
  80a960:	defff604 	addi	sp,sp,-40
  80a964:	dc000715 	stw	r16,28(sp)
  80a968:	2021883a 	mov	r16,r4
  80a96c:	2809883a 	mov	r4,r5
  80a970:	dc400815 	stw	r17,32(sp)
  80a974:	dfc00915 	stw	ra,36(sp)
  80a978:	2823883a 	mov	r17,r5
  80a97c:	080ab4c0 	call	80ab4c <strlen>
  80a980:	10c00044 	addi	r3,r2,1
  80a984:	d8800115 	stw	r2,4(sp)
  80a988:	00802074 	movhi	r2,129
  80a98c:	108a8b04 	addi	r2,r2,10796
  80a990:	d8800215 	stw	r2,8(sp)
  80a994:	00800044 	movi	r2,1
  80a998:	d8800315 	stw	r2,12(sp)
  80a99c:	00800084 	movi	r2,2
  80a9a0:	dc400015 	stw	r17,0(sp)
  80a9a4:	d8c00615 	stw	r3,24(sp)
  80a9a8:	dec00415 	stw	sp,16(sp)
  80a9ac:	d8800515 	stw	r2,20(sp)
  80a9b0:	80000226 	beq	r16,zero,80a9bc <_puts_r+0x5c>
  80a9b4:	80800e17 	ldw	r2,56(r16)
  80a9b8:	10001426 	beq	r2,zero,80aa0c <_puts_r+0xac>
  80a9bc:	81400217 	ldw	r5,8(r16)
  80a9c0:	2880030b 	ldhu	r2,12(r5)
  80a9c4:	10c8000c 	andi	r3,r2,8192
  80a9c8:	1800061e 	bne	r3,zero,80a9e4 <_puts_r+0x84>
  80a9cc:	29001917 	ldw	r4,100(r5)
  80a9d0:	00f7ffc4 	movi	r3,-8193
  80a9d4:	10880014 	ori	r2,r2,8192
  80a9d8:	20c6703a 	and	r3,r4,r3
  80a9dc:	2880030d 	sth	r2,12(r5)
  80a9e0:	28c01915 	stw	r3,100(r5)
  80a9e4:	d9800404 	addi	r6,sp,16
  80a9e8:	8009883a 	mov	r4,r16
  80a9ec:	080af840 	call	80af84 <__sfvwrite_r>
  80a9f0:	1000091e 	bne	r2,zero,80aa18 <_puts_r+0xb8>
  80a9f4:	00800284 	movi	r2,10
  80a9f8:	dfc00917 	ldw	ra,36(sp)
  80a9fc:	dc400817 	ldw	r17,32(sp)
  80aa00:	dc000717 	ldw	r16,28(sp)
  80aa04:	dec00a04 	addi	sp,sp,40
  80aa08:	f800283a 	ret
  80aa0c:	8009883a 	mov	r4,r16
  80aa10:	080af340 	call	80af34 <__sinit>
  80aa14:	003fe906 	br	80a9bc <__alt_data_end+0xff80a9bc>
  80aa18:	00bfffc4 	movi	r2,-1
  80aa1c:	003ff606 	br	80a9f8 <__alt_data_end+0xff80a9f8>

0080aa20 <puts>:
  80aa20:	00802074 	movhi	r2,129
  80aa24:	10926b04 	addi	r2,r2,18860
  80aa28:	200b883a 	mov	r5,r4
  80aa2c:	11000017 	ldw	r4,0(r2)
  80aa30:	080a9601 	jmpi	80a960 <_puts_r>

0080aa34 <__srget_r>:
  80aa34:	defffd04 	addi	sp,sp,-12
  80aa38:	dc400115 	stw	r17,4(sp)
  80aa3c:	dc000015 	stw	r16,0(sp)
  80aa40:	dfc00215 	stw	ra,8(sp)
  80aa44:	2023883a 	mov	r17,r4
  80aa48:	2821883a 	mov	r16,r5
  80aa4c:	20000226 	beq	r4,zero,80aa58 <__srget_r+0x24>
  80aa50:	20800e17 	ldw	r2,56(r4)
  80aa54:	10001026 	beq	r2,zero,80aa98 <__srget_r+0x64>
  80aa58:	800b883a 	mov	r5,r16
  80aa5c:	8809883a 	mov	r4,r17
  80aa60:	080c6fc0 	call	80c6fc <__srefill_r>
  80aa64:	10000e1e 	bne	r2,zero,80aaa0 <__srget_r+0x6c>
  80aa68:	80c00017 	ldw	r3,0(r16)
  80aa6c:	80800117 	ldw	r2,4(r16)
  80aa70:	19000044 	addi	r4,r3,1
  80aa74:	10bfffc4 	addi	r2,r2,-1
  80aa78:	80800115 	stw	r2,4(r16)
  80aa7c:	81000015 	stw	r4,0(r16)
  80aa80:	18800003 	ldbu	r2,0(r3)
  80aa84:	dfc00217 	ldw	ra,8(sp)
  80aa88:	dc400117 	ldw	r17,4(sp)
  80aa8c:	dc000017 	ldw	r16,0(sp)
  80aa90:	dec00304 	addi	sp,sp,12
  80aa94:	f800283a 	ret
  80aa98:	080af340 	call	80af34 <__sinit>
  80aa9c:	003fee06 	br	80aa58 <__alt_data_end+0xff80aa58>
  80aaa0:	00bfffc4 	movi	r2,-1
  80aaa4:	003ff706 	br	80aa84 <__alt_data_end+0xff80aa84>

0080aaa8 <__srget>:
  80aaa8:	00802074 	movhi	r2,129
  80aaac:	10926b04 	addi	r2,r2,18860
  80aab0:	200b883a 	mov	r5,r4
  80aab4:	11000017 	ldw	r4,0(r2)
  80aab8:	080aa341 	jmpi	80aa34 <__srget_r>

0080aabc <strcpy>:
  80aabc:	2906b03a 	or	r3,r5,r4
  80aac0:	18c000cc 	andi	r3,r3,3
  80aac4:	2005883a 	mov	r2,r4
  80aac8:	1800161e 	bne	r3,zero,80ab24 <strcpy+0x68>
  80aacc:	29c00017 	ldw	r7,0(r5)
  80aad0:	02ffbff4 	movhi	r11,65279
  80aad4:	5affbfc4 	addi	r11,r11,-257
  80aad8:	02a02074 	movhi	r10,32897
  80aadc:	01c6303a 	nor	r3,zero,r7
  80aae0:	3ac9883a 	add	r4,r7,r11
  80aae4:	52a02004 	addi	r10,r10,-32640
  80aae8:	20c6703a 	and	r3,r4,r3
  80aaec:	1a86703a 	and	r3,r3,r10
  80aaf0:	18000c1e 	bne	r3,zero,80ab24 <strcpy+0x68>
  80aaf4:	1011883a 	mov	r8,r2
  80aaf8:	41c00015 	stw	r7,0(r8)
  80aafc:	29400104 	addi	r5,r5,4
  80ab00:	29c00017 	ldw	r7,0(r5)
  80ab04:	41800104 	addi	r6,r8,4
  80ab08:	3011883a 	mov	r8,r6
  80ab0c:	3ad3883a 	add	r9,r7,r11
  80ab10:	01c6303a 	nor	r3,zero,r7
  80ab14:	48c6703a 	and	r3,r9,r3
  80ab18:	1a86703a 	and	r3,r3,r10
  80ab1c:	183ff626 	beq	r3,zero,80aaf8 <__alt_data_end+0xff80aaf8>
  80ab20:	00000106 	br	80ab28 <strcpy+0x6c>
  80ab24:	100d883a 	mov	r6,r2
  80ab28:	28c00003 	ldbu	r3,0(r5)
  80ab2c:	31800044 	addi	r6,r6,1
  80ab30:	29400044 	addi	r5,r5,1
  80ab34:	30ffffc5 	stb	r3,-1(r6)
  80ab38:	18c03fcc 	andi	r3,r3,255
  80ab3c:	18c0201c 	xori	r3,r3,128
  80ab40:	18ffe004 	addi	r3,r3,-128
  80ab44:	183ff81e 	bne	r3,zero,80ab28 <__alt_data_end+0xff80ab28>
  80ab48:	f800283a 	ret

0080ab4c <strlen>:
  80ab4c:	208000cc 	andi	r2,r4,3
  80ab50:	10002026 	beq	r2,zero,80abd4 <strlen+0x88>
  80ab54:	20800007 	ldb	r2,0(r4)
  80ab58:	10002026 	beq	r2,zero,80abdc <strlen+0x90>
  80ab5c:	2005883a 	mov	r2,r4
  80ab60:	00000206 	br	80ab6c <strlen+0x20>
  80ab64:	10c00007 	ldb	r3,0(r2)
  80ab68:	18001826 	beq	r3,zero,80abcc <strlen+0x80>
  80ab6c:	10800044 	addi	r2,r2,1
  80ab70:	10c000cc 	andi	r3,r2,3
  80ab74:	183ffb1e 	bne	r3,zero,80ab64 <__alt_data_end+0xff80ab64>
  80ab78:	10c00017 	ldw	r3,0(r2)
  80ab7c:	01ffbff4 	movhi	r7,65279
  80ab80:	39ffbfc4 	addi	r7,r7,-257
  80ab84:	00ca303a 	nor	r5,zero,r3
  80ab88:	01a02074 	movhi	r6,32897
  80ab8c:	19c7883a 	add	r3,r3,r7
  80ab90:	31a02004 	addi	r6,r6,-32640
  80ab94:	1946703a 	and	r3,r3,r5
  80ab98:	1986703a 	and	r3,r3,r6
  80ab9c:	1800091e 	bne	r3,zero,80abc4 <strlen+0x78>
  80aba0:	10800104 	addi	r2,r2,4
  80aba4:	10c00017 	ldw	r3,0(r2)
  80aba8:	19cb883a 	add	r5,r3,r7
  80abac:	00c6303a 	nor	r3,zero,r3
  80abb0:	28c6703a 	and	r3,r5,r3
  80abb4:	1986703a 	and	r3,r3,r6
  80abb8:	183ff926 	beq	r3,zero,80aba0 <__alt_data_end+0xff80aba0>
  80abbc:	00000106 	br	80abc4 <strlen+0x78>
  80abc0:	10800044 	addi	r2,r2,1
  80abc4:	10c00007 	ldb	r3,0(r2)
  80abc8:	183ffd1e 	bne	r3,zero,80abc0 <__alt_data_end+0xff80abc0>
  80abcc:	1105c83a 	sub	r2,r2,r4
  80abd0:	f800283a 	ret
  80abd4:	2005883a 	mov	r2,r4
  80abd8:	003fe706 	br	80ab78 <__alt_data_end+0xff80ab78>
  80abdc:	0005883a 	mov	r2,zero
  80abe0:	f800283a 	ret

0080abe4 <__fp_unlock>:
  80abe4:	0005883a 	mov	r2,zero
  80abe8:	f800283a 	ret

0080abec <_cleanup_r>:
  80abec:	01402074 	movhi	r5,129
  80abf0:	29737004 	addi	r5,r5,-12864
  80abf4:	080b5041 	jmpi	80b504 <_fwalk_reent>

0080abf8 <__sinit.part.1>:
  80abf8:	defff704 	addi	sp,sp,-36
  80abfc:	00c02074 	movhi	r3,129
  80ac00:	dfc00815 	stw	ra,32(sp)
  80ac04:	ddc00715 	stw	r23,28(sp)
  80ac08:	dd800615 	stw	r22,24(sp)
  80ac0c:	dd400515 	stw	r21,20(sp)
  80ac10:	dd000415 	stw	r20,16(sp)
  80ac14:	dcc00315 	stw	r19,12(sp)
  80ac18:	dc800215 	stw	r18,8(sp)
  80ac1c:	dc400115 	stw	r17,4(sp)
  80ac20:	dc000015 	stw	r16,0(sp)
  80ac24:	18eafb04 	addi	r3,r3,-21524
  80ac28:	24000117 	ldw	r16,4(r4)
  80ac2c:	20c00f15 	stw	r3,60(r4)
  80ac30:	2080bb04 	addi	r2,r4,748
  80ac34:	00c000c4 	movi	r3,3
  80ac38:	20c0b915 	stw	r3,740(r4)
  80ac3c:	2080ba15 	stw	r2,744(r4)
  80ac40:	2000b815 	stw	zero,736(r4)
  80ac44:	05c00204 	movi	r23,8
  80ac48:	00800104 	movi	r2,4
  80ac4c:	2025883a 	mov	r18,r4
  80ac50:	b80d883a 	mov	r6,r23
  80ac54:	81001704 	addi	r4,r16,92
  80ac58:	000b883a 	mov	r5,zero
  80ac5c:	80000015 	stw	zero,0(r16)
  80ac60:	80000115 	stw	zero,4(r16)
  80ac64:	80000215 	stw	zero,8(r16)
  80ac68:	8080030d 	sth	r2,12(r16)
  80ac6c:	80001915 	stw	zero,100(r16)
  80ac70:	8000038d 	sth	zero,14(r16)
  80ac74:	80000415 	stw	zero,16(r16)
  80ac78:	80000515 	stw	zero,20(r16)
  80ac7c:	80000615 	stw	zero,24(r16)
  80ac80:	080a8180 	call	80a818 <memset>
  80ac84:	05802074 	movhi	r22,129
  80ac88:	94400217 	ldw	r17,8(r18)
  80ac8c:	05402074 	movhi	r21,129
  80ac90:	05002074 	movhi	r20,129
  80ac94:	04c02074 	movhi	r19,129
  80ac98:	b5b24904 	addi	r22,r22,-14044
  80ac9c:	ad726004 	addi	r21,r21,-13952
  80aca0:	a5327f04 	addi	r20,r20,-13828
  80aca4:	9cf29604 	addi	r19,r19,-13736
  80aca8:	85800815 	stw	r22,32(r16)
  80acac:	85400915 	stw	r21,36(r16)
  80acb0:	85000a15 	stw	r20,40(r16)
  80acb4:	84c00b15 	stw	r19,44(r16)
  80acb8:	84000715 	stw	r16,28(r16)
  80acbc:	00800284 	movi	r2,10
  80acc0:	8880030d 	sth	r2,12(r17)
  80acc4:	00800044 	movi	r2,1
  80acc8:	b80d883a 	mov	r6,r23
  80accc:	89001704 	addi	r4,r17,92
  80acd0:	000b883a 	mov	r5,zero
  80acd4:	88000015 	stw	zero,0(r17)
  80acd8:	88000115 	stw	zero,4(r17)
  80acdc:	88000215 	stw	zero,8(r17)
  80ace0:	88001915 	stw	zero,100(r17)
  80ace4:	8880038d 	sth	r2,14(r17)
  80ace8:	88000415 	stw	zero,16(r17)
  80acec:	88000515 	stw	zero,20(r17)
  80acf0:	88000615 	stw	zero,24(r17)
  80acf4:	080a8180 	call	80a818 <memset>
  80acf8:	94000317 	ldw	r16,12(r18)
  80acfc:	00800484 	movi	r2,18
  80ad00:	8c400715 	stw	r17,28(r17)
  80ad04:	8d800815 	stw	r22,32(r17)
  80ad08:	8d400915 	stw	r21,36(r17)
  80ad0c:	8d000a15 	stw	r20,40(r17)
  80ad10:	8cc00b15 	stw	r19,44(r17)
  80ad14:	8080030d 	sth	r2,12(r16)
  80ad18:	00800084 	movi	r2,2
  80ad1c:	80000015 	stw	zero,0(r16)
  80ad20:	80000115 	stw	zero,4(r16)
  80ad24:	80000215 	stw	zero,8(r16)
  80ad28:	80001915 	stw	zero,100(r16)
  80ad2c:	8080038d 	sth	r2,14(r16)
  80ad30:	80000415 	stw	zero,16(r16)
  80ad34:	80000515 	stw	zero,20(r16)
  80ad38:	80000615 	stw	zero,24(r16)
  80ad3c:	b80d883a 	mov	r6,r23
  80ad40:	000b883a 	mov	r5,zero
  80ad44:	81001704 	addi	r4,r16,92
  80ad48:	080a8180 	call	80a818 <memset>
  80ad4c:	00800044 	movi	r2,1
  80ad50:	84000715 	stw	r16,28(r16)
  80ad54:	85800815 	stw	r22,32(r16)
  80ad58:	85400915 	stw	r21,36(r16)
  80ad5c:	85000a15 	stw	r20,40(r16)
  80ad60:	84c00b15 	stw	r19,44(r16)
  80ad64:	90800e15 	stw	r2,56(r18)
  80ad68:	dfc00817 	ldw	ra,32(sp)
  80ad6c:	ddc00717 	ldw	r23,28(sp)
  80ad70:	dd800617 	ldw	r22,24(sp)
  80ad74:	dd400517 	ldw	r21,20(sp)
  80ad78:	dd000417 	ldw	r20,16(sp)
  80ad7c:	dcc00317 	ldw	r19,12(sp)
  80ad80:	dc800217 	ldw	r18,8(sp)
  80ad84:	dc400117 	ldw	r17,4(sp)
  80ad88:	dc000017 	ldw	r16,0(sp)
  80ad8c:	dec00904 	addi	sp,sp,36
  80ad90:	f800283a 	ret

0080ad94 <__fp_lock>:
  80ad94:	0005883a 	mov	r2,zero
  80ad98:	f800283a 	ret

0080ad9c <__sfmoreglue>:
  80ad9c:	defffc04 	addi	sp,sp,-16
  80ada0:	dc400115 	stw	r17,4(sp)
  80ada4:	2c7fffc4 	addi	r17,r5,-1
  80ada8:	8c401a24 	muli	r17,r17,104
  80adac:	dc800215 	stw	r18,8(sp)
  80adb0:	2825883a 	mov	r18,r5
  80adb4:	89401d04 	addi	r5,r17,116
  80adb8:	dc000015 	stw	r16,0(sp)
  80adbc:	dfc00315 	stw	ra,12(sp)
  80adc0:	080b5c80 	call	80b5c8 <_malloc_r>
  80adc4:	1021883a 	mov	r16,r2
  80adc8:	10000726 	beq	r2,zero,80ade8 <__sfmoreglue+0x4c>
  80adcc:	11000304 	addi	r4,r2,12
  80add0:	10000015 	stw	zero,0(r2)
  80add4:	14800115 	stw	r18,4(r2)
  80add8:	11000215 	stw	r4,8(r2)
  80addc:	89801a04 	addi	r6,r17,104
  80ade0:	000b883a 	mov	r5,zero
  80ade4:	080a8180 	call	80a818 <memset>
  80ade8:	8005883a 	mov	r2,r16
  80adec:	dfc00317 	ldw	ra,12(sp)
  80adf0:	dc800217 	ldw	r18,8(sp)
  80adf4:	dc400117 	ldw	r17,4(sp)
  80adf8:	dc000017 	ldw	r16,0(sp)
  80adfc:	dec00404 	addi	sp,sp,16
  80ae00:	f800283a 	ret

0080ae04 <__sfp>:
  80ae04:	defffb04 	addi	sp,sp,-20
  80ae08:	dc000015 	stw	r16,0(sp)
  80ae0c:	04002074 	movhi	r16,129
  80ae10:	84126a04 	addi	r16,r16,18856
  80ae14:	dcc00315 	stw	r19,12(sp)
  80ae18:	2027883a 	mov	r19,r4
  80ae1c:	81000017 	ldw	r4,0(r16)
  80ae20:	dfc00415 	stw	ra,16(sp)
  80ae24:	dc800215 	stw	r18,8(sp)
  80ae28:	20800e17 	ldw	r2,56(r4)
  80ae2c:	dc400115 	stw	r17,4(sp)
  80ae30:	1000021e 	bne	r2,zero,80ae3c <__sfp+0x38>
  80ae34:	080abf80 	call	80abf8 <__sinit.part.1>
  80ae38:	81000017 	ldw	r4,0(r16)
  80ae3c:	2480b804 	addi	r18,r4,736
  80ae40:	047fffc4 	movi	r17,-1
  80ae44:	91000117 	ldw	r4,4(r18)
  80ae48:	94000217 	ldw	r16,8(r18)
  80ae4c:	213fffc4 	addi	r4,r4,-1
  80ae50:	20000a16 	blt	r4,zero,80ae7c <__sfp+0x78>
  80ae54:	8080030f 	ldh	r2,12(r16)
  80ae58:	10000c26 	beq	r2,zero,80ae8c <__sfp+0x88>
  80ae5c:	80c01d04 	addi	r3,r16,116
  80ae60:	00000206 	br	80ae6c <__sfp+0x68>
  80ae64:	18bfe60f 	ldh	r2,-104(r3)
  80ae68:	10000826 	beq	r2,zero,80ae8c <__sfp+0x88>
  80ae6c:	213fffc4 	addi	r4,r4,-1
  80ae70:	1c3ffd04 	addi	r16,r3,-12
  80ae74:	18c01a04 	addi	r3,r3,104
  80ae78:	247ffa1e 	bne	r4,r17,80ae64 <__alt_data_end+0xff80ae64>
  80ae7c:	90800017 	ldw	r2,0(r18)
  80ae80:	10001d26 	beq	r2,zero,80aef8 <__sfp+0xf4>
  80ae84:	1025883a 	mov	r18,r2
  80ae88:	003fee06 	br	80ae44 <__alt_data_end+0xff80ae44>
  80ae8c:	00bfffc4 	movi	r2,-1
  80ae90:	8080038d 	sth	r2,14(r16)
  80ae94:	00800044 	movi	r2,1
  80ae98:	8080030d 	sth	r2,12(r16)
  80ae9c:	80001915 	stw	zero,100(r16)
  80aea0:	80000015 	stw	zero,0(r16)
  80aea4:	80000215 	stw	zero,8(r16)
  80aea8:	80000115 	stw	zero,4(r16)
  80aeac:	80000415 	stw	zero,16(r16)
  80aeb0:	80000515 	stw	zero,20(r16)
  80aeb4:	80000615 	stw	zero,24(r16)
  80aeb8:	01800204 	movi	r6,8
  80aebc:	000b883a 	mov	r5,zero
  80aec0:	81001704 	addi	r4,r16,92
  80aec4:	080a8180 	call	80a818 <memset>
  80aec8:	8005883a 	mov	r2,r16
  80aecc:	80000c15 	stw	zero,48(r16)
  80aed0:	80000d15 	stw	zero,52(r16)
  80aed4:	80001115 	stw	zero,68(r16)
  80aed8:	80001215 	stw	zero,72(r16)
  80aedc:	dfc00417 	ldw	ra,16(sp)
  80aee0:	dcc00317 	ldw	r19,12(sp)
  80aee4:	dc800217 	ldw	r18,8(sp)
  80aee8:	dc400117 	ldw	r17,4(sp)
  80aeec:	dc000017 	ldw	r16,0(sp)
  80aef0:	dec00504 	addi	sp,sp,20
  80aef4:	f800283a 	ret
  80aef8:	01400104 	movi	r5,4
  80aefc:	9809883a 	mov	r4,r19
  80af00:	080ad9c0 	call	80ad9c <__sfmoreglue>
  80af04:	90800015 	stw	r2,0(r18)
  80af08:	103fde1e 	bne	r2,zero,80ae84 <__alt_data_end+0xff80ae84>
  80af0c:	00800304 	movi	r2,12
  80af10:	98800015 	stw	r2,0(r19)
  80af14:	0005883a 	mov	r2,zero
  80af18:	003ff006 	br	80aedc <__alt_data_end+0xff80aedc>

0080af1c <_cleanup>:
  80af1c:	00802074 	movhi	r2,129
  80af20:	10926a04 	addi	r2,r2,18856
  80af24:	11000017 	ldw	r4,0(r2)
  80af28:	01402074 	movhi	r5,129
  80af2c:	29737004 	addi	r5,r5,-12864
  80af30:	080b5041 	jmpi	80b504 <_fwalk_reent>

0080af34 <__sinit>:
  80af34:	20800e17 	ldw	r2,56(r4)
  80af38:	10000126 	beq	r2,zero,80af40 <__sinit+0xc>
  80af3c:	f800283a 	ret
  80af40:	080abf81 	jmpi	80abf8 <__sinit.part.1>

0080af44 <__sfp_lock_acquire>:
  80af44:	f800283a 	ret

0080af48 <__sfp_lock_release>:
  80af48:	f800283a 	ret

0080af4c <__sinit_lock_acquire>:
  80af4c:	f800283a 	ret

0080af50 <__sinit_lock_release>:
  80af50:	f800283a 	ret

0080af54 <__fp_lock_all>:
  80af54:	00802074 	movhi	r2,129
  80af58:	10926b04 	addi	r2,r2,18860
  80af5c:	11000017 	ldw	r4,0(r2)
  80af60:	01402074 	movhi	r5,129
  80af64:	296b6504 	addi	r5,r5,-21100
  80af68:	080b4401 	jmpi	80b440 <_fwalk>

0080af6c <__fp_unlock_all>:
  80af6c:	00802074 	movhi	r2,129
  80af70:	10926b04 	addi	r2,r2,18860
  80af74:	11000017 	ldw	r4,0(r2)
  80af78:	01402074 	movhi	r5,129
  80af7c:	296af904 	addi	r5,r5,-21532
  80af80:	080b4401 	jmpi	80b440 <_fwalk>

0080af84 <__sfvwrite_r>:
  80af84:	30800217 	ldw	r2,8(r6)
  80af88:	10006726 	beq	r2,zero,80b128 <__sfvwrite_r+0x1a4>
  80af8c:	28c0030b 	ldhu	r3,12(r5)
  80af90:	defff404 	addi	sp,sp,-48
  80af94:	dd400715 	stw	r21,28(sp)
  80af98:	dd000615 	stw	r20,24(sp)
  80af9c:	dc000215 	stw	r16,8(sp)
  80afa0:	dfc00b15 	stw	ra,44(sp)
  80afa4:	df000a15 	stw	fp,40(sp)
  80afa8:	ddc00915 	stw	r23,36(sp)
  80afac:	dd800815 	stw	r22,32(sp)
  80afb0:	dcc00515 	stw	r19,20(sp)
  80afb4:	dc800415 	stw	r18,16(sp)
  80afb8:	dc400315 	stw	r17,12(sp)
  80afbc:	1880020c 	andi	r2,r3,8
  80afc0:	2821883a 	mov	r16,r5
  80afc4:	202b883a 	mov	r21,r4
  80afc8:	3029883a 	mov	r20,r6
  80afcc:	10002726 	beq	r2,zero,80b06c <__sfvwrite_r+0xe8>
  80afd0:	28800417 	ldw	r2,16(r5)
  80afd4:	10002526 	beq	r2,zero,80b06c <__sfvwrite_r+0xe8>
  80afd8:	1880008c 	andi	r2,r3,2
  80afdc:	a4400017 	ldw	r17,0(r20)
  80afe0:	10002a26 	beq	r2,zero,80b08c <__sfvwrite_r+0x108>
  80afe4:	05a00034 	movhi	r22,32768
  80afe8:	0027883a 	mov	r19,zero
  80afec:	0025883a 	mov	r18,zero
  80aff0:	b5bf0004 	addi	r22,r22,-1024
  80aff4:	980d883a 	mov	r6,r19
  80aff8:	a809883a 	mov	r4,r21
  80affc:	90004626 	beq	r18,zero,80b118 <__sfvwrite_r+0x194>
  80b000:	900f883a 	mov	r7,r18
  80b004:	b480022e 	bgeu	r22,r18,80b010 <__sfvwrite_r+0x8c>
  80b008:	01e00034 	movhi	r7,32768
  80b00c:	39ff0004 	addi	r7,r7,-1024
  80b010:	80800917 	ldw	r2,36(r16)
  80b014:	81400717 	ldw	r5,28(r16)
  80b018:	103ee83a 	callr	r2
  80b01c:	0080570e 	bge	zero,r2,80b17c <__sfvwrite_r+0x1f8>
  80b020:	a0c00217 	ldw	r3,8(r20)
  80b024:	98a7883a 	add	r19,r19,r2
  80b028:	90a5c83a 	sub	r18,r18,r2
  80b02c:	1885c83a 	sub	r2,r3,r2
  80b030:	a0800215 	stw	r2,8(r20)
  80b034:	103fef1e 	bne	r2,zero,80aff4 <__alt_data_end+0xff80aff4>
  80b038:	0005883a 	mov	r2,zero
  80b03c:	dfc00b17 	ldw	ra,44(sp)
  80b040:	df000a17 	ldw	fp,40(sp)
  80b044:	ddc00917 	ldw	r23,36(sp)
  80b048:	dd800817 	ldw	r22,32(sp)
  80b04c:	dd400717 	ldw	r21,28(sp)
  80b050:	dd000617 	ldw	r20,24(sp)
  80b054:	dcc00517 	ldw	r19,20(sp)
  80b058:	dc800417 	ldw	r18,16(sp)
  80b05c:	dc400317 	ldw	r17,12(sp)
  80b060:	dc000217 	ldw	r16,8(sp)
  80b064:	dec00c04 	addi	sp,sp,48
  80b068:	f800283a 	ret
  80b06c:	800b883a 	mov	r5,r16
  80b070:	a809883a 	mov	r4,r21
  80b074:	080cc180 	call	80cc18 <__swsetup_r>
  80b078:	1000eb1e 	bne	r2,zero,80b428 <__sfvwrite_r+0x4a4>
  80b07c:	80c0030b 	ldhu	r3,12(r16)
  80b080:	a4400017 	ldw	r17,0(r20)
  80b084:	1880008c 	andi	r2,r3,2
  80b088:	103fd61e 	bne	r2,zero,80afe4 <__alt_data_end+0xff80afe4>
  80b08c:	1880004c 	andi	r2,r3,1
  80b090:	10003f1e 	bne	r2,zero,80b190 <__sfvwrite_r+0x20c>
  80b094:	0039883a 	mov	fp,zero
  80b098:	0025883a 	mov	r18,zero
  80b09c:	90001a26 	beq	r18,zero,80b108 <__sfvwrite_r+0x184>
  80b0a0:	1880800c 	andi	r2,r3,512
  80b0a4:	84c00217 	ldw	r19,8(r16)
  80b0a8:	10002126 	beq	r2,zero,80b130 <__sfvwrite_r+0x1ac>
  80b0ac:	982f883a 	mov	r23,r19
  80b0b0:	94c09336 	bltu	r18,r19,80b300 <__sfvwrite_r+0x37c>
  80b0b4:	1881200c 	andi	r2,r3,1152
  80b0b8:	10009e1e 	bne	r2,zero,80b334 <__sfvwrite_r+0x3b0>
  80b0bc:	81000017 	ldw	r4,0(r16)
  80b0c0:	b80d883a 	mov	r6,r23
  80b0c4:	e00b883a 	mov	r5,fp
  80b0c8:	080beb80 	call	80beb8 <memmove>
  80b0cc:	80c00217 	ldw	r3,8(r16)
  80b0d0:	81000017 	ldw	r4,0(r16)
  80b0d4:	9005883a 	mov	r2,r18
  80b0d8:	1ce7c83a 	sub	r19,r3,r19
  80b0dc:	25cf883a 	add	r7,r4,r23
  80b0e0:	84c00215 	stw	r19,8(r16)
  80b0e4:	81c00015 	stw	r7,0(r16)
  80b0e8:	a0c00217 	ldw	r3,8(r20)
  80b0ec:	e0b9883a 	add	fp,fp,r2
  80b0f0:	90a5c83a 	sub	r18,r18,r2
  80b0f4:	18a7c83a 	sub	r19,r3,r2
  80b0f8:	a4c00215 	stw	r19,8(r20)
  80b0fc:	983fce26 	beq	r19,zero,80b038 <__alt_data_end+0xff80b038>
  80b100:	80c0030b 	ldhu	r3,12(r16)
  80b104:	903fe61e 	bne	r18,zero,80b0a0 <__alt_data_end+0xff80b0a0>
  80b108:	8f000017 	ldw	fp,0(r17)
  80b10c:	8c800117 	ldw	r18,4(r17)
  80b110:	8c400204 	addi	r17,r17,8
  80b114:	003fe106 	br	80b09c <__alt_data_end+0xff80b09c>
  80b118:	8cc00017 	ldw	r19,0(r17)
  80b11c:	8c800117 	ldw	r18,4(r17)
  80b120:	8c400204 	addi	r17,r17,8
  80b124:	003fb306 	br	80aff4 <__alt_data_end+0xff80aff4>
  80b128:	0005883a 	mov	r2,zero
  80b12c:	f800283a 	ret
  80b130:	81000017 	ldw	r4,0(r16)
  80b134:	80800417 	ldw	r2,16(r16)
  80b138:	11005736 	bltu	r2,r4,80b298 <__sfvwrite_r+0x314>
  80b13c:	85c00517 	ldw	r23,20(r16)
  80b140:	95c05536 	bltu	r18,r23,80b298 <__sfvwrite_r+0x314>
  80b144:	00a00034 	movhi	r2,32768
  80b148:	10bfffc4 	addi	r2,r2,-1
  80b14c:	9009883a 	mov	r4,r18
  80b150:	1480012e 	bgeu	r2,r18,80b158 <__sfvwrite_r+0x1d4>
  80b154:	1009883a 	mov	r4,r2
  80b158:	b80b883a 	mov	r5,r23
  80b15c:	080a3a80 	call	80a3a8 <__divsi3>
  80b160:	15cf383a 	mul	r7,r2,r23
  80b164:	81400717 	ldw	r5,28(r16)
  80b168:	80800917 	ldw	r2,36(r16)
  80b16c:	e00d883a 	mov	r6,fp
  80b170:	a809883a 	mov	r4,r21
  80b174:	103ee83a 	callr	r2
  80b178:	00bfdb16 	blt	zero,r2,80b0e8 <__alt_data_end+0xff80b0e8>
  80b17c:	8080030b 	ldhu	r2,12(r16)
  80b180:	10801014 	ori	r2,r2,64
  80b184:	8080030d 	sth	r2,12(r16)
  80b188:	00bfffc4 	movi	r2,-1
  80b18c:	003fab06 	br	80b03c <__alt_data_end+0xff80b03c>
  80b190:	0027883a 	mov	r19,zero
  80b194:	0011883a 	mov	r8,zero
  80b198:	0039883a 	mov	fp,zero
  80b19c:	0025883a 	mov	r18,zero
  80b1a0:	90001f26 	beq	r18,zero,80b220 <__sfvwrite_r+0x29c>
  80b1a4:	40005a26 	beq	r8,zero,80b310 <__sfvwrite_r+0x38c>
  80b1a8:	982d883a 	mov	r22,r19
  80b1ac:	94c0012e 	bgeu	r18,r19,80b1b4 <__sfvwrite_r+0x230>
  80b1b0:	902d883a 	mov	r22,r18
  80b1b4:	81000017 	ldw	r4,0(r16)
  80b1b8:	80800417 	ldw	r2,16(r16)
  80b1bc:	b02f883a 	mov	r23,r22
  80b1c0:	81c00517 	ldw	r7,20(r16)
  80b1c4:	1100032e 	bgeu	r2,r4,80b1d4 <__sfvwrite_r+0x250>
  80b1c8:	80c00217 	ldw	r3,8(r16)
  80b1cc:	38c7883a 	add	r3,r7,r3
  80b1d0:	1d801816 	blt	r3,r22,80b234 <__sfvwrite_r+0x2b0>
  80b1d4:	b1c03e16 	blt	r22,r7,80b2d0 <__sfvwrite_r+0x34c>
  80b1d8:	80800917 	ldw	r2,36(r16)
  80b1dc:	81400717 	ldw	r5,28(r16)
  80b1e0:	e00d883a 	mov	r6,fp
  80b1e4:	da000115 	stw	r8,4(sp)
  80b1e8:	a809883a 	mov	r4,r21
  80b1ec:	103ee83a 	callr	r2
  80b1f0:	102f883a 	mov	r23,r2
  80b1f4:	da000117 	ldw	r8,4(sp)
  80b1f8:	00bfe00e 	bge	zero,r2,80b17c <__alt_data_end+0xff80b17c>
  80b1fc:	9de7c83a 	sub	r19,r19,r23
  80b200:	98001f26 	beq	r19,zero,80b280 <__sfvwrite_r+0x2fc>
  80b204:	a0800217 	ldw	r2,8(r20)
  80b208:	e5f9883a 	add	fp,fp,r23
  80b20c:	95e5c83a 	sub	r18,r18,r23
  80b210:	15efc83a 	sub	r23,r2,r23
  80b214:	a5c00215 	stw	r23,8(r20)
  80b218:	b83f8726 	beq	r23,zero,80b038 <__alt_data_end+0xff80b038>
  80b21c:	903fe11e 	bne	r18,zero,80b1a4 <__alt_data_end+0xff80b1a4>
  80b220:	8f000017 	ldw	fp,0(r17)
  80b224:	8c800117 	ldw	r18,4(r17)
  80b228:	0011883a 	mov	r8,zero
  80b22c:	8c400204 	addi	r17,r17,8
  80b230:	003fdb06 	br	80b1a0 <__alt_data_end+0xff80b1a0>
  80b234:	180d883a 	mov	r6,r3
  80b238:	e00b883a 	mov	r5,fp
  80b23c:	da000115 	stw	r8,4(sp)
  80b240:	d8c00015 	stw	r3,0(sp)
  80b244:	080beb80 	call	80beb8 <memmove>
  80b248:	d8c00017 	ldw	r3,0(sp)
  80b24c:	80800017 	ldw	r2,0(r16)
  80b250:	800b883a 	mov	r5,r16
  80b254:	a809883a 	mov	r4,r21
  80b258:	10c5883a 	add	r2,r2,r3
  80b25c:	80800015 	stw	r2,0(r16)
  80b260:	d8c00015 	stw	r3,0(sp)
  80b264:	080d0e00 	call	80d0e0 <_fflush_r>
  80b268:	d8c00017 	ldw	r3,0(sp)
  80b26c:	da000117 	ldw	r8,4(sp)
  80b270:	103fc21e 	bne	r2,zero,80b17c <__alt_data_end+0xff80b17c>
  80b274:	182f883a 	mov	r23,r3
  80b278:	9de7c83a 	sub	r19,r19,r23
  80b27c:	983fe11e 	bne	r19,zero,80b204 <__alt_data_end+0xff80b204>
  80b280:	800b883a 	mov	r5,r16
  80b284:	a809883a 	mov	r4,r21
  80b288:	080d0e00 	call	80d0e0 <_fflush_r>
  80b28c:	103fbb1e 	bne	r2,zero,80b17c <__alt_data_end+0xff80b17c>
  80b290:	0011883a 	mov	r8,zero
  80b294:	003fdb06 	br	80b204 <__alt_data_end+0xff80b204>
  80b298:	94c0012e 	bgeu	r18,r19,80b2a0 <__sfvwrite_r+0x31c>
  80b29c:	9027883a 	mov	r19,r18
  80b2a0:	980d883a 	mov	r6,r19
  80b2a4:	e00b883a 	mov	r5,fp
  80b2a8:	080beb80 	call	80beb8 <memmove>
  80b2ac:	80800217 	ldw	r2,8(r16)
  80b2b0:	80c00017 	ldw	r3,0(r16)
  80b2b4:	14c5c83a 	sub	r2,r2,r19
  80b2b8:	1cc7883a 	add	r3,r3,r19
  80b2bc:	80800215 	stw	r2,8(r16)
  80b2c0:	80c00015 	stw	r3,0(r16)
  80b2c4:	10004326 	beq	r2,zero,80b3d4 <__sfvwrite_r+0x450>
  80b2c8:	9805883a 	mov	r2,r19
  80b2cc:	003f8606 	br	80b0e8 <__alt_data_end+0xff80b0e8>
  80b2d0:	b00d883a 	mov	r6,r22
  80b2d4:	e00b883a 	mov	r5,fp
  80b2d8:	da000115 	stw	r8,4(sp)
  80b2dc:	080beb80 	call	80beb8 <memmove>
  80b2e0:	80800217 	ldw	r2,8(r16)
  80b2e4:	80c00017 	ldw	r3,0(r16)
  80b2e8:	da000117 	ldw	r8,4(sp)
  80b2ec:	1585c83a 	sub	r2,r2,r22
  80b2f0:	1dad883a 	add	r22,r3,r22
  80b2f4:	80800215 	stw	r2,8(r16)
  80b2f8:	85800015 	stw	r22,0(r16)
  80b2fc:	003fbf06 	br	80b1fc <__alt_data_end+0xff80b1fc>
  80b300:	81000017 	ldw	r4,0(r16)
  80b304:	9027883a 	mov	r19,r18
  80b308:	902f883a 	mov	r23,r18
  80b30c:	003f6c06 	br	80b0c0 <__alt_data_end+0xff80b0c0>
  80b310:	900d883a 	mov	r6,r18
  80b314:	01400284 	movi	r5,10
  80b318:	e009883a 	mov	r4,fp
  80b31c:	080bdd40 	call	80bdd4 <memchr>
  80b320:	10003e26 	beq	r2,zero,80b41c <__sfvwrite_r+0x498>
  80b324:	10800044 	addi	r2,r2,1
  80b328:	1727c83a 	sub	r19,r2,fp
  80b32c:	02000044 	movi	r8,1
  80b330:	003f9d06 	br	80b1a8 <__alt_data_end+0xff80b1a8>
  80b334:	80800517 	ldw	r2,20(r16)
  80b338:	81400417 	ldw	r5,16(r16)
  80b33c:	81c00017 	ldw	r7,0(r16)
  80b340:	10a7883a 	add	r19,r2,r2
  80b344:	9885883a 	add	r2,r19,r2
  80b348:	1026d7fa 	srli	r19,r2,31
  80b34c:	396dc83a 	sub	r22,r7,r5
  80b350:	b1000044 	addi	r4,r22,1
  80b354:	9885883a 	add	r2,r19,r2
  80b358:	1027d07a 	srai	r19,r2,1
  80b35c:	2485883a 	add	r2,r4,r18
  80b360:	980d883a 	mov	r6,r19
  80b364:	9880022e 	bgeu	r19,r2,80b370 <__sfvwrite_r+0x3ec>
  80b368:	1027883a 	mov	r19,r2
  80b36c:	100d883a 	mov	r6,r2
  80b370:	18c1000c 	andi	r3,r3,1024
  80b374:	18001c26 	beq	r3,zero,80b3e8 <__sfvwrite_r+0x464>
  80b378:	300b883a 	mov	r5,r6
  80b37c:	a809883a 	mov	r4,r21
  80b380:	080b5c80 	call	80b5c8 <_malloc_r>
  80b384:	102f883a 	mov	r23,r2
  80b388:	10002926 	beq	r2,zero,80b430 <__sfvwrite_r+0x4ac>
  80b38c:	81400417 	ldw	r5,16(r16)
  80b390:	b00d883a 	mov	r6,r22
  80b394:	1009883a 	mov	r4,r2
  80b398:	080a6d00 	call	80a6d0 <memcpy>
  80b39c:	8080030b 	ldhu	r2,12(r16)
  80b3a0:	00fedfc4 	movi	r3,-1153
  80b3a4:	10c4703a 	and	r2,r2,r3
  80b3a8:	10802014 	ori	r2,r2,128
  80b3ac:	8080030d 	sth	r2,12(r16)
  80b3b0:	bd89883a 	add	r4,r23,r22
  80b3b4:	9d8fc83a 	sub	r7,r19,r22
  80b3b8:	85c00415 	stw	r23,16(r16)
  80b3bc:	84c00515 	stw	r19,20(r16)
  80b3c0:	81000015 	stw	r4,0(r16)
  80b3c4:	9027883a 	mov	r19,r18
  80b3c8:	81c00215 	stw	r7,8(r16)
  80b3cc:	902f883a 	mov	r23,r18
  80b3d0:	003f3b06 	br	80b0c0 <__alt_data_end+0xff80b0c0>
  80b3d4:	800b883a 	mov	r5,r16
  80b3d8:	a809883a 	mov	r4,r21
  80b3dc:	080d0e00 	call	80d0e0 <_fflush_r>
  80b3e0:	103fb926 	beq	r2,zero,80b2c8 <__alt_data_end+0xff80b2c8>
  80b3e4:	003f6506 	br	80b17c <__alt_data_end+0xff80b17c>
  80b3e8:	a809883a 	mov	r4,r21
  80b3ec:	080c17c0 	call	80c17c <_realloc_r>
  80b3f0:	102f883a 	mov	r23,r2
  80b3f4:	103fee1e 	bne	r2,zero,80b3b0 <__alt_data_end+0xff80b3b0>
  80b3f8:	81400417 	ldw	r5,16(r16)
  80b3fc:	a809883a 	mov	r4,r21
  80b400:	080d2900 	call	80d290 <_free_r>
  80b404:	8080030b 	ldhu	r2,12(r16)
  80b408:	00ffdfc4 	movi	r3,-129
  80b40c:	1884703a 	and	r2,r3,r2
  80b410:	00c00304 	movi	r3,12
  80b414:	a8c00015 	stw	r3,0(r21)
  80b418:	003f5906 	br	80b180 <__alt_data_end+0xff80b180>
  80b41c:	94c00044 	addi	r19,r18,1
  80b420:	02000044 	movi	r8,1
  80b424:	003f6006 	br	80b1a8 <__alt_data_end+0xff80b1a8>
  80b428:	00bfffc4 	movi	r2,-1
  80b42c:	003f0306 	br	80b03c <__alt_data_end+0xff80b03c>
  80b430:	00800304 	movi	r2,12
  80b434:	a8800015 	stw	r2,0(r21)
  80b438:	8080030b 	ldhu	r2,12(r16)
  80b43c:	003f5006 	br	80b180 <__alt_data_end+0xff80b180>

0080b440 <_fwalk>:
  80b440:	defff704 	addi	sp,sp,-36
  80b444:	dd000415 	stw	r20,16(sp)
  80b448:	dfc00815 	stw	ra,32(sp)
  80b44c:	ddc00715 	stw	r23,28(sp)
  80b450:	dd800615 	stw	r22,24(sp)
  80b454:	dd400515 	stw	r21,20(sp)
  80b458:	dcc00315 	stw	r19,12(sp)
  80b45c:	dc800215 	stw	r18,8(sp)
  80b460:	dc400115 	stw	r17,4(sp)
  80b464:	dc000015 	stw	r16,0(sp)
  80b468:	2500b804 	addi	r20,r4,736
  80b46c:	a0002326 	beq	r20,zero,80b4fc <_fwalk+0xbc>
  80b470:	282b883a 	mov	r21,r5
  80b474:	002f883a 	mov	r23,zero
  80b478:	05800044 	movi	r22,1
  80b47c:	04ffffc4 	movi	r19,-1
  80b480:	a4400117 	ldw	r17,4(r20)
  80b484:	a4800217 	ldw	r18,8(r20)
  80b488:	8c7fffc4 	addi	r17,r17,-1
  80b48c:	88000d16 	blt	r17,zero,80b4c4 <_fwalk+0x84>
  80b490:	94000304 	addi	r16,r18,12
  80b494:	94800384 	addi	r18,r18,14
  80b498:	8080000b 	ldhu	r2,0(r16)
  80b49c:	8c7fffc4 	addi	r17,r17,-1
  80b4a0:	813ffd04 	addi	r4,r16,-12
  80b4a4:	b080042e 	bgeu	r22,r2,80b4b8 <_fwalk+0x78>
  80b4a8:	9080000f 	ldh	r2,0(r18)
  80b4ac:	14c00226 	beq	r2,r19,80b4b8 <_fwalk+0x78>
  80b4b0:	a83ee83a 	callr	r21
  80b4b4:	b8aeb03a 	or	r23,r23,r2
  80b4b8:	84001a04 	addi	r16,r16,104
  80b4bc:	94801a04 	addi	r18,r18,104
  80b4c0:	8cfff51e 	bne	r17,r19,80b498 <__alt_data_end+0xff80b498>
  80b4c4:	a5000017 	ldw	r20,0(r20)
  80b4c8:	a03fed1e 	bne	r20,zero,80b480 <__alt_data_end+0xff80b480>
  80b4cc:	b805883a 	mov	r2,r23
  80b4d0:	dfc00817 	ldw	ra,32(sp)
  80b4d4:	ddc00717 	ldw	r23,28(sp)
  80b4d8:	dd800617 	ldw	r22,24(sp)
  80b4dc:	dd400517 	ldw	r21,20(sp)
  80b4e0:	dd000417 	ldw	r20,16(sp)
  80b4e4:	dcc00317 	ldw	r19,12(sp)
  80b4e8:	dc800217 	ldw	r18,8(sp)
  80b4ec:	dc400117 	ldw	r17,4(sp)
  80b4f0:	dc000017 	ldw	r16,0(sp)
  80b4f4:	dec00904 	addi	sp,sp,36
  80b4f8:	f800283a 	ret
  80b4fc:	002f883a 	mov	r23,zero
  80b500:	003ff206 	br	80b4cc <__alt_data_end+0xff80b4cc>

0080b504 <_fwalk_reent>:
  80b504:	defff704 	addi	sp,sp,-36
  80b508:	dd000415 	stw	r20,16(sp)
  80b50c:	dfc00815 	stw	ra,32(sp)
  80b510:	ddc00715 	stw	r23,28(sp)
  80b514:	dd800615 	stw	r22,24(sp)
  80b518:	dd400515 	stw	r21,20(sp)
  80b51c:	dcc00315 	stw	r19,12(sp)
  80b520:	dc800215 	stw	r18,8(sp)
  80b524:	dc400115 	stw	r17,4(sp)
  80b528:	dc000015 	stw	r16,0(sp)
  80b52c:	2500b804 	addi	r20,r4,736
  80b530:	a0002326 	beq	r20,zero,80b5c0 <_fwalk_reent+0xbc>
  80b534:	282b883a 	mov	r21,r5
  80b538:	2027883a 	mov	r19,r4
  80b53c:	002f883a 	mov	r23,zero
  80b540:	05800044 	movi	r22,1
  80b544:	04bfffc4 	movi	r18,-1
  80b548:	a4400117 	ldw	r17,4(r20)
  80b54c:	a4000217 	ldw	r16,8(r20)
  80b550:	8c7fffc4 	addi	r17,r17,-1
  80b554:	88000c16 	blt	r17,zero,80b588 <_fwalk_reent+0x84>
  80b558:	84000304 	addi	r16,r16,12
  80b55c:	8080000b 	ldhu	r2,0(r16)
  80b560:	8c7fffc4 	addi	r17,r17,-1
  80b564:	817ffd04 	addi	r5,r16,-12
  80b568:	b080052e 	bgeu	r22,r2,80b580 <_fwalk_reent+0x7c>
  80b56c:	8080008f 	ldh	r2,2(r16)
  80b570:	9809883a 	mov	r4,r19
  80b574:	14800226 	beq	r2,r18,80b580 <_fwalk_reent+0x7c>
  80b578:	a83ee83a 	callr	r21
  80b57c:	b8aeb03a 	or	r23,r23,r2
  80b580:	84001a04 	addi	r16,r16,104
  80b584:	8cbff51e 	bne	r17,r18,80b55c <__alt_data_end+0xff80b55c>
  80b588:	a5000017 	ldw	r20,0(r20)
  80b58c:	a03fee1e 	bne	r20,zero,80b548 <__alt_data_end+0xff80b548>
  80b590:	b805883a 	mov	r2,r23
  80b594:	dfc00817 	ldw	ra,32(sp)
  80b598:	ddc00717 	ldw	r23,28(sp)
  80b59c:	dd800617 	ldw	r22,24(sp)
  80b5a0:	dd400517 	ldw	r21,20(sp)
  80b5a4:	dd000417 	ldw	r20,16(sp)
  80b5a8:	dcc00317 	ldw	r19,12(sp)
  80b5ac:	dc800217 	ldw	r18,8(sp)
  80b5b0:	dc400117 	ldw	r17,4(sp)
  80b5b4:	dc000017 	ldw	r16,0(sp)
  80b5b8:	dec00904 	addi	sp,sp,36
  80b5bc:	f800283a 	ret
  80b5c0:	002f883a 	mov	r23,zero
  80b5c4:	003ff206 	br	80b590 <__alt_data_end+0xff80b590>

0080b5c8 <_malloc_r>:
  80b5c8:	defff504 	addi	sp,sp,-44
  80b5cc:	dc800315 	stw	r18,12(sp)
  80b5d0:	dfc00a15 	stw	ra,40(sp)
  80b5d4:	df000915 	stw	fp,36(sp)
  80b5d8:	ddc00815 	stw	r23,32(sp)
  80b5dc:	dd800715 	stw	r22,28(sp)
  80b5e0:	dd400615 	stw	r21,24(sp)
  80b5e4:	dd000515 	stw	r20,20(sp)
  80b5e8:	dcc00415 	stw	r19,16(sp)
  80b5ec:	dc400215 	stw	r17,8(sp)
  80b5f0:	dc000115 	stw	r16,4(sp)
  80b5f4:	288002c4 	addi	r2,r5,11
  80b5f8:	00c00584 	movi	r3,22
  80b5fc:	2025883a 	mov	r18,r4
  80b600:	18807f2e 	bgeu	r3,r2,80b800 <_malloc_r+0x238>
  80b604:	047ffe04 	movi	r17,-8
  80b608:	1462703a 	and	r17,r2,r17
  80b60c:	8800a316 	blt	r17,zero,80b89c <_malloc_r+0x2d4>
  80b610:	8940a236 	bltu	r17,r5,80b89c <_malloc_r+0x2d4>
  80b614:	080df740 	call	80df74 <__malloc_lock>
  80b618:	00807dc4 	movi	r2,503
  80b61c:	1441e92e 	bgeu	r2,r17,80bdc4 <_malloc_r+0x7fc>
  80b620:	8804d27a 	srli	r2,r17,9
  80b624:	1000a126 	beq	r2,zero,80b8ac <_malloc_r+0x2e4>
  80b628:	00c00104 	movi	r3,4
  80b62c:	18811e36 	bltu	r3,r2,80baa8 <_malloc_r+0x4e0>
  80b630:	8804d1ba 	srli	r2,r17,6
  80b634:	12000e44 	addi	r8,r2,57
  80b638:	11c00e04 	addi	r7,r2,56
  80b63c:	4209883a 	add	r4,r8,r8
  80b640:	04c02074 	movhi	r19,129
  80b644:	2109883a 	add	r4,r4,r4
  80b648:	9ccc5304 	addi	r19,r19,12620
  80b64c:	2109883a 	add	r4,r4,r4
  80b650:	9909883a 	add	r4,r19,r4
  80b654:	24000117 	ldw	r16,4(r4)
  80b658:	213ffe04 	addi	r4,r4,-8
  80b65c:	24009726 	beq	r4,r16,80b8bc <_malloc_r+0x2f4>
  80b660:	80800117 	ldw	r2,4(r16)
  80b664:	01bfff04 	movi	r6,-4
  80b668:	014003c4 	movi	r5,15
  80b66c:	1184703a 	and	r2,r2,r6
  80b670:	1447c83a 	sub	r3,r2,r17
  80b674:	28c00716 	blt	r5,r3,80b694 <_malloc_r+0xcc>
  80b678:	1800920e 	bge	r3,zero,80b8c4 <_malloc_r+0x2fc>
  80b67c:	84000317 	ldw	r16,12(r16)
  80b680:	24008e26 	beq	r4,r16,80b8bc <_malloc_r+0x2f4>
  80b684:	80800117 	ldw	r2,4(r16)
  80b688:	1184703a 	and	r2,r2,r6
  80b68c:	1447c83a 	sub	r3,r2,r17
  80b690:	28fff90e 	bge	r5,r3,80b678 <__alt_data_end+0xff80b678>
  80b694:	3809883a 	mov	r4,r7
  80b698:	01802074 	movhi	r6,129
  80b69c:	9c000417 	ldw	r16,16(r19)
  80b6a0:	318c5304 	addi	r6,r6,12620
  80b6a4:	32000204 	addi	r8,r6,8
  80b6a8:	82013426 	beq	r16,r8,80bb7c <_malloc_r+0x5b4>
  80b6ac:	80c00117 	ldw	r3,4(r16)
  80b6b0:	00bfff04 	movi	r2,-4
  80b6b4:	188e703a 	and	r7,r3,r2
  80b6b8:	3c45c83a 	sub	r2,r7,r17
  80b6bc:	00c003c4 	movi	r3,15
  80b6c0:	18811f16 	blt	r3,r2,80bb40 <_malloc_r+0x578>
  80b6c4:	32000515 	stw	r8,20(r6)
  80b6c8:	32000415 	stw	r8,16(r6)
  80b6cc:	10007f0e 	bge	r2,zero,80b8cc <_malloc_r+0x304>
  80b6d0:	00807fc4 	movi	r2,511
  80b6d4:	11c0fd36 	bltu	r2,r7,80bacc <_malloc_r+0x504>
  80b6d8:	3806d0fa 	srli	r3,r7,3
  80b6dc:	01c00044 	movi	r7,1
  80b6e0:	30800117 	ldw	r2,4(r6)
  80b6e4:	19400044 	addi	r5,r3,1
  80b6e8:	294b883a 	add	r5,r5,r5
  80b6ec:	1807d0ba 	srai	r3,r3,2
  80b6f0:	294b883a 	add	r5,r5,r5
  80b6f4:	294b883a 	add	r5,r5,r5
  80b6f8:	298b883a 	add	r5,r5,r6
  80b6fc:	38c6983a 	sll	r3,r7,r3
  80b700:	29c00017 	ldw	r7,0(r5)
  80b704:	2a7ffe04 	addi	r9,r5,-8
  80b708:	1886b03a 	or	r3,r3,r2
  80b70c:	82400315 	stw	r9,12(r16)
  80b710:	81c00215 	stw	r7,8(r16)
  80b714:	30c00115 	stw	r3,4(r6)
  80b718:	2c000015 	stw	r16,0(r5)
  80b71c:	3c000315 	stw	r16,12(r7)
  80b720:	2005d0ba 	srai	r2,r4,2
  80b724:	01400044 	movi	r5,1
  80b728:	288a983a 	sll	r5,r5,r2
  80b72c:	19406f36 	bltu	r3,r5,80b8ec <_malloc_r+0x324>
  80b730:	28c4703a 	and	r2,r5,r3
  80b734:	10000a1e 	bne	r2,zero,80b760 <_malloc_r+0x198>
  80b738:	00bfff04 	movi	r2,-4
  80b73c:	294b883a 	add	r5,r5,r5
  80b740:	2088703a 	and	r4,r4,r2
  80b744:	28c4703a 	and	r2,r5,r3
  80b748:	21000104 	addi	r4,r4,4
  80b74c:	1000041e 	bne	r2,zero,80b760 <_malloc_r+0x198>
  80b750:	294b883a 	add	r5,r5,r5
  80b754:	28c4703a 	and	r2,r5,r3
  80b758:	21000104 	addi	r4,r4,4
  80b75c:	103ffc26 	beq	r2,zero,80b750 <__alt_data_end+0xff80b750>
  80b760:	02bfff04 	movi	r10,-4
  80b764:	024003c4 	movi	r9,15
  80b768:	21800044 	addi	r6,r4,1
  80b76c:	318d883a 	add	r6,r6,r6
  80b770:	318d883a 	add	r6,r6,r6
  80b774:	318d883a 	add	r6,r6,r6
  80b778:	998d883a 	add	r6,r19,r6
  80b77c:	333ffe04 	addi	r12,r6,-8
  80b780:	2017883a 	mov	r11,r4
  80b784:	31800104 	addi	r6,r6,4
  80b788:	34000017 	ldw	r16,0(r6)
  80b78c:	31fffd04 	addi	r7,r6,-12
  80b790:	81c0041e 	bne	r16,r7,80b7a4 <_malloc_r+0x1dc>
  80b794:	0000fb06 	br	80bb84 <_malloc_r+0x5bc>
  80b798:	1801030e 	bge	r3,zero,80bba8 <_malloc_r+0x5e0>
  80b79c:	84000317 	ldw	r16,12(r16)
  80b7a0:	81c0f826 	beq	r16,r7,80bb84 <_malloc_r+0x5bc>
  80b7a4:	80800117 	ldw	r2,4(r16)
  80b7a8:	1284703a 	and	r2,r2,r10
  80b7ac:	1447c83a 	sub	r3,r2,r17
  80b7b0:	48fff90e 	bge	r9,r3,80b798 <__alt_data_end+0xff80b798>
  80b7b4:	80800317 	ldw	r2,12(r16)
  80b7b8:	81000217 	ldw	r4,8(r16)
  80b7bc:	89400054 	ori	r5,r17,1
  80b7c0:	81400115 	stw	r5,4(r16)
  80b7c4:	20800315 	stw	r2,12(r4)
  80b7c8:	11000215 	stw	r4,8(r2)
  80b7cc:	8463883a 	add	r17,r16,r17
  80b7d0:	9c400515 	stw	r17,20(r19)
  80b7d4:	9c400415 	stw	r17,16(r19)
  80b7d8:	18800054 	ori	r2,r3,1
  80b7dc:	88800115 	stw	r2,4(r17)
  80b7e0:	8a000315 	stw	r8,12(r17)
  80b7e4:	8a000215 	stw	r8,8(r17)
  80b7e8:	88e3883a 	add	r17,r17,r3
  80b7ec:	88c00015 	stw	r3,0(r17)
  80b7f0:	9009883a 	mov	r4,r18
  80b7f4:	080df980 	call	80df98 <__malloc_unlock>
  80b7f8:	80800204 	addi	r2,r16,8
  80b7fc:	00001b06 	br	80b86c <_malloc_r+0x2a4>
  80b800:	04400404 	movi	r17,16
  80b804:	89402536 	bltu	r17,r5,80b89c <_malloc_r+0x2d4>
  80b808:	080df740 	call	80df74 <__malloc_lock>
  80b80c:	00800184 	movi	r2,6
  80b810:	01000084 	movi	r4,2
  80b814:	04c02074 	movhi	r19,129
  80b818:	1085883a 	add	r2,r2,r2
  80b81c:	9ccc5304 	addi	r19,r19,12620
  80b820:	1085883a 	add	r2,r2,r2
  80b824:	9885883a 	add	r2,r19,r2
  80b828:	14000117 	ldw	r16,4(r2)
  80b82c:	10fffe04 	addi	r3,r2,-8
  80b830:	80c0d926 	beq	r16,r3,80bb98 <_malloc_r+0x5d0>
  80b834:	80c00117 	ldw	r3,4(r16)
  80b838:	81000317 	ldw	r4,12(r16)
  80b83c:	00bfff04 	movi	r2,-4
  80b840:	1884703a 	and	r2,r3,r2
  80b844:	81400217 	ldw	r5,8(r16)
  80b848:	8085883a 	add	r2,r16,r2
  80b84c:	10c00117 	ldw	r3,4(r2)
  80b850:	29000315 	stw	r4,12(r5)
  80b854:	21400215 	stw	r5,8(r4)
  80b858:	18c00054 	ori	r3,r3,1
  80b85c:	10c00115 	stw	r3,4(r2)
  80b860:	9009883a 	mov	r4,r18
  80b864:	080df980 	call	80df98 <__malloc_unlock>
  80b868:	80800204 	addi	r2,r16,8
  80b86c:	dfc00a17 	ldw	ra,40(sp)
  80b870:	df000917 	ldw	fp,36(sp)
  80b874:	ddc00817 	ldw	r23,32(sp)
  80b878:	dd800717 	ldw	r22,28(sp)
  80b87c:	dd400617 	ldw	r21,24(sp)
  80b880:	dd000517 	ldw	r20,20(sp)
  80b884:	dcc00417 	ldw	r19,16(sp)
  80b888:	dc800317 	ldw	r18,12(sp)
  80b88c:	dc400217 	ldw	r17,8(sp)
  80b890:	dc000117 	ldw	r16,4(sp)
  80b894:	dec00b04 	addi	sp,sp,44
  80b898:	f800283a 	ret
  80b89c:	00800304 	movi	r2,12
  80b8a0:	90800015 	stw	r2,0(r18)
  80b8a4:	0005883a 	mov	r2,zero
  80b8a8:	003ff006 	br	80b86c <__alt_data_end+0xff80b86c>
  80b8ac:	01002004 	movi	r4,128
  80b8b0:	02001004 	movi	r8,64
  80b8b4:	01c00fc4 	movi	r7,63
  80b8b8:	003f6106 	br	80b640 <__alt_data_end+0xff80b640>
  80b8bc:	4009883a 	mov	r4,r8
  80b8c0:	003f7506 	br	80b698 <__alt_data_end+0xff80b698>
  80b8c4:	81000317 	ldw	r4,12(r16)
  80b8c8:	003fde06 	br	80b844 <__alt_data_end+0xff80b844>
  80b8cc:	81c5883a 	add	r2,r16,r7
  80b8d0:	11400117 	ldw	r5,4(r2)
  80b8d4:	9009883a 	mov	r4,r18
  80b8d8:	29400054 	ori	r5,r5,1
  80b8dc:	11400115 	stw	r5,4(r2)
  80b8e0:	080df980 	call	80df98 <__malloc_unlock>
  80b8e4:	80800204 	addi	r2,r16,8
  80b8e8:	003fe006 	br	80b86c <__alt_data_end+0xff80b86c>
  80b8ec:	9c000217 	ldw	r16,8(r19)
  80b8f0:	00bfff04 	movi	r2,-4
  80b8f4:	85800117 	ldw	r22,4(r16)
  80b8f8:	b0ac703a 	and	r22,r22,r2
  80b8fc:	b4400336 	bltu	r22,r17,80b90c <_malloc_r+0x344>
  80b900:	b445c83a 	sub	r2,r22,r17
  80b904:	00c003c4 	movi	r3,15
  80b908:	18805d16 	blt	r3,r2,80ba80 <_malloc_r+0x4b8>
  80b90c:	05c02074 	movhi	r23,129
  80b910:	00802074 	movhi	r2,129
  80b914:	1099b604 	addi	r2,r2,26328
  80b918:	bdd26c04 	addi	r23,r23,18864
  80b91c:	15400017 	ldw	r21,0(r2)
  80b920:	b8c00017 	ldw	r3,0(r23)
  80b924:	00bfffc4 	movi	r2,-1
  80b928:	858d883a 	add	r6,r16,r22
  80b92c:	8d6b883a 	add	r21,r17,r21
  80b930:	1880ea26 	beq	r3,r2,80bcdc <_malloc_r+0x714>
  80b934:	ad4403c4 	addi	r21,r21,4111
  80b938:	00bc0004 	movi	r2,-4096
  80b93c:	a8aa703a 	and	r21,r21,r2
  80b940:	a80b883a 	mov	r5,r21
  80b944:	9009883a 	mov	r4,r18
  80b948:	d9800015 	stw	r6,0(sp)
  80b94c:	080c8d00 	call	80c8d0 <_sbrk_r>
  80b950:	1029883a 	mov	r20,r2
  80b954:	00bfffc4 	movi	r2,-1
  80b958:	d9800017 	ldw	r6,0(sp)
  80b95c:	a080e826 	beq	r20,r2,80bd00 <_malloc_r+0x738>
  80b960:	a180a636 	bltu	r20,r6,80bbfc <_malloc_r+0x634>
  80b964:	07002074 	movhi	fp,129
  80b968:	e719c504 	addi	fp,fp,26388
  80b96c:	e0800017 	ldw	r2,0(fp)
  80b970:	a887883a 	add	r3,r21,r2
  80b974:	e0c00015 	stw	r3,0(fp)
  80b978:	3500e626 	beq	r6,r20,80bd14 <_malloc_r+0x74c>
  80b97c:	b9000017 	ldw	r4,0(r23)
  80b980:	00bfffc4 	movi	r2,-1
  80b984:	2080ee26 	beq	r4,r2,80bd40 <_malloc_r+0x778>
  80b988:	a185c83a 	sub	r2,r20,r6
  80b98c:	10c5883a 	add	r2,r2,r3
  80b990:	e0800015 	stw	r2,0(fp)
  80b994:	a0c001cc 	andi	r3,r20,7
  80b998:	1800bc26 	beq	r3,zero,80bc8c <_malloc_r+0x6c4>
  80b99c:	a0e9c83a 	sub	r20,r20,r3
  80b9a0:	00840204 	movi	r2,4104
  80b9a4:	a5000204 	addi	r20,r20,8
  80b9a8:	10c7c83a 	sub	r3,r2,r3
  80b9ac:	a545883a 	add	r2,r20,r21
  80b9b0:	1083ffcc 	andi	r2,r2,4095
  80b9b4:	18abc83a 	sub	r21,r3,r2
  80b9b8:	a80b883a 	mov	r5,r21
  80b9bc:	9009883a 	mov	r4,r18
  80b9c0:	080c8d00 	call	80c8d0 <_sbrk_r>
  80b9c4:	00ffffc4 	movi	r3,-1
  80b9c8:	10c0e126 	beq	r2,r3,80bd50 <_malloc_r+0x788>
  80b9cc:	1505c83a 	sub	r2,r2,r20
  80b9d0:	1545883a 	add	r2,r2,r21
  80b9d4:	10800054 	ori	r2,r2,1
  80b9d8:	e0c00017 	ldw	r3,0(fp)
  80b9dc:	9d000215 	stw	r20,8(r19)
  80b9e0:	a0800115 	stw	r2,4(r20)
  80b9e4:	a8c7883a 	add	r3,r21,r3
  80b9e8:	e0c00015 	stw	r3,0(fp)
  80b9ec:	84c00e26 	beq	r16,r19,80ba28 <_malloc_r+0x460>
  80b9f0:	018003c4 	movi	r6,15
  80b9f4:	3580a72e 	bgeu	r6,r22,80bc94 <_malloc_r+0x6cc>
  80b9f8:	81400117 	ldw	r5,4(r16)
  80b9fc:	013ffe04 	movi	r4,-8
  80ba00:	b0bffd04 	addi	r2,r22,-12
  80ba04:	1104703a 	and	r2,r2,r4
  80ba08:	2900004c 	andi	r4,r5,1
  80ba0c:	2088b03a 	or	r4,r4,r2
  80ba10:	81000115 	stw	r4,4(r16)
  80ba14:	01400144 	movi	r5,5
  80ba18:	8089883a 	add	r4,r16,r2
  80ba1c:	21400115 	stw	r5,4(r4)
  80ba20:	21400215 	stw	r5,8(r4)
  80ba24:	3080cd36 	bltu	r6,r2,80bd5c <_malloc_r+0x794>
  80ba28:	00802074 	movhi	r2,129
  80ba2c:	1099b504 	addi	r2,r2,26324
  80ba30:	11000017 	ldw	r4,0(r2)
  80ba34:	20c0012e 	bgeu	r4,r3,80ba3c <_malloc_r+0x474>
  80ba38:	10c00015 	stw	r3,0(r2)
  80ba3c:	00802074 	movhi	r2,129
  80ba40:	1099b404 	addi	r2,r2,26320
  80ba44:	11000017 	ldw	r4,0(r2)
  80ba48:	9c000217 	ldw	r16,8(r19)
  80ba4c:	20c0012e 	bgeu	r4,r3,80ba54 <_malloc_r+0x48c>
  80ba50:	10c00015 	stw	r3,0(r2)
  80ba54:	80c00117 	ldw	r3,4(r16)
  80ba58:	00bfff04 	movi	r2,-4
  80ba5c:	1886703a 	and	r3,r3,r2
  80ba60:	1c45c83a 	sub	r2,r3,r17
  80ba64:	1c400236 	bltu	r3,r17,80ba70 <_malloc_r+0x4a8>
  80ba68:	00c003c4 	movi	r3,15
  80ba6c:	18800416 	blt	r3,r2,80ba80 <_malloc_r+0x4b8>
  80ba70:	9009883a 	mov	r4,r18
  80ba74:	080df980 	call	80df98 <__malloc_unlock>
  80ba78:	0005883a 	mov	r2,zero
  80ba7c:	003f7b06 	br	80b86c <__alt_data_end+0xff80b86c>
  80ba80:	88c00054 	ori	r3,r17,1
  80ba84:	80c00115 	stw	r3,4(r16)
  80ba88:	8463883a 	add	r17,r16,r17
  80ba8c:	10800054 	ori	r2,r2,1
  80ba90:	9c400215 	stw	r17,8(r19)
  80ba94:	88800115 	stw	r2,4(r17)
  80ba98:	9009883a 	mov	r4,r18
  80ba9c:	080df980 	call	80df98 <__malloc_unlock>
  80baa0:	80800204 	addi	r2,r16,8
  80baa4:	003f7106 	br	80b86c <__alt_data_end+0xff80b86c>
  80baa8:	00c00504 	movi	r3,20
  80baac:	18804a2e 	bgeu	r3,r2,80bbd8 <_malloc_r+0x610>
  80bab0:	00c01504 	movi	r3,84
  80bab4:	18806e36 	bltu	r3,r2,80bc70 <_malloc_r+0x6a8>
  80bab8:	8804d33a 	srli	r2,r17,12
  80babc:	12001bc4 	addi	r8,r2,111
  80bac0:	11c01b84 	addi	r7,r2,110
  80bac4:	4209883a 	add	r4,r8,r8
  80bac8:	003edd06 	br	80b640 <__alt_data_end+0xff80b640>
  80bacc:	3804d27a 	srli	r2,r7,9
  80bad0:	00c00104 	movi	r3,4
  80bad4:	1880442e 	bgeu	r3,r2,80bbe8 <_malloc_r+0x620>
  80bad8:	00c00504 	movi	r3,20
  80badc:	18808136 	bltu	r3,r2,80bce4 <_malloc_r+0x71c>
  80bae0:	11401704 	addi	r5,r2,92
  80bae4:	10c016c4 	addi	r3,r2,91
  80bae8:	294b883a 	add	r5,r5,r5
  80baec:	294b883a 	add	r5,r5,r5
  80baf0:	294b883a 	add	r5,r5,r5
  80baf4:	994b883a 	add	r5,r19,r5
  80baf8:	28800017 	ldw	r2,0(r5)
  80bafc:	01802074 	movhi	r6,129
  80bb00:	297ffe04 	addi	r5,r5,-8
  80bb04:	318c5304 	addi	r6,r6,12620
  80bb08:	28806526 	beq	r5,r2,80bca0 <_malloc_r+0x6d8>
  80bb0c:	01bfff04 	movi	r6,-4
  80bb10:	10c00117 	ldw	r3,4(r2)
  80bb14:	1986703a 	and	r3,r3,r6
  80bb18:	38c0022e 	bgeu	r7,r3,80bb24 <_malloc_r+0x55c>
  80bb1c:	10800217 	ldw	r2,8(r2)
  80bb20:	28bffb1e 	bne	r5,r2,80bb10 <__alt_data_end+0xff80bb10>
  80bb24:	11400317 	ldw	r5,12(r2)
  80bb28:	98c00117 	ldw	r3,4(r19)
  80bb2c:	81400315 	stw	r5,12(r16)
  80bb30:	80800215 	stw	r2,8(r16)
  80bb34:	2c000215 	stw	r16,8(r5)
  80bb38:	14000315 	stw	r16,12(r2)
  80bb3c:	003ef806 	br	80b720 <__alt_data_end+0xff80b720>
  80bb40:	88c00054 	ori	r3,r17,1
  80bb44:	80c00115 	stw	r3,4(r16)
  80bb48:	8463883a 	add	r17,r16,r17
  80bb4c:	34400515 	stw	r17,20(r6)
  80bb50:	34400415 	stw	r17,16(r6)
  80bb54:	10c00054 	ori	r3,r2,1
  80bb58:	8a000315 	stw	r8,12(r17)
  80bb5c:	8a000215 	stw	r8,8(r17)
  80bb60:	88c00115 	stw	r3,4(r17)
  80bb64:	88a3883a 	add	r17,r17,r2
  80bb68:	88800015 	stw	r2,0(r17)
  80bb6c:	9009883a 	mov	r4,r18
  80bb70:	080df980 	call	80df98 <__malloc_unlock>
  80bb74:	80800204 	addi	r2,r16,8
  80bb78:	003f3c06 	br	80b86c <__alt_data_end+0xff80b86c>
  80bb7c:	30c00117 	ldw	r3,4(r6)
  80bb80:	003ee706 	br	80b720 <__alt_data_end+0xff80b720>
  80bb84:	5ac00044 	addi	r11,r11,1
  80bb88:	588000cc 	andi	r2,r11,3
  80bb8c:	31800204 	addi	r6,r6,8
  80bb90:	103efd1e 	bne	r2,zero,80b788 <__alt_data_end+0xff80b788>
  80bb94:	00002406 	br	80bc28 <_malloc_r+0x660>
  80bb98:	14000317 	ldw	r16,12(r2)
  80bb9c:	143f251e 	bne	r2,r16,80b834 <__alt_data_end+0xff80b834>
  80bba0:	21000084 	addi	r4,r4,2
  80bba4:	003ebc06 	br	80b698 <__alt_data_end+0xff80b698>
  80bba8:	8085883a 	add	r2,r16,r2
  80bbac:	10c00117 	ldw	r3,4(r2)
  80bbb0:	81000317 	ldw	r4,12(r16)
  80bbb4:	81400217 	ldw	r5,8(r16)
  80bbb8:	18c00054 	ori	r3,r3,1
  80bbbc:	10c00115 	stw	r3,4(r2)
  80bbc0:	29000315 	stw	r4,12(r5)
  80bbc4:	21400215 	stw	r5,8(r4)
  80bbc8:	9009883a 	mov	r4,r18
  80bbcc:	080df980 	call	80df98 <__malloc_unlock>
  80bbd0:	80800204 	addi	r2,r16,8
  80bbd4:	003f2506 	br	80b86c <__alt_data_end+0xff80b86c>
  80bbd8:	12001704 	addi	r8,r2,92
  80bbdc:	11c016c4 	addi	r7,r2,91
  80bbe0:	4209883a 	add	r4,r8,r8
  80bbe4:	003e9606 	br	80b640 <__alt_data_end+0xff80b640>
  80bbe8:	3804d1ba 	srli	r2,r7,6
  80bbec:	11400e44 	addi	r5,r2,57
  80bbf0:	10c00e04 	addi	r3,r2,56
  80bbf4:	294b883a 	add	r5,r5,r5
  80bbf8:	003fbc06 	br	80baec <__alt_data_end+0xff80baec>
  80bbfc:	84ff5926 	beq	r16,r19,80b964 <__alt_data_end+0xff80b964>
  80bc00:	00802074 	movhi	r2,129
  80bc04:	108c5304 	addi	r2,r2,12620
  80bc08:	14000217 	ldw	r16,8(r2)
  80bc0c:	00bfff04 	movi	r2,-4
  80bc10:	80c00117 	ldw	r3,4(r16)
  80bc14:	1886703a 	and	r3,r3,r2
  80bc18:	003f9106 	br	80ba60 <__alt_data_end+0xff80ba60>
  80bc1c:	60800217 	ldw	r2,8(r12)
  80bc20:	213fffc4 	addi	r4,r4,-1
  80bc24:	1300651e 	bne	r2,r12,80bdbc <_malloc_r+0x7f4>
  80bc28:	208000cc 	andi	r2,r4,3
  80bc2c:	633ffe04 	addi	r12,r12,-8
  80bc30:	103ffa1e 	bne	r2,zero,80bc1c <__alt_data_end+0xff80bc1c>
  80bc34:	98800117 	ldw	r2,4(r19)
  80bc38:	0146303a 	nor	r3,zero,r5
  80bc3c:	1884703a 	and	r2,r3,r2
  80bc40:	98800115 	stw	r2,4(r19)
  80bc44:	294b883a 	add	r5,r5,r5
  80bc48:	117f2836 	bltu	r2,r5,80b8ec <__alt_data_end+0xff80b8ec>
  80bc4c:	283f2726 	beq	r5,zero,80b8ec <__alt_data_end+0xff80b8ec>
  80bc50:	2886703a 	and	r3,r5,r2
  80bc54:	5809883a 	mov	r4,r11
  80bc58:	183ec31e 	bne	r3,zero,80b768 <__alt_data_end+0xff80b768>
  80bc5c:	294b883a 	add	r5,r5,r5
  80bc60:	2886703a 	and	r3,r5,r2
  80bc64:	21000104 	addi	r4,r4,4
  80bc68:	183ffc26 	beq	r3,zero,80bc5c <__alt_data_end+0xff80bc5c>
  80bc6c:	003ebe06 	br	80b768 <__alt_data_end+0xff80b768>
  80bc70:	00c05504 	movi	r3,340
  80bc74:	18801236 	bltu	r3,r2,80bcc0 <_malloc_r+0x6f8>
  80bc78:	8804d3fa 	srli	r2,r17,15
  80bc7c:	12001e04 	addi	r8,r2,120
  80bc80:	11c01dc4 	addi	r7,r2,119
  80bc84:	4209883a 	add	r4,r8,r8
  80bc88:	003e6d06 	br	80b640 <__alt_data_end+0xff80b640>
  80bc8c:	00c40004 	movi	r3,4096
  80bc90:	003f4606 	br	80b9ac <__alt_data_end+0xff80b9ac>
  80bc94:	00800044 	movi	r2,1
  80bc98:	a0800115 	stw	r2,4(r20)
  80bc9c:	003f7406 	br	80ba70 <__alt_data_end+0xff80ba70>
  80bca0:	1805d0ba 	srai	r2,r3,2
  80bca4:	01c00044 	movi	r7,1
  80bca8:	30c00117 	ldw	r3,4(r6)
  80bcac:	388e983a 	sll	r7,r7,r2
  80bcb0:	2805883a 	mov	r2,r5
  80bcb4:	38c6b03a 	or	r3,r7,r3
  80bcb8:	30c00115 	stw	r3,4(r6)
  80bcbc:	003f9b06 	br	80bb2c <__alt_data_end+0xff80bb2c>
  80bcc0:	00c15504 	movi	r3,1364
  80bcc4:	18801a36 	bltu	r3,r2,80bd30 <_malloc_r+0x768>
  80bcc8:	8804d4ba 	srli	r2,r17,18
  80bccc:	12001f44 	addi	r8,r2,125
  80bcd0:	11c01f04 	addi	r7,r2,124
  80bcd4:	4209883a 	add	r4,r8,r8
  80bcd8:	003e5906 	br	80b640 <__alt_data_end+0xff80b640>
  80bcdc:	ad400404 	addi	r21,r21,16
  80bce0:	003f1706 	br	80b940 <__alt_data_end+0xff80b940>
  80bce4:	00c01504 	movi	r3,84
  80bce8:	18802336 	bltu	r3,r2,80bd78 <_malloc_r+0x7b0>
  80bcec:	3804d33a 	srli	r2,r7,12
  80bcf0:	11401bc4 	addi	r5,r2,111
  80bcf4:	10c01b84 	addi	r3,r2,110
  80bcf8:	294b883a 	add	r5,r5,r5
  80bcfc:	003f7b06 	br	80baec <__alt_data_end+0xff80baec>
  80bd00:	9c000217 	ldw	r16,8(r19)
  80bd04:	00bfff04 	movi	r2,-4
  80bd08:	80c00117 	ldw	r3,4(r16)
  80bd0c:	1886703a 	and	r3,r3,r2
  80bd10:	003f5306 	br	80ba60 <__alt_data_end+0xff80ba60>
  80bd14:	3083ffcc 	andi	r2,r6,4095
  80bd18:	103f181e 	bne	r2,zero,80b97c <__alt_data_end+0xff80b97c>
  80bd1c:	99000217 	ldw	r4,8(r19)
  80bd20:	b545883a 	add	r2,r22,r21
  80bd24:	10800054 	ori	r2,r2,1
  80bd28:	20800115 	stw	r2,4(r4)
  80bd2c:	003f3e06 	br	80ba28 <__alt_data_end+0xff80ba28>
  80bd30:	01003f84 	movi	r4,254
  80bd34:	02001fc4 	movi	r8,127
  80bd38:	01c01f84 	movi	r7,126
  80bd3c:	003e4006 	br	80b640 <__alt_data_end+0xff80b640>
  80bd40:	00802074 	movhi	r2,129
  80bd44:	10926c04 	addi	r2,r2,18864
  80bd48:	15000015 	stw	r20,0(r2)
  80bd4c:	003f1106 	br	80b994 <__alt_data_end+0xff80b994>
  80bd50:	00800044 	movi	r2,1
  80bd54:	002b883a 	mov	r21,zero
  80bd58:	003f1f06 	br	80b9d8 <__alt_data_end+0xff80b9d8>
  80bd5c:	81400204 	addi	r5,r16,8
  80bd60:	9009883a 	mov	r4,r18
  80bd64:	080d2900 	call	80d290 <_free_r>
  80bd68:	00802074 	movhi	r2,129
  80bd6c:	1099c504 	addi	r2,r2,26388
  80bd70:	10c00017 	ldw	r3,0(r2)
  80bd74:	003f2c06 	br	80ba28 <__alt_data_end+0xff80ba28>
  80bd78:	00c05504 	movi	r3,340
  80bd7c:	18800536 	bltu	r3,r2,80bd94 <_malloc_r+0x7cc>
  80bd80:	3804d3fa 	srli	r2,r7,15
  80bd84:	11401e04 	addi	r5,r2,120
  80bd88:	10c01dc4 	addi	r3,r2,119
  80bd8c:	294b883a 	add	r5,r5,r5
  80bd90:	003f5606 	br	80baec <__alt_data_end+0xff80baec>
  80bd94:	00c15504 	movi	r3,1364
  80bd98:	18800536 	bltu	r3,r2,80bdb0 <_malloc_r+0x7e8>
  80bd9c:	3804d4ba 	srli	r2,r7,18
  80bda0:	11401f44 	addi	r5,r2,125
  80bda4:	10c01f04 	addi	r3,r2,124
  80bda8:	294b883a 	add	r5,r5,r5
  80bdac:	003f4f06 	br	80baec <__alt_data_end+0xff80baec>
  80bdb0:	01403f84 	movi	r5,254
  80bdb4:	00c01f84 	movi	r3,126
  80bdb8:	003f4c06 	br	80baec <__alt_data_end+0xff80baec>
  80bdbc:	98800117 	ldw	r2,4(r19)
  80bdc0:	003fa006 	br	80bc44 <__alt_data_end+0xff80bc44>
  80bdc4:	8808d0fa 	srli	r4,r17,3
  80bdc8:	20800044 	addi	r2,r4,1
  80bdcc:	1085883a 	add	r2,r2,r2
  80bdd0:	003e9006 	br	80b814 <__alt_data_end+0xff80b814>

0080bdd4 <memchr>:
  80bdd4:	208000cc 	andi	r2,r4,3
  80bdd8:	280f883a 	mov	r7,r5
  80bddc:	10003426 	beq	r2,zero,80beb0 <memchr+0xdc>
  80bde0:	30bfffc4 	addi	r2,r6,-1
  80bde4:	30001a26 	beq	r6,zero,80be50 <memchr+0x7c>
  80bde8:	20c00003 	ldbu	r3,0(r4)
  80bdec:	29803fcc 	andi	r6,r5,255
  80bdf0:	30c0051e 	bne	r6,r3,80be08 <memchr+0x34>
  80bdf4:	00001806 	br	80be58 <memchr+0x84>
  80bdf8:	10001526 	beq	r2,zero,80be50 <memchr+0x7c>
  80bdfc:	20c00003 	ldbu	r3,0(r4)
  80be00:	10bfffc4 	addi	r2,r2,-1
  80be04:	30c01426 	beq	r6,r3,80be58 <memchr+0x84>
  80be08:	21000044 	addi	r4,r4,1
  80be0c:	20c000cc 	andi	r3,r4,3
  80be10:	183ff91e 	bne	r3,zero,80bdf8 <__alt_data_end+0xff80bdf8>
  80be14:	020000c4 	movi	r8,3
  80be18:	40801136 	bltu	r8,r2,80be60 <memchr+0x8c>
  80be1c:	10000c26 	beq	r2,zero,80be50 <memchr+0x7c>
  80be20:	20c00003 	ldbu	r3,0(r4)
  80be24:	29403fcc 	andi	r5,r5,255
  80be28:	28c00b26 	beq	r5,r3,80be58 <memchr+0x84>
  80be2c:	20c00044 	addi	r3,r4,1
  80be30:	39803fcc 	andi	r6,r7,255
  80be34:	2089883a 	add	r4,r4,r2
  80be38:	00000306 	br	80be48 <memchr+0x74>
  80be3c:	18c00044 	addi	r3,r3,1
  80be40:	197fffc3 	ldbu	r5,-1(r3)
  80be44:	31400526 	beq	r6,r5,80be5c <memchr+0x88>
  80be48:	1805883a 	mov	r2,r3
  80be4c:	20fffb1e 	bne	r4,r3,80be3c <__alt_data_end+0xff80be3c>
  80be50:	0005883a 	mov	r2,zero
  80be54:	f800283a 	ret
  80be58:	2005883a 	mov	r2,r4
  80be5c:	f800283a 	ret
  80be60:	28c03fcc 	andi	r3,r5,255
  80be64:	1812923a 	slli	r9,r3,8
  80be68:	02ffbff4 	movhi	r11,65279
  80be6c:	02a02074 	movhi	r10,32897
  80be70:	48d2b03a 	or	r9,r9,r3
  80be74:	4806943a 	slli	r3,r9,16
  80be78:	5affbfc4 	addi	r11,r11,-257
  80be7c:	52a02004 	addi	r10,r10,-32640
  80be80:	48d2b03a 	or	r9,r9,r3
  80be84:	20c00017 	ldw	r3,0(r4)
  80be88:	48c6f03a 	xor	r3,r9,r3
  80be8c:	1acd883a 	add	r6,r3,r11
  80be90:	00c6303a 	nor	r3,zero,r3
  80be94:	30c6703a 	and	r3,r6,r3
  80be98:	1a86703a 	and	r3,r3,r10
  80be9c:	183fe01e 	bne	r3,zero,80be20 <__alt_data_end+0xff80be20>
  80bea0:	10bfff04 	addi	r2,r2,-4
  80bea4:	21000104 	addi	r4,r4,4
  80bea8:	40bff636 	bltu	r8,r2,80be84 <__alt_data_end+0xff80be84>
  80beac:	003fdb06 	br	80be1c <__alt_data_end+0xff80be1c>
  80beb0:	3005883a 	mov	r2,r6
  80beb4:	003fd706 	br	80be14 <__alt_data_end+0xff80be14>

0080beb8 <memmove>:
  80beb8:	2005883a 	mov	r2,r4
  80bebc:	29000b2e 	bgeu	r5,r4,80beec <memmove+0x34>
  80bec0:	298f883a 	add	r7,r5,r6
  80bec4:	21c0092e 	bgeu	r4,r7,80beec <memmove+0x34>
  80bec8:	2187883a 	add	r3,r4,r6
  80becc:	198bc83a 	sub	r5,r3,r6
  80bed0:	30004826 	beq	r6,zero,80bff4 <memmove+0x13c>
  80bed4:	39ffffc4 	addi	r7,r7,-1
  80bed8:	39000003 	ldbu	r4,0(r7)
  80bedc:	18ffffc4 	addi	r3,r3,-1
  80bee0:	19000005 	stb	r4,0(r3)
  80bee4:	28fffb1e 	bne	r5,r3,80bed4 <__alt_data_end+0xff80bed4>
  80bee8:	f800283a 	ret
  80beec:	00c003c4 	movi	r3,15
  80bef0:	1980412e 	bgeu	r3,r6,80bff8 <memmove+0x140>
  80bef4:	2886b03a 	or	r3,r5,r2
  80bef8:	18c000cc 	andi	r3,r3,3
  80befc:	1800401e 	bne	r3,zero,80c000 <memmove+0x148>
  80bf00:	33fffc04 	addi	r15,r6,-16
  80bf04:	781ed13a 	srli	r15,r15,4
  80bf08:	28c00104 	addi	r3,r5,4
  80bf0c:	13400104 	addi	r13,r2,4
  80bf10:	781c913a 	slli	r14,r15,4
  80bf14:	2b000204 	addi	r12,r5,8
  80bf18:	12c00204 	addi	r11,r2,8
  80bf1c:	73800504 	addi	r14,r14,20
  80bf20:	2a800304 	addi	r10,r5,12
  80bf24:	12400304 	addi	r9,r2,12
  80bf28:	2b9d883a 	add	r14,r5,r14
  80bf2c:	2811883a 	mov	r8,r5
  80bf30:	100f883a 	mov	r7,r2
  80bf34:	41000017 	ldw	r4,0(r8)
  80bf38:	39c00404 	addi	r7,r7,16
  80bf3c:	18c00404 	addi	r3,r3,16
  80bf40:	393ffc15 	stw	r4,-16(r7)
  80bf44:	193ffc17 	ldw	r4,-16(r3)
  80bf48:	6b400404 	addi	r13,r13,16
  80bf4c:	5ac00404 	addi	r11,r11,16
  80bf50:	693ffc15 	stw	r4,-16(r13)
  80bf54:	61000017 	ldw	r4,0(r12)
  80bf58:	4a400404 	addi	r9,r9,16
  80bf5c:	42000404 	addi	r8,r8,16
  80bf60:	593ffc15 	stw	r4,-16(r11)
  80bf64:	51000017 	ldw	r4,0(r10)
  80bf68:	63000404 	addi	r12,r12,16
  80bf6c:	52800404 	addi	r10,r10,16
  80bf70:	493ffc15 	stw	r4,-16(r9)
  80bf74:	1bbfef1e 	bne	r3,r14,80bf34 <__alt_data_end+0xff80bf34>
  80bf78:	79000044 	addi	r4,r15,1
  80bf7c:	2008913a 	slli	r4,r4,4
  80bf80:	328003cc 	andi	r10,r6,15
  80bf84:	02c000c4 	movi	r11,3
  80bf88:	1107883a 	add	r3,r2,r4
  80bf8c:	290b883a 	add	r5,r5,r4
  80bf90:	5a801e2e 	bgeu	r11,r10,80c00c <memmove+0x154>
  80bf94:	1813883a 	mov	r9,r3
  80bf98:	2811883a 	mov	r8,r5
  80bf9c:	500f883a 	mov	r7,r10
  80bfa0:	41000017 	ldw	r4,0(r8)
  80bfa4:	4a400104 	addi	r9,r9,4
  80bfa8:	39ffff04 	addi	r7,r7,-4
  80bfac:	493fff15 	stw	r4,-4(r9)
  80bfb0:	42000104 	addi	r8,r8,4
  80bfb4:	59fffa36 	bltu	r11,r7,80bfa0 <__alt_data_end+0xff80bfa0>
  80bfb8:	513fff04 	addi	r4,r10,-4
  80bfbc:	2008d0ba 	srli	r4,r4,2
  80bfc0:	318000cc 	andi	r6,r6,3
  80bfc4:	21000044 	addi	r4,r4,1
  80bfc8:	2109883a 	add	r4,r4,r4
  80bfcc:	2109883a 	add	r4,r4,r4
  80bfd0:	1907883a 	add	r3,r3,r4
  80bfd4:	290b883a 	add	r5,r5,r4
  80bfd8:	30000b26 	beq	r6,zero,80c008 <memmove+0x150>
  80bfdc:	198d883a 	add	r6,r3,r6
  80bfe0:	29c00003 	ldbu	r7,0(r5)
  80bfe4:	18c00044 	addi	r3,r3,1
  80bfe8:	29400044 	addi	r5,r5,1
  80bfec:	19ffffc5 	stb	r7,-1(r3)
  80bff0:	19bffb1e 	bne	r3,r6,80bfe0 <__alt_data_end+0xff80bfe0>
  80bff4:	f800283a 	ret
  80bff8:	1007883a 	mov	r3,r2
  80bffc:	003ff606 	br	80bfd8 <__alt_data_end+0xff80bfd8>
  80c000:	1007883a 	mov	r3,r2
  80c004:	003ff506 	br	80bfdc <__alt_data_end+0xff80bfdc>
  80c008:	f800283a 	ret
  80c00c:	500d883a 	mov	r6,r10
  80c010:	003ff106 	br	80bfd8 <__alt_data_end+0xff80bfd8>

0080c014 <_putc_r>:
  80c014:	defffc04 	addi	sp,sp,-16
  80c018:	dc000215 	stw	r16,8(sp)
  80c01c:	dfc00315 	stw	ra,12(sp)
  80c020:	2021883a 	mov	r16,r4
  80c024:	20000226 	beq	r4,zero,80c030 <_putc_r+0x1c>
  80c028:	20800e17 	ldw	r2,56(r4)
  80c02c:	10001b26 	beq	r2,zero,80c09c <_putc_r+0x88>
  80c030:	30800217 	ldw	r2,8(r6)
  80c034:	10bfffc4 	addi	r2,r2,-1
  80c038:	30800215 	stw	r2,8(r6)
  80c03c:	10000a16 	blt	r2,zero,80c068 <_putc_r+0x54>
  80c040:	30800017 	ldw	r2,0(r6)
  80c044:	11400005 	stb	r5,0(r2)
  80c048:	30800017 	ldw	r2,0(r6)
  80c04c:	10c00044 	addi	r3,r2,1
  80c050:	30c00015 	stw	r3,0(r6)
  80c054:	10800003 	ldbu	r2,0(r2)
  80c058:	dfc00317 	ldw	ra,12(sp)
  80c05c:	dc000217 	ldw	r16,8(sp)
  80c060:	dec00404 	addi	sp,sp,16
  80c064:	f800283a 	ret
  80c068:	30c00617 	ldw	r3,24(r6)
  80c06c:	10c00616 	blt	r2,r3,80c088 <_putc_r+0x74>
  80c070:	30800017 	ldw	r2,0(r6)
  80c074:	00c00284 	movi	r3,10
  80c078:	11400005 	stb	r5,0(r2)
  80c07c:	30800017 	ldw	r2,0(r6)
  80c080:	11400003 	ldbu	r5,0(r2)
  80c084:	28fff11e 	bne	r5,r3,80c04c <__alt_data_end+0xff80c04c>
  80c088:	8009883a 	mov	r4,r16
  80c08c:	dfc00317 	ldw	ra,12(sp)
  80c090:	dc000217 	ldw	r16,8(sp)
  80c094:	dec00404 	addi	sp,sp,16
  80c098:	080ca601 	jmpi	80ca60 <__swbuf_r>
  80c09c:	d9400015 	stw	r5,0(sp)
  80c0a0:	d9800115 	stw	r6,4(sp)
  80c0a4:	080af340 	call	80af34 <__sinit>
  80c0a8:	d9800117 	ldw	r6,4(sp)
  80c0ac:	d9400017 	ldw	r5,0(sp)
  80c0b0:	003fdf06 	br	80c030 <__alt_data_end+0xff80c030>

0080c0b4 <putc>:
  80c0b4:	00802074 	movhi	r2,129
  80c0b8:	defffc04 	addi	sp,sp,-16
  80c0bc:	10926b04 	addi	r2,r2,18860
  80c0c0:	dc000115 	stw	r16,4(sp)
  80c0c4:	14000017 	ldw	r16,0(r2)
  80c0c8:	dc400215 	stw	r17,8(sp)
  80c0cc:	dfc00315 	stw	ra,12(sp)
  80c0d0:	2023883a 	mov	r17,r4
  80c0d4:	80000226 	beq	r16,zero,80c0e0 <putc+0x2c>
  80c0d8:	80800e17 	ldw	r2,56(r16)
  80c0dc:	10001a26 	beq	r2,zero,80c148 <putc+0x94>
  80c0e0:	28800217 	ldw	r2,8(r5)
  80c0e4:	10bfffc4 	addi	r2,r2,-1
  80c0e8:	28800215 	stw	r2,8(r5)
  80c0ec:	10000b16 	blt	r2,zero,80c11c <putc+0x68>
  80c0f0:	28800017 	ldw	r2,0(r5)
  80c0f4:	14400005 	stb	r17,0(r2)
  80c0f8:	28800017 	ldw	r2,0(r5)
  80c0fc:	10c00044 	addi	r3,r2,1
  80c100:	28c00015 	stw	r3,0(r5)
  80c104:	10800003 	ldbu	r2,0(r2)
  80c108:	dfc00317 	ldw	ra,12(sp)
  80c10c:	dc400217 	ldw	r17,8(sp)
  80c110:	dc000117 	ldw	r16,4(sp)
  80c114:	dec00404 	addi	sp,sp,16
  80c118:	f800283a 	ret
  80c11c:	28c00617 	ldw	r3,24(r5)
  80c120:	10c00e16 	blt	r2,r3,80c15c <putc+0xa8>
  80c124:	28800017 	ldw	r2,0(r5)
  80c128:	01000284 	movi	r4,10
  80c12c:	14400005 	stb	r17,0(r2)
  80c130:	28800017 	ldw	r2,0(r5)
  80c134:	10c00003 	ldbu	r3,0(r2)
  80c138:	193ff01e 	bne	r3,r4,80c0fc <__alt_data_end+0xff80c0fc>
  80c13c:	280d883a 	mov	r6,r5
  80c140:	180b883a 	mov	r5,r3
  80c144:	00000706 	br	80c164 <putc+0xb0>
  80c148:	8009883a 	mov	r4,r16
  80c14c:	d9400015 	stw	r5,0(sp)
  80c150:	080af340 	call	80af34 <__sinit>
  80c154:	d9400017 	ldw	r5,0(sp)
  80c158:	003fe106 	br	80c0e0 <__alt_data_end+0xff80c0e0>
  80c15c:	280d883a 	mov	r6,r5
  80c160:	880b883a 	mov	r5,r17
  80c164:	8009883a 	mov	r4,r16
  80c168:	dfc00317 	ldw	ra,12(sp)
  80c16c:	dc400217 	ldw	r17,8(sp)
  80c170:	dc000117 	ldw	r16,4(sp)
  80c174:	dec00404 	addi	sp,sp,16
  80c178:	080ca601 	jmpi	80ca60 <__swbuf_r>

0080c17c <_realloc_r>:
  80c17c:	defff604 	addi	sp,sp,-40
  80c180:	dc800215 	stw	r18,8(sp)
  80c184:	dfc00915 	stw	ra,36(sp)
  80c188:	df000815 	stw	fp,32(sp)
  80c18c:	ddc00715 	stw	r23,28(sp)
  80c190:	dd800615 	stw	r22,24(sp)
  80c194:	dd400515 	stw	r21,20(sp)
  80c198:	dd000415 	stw	r20,16(sp)
  80c19c:	dcc00315 	stw	r19,12(sp)
  80c1a0:	dc400115 	stw	r17,4(sp)
  80c1a4:	dc000015 	stw	r16,0(sp)
  80c1a8:	3025883a 	mov	r18,r6
  80c1ac:	2800b726 	beq	r5,zero,80c48c <_realloc_r+0x310>
  80c1b0:	282b883a 	mov	r21,r5
  80c1b4:	2029883a 	mov	r20,r4
  80c1b8:	080df740 	call	80df74 <__malloc_lock>
  80c1bc:	a8bfff17 	ldw	r2,-4(r21)
  80c1c0:	043fff04 	movi	r16,-4
  80c1c4:	90c002c4 	addi	r3,r18,11
  80c1c8:	01000584 	movi	r4,22
  80c1cc:	acfffe04 	addi	r19,r21,-8
  80c1d0:	1420703a 	and	r16,r2,r16
  80c1d4:	20c0332e 	bgeu	r4,r3,80c2a4 <_realloc_r+0x128>
  80c1d8:	047ffe04 	movi	r17,-8
  80c1dc:	1c62703a 	and	r17,r3,r17
  80c1e0:	8807883a 	mov	r3,r17
  80c1e4:	88005816 	blt	r17,zero,80c348 <_realloc_r+0x1cc>
  80c1e8:	8c805736 	bltu	r17,r18,80c348 <_realloc_r+0x1cc>
  80c1ec:	80c0300e 	bge	r16,r3,80c2b0 <_realloc_r+0x134>
  80c1f0:	07002074 	movhi	fp,129
  80c1f4:	e70c5304 	addi	fp,fp,12620
  80c1f8:	e1c00217 	ldw	r7,8(fp)
  80c1fc:	9c09883a 	add	r4,r19,r16
  80c200:	22000117 	ldw	r8,4(r4)
  80c204:	21c06326 	beq	r4,r7,80c394 <_realloc_r+0x218>
  80c208:	017fff84 	movi	r5,-2
  80c20c:	414a703a 	and	r5,r8,r5
  80c210:	214b883a 	add	r5,r4,r5
  80c214:	29800117 	ldw	r6,4(r5)
  80c218:	3180004c 	andi	r6,r6,1
  80c21c:	30003f26 	beq	r6,zero,80c31c <_realloc_r+0x1a0>
  80c220:	1080004c 	andi	r2,r2,1
  80c224:	10008326 	beq	r2,zero,80c434 <_realloc_r+0x2b8>
  80c228:	900b883a 	mov	r5,r18
  80c22c:	a009883a 	mov	r4,r20
  80c230:	080b5c80 	call	80b5c8 <_malloc_r>
  80c234:	1025883a 	mov	r18,r2
  80c238:	10011e26 	beq	r2,zero,80c6b4 <_realloc_r+0x538>
  80c23c:	a93fff17 	ldw	r4,-4(r21)
  80c240:	10fffe04 	addi	r3,r2,-8
  80c244:	00bfff84 	movi	r2,-2
  80c248:	2084703a 	and	r2,r4,r2
  80c24c:	9885883a 	add	r2,r19,r2
  80c250:	1880ee26 	beq	r3,r2,80c60c <_realloc_r+0x490>
  80c254:	81bfff04 	addi	r6,r16,-4
  80c258:	00800904 	movi	r2,36
  80c25c:	1180b836 	bltu	r2,r6,80c540 <_realloc_r+0x3c4>
  80c260:	00c004c4 	movi	r3,19
  80c264:	19809636 	bltu	r3,r6,80c4c0 <_realloc_r+0x344>
  80c268:	9005883a 	mov	r2,r18
  80c26c:	a807883a 	mov	r3,r21
  80c270:	19000017 	ldw	r4,0(r3)
  80c274:	11000015 	stw	r4,0(r2)
  80c278:	19000117 	ldw	r4,4(r3)
  80c27c:	11000115 	stw	r4,4(r2)
  80c280:	18c00217 	ldw	r3,8(r3)
  80c284:	10c00215 	stw	r3,8(r2)
  80c288:	a80b883a 	mov	r5,r21
  80c28c:	a009883a 	mov	r4,r20
  80c290:	080d2900 	call	80d290 <_free_r>
  80c294:	a009883a 	mov	r4,r20
  80c298:	080df980 	call	80df98 <__malloc_unlock>
  80c29c:	9005883a 	mov	r2,r18
  80c2a0:	00001206 	br	80c2ec <_realloc_r+0x170>
  80c2a4:	00c00404 	movi	r3,16
  80c2a8:	1823883a 	mov	r17,r3
  80c2ac:	003fce06 	br	80c1e8 <__alt_data_end+0xff80c1e8>
  80c2b0:	a825883a 	mov	r18,r21
  80c2b4:	8445c83a 	sub	r2,r16,r17
  80c2b8:	00c003c4 	movi	r3,15
  80c2bc:	18802636 	bltu	r3,r2,80c358 <_realloc_r+0x1dc>
  80c2c0:	99800117 	ldw	r6,4(r19)
  80c2c4:	9c07883a 	add	r3,r19,r16
  80c2c8:	3180004c 	andi	r6,r6,1
  80c2cc:	3420b03a 	or	r16,r6,r16
  80c2d0:	9c000115 	stw	r16,4(r19)
  80c2d4:	18800117 	ldw	r2,4(r3)
  80c2d8:	10800054 	ori	r2,r2,1
  80c2dc:	18800115 	stw	r2,4(r3)
  80c2e0:	a009883a 	mov	r4,r20
  80c2e4:	080df980 	call	80df98 <__malloc_unlock>
  80c2e8:	9005883a 	mov	r2,r18
  80c2ec:	dfc00917 	ldw	ra,36(sp)
  80c2f0:	df000817 	ldw	fp,32(sp)
  80c2f4:	ddc00717 	ldw	r23,28(sp)
  80c2f8:	dd800617 	ldw	r22,24(sp)
  80c2fc:	dd400517 	ldw	r21,20(sp)
  80c300:	dd000417 	ldw	r20,16(sp)
  80c304:	dcc00317 	ldw	r19,12(sp)
  80c308:	dc800217 	ldw	r18,8(sp)
  80c30c:	dc400117 	ldw	r17,4(sp)
  80c310:	dc000017 	ldw	r16,0(sp)
  80c314:	dec00a04 	addi	sp,sp,40
  80c318:	f800283a 	ret
  80c31c:	017fff04 	movi	r5,-4
  80c320:	414a703a 	and	r5,r8,r5
  80c324:	814d883a 	add	r6,r16,r5
  80c328:	30c01f16 	blt	r6,r3,80c3a8 <_realloc_r+0x22c>
  80c32c:	20800317 	ldw	r2,12(r4)
  80c330:	20c00217 	ldw	r3,8(r4)
  80c334:	a825883a 	mov	r18,r21
  80c338:	3021883a 	mov	r16,r6
  80c33c:	18800315 	stw	r2,12(r3)
  80c340:	10c00215 	stw	r3,8(r2)
  80c344:	003fdb06 	br	80c2b4 <__alt_data_end+0xff80c2b4>
  80c348:	00800304 	movi	r2,12
  80c34c:	a0800015 	stw	r2,0(r20)
  80c350:	0005883a 	mov	r2,zero
  80c354:	003fe506 	br	80c2ec <__alt_data_end+0xff80c2ec>
  80c358:	98c00117 	ldw	r3,4(r19)
  80c35c:	9c4b883a 	add	r5,r19,r17
  80c360:	11000054 	ori	r4,r2,1
  80c364:	18c0004c 	andi	r3,r3,1
  80c368:	1c62b03a 	or	r17,r3,r17
  80c36c:	9c400115 	stw	r17,4(r19)
  80c370:	29000115 	stw	r4,4(r5)
  80c374:	2885883a 	add	r2,r5,r2
  80c378:	10c00117 	ldw	r3,4(r2)
  80c37c:	29400204 	addi	r5,r5,8
  80c380:	a009883a 	mov	r4,r20
  80c384:	18c00054 	ori	r3,r3,1
  80c388:	10c00115 	stw	r3,4(r2)
  80c38c:	080d2900 	call	80d290 <_free_r>
  80c390:	003fd306 	br	80c2e0 <__alt_data_end+0xff80c2e0>
  80c394:	017fff04 	movi	r5,-4
  80c398:	414a703a 	and	r5,r8,r5
  80c39c:	89800404 	addi	r6,r17,16
  80c3a0:	8151883a 	add	r8,r16,r5
  80c3a4:	4180590e 	bge	r8,r6,80c50c <_realloc_r+0x390>
  80c3a8:	1080004c 	andi	r2,r2,1
  80c3ac:	103f9e1e 	bne	r2,zero,80c228 <__alt_data_end+0xff80c228>
  80c3b0:	adbffe17 	ldw	r22,-8(r21)
  80c3b4:	00bfff04 	movi	r2,-4
  80c3b8:	9dadc83a 	sub	r22,r19,r22
  80c3bc:	b1800117 	ldw	r6,4(r22)
  80c3c0:	3084703a 	and	r2,r6,r2
  80c3c4:	20002026 	beq	r4,zero,80c448 <_realloc_r+0x2cc>
  80c3c8:	80af883a 	add	r23,r16,r2
  80c3cc:	b96f883a 	add	r23,r23,r5
  80c3d0:	21c05f26 	beq	r4,r7,80c550 <_realloc_r+0x3d4>
  80c3d4:	b8c01c16 	blt	r23,r3,80c448 <_realloc_r+0x2cc>
  80c3d8:	20800317 	ldw	r2,12(r4)
  80c3dc:	20c00217 	ldw	r3,8(r4)
  80c3e0:	81bfff04 	addi	r6,r16,-4
  80c3e4:	01000904 	movi	r4,36
  80c3e8:	18800315 	stw	r2,12(r3)
  80c3ec:	10c00215 	stw	r3,8(r2)
  80c3f0:	b0c00217 	ldw	r3,8(r22)
  80c3f4:	b0800317 	ldw	r2,12(r22)
  80c3f8:	b4800204 	addi	r18,r22,8
  80c3fc:	18800315 	stw	r2,12(r3)
  80c400:	10c00215 	stw	r3,8(r2)
  80c404:	21801b36 	bltu	r4,r6,80c474 <_realloc_r+0x2f8>
  80c408:	008004c4 	movi	r2,19
  80c40c:	1180352e 	bgeu	r2,r6,80c4e4 <_realloc_r+0x368>
  80c410:	a8800017 	ldw	r2,0(r21)
  80c414:	b0800215 	stw	r2,8(r22)
  80c418:	a8800117 	ldw	r2,4(r21)
  80c41c:	b0800315 	stw	r2,12(r22)
  80c420:	008006c4 	movi	r2,27
  80c424:	11807f36 	bltu	r2,r6,80c624 <_realloc_r+0x4a8>
  80c428:	b0800404 	addi	r2,r22,16
  80c42c:	ad400204 	addi	r21,r21,8
  80c430:	00002d06 	br	80c4e8 <_realloc_r+0x36c>
  80c434:	adbffe17 	ldw	r22,-8(r21)
  80c438:	00bfff04 	movi	r2,-4
  80c43c:	9dadc83a 	sub	r22,r19,r22
  80c440:	b1000117 	ldw	r4,4(r22)
  80c444:	2084703a 	and	r2,r4,r2
  80c448:	b03f7726 	beq	r22,zero,80c228 <__alt_data_end+0xff80c228>
  80c44c:	80af883a 	add	r23,r16,r2
  80c450:	b8ff7516 	blt	r23,r3,80c228 <__alt_data_end+0xff80c228>
  80c454:	b0800317 	ldw	r2,12(r22)
  80c458:	b0c00217 	ldw	r3,8(r22)
  80c45c:	81bfff04 	addi	r6,r16,-4
  80c460:	01000904 	movi	r4,36
  80c464:	18800315 	stw	r2,12(r3)
  80c468:	10c00215 	stw	r3,8(r2)
  80c46c:	b4800204 	addi	r18,r22,8
  80c470:	21bfe52e 	bgeu	r4,r6,80c408 <__alt_data_end+0xff80c408>
  80c474:	a80b883a 	mov	r5,r21
  80c478:	9009883a 	mov	r4,r18
  80c47c:	080beb80 	call	80beb8 <memmove>
  80c480:	b821883a 	mov	r16,r23
  80c484:	b027883a 	mov	r19,r22
  80c488:	003f8a06 	br	80c2b4 <__alt_data_end+0xff80c2b4>
  80c48c:	300b883a 	mov	r5,r6
  80c490:	dfc00917 	ldw	ra,36(sp)
  80c494:	df000817 	ldw	fp,32(sp)
  80c498:	ddc00717 	ldw	r23,28(sp)
  80c49c:	dd800617 	ldw	r22,24(sp)
  80c4a0:	dd400517 	ldw	r21,20(sp)
  80c4a4:	dd000417 	ldw	r20,16(sp)
  80c4a8:	dcc00317 	ldw	r19,12(sp)
  80c4ac:	dc800217 	ldw	r18,8(sp)
  80c4b0:	dc400117 	ldw	r17,4(sp)
  80c4b4:	dc000017 	ldw	r16,0(sp)
  80c4b8:	dec00a04 	addi	sp,sp,40
  80c4bc:	080b5c81 	jmpi	80b5c8 <_malloc_r>
  80c4c0:	a8c00017 	ldw	r3,0(r21)
  80c4c4:	90c00015 	stw	r3,0(r18)
  80c4c8:	a8c00117 	ldw	r3,4(r21)
  80c4cc:	90c00115 	stw	r3,4(r18)
  80c4d0:	00c006c4 	movi	r3,27
  80c4d4:	19804536 	bltu	r3,r6,80c5ec <_realloc_r+0x470>
  80c4d8:	90800204 	addi	r2,r18,8
  80c4dc:	a8c00204 	addi	r3,r21,8
  80c4e0:	003f6306 	br	80c270 <__alt_data_end+0xff80c270>
  80c4e4:	9005883a 	mov	r2,r18
  80c4e8:	a8c00017 	ldw	r3,0(r21)
  80c4ec:	b821883a 	mov	r16,r23
  80c4f0:	b027883a 	mov	r19,r22
  80c4f4:	10c00015 	stw	r3,0(r2)
  80c4f8:	a8c00117 	ldw	r3,4(r21)
  80c4fc:	10c00115 	stw	r3,4(r2)
  80c500:	a8c00217 	ldw	r3,8(r21)
  80c504:	10c00215 	stw	r3,8(r2)
  80c508:	003f6a06 	br	80c2b4 <__alt_data_end+0xff80c2b4>
  80c50c:	9c67883a 	add	r19,r19,r17
  80c510:	4445c83a 	sub	r2,r8,r17
  80c514:	e4c00215 	stw	r19,8(fp)
  80c518:	10800054 	ori	r2,r2,1
  80c51c:	98800115 	stw	r2,4(r19)
  80c520:	a8bfff17 	ldw	r2,-4(r21)
  80c524:	a009883a 	mov	r4,r20
  80c528:	1080004c 	andi	r2,r2,1
  80c52c:	1462b03a 	or	r17,r2,r17
  80c530:	ac7fff15 	stw	r17,-4(r21)
  80c534:	080df980 	call	80df98 <__malloc_unlock>
  80c538:	a805883a 	mov	r2,r21
  80c53c:	003f6b06 	br	80c2ec <__alt_data_end+0xff80c2ec>
  80c540:	a80b883a 	mov	r5,r21
  80c544:	9009883a 	mov	r4,r18
  80c548:	080beb80 	call	80beb8 <memmove>
  80c54c:	003f4e06 	br	80c288 <__alt_data_end+0xff80c288>
  80c550:	89000404 	addi	r4,r17,16
  80c554:	b93fbc16 	blt	r23,r4,80c448 <__alt_data_end+0xff80c448>
  80c558:	b0800317 	ldw	r2,12(r22)
  80c55c:	b0c00217 	ldw	r3,8(r22)
  80c560:	81bfff04 	addi	r6,r16,-4
  80c564:	01000904 	movi	r4,36
  80c568:	18800315 	stw	r2,12(r3)
  80c56c:	10c00215 	stw	r3,8(r2)
  80c570:	b4800204 	addi	r18,r22,8
  80c574:	21804336 	bltu	r4,r6,80c684 <_realloc_r+0x508>
  80c578:	008004c4 	movi	r2,19
  80c57c:	11803f2e 	bgeu	r2,r6,80c67c <_realloc_r+0x500>
  80c580:	a8800017 	ldw	r2,0(r21)
  80c584:	b0800215 	stw	r2,8(r22)
  80c588:	a8800117 	ldw	r2,4(r21)
  80c58c:	b0800315 	stw	r2,12(r22)
  80c590:	008006c4 	movi	r2,27
  80c594:	11803f36 	bltu	r2,r6,80c694 <_realloc_r+0x518>
  80c598:	b0800404 	addi	r2,r22,16
  80c59c:	ad400204 	addi	r21,r21,8
  80c5a0:	a8c00017 	ldw	r3,0(r21)
  80c5a4:	10c00015 	stw	r3,0(r2)
  80c5a8:	a8c00117 	ldw	r3,4(r21)
  80c5ac:	10c00115 	stw	r3,4(r2)
  80c5b0:	a8c00217 	ldw	r3,8(r21)
  80c5b4:	10c00215 	stw	r3,8(r2)
  80c5b8:	b447883a 	add	r3,r22,r17
  80c5bc:	bc45c83a 	sub	r2,r23,r17
  80c5c0:	e0c00215 	stw	r3,8(fp)
  80c5c4:	10800054 	ori	r2,r2,1
  80c5c8:	18800115 	stw	r2,4(r3)
  80c5cc:	b0800117 	ldw	r2,4(r22)
  80c5d0:	a009883a 	mov	r4,r20
  80c5d4:	1080004c 	andi	r2,r2,1
  80c5d8:	1462b03a 	or	r17,r2,r17
  80c5dc:	b4400115 	stw	r17,4(r22)
  80c5e0:	080df980 	call	80df98 <__malloc_unlock>
  80c5e4:	9005883a 	mov	r2,r18
  80c5e8:	003f4006 	br	80c2ec <__alt_data_end+0xff80c2ec>
  80c5ec:	a8c00217 	ldw	r3,8(r21)
  80c5f0:	90c00215 	stw	r3,8(r18)
  80c5f4:	a8c00317 	ldw	r3,12(r21)
  80c5f8:	90c00315 	stw	r3,12(r18)
  80c5fc:	30801126 	beq	r6,r2,80c644 <_realloc_r+0x4c8>
  80c600:	90800404 	addi	r2,r18,16
  80c604:	a8c00404 	addi	r3,r21,16
  80c608:	003f1906 	br	80c270 <__alt_data_end+0xff80c270>
  80c60c:	90ffff17 	ldw	r3,-4(r18)
  80c610:	00bfff04 	movi	r2,-4
  80c614:	a825883a 	mov	r18,r21
  80c618:	1884703a 	and	r2,r3,r2
  80c61c:	80a1883a 	add	r16,r16,r2
  80c620:	003f2406 	br	80c2b4 <__alt_data_end+0xff80c2b4>
  80c624:	a8800217 	ldw	r2,8(r21)
  80c628:	b0800415 	stw	r2,16(r22)
  80c62c:	a8800317 	ldw	r2,12(r21)
  80c630:	b0800515 	stw	r2,20(r22)
  80c634:	31000a26 	beq	r6,r4,80c660 <_realloc_r+0x4e4>
  80c638:	b0800604 	addi	r2,r22,24
  80c63c:	ad400404 	addi	r21,r21,16
  80c640:	003fa906 	br	80c4e8 <__alt_data_end+0xff80c4e8>
  80c644:	a9000417 	ldw	r4,16(r21)
  80c648:	90800604 	addi	r2,r18,24
  80c64c:	a8c00604 	addi	r3,r21,24
  80c650:	91000415 	stw	r4,16(r18)
  80c654:	a9000517 	ldw	r4,20(r21)
  80c658:	91000515 	stw	r4,20(r18)
  80c65c:	003f0406 	br	80c270 <__alt_data_end+0xff80c270>
  80c660:	a8c00417 	ldw	r3,16(r21)
  80c664:	ad400604 	addi	r21,r21,24
  80c668:	b0800804 	addi	r2,r22,32
  80c66c:	b0c00615 	stw	r3,24(r22)
  80c670:	a8ffff17 	ldw	r3,-4(r21)
  80c674:	b0c00715 	stw	r3,28(r22)
  80c678:	003f9b06 	br	80c4e8 <__alt_data_end+0xff80c4e8>
  80c67c:	9005883a 	mov	r2,r18
  80c680:	003fc706 	br	80c5a0 <__alt_data_end+0xff80c5a0>
  80c684:	a80b883a 	mov	r5,r21
  80c688:	9009883a 	mov	r4,r18
  80c68c:	080beb80 	call	80beb8 <memmove>
  80c690:	003fc906 	br	80c5b8 <__alt_data_end+0xff80c5b8>
  80c694:	a8800217 	ldw	r2,8(r21)
  80c698:	b0800415 	stw	r2,16(r22)
  80c69c:	a8800317 	ldw	r2,12(r21)
  80c6a0:	b0800515 	stw	r2,20(r22)
  80c6a4:	31000726 	beq	r6,r4,80c6c4 <_realloc_r+0x548>
  80c6a8:	b0800604 	addi	r2,r22,24
  80c6ac:	ad400404 	addi	r21,r21,16
  80c6b0:	003fbb06 	br	80c5a0 <__alt_data_end+0xff80c5a0>
  80c6b4:	a009883a 	mov	r4,r20
  80c6b8:	080df980 	call	80df98 <__malloc_unlock>
  80c6bc:	0005883a 	mov	r2,zero
  80c6c0:	003f0a06 	br	80c2ec <__alt_data_end+0xff80c2ec>
  80c6c4:	a8c00417 	ldw	r3,16(r21)
  80c6c8:	ad400604 	addi	r21,r21,24
  80c6cc:	b0800804 	addi	r2,r22,32
  80c6d0:	b0c00615 	stw	r3,24(r22)
  80c6d4:	a8ffff17 	ldw	r3,-4(r21)
  80c6d8:	b0c00715 	stw	r3,28(r22)
  80c6dc:	003fb006 	br	80c5a0 <__alt_data_end+0xff80c5a0>

0080c6e0 <lflush>:
  80c6e0:	2080030b 	ldhu	r2,12(r4)
  80c6e4:	00c00244 	movi	r3,9
  80c6e8:	1080024c 	andi	r2,r2,9
  80c6ec:	10c00226 	beq	r2,r3,80c6f8 <lflush+0x18>
  80c6f0:	0005883a 	mov	r2,zero
  80c6f4:	f800283a 	ret
  80c6f8:	080d13c1 	jmpi	80d13c <fflush>

0080c6fc <__srefill_r>:
  80c6fc:	defffc04 	addi	sp,sp,-16
  80c700:	dc400115 	stw	r17,4(sp)
  80c704:	dc000015 	stw	r16,0(sp)
  80c708:	dfc00315 	stw	ra,12(sp)
  80c70c:	dc800215 	stw	r18,8(sp)
  80c710:	2023883a 	mov	r17,r4
  80c714:	2821883a 	mov	r16,r5
  80c718:	20000226 	beq	r4,zero,80c724 <__srefill_r+0x28>
  80c71c:	20800e17 	ldw	r2,56(r4)
  80c720:	10003c26 	beq	r2,zero,80c814 <__srefill_r+0x118>
  80c724:	80c0030b 	ldhu	r3,12(r16)
  80c728:	1908000c 	andi	r4,r3,8192
  80c72c:	1805883a 	mov	r2,r3
  80c730:	2000071e 	bne	r4,zero,80c750 <__srefill_r+0x54>
  80c734:	81001917 	ldw	r4,100(r16)
  80c738:	18880014 	ori	r2,r3,8192
  80c73c:	00f7ffc4 	movi	r3,-8193
  80c740:	20c8703a 	and	r4,r4,r3
  80c744:	8080030d 	sth	r2,12(r16)
  80c748:	1007883a 	mov	r3,r2
  80c74c:	81001915 	stw	r4,100(r16)
  80c750:	80000115 	stw	zero,4(r16)
  80c754:	1100080c 	andi	r4,r2,32
  80c758:	2000571e 	bne	r4,zero,80c8b8 <__srefill_r+0x1bc>
  80c75c:	1100010c 	andi	r4,r2,4
  80c760:	20001f26 	beq	r4,zero,80c7e0 <__srefill_r+0xe4>
  80c764:	81400c17 	ldw	r5,48(r16)
  80c768:	28000826 	beq	r5,zero,80c78c <__srefill_r+0x90>
  80c76c:	80801004 	addi	r2,r16,64
  80c770:	28800226 	beq	r5,r2,80c77c <__srefill_r+0x80>
  80c774:	8809883a 	mov	r4,r17
  80c778:	080d2900 	call	80d290 <_free_r>
  80c77c:	80800f17 	ldw	r2,60(r16)
  80c780:	80000c15 	stw	zero,48(r16)
  80c784:	80800115 	stw	r2,4(r16)
  80c788:	1000391e 	bne	r2,zero,80c870 <__srefill_r+0x174>
  80c78c:	80800417 	ldw	r2,16(r16)
  80c790:	10004b26 	beq	r2,zero,80c8c0 <__srefill_r+0x1c4>
  80c794:	8480030b 	ldhu	r18,12(r16)
  80c798:	908000cc 	andi	r2,r18,3
  80c79c:	10001f1e 	bne	r2,zero,80c81c <__srefill_r+0x120>
  80c7a0:	81800417 	ldw	r6,16(r16)
  80c7a4:	80800817 	ldw	r2,32(r16)
  80c7a8:	81c00517 	ldw	r7,20(r16)
  80c7ac:	81400717 	ldw	r5,28(r16)
  80c7b0:	81800015 	stw	r6,0(r16)
  80c7b4:	8809883a 	mov	r4,r17
  80c7b8:	103ee83a 	callr	r2
  80c7bc:	80800115 	stw	r2,4(r16)
  80c7c0:	00800e0e 	bge	zero,r2,80c7fc <__srefill_r+0x100>
  80c7c4:	0005883a 	mov	r2,zero
  80c7c8:	dfc00317 	ldw	ra,12(sp)
  80c7cc:	dc800217 	ldw	r18,8(sp)
  80c7d0:	dc400117 	ldw	r17,4(sp)
  80c7d4:	dc000017 	ldw	r16,0(sp)
  80c7d8:	dec00404 	addi	sp,sp,16
  80c7dc:	f800283a 	ret
  80c7e0:	1100040c 	andi	r4,r2,16
  80c7e4:	20003026 	beq	r4,zero,80c8a8 <__srefill_r+0x1ac>
  80c7e8:	1080020c 	andi	r2,r2,8
  80c7ec:	1000241e 	bne	r2,zero,80c880 <__srefill_r+0x184>
  80c7f0:	18c00114 	ori	r3,r3,4
  80c7f4:	80c0030d 	sth	r3,12(r16)
  80c7f8:	003fe406 	br	80c78c <__alt_data_end+0xff80c78c>
  80c7fc:	80c0030b 	ldhu	r3,12(r16)
  80c800:	1000161e 	bne	r2,zero,80c85c <__srefill_r+0x160>
  80c804:	18c00814 	ori	r3,r3,32
  80c808:	00bfffc4 	movi	r2,-1
  80c80c:	80c0030d 	sth	r3,12(r16)
  80c810:	003fed06 	br	80c7c8 <__alt_data_end+0xff80c7c8>
  80c814:	080af340 	call	80af34 <__sinit>
  80c818:	003fc206 	br	80c724 <__alt_data_end+0xff80c724>
  80c81c:	00802074 	movhi	r2,129
  80c820:	10926a04 	addi	r2,r2,18856
  80c824:	11000017 	ldw	r4,0(r2)
  80c828:	01402074 	movhi	r5,129
  80c82c:	00800044 	movi	r2,1
  80c830:	2971b804 	addi	r5,r5,-14624
  80c834:	8080030d 	sth	r2,12(r16)
  80c838:	080b4400 	call	80b440 <_fwalk>
  80c83c:	00800244 	movi	r2,9
  80c840:	8480030d 	sth	r18,12(r16)
  80c844:	9480024c 	andi	r18,r18,9
  80c848:	90bfd51e 	bne	r18,r2,80c7a0 <__alt_data_end+0xff80c7a0>
  80c84c:	800b883a 	mov	r5,r16
  80c850:	8809883a 	mov	r4,r17
  80c854:	080cec40 	call	80cec4 <__sflush_r>
  80c858:	003fd106 	br	80c7a0 <__alt_data_end+0xff80c7a0>
  80c85c:	18c01014 	ori	r3,r3,64
  80c860:	80000115 	stw	zero,4(r16)
  80c864:	00bfffc4 	movi	r2,-1
  80c868:	80c0030d 	sth	r3,12(r16)
  80c86c:	003fd606 	br	80c7c8 <__alt_data_end+0xff80c7c8>
  80c870:	80c00e17 	ldw	r3,56(r16)
  80c874:	0005883a 	mov	r2,zero
  80c878:	80c00015 	stw	r3,0(r16)
  80c87c:	003fd206 	br	80c7c8 <__alt_data_end+0xff80c7c8>
  80c880:	800b883a 	mov	r5,r16
  80c884:	8809883a 	mov	r4,r17
  80c888:	080d0e00 	call	80d0e0 <_fflush_r>
  80c88c:	10000a1e 	bne	r2,zero,80c8b8 <__srefill_r+0x1bc>
  80c890:	8080030b 	ldhu	r2,12(r16)
  80c894:	00fffdc4 	movi	r3,-9
  80c898:	80000215 	stw	zero,8(r16)
  80c89c:	1886703a 	and	r3,r3,r2
  80c8a0:	80000615 	stw	zero,24(r16)
  80c8a4:	003fd206 	br	80c7f0 <__alt_data_end+0xff80c7f0>
  80c8a8:	00800244 	movi	r2,9
  80c8ac:	88800015 	stw	r2,0(r17)
  80c8b0:	18c01014 	ori	r3,r3,64
  80c8b4:	80c0030d 	sth	r3,12(r16)
  80c8b8:	00bfffc4 	movi	r2,-1
  80c8bc:	003fc206 	br	80c7c8 <__alt_data_end+0xff80c7c8>
  80c8c0:	800b883a 	mov	r5,r16
  80c8c4:	8809883a 	mov	r4,r17
  80c8c8:	080d6000 	call	80d600 <__smakebuf_r>
  80c8cc:	003fb106 	br	80c794 <__alt_data_end+0xff80c794>

0080c8d0 <_sbrk_r>:
  80c8d0:	defffd04 	addi	sp,sp,-12
  80c8d4:	dc000015 	stw	r16,0(sp)
  80c8d8:	04002074 	movhi	r16,129
  80c8dc:	dc400115 	stw	r17,4(sp)
  80c8e0:	8419b704 	addi	r16,r16,26332
  80c8e4:	2023883a 	mov	r17,r4
  80c8e8:	2809883a 	mov	r4,r5
  80c8ec:	dfc00215 	stw	ra,8(sp)
  80c8f0:	80000015 	stw	zero,0(r16)
  80c8f4:	080e3c00 	call	80e3c0 <sbrk>
  80c8f8:	00ffffc4 	movi	r3,-1
  80c8fc:	10c00526 	beq	r2,r3,80c914 <_sbrk_r+0x44>
  80c900:	dfc00217 	ldw	ra,8(sp)
  80c904:	dc400117 	ldw	r17,4(sp)
  80c908:	dc000017 	ldw	r16,0(sp)
  80c90c:	dec00304 	addi	sp,sp,12
  80c910:	f800283a 	ret
  80c914:	80c00017 	ldw	r3,0(r16)
  80c918:	183ff926 	beq	r3,zero,80c900 <__alt_data_end+0xff80c900>
  80c91c:	88c00015 	stw	r3,0(r17)
  80c920:	003ff706 	br	80c900 <__alt_data_end+0xff80c900>

0080c924 <__sread>:
  80c924:	defffe04 	addi	sp,sp,-8
  80c928:	dc000015 	stw	r16,0(sp)
  80c92c:	2821883a 	mov	r16,r5
  80c930:	2940038f 	ldh	r5,14(r5)
  80c934:	dfc00115 	stw	ra,4(sp)
  80c938:	080d7bc0 	call	80d7bc <_read_r>
  80c93c:	10000716 	blt	r2,zero,80c95c <__sread+0x38>
  80c940:	80c01417 	ldw	r3,80(r16)
  80c944:	1887883a 	add	r3,r3,r2
  80c948:	80c01415 	stw	r3,80(r16)
  80c94c:	dfc00117 	ldw	ra,4(sp)
  80c950:	dc000017 	ldw	r16,0(sp)
  80c954:	dec00204 	addi	sp,sp,8
  80c958:	f800283a 	ret
  80c95c:	80c0030b 	ldhu	r3,12(r16)
  80c960:	18fbffcc 	andi	r3,r3,61439
  80c964:	80c0030d 	sth	r3,12(r16)
  80c968:	dfc00117 	ldw	ra,4(sp)
  80c96c:	dc000017 	ldw	r16,0(sp)
  80c970:	dec00204 	addi	sp,sp,8
  80c974:	f800283a 	ret

0080c978 <__seofread>:
  80c978:	0005883a 	mov	r2,zero
  80c97c:	f800283a 	ret

0080c980 <__swrite>:
  80c980:	2880030b 	ldhu	r2,12(r5)
  80c984:	defffb04 	addi	sp,sp,-20
  80c988:	dcc00315 	stw	r19,12(sp)
  80c98c:	dc800215 	stw	r18,8(sp)
  80c990:	dc400115 	stw	r17,4(sp)
  80c994:	dc000015 	stw	r16,0(sp)
  80c998:	dfc00415 	stw	ra,16(sp)
  80c99c:	10c0400c 	andi	r3,r2,256
  80c9a0:	2821883a 	mov	r16,r5
  80c9a4:	2023883a 	mov	r17,r4
  80c9a8:	3025883a 	mov	r18,r6
  80c9ac:	3827883a 	mov	r19,r7
  80c9b0:	18000526 	beq	r3,zero,80c9c8 <__swrite+0x48>
  80c9b4:	2940038f 	ldh	r5,14(r5)
  80c9b8:	01c00084 	movi	r7,2
  80c9bc:	000d883a 	mov	r6,zero
  80c9c0:	080d5a00 	call	80d5a0 <_lseek_r>
  80c9c4:	8080030b 	ldhu	r2,12(r16)
  80c9c8:	8140038f 	ldh	r5,14(r16)
  80c9cc:	10bbffcc 	andi	r2,r2,61439
  80c9d0:	980f883a 	mov	r7,r19
  80c9d4:	900d883a 	mov	r6,r18
  80c9d8:	8809883a 	mov	r4,r17
  80c9dc:	8080030d 	sth	r2,12(r16)
  80c9e0:	dfc00417 	ldw	ra,16(sp)
  80c9e4:	dcc00317 	ldw	r19,12(sp)
  80c9e8:	dc800217 	ldw	r18,8(sp)
  80c9ec:	dc400117 	ldw	r17,4(sp)
  80c9f0:	dc000017 	ldw	r16,0(sp)
  80c9f4:	dec00504 	addi	sp,sp,20
  80c9f8:	080cbb81 	jmpi	80cbb8 <_write_r>

0080c9fc <__sseek>:
  80c9fc:	defffe04 	addi	sp,sp,-8
  80ca00:	dc000015 	stw	r16,0(sp)
  80ca04:	2821883a 	mov	r16,r5
  80ca08:	2940038f 	ldh	r5,14(r5)
  80ca0c:	dfc00115 	stw	ra,4(sp)
  80ca10:	080d5a00 	call	80d5a0 <_lseek_r>
  80ca14:	00ffffc4 	movi	r3,-1
  80ca18:	10c00826 	beq	r2,r3,80ca3c <__sseek+0x40>
  80ca1c:	80c0030b 	ldhu	r3,12(r16)
  80ca20:	80801415 	stw	r2,80(r16)
  80ca24:	18c40014 	ori	r3,r3,4096
  80ca28:	80c0030d 	sth	r3,12(r16)
  80ca2c:	dfc00117 	ldw	ra,4(sp)
  80ca30:	dc000017 	ldw	r16,0(sp)
  80ca34:	dec00204 	addi	sp,sp,8
  80ca38:	f800283a 	ret
  80ca3c:	80c0030b 	ldhu	r3,12(r16)
  80ca40:	18fbffcc 	andi	r3,r3,61439
  80ca44:	80c0030d 	sth	r3,12(r16)
  80ca48:	dfc00117 	ldw	ra,4(sp)
  80ca4c:	dc000017 	ldw	r16,0(sp)
  80ca50:	dec00204 	addi	sp,sp,8
  80ca54:	f800283a 	ret

0080ca58 <__sclose>:
  80ca58:	2940038f 	ldh	r5,14(r5)
  80ca5c:	080cd6c1 	jmpi	80cd6c <_close_r>

0080ca60 <__swbuf_r>:
  80ca60:	defffb04 	addi	sp,sp,-20
  80ca64:	dcc00315 	stw	r19,12(sp)
  80ca68:	dc800215 	stw	r18,8(sp)
  80ca6c:	dc000015 	stw	r16,0(sp)
  80ca70:	dfc00415 	stw	ra,16(sp)
  80ca74:	dc400115 	stw	r17,4(sp)
  80ca78:	2025883a 	mov	r18,r4
  80ca7c:	2827883a 	mov	r19,r5
  80ca80:	3021883a 	mov	r16,r6
  80ca84:	20000226 	beq	r4,zero,80ca90 <__swbuf_r+0x30>
  80ca88:	20800e17 	ldw	r2,56(r4)
  80ca8c:	10004226 	beq	r2,zero,80cb98 <__swbuf_r+0x138>
  80ca90:	80800617 	ldw	r2,24(r16)
  80ca94:	8100030b 	ldhu	r4,12(r16)
  80ca98:	80800215 	stw	r2,8(r16)
  80ca9c:	2080020c 	andi	r2,r4,8
  80caa0:	10003626 	beq	r2,zero,80cb7c <__swbuf_r+0x11c>
  80caa4:	80c00417 	ldw	r3,16(r16)
  80caa8:	18003426 	beq	r3,zero,80cb7c <__swbuf_r+0x11c>
  80caac:	2088000c 	andi	r2,r4,8192
  80cab0:	9c403fcc 	andi	r17,r19,255
  80cab4:	10001a26 	beq	r2,zero,80cb20 <__swbuf_r+0xc0>
  80cab8:	80800017 	ldw	r2,0(r16)
  80cabc:	81000517 	ldw	r4,20(r16)
  80cac0:	10c7c83a 	sub	r3,r2,r3
  80cac4:	1900200e 	bge	r3,r4,80cb48 <__swbuf_r+0xe8>
  80cac8:	18c00044 	addi	r3,r3,1
  80cacc:	81000217 	ldw	r4,8(r16)
  80cad0:	11400044 	addi	r5,r2,1
  80cad4:	81400015 	stw	r5,0(r16)
  80cad8:	213fffc4 	addi	r4,r4,-1
  80cadc:	81000215 	stw	r4,8(r16)
  80cae0:	14c00005 	stb	r19,0(r2)
  80cae4:	80800517 	ldw	r2,20(r16)
  80cae8:	10c01e26 	beq	r2,r3,80cb64 <__swbuf_r+0x104>
  80caec:	8080030b 	ldhu	r2,12(r16)
  80caf0:	1080004c 	andi	r2,r2,1
  80caf4:	10000226 	beq	r2,zero,80cb00 <__swbuf_r+0xa0>
  80caf8:	00800284 	movi	r2,10
  80cafc:	88801926 	beq	r17,r2,80cb64 <__swbuf_r+0x104>
  80cb00:	8805883a 	mov	r2,r17
  80cb04:	dfc00417 	ldw	ra,16(sp)
  80cb08:	dcc00317 	ldw	r19,12(sp)
  80cb0c:	dc800217 	ldw	r18,8(sp)
  80cb10:	dc400117 	ldw	r17,4(sp)
  80cb14:	dc000017 	ldw	r16,0(sp)
  80cb18:	dec00504 	addi	sp,sp,20
  80cb1c:	f800283a 	ret
  80cb20:	81401917 	ldw	r5,100(r16)
  80cb24:	00b7ffc4 	movi	r2,-8193
  80cb28:	21080014 	ori	r4,r4,8192
  80cb2c:	2884703a 	and	r2,r5,r2
  80cb30:	80801915 	stw	r2,100(r16)
  80cb34:	80800017 	ldw	r2,0(r16)
  80cb38:	8100030d 	sth	r4,12(r16)
  80cb3c:	81000517 	ldw	r4,20(r16)
  80cb40:	10c7c83a 	sub	r3,r2,r3
  80cb44:	193fe016 	blt	r3,r4,80cac8 <__alt_data_end+0xff80cac8>
  80cb48:	800b883a 	mov	r5,r16
  80cb4c:	9009883a 	mov	r4,r18
  80cb50:	080d0e00 	call	80d0e0 <_fflush_r>
  80cb54:	1000071e 	bne	r2,zero,80cb74 <__swbuf_r+0x114>
  80cb58:	80800017 	ldw	r2,0(r16)
  80cb5c:	00c00044 	movi	r3,1
  80cb60:	003fda06 	br	80cacc <__alt_data_end+0xff80cacc>
  80cb64:	800b883a 	mov	r5,r16
  80cb68:	9009883a 	mov	r4,r18
  80cb6c:	080d0e00 	call	80d0e0 <_fflush_r>
  80cb70:	103fe326 	beq	r2,zero,80cb00 <__alt_data_end+0xff80cb00>
  80cb74:	00bfffc4 	movi	r2,-1
  80cb78:	003fe206 	br	80cb04 <__alt_data_end+0xff80cb04>
  80cb7c:	800b883a 	mov	r5,r16
  80cb80:	9009883a 	mov	r4,r18
  80cb84:	080cc180 	call	80cc18 <__swsetup_r>
  80cb88:	103ffa1e 	bne	r2,zero,80cb74 <__alt_data_end+0xff80cb74>
  80cb8c:	8100030b 	ldhu	r4,12(r16)
  80cb90:	80c00417 	ldw	r3,16(r16)
  80cb94:	003fc506 	br	80caac <__alt_data_end+0xff80caac>
  80cb98:	080af340 	call	80af34 <__sinit>
  80cb9c:	003fbc06 	br	80ca90 <__alt_data_end+0xff80ca90>

0080cba0 <__swbuf>:
  80cba0:	00802074 	movhi	r2,129
  80cba4:	10926b04 	addi	r2,r2,18860
  80cba8:	280d883a 	mov	r6,r5
  80cbac:	200b883a 	mov	r5,r4
  80cbb0:	11000017 	ldw	r4,0(r2)
  80cbb4:	080ca601 	jmpi	80ca60 <__swbuf_r>

0080cbb8 <_write_r>:
  80cbb8:	defffd04 	addi	sp,sp,-12
  80cbbc:	2805883a 	mov	r2,r5
  80cbc0:	dc000015 	stw	r16,0(sp)
  80cbc4:	04002074 	movhi	r16,129
  80cbc8:	dc400115 	stw	r17,4(sp)
  80cbcc:	300b883a 	mov	r5,r6
  80cbd0:	8419b704 	addi	r16,r16,26332
  80cbd4:	2023883a 	mov	r17,r4
  80cbd8:	380d883a 	mov	r6,r7
  80cbdc:	1009883a 	mov	r4,r2
  80cbe0:	dfc00215 	stw	ra,8(sp)
  80cbe4:	80000015 	stw	zero,0(r16)
  80cbe8:	080e6500 	call	80e650 <write>
  80cbec:	00ffffc4 	movi	r3,-1
  80cbf0:	10c00526 	beq	r2,r3,80cc08 <_write_r+0x50>
  80cbf4:	dfc00217 	ldw	ra,8(sp)
  80cbf8:	dc400117 	ldw	r17,4(sp)
  80cbfc:	dc000017 	ldw	r16,0(sp)
  80cc00:	dec00304 	addi	sp,sp,12
  80cc04:	f800283a 	ret
  80cc08:	80c00017 	ldw	r3,0(r16)
  80cc0c:	183ff926 	beq	r3,zero,80cbf4 <__alt_data_end+0xff80cbf4>
  80cc10:	88c00015 	stw	r3,0(r17)
  80cc14:	003ff706 	br	80cbf4 <__alt_data_end+0xff80cbf4>

0080cc18 <__swsetup_r>:
  80cc18:	00802074 	movhi	r2,129
  80cc1c:	defffd04 	addi	sp,sp,-12
  80cc20:	10926b04 	addi	r2,r2,18860
  80cc24:	dc400115 	stw	r17,4(sp)
  80cc28:	2023883a 	mov	r17,r4
  80cc2c:	11000017 	ldw	r4,0(r2)
  80cc30:	dc000015 	stw	r16,0(sp)
  80cc34:	dfc00215 	stw	ra,8(sp)
  80cc38:	2821883a 	mov	r16,r5
  80cc3c:	20000226 	beq	r4,zero,80cc48 <__swsetup_r+0x30>
  80cc40:	20800e17 	ldw	r2,56(r4)
  80cc44:	10003126 	beq	r2,zero,80cd0c <__swsetup_r+0xf4>
  80cc48:	8080030b 	ldhu	r2,12(r16)
  80cc4c:	10c0020c 	andi	r3,r2,8
  80cc50:	1009883a 	mov	r4,r2
  80cc54:	18000f26 	beq	r3,zero,80cc94 <__swsetup_r+0x7c>
  80cc58:	80c00417 	ldw	r3,16(r16)
  80cc5c:	18001526 	beq	r3,zero,80ccb4 <__swsetup_r+0x9c>
  80cc60:	1100004c 	andi	r4,r2,1
  80cc64:	20001c1e 	bne	r4,zero,80ccd8 <__swsetup_r+0xc0>
  80cc68:	1080008c 	andi	r2,r2,2
  80cc6c:	1000291e 	bne	r2,zero,80cd14 <__swsetup_r+0xfc>
  80cc70:	80800517 	ldw	r2,20(r16)
  80cc74:	80800215 	stw	r2,8(r16)
  80cc78:	18001c26 	beq	r3,zero,80ccec <__swsetup_r+0xd4>
  80cc7c:	0005883a 	mov	r2,zero
  80cc80:	dfc00217 	ldw	ra,8(sp)
  80cc84:	dc400117 	ldw	r17,4(sp)
  80cc88:	dc000017 	ldw	r16,0(sp)
  80cc8c:	dec00304 	addi	sp,sp,12
  80cc90:	f800283a 	ret
  80cc94:	2080040c 	andi	r2,r4,16
  80cc98:	10002e26 	beq	r2,zero,80cd54 <__swsetup_r+0x13c>
  80cc9c:	2080010c 	andi	r2,r4,4
  80cca0:	10001e1e 	bne	r2,zero,80cd1c <__swsetup_r+0x104>
  80cca4:	80c00417 	ldw	r3,16(r16)
  80cca8:	20800214 	ori	r2,r4,8
  80ccac:	8080030d 	sth	r2,12(r16)
  80ccb0:	183feb1e 	bne	r3,zero,80cc60 <__alt_data_end+0xff80cc60>
  80ccb4:	1100a00c 	andi	r4,r2,640
  80ccb8:	01408004 	movi	r5,512
  80ccbc:	217fe826 	beq	r4,r5,80cc60 <__alt_data_end+0xff80cc60>
  80ccc0:	800b883a 	mov	r5,r16
  80ccc4:	8809883a 	mov	r4,r17
  80ccc8:	080d6000 	call	80d600 <__smakebuf_r>
  80cccc:	8080030b 	ldhu	r2,12(r16)
  80ccd0:	80c00417 	ldw	r3,16(r16)
  80ccd4:	003fe206 	br	80cc60 <__alt_data_end+0xff80cc60>
  80ccd8:	80800517 	ldw	r2,20(r16)
  80ccdc:	80000215 	stw	zero,8(r16)
  80cce0:	0085c83a 	sub	r2,zero,r2
  80cce4:	80800615 	stw	r2,24(r16)
  80cce8:	183fe41e 	bne	r3,zero,80cc7c <__alt_data_end+0xff80cc7c>
  80ccec:	80c0030b 	ldhu	r3,12(r16)
  80ccf0:	0005883a 	mov	r2,zero
  80ccf4:	1900200c 	andi	r4,r3,128
  80ccf8:	203fe126 	beq	r4,zero,80cc80 <__alt_data_end+0xff80cc80>
  80ccfc:	18c01014 	ori	r3,r3,64
  80cd00:	80c0030d 	sth	r3,12(r16)
  80cd04:	00bfffc4 	movi	r2,-1
  80cd08:	003fdd06 	br	80cc80 <__alt_data_end+0xff80cc80>
  80cd0c:	080af340 	call	80af34 <__sinit>
  80cd10:	003fcd06 	br	80cc48 <__alt_data_end+0xff80cc48>
  80cd14:	0005883a 	mov	r2,zero
  80cd18:	003fd606 	br	80cc74 <__alt_data_end+0xff80cc74>
  80cd1c:	81400c17 	ldw	r5,48(r16)
  80cd20:	28000626 	beq	r5,zero,80cd3c <__swsetup_r+0x124>
  80cd24:	80801004 	addi	r2,r16,64
  80cd28:	28800326 	beq	r5,r2,80cd38 <__swsetup_r+0x120>
  80cd2c:	8809883a 	mov	r4,r17
  80cd30:	080d2900 	call	80d290 <_free_r>
  80cd34:	8100030b 	ldhu	r4,12(r16)
  80cd38:	80000c15 	stw	zero,48(r16)
  80cd3c:	80c00417 	ldw	r3,16(r16)
  80cd40:	00bff6c4 	movi	r2,-37
  80cd44:	1108703a 	and	r4,r2,r4
  80cd48:	80000115 	stw	zero,4(r16)
  80cd4c:	80c00015 	stw	r3,0(r16)
  80cd50:	003fd506 	br	80cca8 <__alt_data_end+0xff80cca8>
  80cd54:	00800244 	movi	r2,9
  80cd58:	88800015 	stw	r2,0(r17)
  80cd5c:	20801014 	ori	r2,r4,64
  80cd60:	8080030d 	sth	r2,12(r16)
  80cd64:	00bfffc4 	movi	r2,-1
  80cd68:	003fc506 	br	80cc80 <__alt_data_end+0xff80cc80>

0080cd6c <_close_r>:
  80cd6c:	defffd04 	addi	sp,sp,-12
  80cd70:	dc000015 	stw	r16,0(sp)
  80cd74:	04002074 	movhi	r16,129
  80cd78:	dc400115 	stw	r17,4(sp)
  80cd7c:	8419b704 	addi	r16,r16,26332
  80cd80:	2023883a 	mov	r17,r4
  80cd84:	2809883a 	mov	r4,r5
  80cd88:	dfc00215 	stw	ra,8(sp)
  80cd8c:	80000015 	stw	zero,0(r16)
  80cd90:	080da340 	call	80da34 <close>
  80cd94:	00ffffc4 	movi	r3,-1
  80cd98:	10c00526 	beq	r2,r3,80cdb0 <_close_r+0x44>
  80cd9c:	dfc00217 	ldw	ra,8(sp)
  80cda0:	dc400117 	ldw	r17,4(sp)
  80cda4:	dc000017 	ldw	r16,0(sp)
  80cda8:	dec00304 	addi	sp,sp,12
  80cdac:	f800283a 	ret
  80cdb0:	80c00017 	ldw	r3,0(r16)
  80cdb4:	183ff926 	beq	r3,zero,80cd9c <__alt_data_end+0xff80cd9c>
  80cdb8:	88c00015 	stw	r3,0(r17)
  80cdbc:	003ff706 	br	80cd9c <__alt_data_end+0xff80cd9c>

0080cdc0 <_fclose_r>:
  80cdc0:	28003926 	beq	r5,zero,80cea8 <_fclose_r+0xe8>
  80cdc4:	defffc04 	addi	sp,sp,-16
  80cdc8:	dc400115 	stw	r17,4(sp)
  80cdcc:	dc000015 	stw	r16,0(sp)
  80cdd0:	dfc00315 	stw	ra,12(sp)
  80cdd4:	dc800215 	stw	r18,8(sp)
  80cdd8:	2023883a 	mov	r17,r4
  80cddc:	2821883a 	mov	r16,r5
  80cde0:	20000226 	beq	r4,zero,80cdec <_fclose_r+0x2c>
  80cde4:	20800e17 	ldw	r2,56(r4)
  80cde8:	10002726 	beq	r2,zero,80ce88 <_fclose_r+0xc8>
  80cdec:	8080030f 	ldh	r2,12(r16)
  80cdf0:	1000071e 	bne	r2,zero,80ce10 <_fclose_r+0x50>
  80cdf4:	0005883a 	mov	r2,zero
  80cdf8:	dfc00317 	ldw	ra,12(sp)
  80cdfc:	dc800217 	ldw	r18,8(sp)
  80ce00:	dc400117 	ldw	r17,4(sp)
  80ce04:	dc000017 	ldw	r16,0(sp)
  80ce08:	dec00404 	addi	sp,sp,16
  80ce0c:	f800283a 	ret
  80ce10:	800b883a 	mov	r5,r16
  80ce14:	8809883a 	mov	r4,r17
  80ce18:	080cec40 	call	80cec4 <__sflush_r>
  80ce1c:	1025883a 	mov	r18,r2
  80ce20:	80800b17 	ldw	r2,44(r16)
  80ce24:	10000426 	beq	r2,zero,80ce38 <_fclose_r+0x78>
  80ce28:	81400717 	ldw	r5,28(r16)
  80ce2c:	8809883a 	mov	r4,r17
  80ce30:	103ee83a 	callr	r2
  80ce34:	10001616 	blt	r2,zero,80ce90 <_fclose_r+0xd0>
  80ce38:	8080030b 	ldhu	r2,12(r16)
  80ce3c:	1080200c 	andi	r2,r2,128
  80ce40:	1000151e 	bne	r2,zero,80ce98 <_fclose_r+0xd8>
  80ce44:	81400c17 	ldw	r5,48(r16)
  80ce48:	28000526 	beq	r5,zero,80ce60 <_fclose_r+0xa0>
  80ce4c:	80801004 	addi	r2,r16,64
  80ce50:	28800226 	beq	r5,r2,80ce5c <_fclose_r+0x9c>
  80ce54:	8809883a 	mov	r4,r17
  80ce58:	080d2900 	call	80d290 <_free_r>
  80ce5c:	80000c15 	stw	zero,48(r16)
  80ce60:	81401117 	ldw	r5,68(r16)
  80ce64:	28000326 	beq	r5,zero,80ce74 <_fclose_r+0xb4>
  80ce68:	8809883a 	mov	r4,r17
  80ce6c:	080d2900 	call	80d290 <_free_r>
  80ce70:	80001115 	stw	zero,68(r16)
  80ce74:	080af440 	call	80af44 <__sfp_lock_acquire>
  80ce78:	8000030d 	sth	zero,12(r16)
  80ce7c:	080af480 	call	80af48 <__sfp_lock_release>
  80ce80:	9005883a 	mov	r2,r18
  80ce84:	003fdc06 	br	80cdf8 <__alt_data_end+0xff80cdf8>
  80ce88:	080af340 	call	80af34 <__sinit>
  80ce8c:	003fd706 	br	80cdec <__alt_data_end+0xff80cdec>
  80ce90:	04bfffc4 	movi	r18,-1
  80ce94:	003fe806 	br	80ce38 <__alt_data_end+0xff80ce38>
  80ce98:	81400417 	ldw	r5,16(r16)
  80ce9c:	8809883a 	mov	r4,r17
  80cea0:	080d2900 	call	80d290 <_free_r>
  80cea4:	003fe706 	br	80ce44 <__alt_data_end+0xff80ce44>
  80cea8:	0005883a 	mov	r2,zero
  80ceac:	f800283a 	ret

0080ceb0 <fclose>:
  80ceb0:	00802074 	movhi	r2,129
  80ceb4:	10926b04 	addi	r2,r2,18860
  80ceb8:	200b883a 	mov	r5,r4
  80cebc:	11000017 	ldw	r4,0(r2)
  80cec0:	080cdc01 	jmpi	80cdc0 <_fclose_r>

0080cec4 <__sflush_r>:
  80cec4:	2880030b 	ldhu	r2,12(r5)
  80cec8:	defffb04 	addi	sp,sp,-20
  80cecc:	dcc00315 	stw	r19,12(sp)
  80ced0:	dc400115 	stw	r17,4(sp)
  80ced4:	dfc00415 	stw	ra,16(sp)
  80ced8:	dc800215 	stw	r18,8(sp)
  80cedc:	dc000015 	stw	r16,0(sp)
  80cee0:	10c0020c 	andi	r3,r2,8
  80cee4:	2823883a 	mov	r17,r5
  80cee8:	2027883a 	mov	r19,r4
  80ceec:	1800311e 	bne	r3,zero,80cfb4 <__sflush_r+0xf0>
  80cef0:	28c00117 	ldw	r3,4(r5)
  80cef4:	10820014 	ori	r2,r2,2048
  80cef8:	2880030d 	sth	r2,12(r5)
  80cefc:	00c04b0e 	bge	zero,r3,80d02c <__sflush_r+0x168>
  80cf00:	8a000a17 	ldw	r8,40(r17)
  80cf04:	40002326 	beq	r8,zero,80cf94 <__sflush_r+0xd0>
  80cf08:	9c000017 	ldw	r16,0(r19)
  80cf0c:	10c4000c 	andi	r3,r2,4096
  80cf10:	98000015 	stw	zero,0(r19)
  80cf14:	18004826 	beq	r3,zero,80d038 <__sflush_r+0x174>
  80cf18:	89801417 	ldw	r6,80(r17)
  80cf1c:	10c0010c 	andi	r3,r2,4
  80cf20:	18000626 	beq	r3,zero,80cf3c <__sflush_r+0x78>
  80cf24:	88c00117 	ldw	r3,4(r17)
  80cf28:	88800c17 	ldw	r2,48(r17)
  80cf2c:	30cdc83a 	sub	r6,r6,r3
  80cf30:	10000226 	beq	r2,zero,80cf3c <__sflush_r+0x78>
  80cf34:	88800f17 	ldw	r2,60(r17)
  80cf38:	308dc83a 	sub	r6,r6,r2
  80cf3c:	89400717 	ldw	r5,28(r17)
  80cf40:	000f883a 	mov	r7,zero
  80cf44:	9809883a 	mov	r4,r19
  80cf48:	403ee83a 	callr	r8
  80cf4c:	00ffffc4 	movi	r3,-1
  80cf50:	10c04426 	beq	r2,r3,80d064 <__sflush_r+0x1a0>
  80cf54:	88c0030b 	ldhu	r3,12(r17)
  80cf58:	89000417 	ldw	r4,16(r17)
  80cf5c:	88000115 	stw	zero,4(r17)
  80cf60:	197dffcc 	andi	r5,r3,63487
  80cf64:	8940030d 	sth	r5,12(r17)
  80cf68:	89000015 	stw	r4,0(r17)
  80cf6c:	18c4000c 	andi	r3,r3,4096
  80cf70:	18002c1e 	bne	r3,zero,80d024 <__sflush_r+0x160>
  80cf74:	89400c17 	ldw	r5,48(r17)
  80cf78:	9c000015 	stw	r16,0(r19)
  80cf7c:	28000526 	beq	r5,zero,80cf94 <__sflush_r+0xd0>
  80cf80:	88801004 	addi	r2,r17,64
  80cf84:	28800226 	beq	r5,r2,80cf90 <__sflush_r+0xcc>
  80cf88:	9809883a 	mov	r4,r19
  80cf8c:	080d2900 	call	80d290 <_free_r>
  80cf90:	88000c15 	stw	zero,48(r17)
  80cf94:	0005883a 	mov	r2,zero
  80cf98:	dfc00417 	ldw	ra,16(sp)
  80cf9c:	dcc00317 	ldw	r19,12(sp)
  80cfa0:	dc800217 	ldw	r18,8(sp)
  80cfa4:	dc400117 	ldw	r17,4(sp)
  80cfa8:	dc000017 	ldw	r16,0(sp)
  80cfac:	dec00504 	addi	sp,sp,20
  80cfb0:	f800283a 	ret
  80cfb4:	2c800417 	ldw	r18,16(r5)
  80cfb8:	903ff626 	beq	r18,zero,80cf94 <__alt_data_end+0xff80cf94>
  80cfbc:	2c000017 	ldw	r16,0(r5)
  80cfc0:	108000cc 	andi	r2,r2,3
  80cfc4:	2c800015 	stw	r18,0(r5)
  80cfc8:	84a1c83a 	sub	r16,r16,r18
  80cfcc:	1000131e 	bne	r2,zero,80d01c <__sflush_r+0x158>
  80cfd0:	28800517 	ldw	r2,20(r5)
  80cfd4:	88800215 	stw	r2,8(r17)
  80cfd8:	04000316 	blt	zero,r16,80cfe8 <__sflush_r+0x124>
  80cfdc:	003fed06 	br	80cf94 <__alt_data_end+0xff80cf94>
  80cfe0:	90a5883a 	add	r18,r18,r2
  80cfe4:	043feb0e 	bge	zero,r16,80cf94 <__alt_data_end+0xff80cf94>
  80cfe8:	88800917 	ldw	r2,36(r17)
  80cfec:	89400717 	ldw	r5,28(r17)
  80cff0:	800f883a 	mov	r7,r16
  80cff4:	900d883a 	mov	r6,r18
  80cff8:	9809883a 	mov	r4,r19
  80cffc:	103ee83a 	callr	r2
  80d000:	80a1c83a 	sub	r16,r16,r2
  80d004:	00bff616 	blt	zero,r2,80cfe0 <__alt_data_end+0xff80cfe0>
  80d008:	88c0030b 	ldhu	r3,12(r17)
  80d00c:	00bfffc4 	movi	r2,-1
  80d010:	18c01014 	ori	r3,r3,64
  80d014:	88c0030d 	sth	r3,12(r17)
  80d018:	003fdf06 	br	80cf98 <__alt_data_end+0xff80cf98>
  80d01c:	0005883a 	mov	r2,zero
  80d020:	003fec06 	br	80cfd4 <__alt_data_end+0xff80cfd4>
  80d024:	88801415 	stw	r2,80(r17)
  80d028:	003fd206 	br	80cf74 <__alt_data_end+0xff80cf74>
  80d02c:	28c00f17 	ldw	r3,60(r5)
  80d030:	00ffb316 	blt	zero,r3,80cf00 <__alt_data_end+0xff80cf00>
  80d034:	003fd706 	br	80cf94 <__alt_data_end+0xff80cf94>
  80d038:	89400717 	ldw	r5,28(r17)
  80d03c:	000d883a 	mov	r6,zero
  80d040:	01c00044 	movi	r7,1
  80d044:	9809883a 	mov	r4,r19
  80d048:	403ee83a 	callr	r8
  80d04c:	100d883a 	mov	r6,r2
  80d050:	00bfffc4 	movi	r2,-1
  80d054:	30801426 	beq	r6,r2,80d0a8 <__sflush_r+0x1e4>
  80d058:	8880030b 	ldhu	r2,12(r17)
  80d05c:	8a000a17 	ldw	r8,40(r17)
  80d060:	003fae06 	br	80cf1c <__alt_data_end+0xff80cf1c>
  80d064:	98c00017 	ldw	r3,0(r19)
  80d068:	183fba26 	beq	r3,zero,80cf54 <__alt_data_end+0xff80cf54>
  80d06c:	01000744 	movi	r4,29
  80d070:	19000626 	beq	r3,r4,80d08c <__sflush_r+0x1c8>
  80d074:	01000584 	movi	r4,22
  80d078:	19000426 	beq	r3,r4,80d08c <__sflush_r+0x1c8>
  80d07c:	88c0030b 	ldhu	r3,12(r17)
  80d080:	18c01014 	ori	r3,r3,64
  80d084:	88c0030d 	sth	r3,12(r17)
  80d088:	003fc306 	br	80cf98 <__alt_data_end+0xff80cf98>
  80d08c:	8880030b 	ldhu	r2,12(r17)
  80d090:	88c00417 	ldw	r3,16(r17)
  80d094:	88000115 	stw	zero,4(r17)
  80d098:	10bdffcc 	andi	r2,r2,63487
  80d09c:	8880030d 	sth	r2,12(r17)
  80d0a0:	88c00015 	stw	r3,0(r17)
  80d0a4:	003fb306 	br	80cf74 <__alt_data_end+0xff80cf74>
  80d0a8:	98800017 	ldw	r2,0(r19)
  80d0ac:	103fea26 	beq	r2,zero,80d058 <__alt_data_end+0xff80d058>
  80d0b0:	00c00744 	movi	r3,29
  80d0b4:	10c00226 	beq	r2,r3,80d0c0 <__sflush_r+0x1fc>
  80d0b8:	00c00584 	movi	r3,22
  80d0bc:	10c0031e 	bne	r2,r3,80d0cc <__sflush_r+0x208>
  80d0c0:	9c000015 	stw	r16,0(r19)
  80d0c4:	0005883a 	mov	r2,zero
  80d0c8:	003fb306 	br	80cf98 <__alt_data_end+0xff80cf98>
  80d0cc:	88c0030b 	ldhu	r3,12(r17)
  80d0d0:	3005883a 	mov	r2,r6
  80d0d4:	18c01014 	ori	r3,r3,64
  80d0d8:	88c0030d 	sth	r3,12(r17)
  80d0dc:	003fae06 	br	80cf98 <__alt_data_end+0xff80cf98>

0080d0e0 <_fflush_r>:
  80d0e0:	defffd04 	addi	sp,sp,-12
  80d0e4:	dc000115 	stw	r16,4(sp)
  80d0e8:	dfc00215 	stw	ra,8(sp)
  80d0ec:	2021883a 	mov	r16,r4
  80d0f0:	20000226 	beq	r4,zero,80d0fc <_fflush_r+0x1c>
  80d0f4:	20800e17 	ldw	r2,56(r4)
  80d0f8:	10000c26 	beq	r2,zero,80d12c <_fflush_r+0x4c>
  80d0fc:	2880030f 	ldh	r2,12(r5)
  80d100:	1000051e 	bne	r2,zero,80d118 <_fflush_r+0x38>
  80d104:	0005883a 	mov	r2,zero
  80d108:	dfc00217 	ldw	ra,8(sp)
  80d10c:	dc000117 	ldw	r16,4(sp)
  80d110:	dec00304 	addi	sp,sp,12
  80d114:	f800283a 	ret
  80d118:	8009883a 	mov	r4,r16
  80d11c:	dfc00217 	ldw	ra,8(sp)
  80d120:	dc000117 	ldw	r16,4(sp)
  80d124:	dec00304 	addi	sp,sp,12
  80d128:	080cec41 	jmpi	80cec4 <__sflush_r>
  80d12c:	d9400015 	stw	r5,0(sp)
  80d130:	080af340 	call	80af34 <__sinit>
  80d134:	d9400017 	ldw	r5,0(sp)
  80d138:	003ff006 	br	80d0fc <__alt_data_end+0xff80d0fc>

0080d13c <fflush>:
  80d13c:	20000526 	beq	r4,zero,80d154 <fflush+0x18>
  80d140:	00802074 	movhi	r2,129
  80d144:	10926b04 	addi	r2,r2,18860
  80d148:	200b883a 	mov	r5,r4
  80d14c:	11000017 	ldw	r4,0(r2)
  80d150:	080d0e01 	jmpi	80d0e0 <_fflush_r>
  80d154:	00802074 	movhi	r2,129
  80d158:	10926a04 	addi	r2,r2,18856
  80d15c:	11000017 	ldw	r4,0(r2)
  80d160:	01402074 	movhi	r5,129
  80d164:	29743804 	addi	r5,r5,-12064
  80d168:	080b5041 	jmpi	80b504 <_fwalk_reent>

0080d16c <_malloc_trim_r>:
  80d16c:	defffb04 	addi	sp,sp,-20
  80d170:	dcc00315 	stw	r19,12(sp)
  80d174:	04c02074 	movhi	r19,129
  80d178:	dc800215 	stw	r18,8(sp)
  80d17c:	dc400115 	stw	r17,4(sp)
  80d180:	dc000015 	stw	r16,0(sp)
  80d184:	dfc00415 	stw	ra,16(sp)
  80d188:	2821883a 	mov	r16,r5
  80d18c:	9ccc5304 	addi	r19,r19,12620
  80d190:	2025883a 	mov	r18,r4
  80d194:	080df740 	call	80df74 <__malloc_lock>
  80d198:	98800217 	ldw	r2,8(r19)
  80d19c:	14400117 	ldw	r17,4(r2)
  80d1a0:	00bfff04 	movi	r2,-4
  80d1a4:	88a2703a 	and	r17,r17,r2
  80d1a8:	8c21c83a 	sub	r16,r17,r16
  80d1ac:	8403fbc4 	addi	r16,r16,4079
  80d1b0:	8020d33a 	srli	r16,r16,12
  80d1b4:	0083ffc4 	movi	r2,4095
  80d1b8:	843fffc4 	addi	r16,r16,-1
  80d1bc:	8020933a 	slli	r16,r16,12
  80d1c0:	1400060e 	bge	r2,r16,80d1dc <_malloc_trim_r+0x70>
  80d1c4:	000b883a 	mov	r5,zero
  80d1c8:	9009883a 	mov	r4,r18
  80d1cc:	080c8d00 	call	80c8d0 <_sbrk_r>
  80d1d0:	98c00217 	ldw	r3,8(r19)
  80d1d4:	1c47883a 	add	r3,r3,r17
  80d1d8:	10c00a26 	beq	r2,r3,80d204 <_malloc_trim_r+0x98>
  80d1dc:	9009883a 	mov	r4,r18
  80d1e0:	080df980 	call	80df98 <__malloc_unlock>
  80d1e4:	0005883a 	mov	r2,zero
  80d1e8:	dfc00417 	ldw	ra,16(sp)
  80d1ec:	dcc00317 	ldw	r19,12(sp)
  80d1f0:	dc800217 	ldw	r18,8(sp)
  80d1f4:	dc400117 	ldw	r17,4(sp)
  80d1f8:	dc000017 	ldw	r16,0(sp)
  80d1fc:	dec00504 	addi	sp,sp,20
  80d200:	f800283a 	ret
  80d204:	040bc83a 	sub	r5,zero,r16
  80d208:	9009883a 	mov	r4,r18
  80d20c:	080c8d00 	call	80c8d0 <_sbrk_r>
  80d210:	00ffffc4 	movi	r3,-1
  80d214:	10c00d26 	beq	r2,r3,80d24c <_malloc_trim_r+0xe0>
  80d218:	00c02074 	movhi	r3,129
  80d21c:	18d9c504 	addi	r3,r3,26388
  80d220:	18800017 	ldw	r2,0(r3)
  80d224:	99000217 	ldw	r4,8(r19)
  80d228:	8c23c83a 	sub	r17,r17,r16
  80d22c:	8c400054 	ori	r17,r17,1
  80d230:	1421c83a 	sub	r16,r2,r16
  80d234:	24400115 	stw	r17,4(r4)
  80d238:	9009883a 	mov	r4,r18
  80d23c:	1c000015 	stw	r16,0(r3)
  80d240:	080df980 	call	80df98 <__malloc_unlock>
  80d244:	00800044 	movi	r2,1
  80d248:	003fe706 	br	80d1e8 <__alt_data_end+0xff80d1e8>
  80d24c:	000b883a 	mov	r5,zero
  80d250:	9009883a 	mov	r4,r18
  80d254:	080c8d00 	call	80c8d0 <_sbrk_r>
  80d258:	99000217 	ldw	r4,8(r19)
  80d25c:	014003c4 	movi	r5,15
  80d260:	1107c83a 	sub	r3,r2,r4
  80d264:	28ffdd0e 	bge	r5,r3,80d1dc <__alt_data_end+0xff80d1dc>
  80d268:	01402074 	movhi	r5,129
  80d26c:	29526c04 	addi	r5,r5,18864
  80d270:	29400017 	ldw	r5,0(r5)
  80d274:	18c00054 	ori	r3,r3,1
  80d278:	20c00115 	stw	r3,4(r4)
  80d27c:	00c02074 	movhi	r3,129
  80d280:	1145c83a 	sub	r2,r2,r5
  80d284:	18d9c504 	addi	r3,r3,26388
  80d288:	18800015 	stw	r2,0(r3)
  80d28c:	003fd306 	br	80d1dc <__alt_data_end+0xff80d1dc>

0080d290 <_free_r>:
  80d290:	28004126 	beq	r5,zero,80d398 <_free_r+0x108>
  80d294:	defffd04 	addi	sp,sp,-12
  80d298:	dc400115 	stw	r17,4(sp)
  80d29c:	dc000015 	stw	r16,0(sp)
  80d2a0:	2023883a 	mov	r17,r4
  80d2a4:	2821883a 	mov	r16,r5
  80d2a8:	dfc00215 	stw	ra,8(sp)
  80d2ac:	080df740 	call	80df74 <__malloc_lock>
  80d2b0:	81ffff17 	ldw	r7,-4(r16)
  80d2b4:	00bfff84 	movi	r2,-2
  80d2b8:	01002074 	movhi	r4,129
  80d2bc:	81bffe04 	addi	r6,r16,-8
  80d2c0:	3884703a 	and	r2,r7,r2
  80d2c4:	210c5304 	addi	r4,r4,12620
  80d2c8:	308b883a 	add	r5,r6,r2
  80d2cc:	2a400117 	ldw	r9,4(r5)
  80d2d0:	22000217 	ldw	r8,8(r4)
  80d2d4:	00ffff04 	movi	r3,-4
  80d2d8:	48c6703a 	and	r3,r9,r3
  80d2dc:	2a005726 	beq	r5,r8,80d43c <_free_r+0x1ac>
  80d2e0:	28c00115 	stw	r3,4(r5)
  80d2e4:	39c0004c 	andi	r7,r7,1
  80d2e8:	3800091e 	bne	r7,zero,80d310 <_free_r+0x80>
  80d2ec:	823ffe17 	ldw	r8,-8(r16)
  80d2f0:	22400204 	addi	r9,r4,8
  80d2f4:	320dc83a 	sub	r6,r6,r8
  80d2f8:	31c00217 	ldw	r7,8(r6)
  80d2fc:	1205883a 	add	r2,r2,r8
  80d300:	3a406526 	beq	r7,r9,80d498 <_free_r+0x208>
  80d304:	32000317 	ldw	r8,12(r6)
  80d308:	3a000315 	stw	r8,12(r7)
  80d30c:	41c00215 	stw	r7,8(r8)
  80d310:	28cf883a 	add	r7,r5,r3
  80d314:	39c00117 	ldw	r7,4(r7)
  80d318:	39c0004c 	andi	r7,r7,1
  80d31c:	38003a26 	beq	r7,zero,80d408 <_free_r+0x178>
  80d320:	10c00054 	ori	r3,r2,1
  80d324:	30c00115 	stw	r3,4(r6)
  80d328:	3087883a 	add	r3,r6,r2
  80d32c:	18800015 	stw	r2,0(r3)
  80d330:	00c07fc4 	movi	r3,511
  80d334:	18801936 	bltu	r3,r2,80d39c <_free_r+0x10c>
  80d338:	1004d0fa 	srli	r2,r2,3
  80d33c:	01c00044 	movi	r7,1
  80d340:	21400117 	ldw	r5,4(r4)
  80d344:	10c00044 	addi	r3,r2,1
  80d348:	18c7883a 	add	r3,r3,r3
  80d34c:	1005d0ba 	srai	r2,r2,2
  80d350:	18c7883a 	add	r3,r3,r3
  80d354:	18c7883a 	add	r3,r3,r3
  80d358:	1907883a 	add	r3,r3,r4
  80d35c:	3884983a 	sll	r2,r7,r2
  80d360:	19c00017 	ldw	r7,0(r3)
  80d364:	1a3ffe04 	addi	r8,r3,-8
  80d368:	1144b03a 	or	r2,r2,r5
  80d36c:	32000315 	stw	r8,12(r6)
  80d370:	31c00215 	stw	r7,8(r6)
  80d374:	20800115 	stw	r2,4(r4)
  80d378:	19800015 	stw	r6,0(r3)
  80d37c:	39800315 	stw	r6,12(r7)
  80d380:	8809883a 	mov	r4,r17
  80d384:	dfc00217 	ldw	ra,8(sp)
  80d388:	dc400117 	ldw	r17,4(sp)
  80d38c:	dc000017 	ldw	r16,0(sp)
  80d390:	dec00304 	addi	sp,sp,12
  80d394:	080df981 	jmpi	80df98 <__malloc_unlock>
  80d398:	f800283a 	ret
  80d39c:	100ad27a 	srli	r5,r2,9
  80d3a0:	00c00104 	movi	r3,4
  80d3a4:	19404a36 	bltu	r3,r5,80d4d0 <_free_r+0x240>
  80d3a8:	100ad1ba 	srli	r5,r2,6
  80d3ac:	28c00e44 	addi	r3,r5,57
  80d3b0:	18c7883a 	add	r3,r3,r3
  80d3b4:	29400e04 	addi	r5,r5,56
  80d3b8:	18c7883a 	add	r3,r3,r3
  80d3bc:	18c7883a 	add	r3,r3,r3
  80d3c0:	1909883a 	add	r4,r3,r4
  80d3c4:	20c00017 	ldw	r3,0(r4)
  80d3c8:	01c02074 	movhi	r7,129
  80d3cc:	213ffe04 	addi	r4,r4,-8
  80d3d0:	39cc5304 	addi	r7,r7,12620
  80d3d4:	20c04426 	beq	r4,r3,80d4e8 <_free_r+0x258>
  80d3d8:	01ffff04 	movi	r7,-4
  80d3dc:	19400117 	ldw	r5,4(r3)
  80d3e0:	29ca703a 	and	r5,r5,r7
  80d3e4:	1140022e 	bgeu	r2,r5,80d3f0 <_free_r+0x160>
  80d3e8:	18c00217 	ldw	r3,8(r3)
  80d3ec:	20fffb1e 	bne	r4,r3,80d3dc <__alt_data_end+0xff80d3dc>
  80d3f0:	19000317 	ldw	r4,12(r3)
  80d3f4:	31000315 	stw	r4,12(r6)
  80d3f8:	30c00215 	stw	r3,8(r6)
  80d3fc:	21800215 	stw	r6,8(r4)
  80d400:	19800315 	stw	r6,12(r3)
  80d404:	003fde06 	br	80d380 <__alt_data_end+0xff80d380>
  80d408:	29c00217 	ldw	r7,8(r5)
  80d40c:	10c5883a 	add	r2,r2,r3
  80d410:	00c02074 	movhi	r3,129
  80d414:	18cc5504 	addi	r3,r3,12628
  80d418:	38c03b26 	beq	r7,r3,80d508 <_free_r+0x278>
  80d41c:	2a000317 	ldw	r8,12(r5)
  80d420:	11400054 	ori	r5,r2,1
  80d424:	3087883a 	add	r3,r6,r2
  80d428:	3a000315 	stw	r8,12(r7)
  80d42c:	41c00215 	stw	r7,8(r8)
  80d430:	31400115 	stw	r5,4(r6)
  80d434:	18800015 	stw	r2,0(r3)
  80d438:	003fbd06 	br	80d330 <__alt_data_end+0xff80d330>
  80d43c:	39c0004c 	andi	r7,r7,1
  80d440:	10c5883a 	add	r2,r2,r3
  80d444:	3800071e 	bne	r7,zero,80d464 <_free_r+0x1d4>
  80d448:	81fffe17 	ldw	r7,-8(r16)
  80d44c:	31cdc83a 	sub	r6,r6,r7
  80d450:	30c00317 	ldw	r3,12(r6)
  80d454:	31400217 	ldw	r5,8(r6)
  80d458:	11c5883a 	add	r2,r2,r7
  80d45c:	28c00315 	stw	r3,12(r5)
  80d460:	19400215 	stw	r5,8(r3)
  80d464:	10c00054 	ori	r3,r2,1
  80d468:	30c00115 	stw	r3,4(r6)
  80d46c:	00c02074 	movhi	r3,129
  80d470:	18d26d04 	addi	r3,r3,18868
  80d474:	18c00017 	ldw	r3,0(r3)
  80d478:	21800215 	stw	r6,8(r4)
  80d47c:	10ffc036 	bltu	r2,r3,80d380 <__alt_data_end+0xff80d380>
  80d480:	00802074 	movhi	r2,129
  80d484:	1099b604 	addi	r2,r2,26328
  80d488:	11400017 	ldw	r5,0(r2)
  80d48c:	8809883a 	mov	r4,r17
  80d490:	080d16c0 	call	80d16c <_malloc_trim_r>
  80d494:	003fba06 	br	80d380 <__alt_data_end+0xff80d380>
  80d498:	28c9883a 	add	r4,r5,r3
  80d49c:	21000117 	ldw	r4,4(r4)
  80d4a0:	2100004c 	andi	r4,r4,1
  80d4a4:	2000391e 	bne	r4,zero,80d58c <_free_r+0x2fc>
  80d4a8:	29c00217 	ldw	r7,8(r5)
  80d4ac:	29000317 	ldw	r4,12(r5)
  80d4b0:	1885883a 	add	r2,r3,r2
  80d4b4:	10c00054 	ori	r3,r2,1
  80d4b8:	39000315 	stw	r4,12(r7)
  80d4bc:	21c00215 	stw	r7,8(r4)
  80d4c0:	30c00115 	stw	r3,4(r6)
  80d4c4:	308d883a 	add	r6,r6,r2
  80d4c8:	30800015 	stw	r2,0(r6)
  80d4cc:	003fac06 	br	80d380 <__alt_data_end+0xff80d380>
  80d4d0:	00c00504 	movi	r3,20
  80d4d4:	19401536 	bltu	r3,r5,80d52c <_free_r+0x29c>
  80d4d8:	28c01704 	addi	r3,r5,92
  80d4dc:	18c7883a 	add	r3,r3,r3
  80d4e0:	294016c4 	addi	r5,r5,91
  80d4e4:	003fb406 	br	80d3b8 <__alt_data_end+0xff80d3b8>
  80d4e8:	280bd0ba 	srai	r5,r5,2
  80d4ec:	00c00044 	movi	r3,1
  80d4f0:	38800117 	ldw	r2,4(r7)
  80d4f4:	194a983a 	sll	r5,r3,r5
  80d4f8:	2007883a 	mov	r3,r4
  80d4fc:	2884b03a 	or	r2,r5,r2
  80d500:	38800115 	stw	r2,4(r7)
  80d504:	003fbb06 	br	80d3f4 <__alt_data_end+0xff80d3f4>
  80d508:	21800515 	stw	r6,20(r4)
  80d50c:	21800415 	stw	r6,16(r4)
  80d510:	10c00054 	ori	r3,r2,1
  80d514:	31c00315 	stw	r7,12(r6)
  80d518:	31c00215 	stw	r7,8(r6)
  80d51c:	30c00115 	stw	r3,4(r6)
  80d520:	308d883a 	add	r6,r6,r2
  80d524:	30800015 	stw	r2,0(r6)
  80d528:	003f9506 	br	80d380 <__alt_data_end+0xff80d380>
  80d52c:	00c01504 	movi	r3,84
  80d530:	19400536 	bltu	r3,r5,80d548 <_free_r+0x2b8>
  80d534:	100ad33a 	srli	r5,r2,12
  80d538:	28c01bc4 	addi	r3,r5,111
  80d53c:	18c7883a 	add	r3,r3,r3
  80d540:	29401b84 	addi	r5,r5,110
  80d544:	003f9c06 	br	80d3b8 <__alt_data_end+0xff80d3b8>
  80d548:	00c05504 	movi	r3,340
  80d54c:	19400536 	bltu	r3,r5,80d564 <_free_r+0x2d4>
  80d550:	100ad3fa 	srli	r5,r2,15
  80d554:	28c01e04 	addi	r3,r5,120
  80d558:	18c7883a 	add	r3,r3,r3
  80d55c:	29401dc4 	addi	r5,r5,119
  80d560:	003f9506 	br	80d3b8 <__alt_data_end+0xff80d3b8>
  80d564:	00c15504 	movi	r3,1364
  80d568:	19400536 	bltu	r3,r5,80d580 <_free_r+0x2f0>
  80d56c:	100ad4ba 	srli	r5,r2,18
  80d570:	28c01f44 	addi	r3,r5,125
  80d574:	18c7883a 	add	r3,r3,r3
  80d578:	29401f04 	addi	r5,r5,124
  80d57c:	003f8e06 	br	80d3b8 <__alt_data_end+0xff80d3b8>
  80d580:	00c03f84 	movi	r3,254
  80d584:	01401f84 	movi	r5,126
  80d588:	003f8b06 	br	80d3b8 <__alt_data_end+0xff80d3b8>
  80d58c:	10c00054 	ori	r3,r2,1
  80d590:	30c00115 	stw	r3,4(r6)
  80d594:	308d883a 	add	r6,r6,r2
  80d598:	30800015 	stw	r2,0(r6)
  80d59c:	003f7806 	br	80d380 <__alt_data_end+0xff80d380>

0080d5a0 <_lseek_r>:
  80d5a0:	defffd04 	addi	sp,sp,-12
  80d5a4:	2805883a 	mov	r2,r5
  80d5a8:	dc000015 	stw	r16,0(sp)
  80d5ac:	04002074 	movhi	r16,129
  80d5b0:	dc400115 	stw	r17,4(sp)
  80d5b4:	300b883a 	mov	r5,r6
  80d5b8:	8419b704 	addi	r16,r16,26332
  80d5bc:	2023883a 	mov	r17,r4
  80d5c0:	380d883a 	mov	r6,r7
  80d5c4:	1009883a 	mov	r4,r2
  80d5c8:	dfc00215 	stw	ra,8(sp)
  80d5cc:	80000015 	stw	zero,0(r16)
  80d5d0:	080de240 	call	80de24 <lseek>
  80d5d4:	00ffffc4 	movi	r3,-1
  80d5d8:	10c00526 	beq	r2,r3,80d5f0 <_lseek_r+0x50>
  80d5dc:	dfc00217 	ldw	ra,8(sp)
  80d5e0:	dc400117 	ldw	r17,4(sp)
  80d5e4:	dc000017 	ldw	r16,0(sp)
  80d5e8:	dec00304 	addi	sp,sp,12
  80d5ec:	f800283a 	ret
  80d5f0:	80c00017 	ldw	r3,0(r16)
  80d5f4:	183ff926 	beq	r3,zero,80d5dc <__alt_data_end+0xff80d5dc>
  80d5f8:	88c00015 	stw	r3,0(r17)
  80d5fc:	003ff706 	br	80d5dc <__alt_data_end+0xff80d5dc>

0080d600 <__smakebuf_r>:
  80d600:	2880030b 	ldhu	r2,12(r5)
  80d604:	10c0008c 	andi	r3,r2,2
  80d608:	1800411e 	bne	r3,zero,80d710 <__smakebuf_r+0x110>
  80d60c:	deffec04 	addi	sp,sp,-80
  80d610:	dc000f15 	stw	r16,60(sp)
  80d614:	2821883a 	mov	r16,r5
  80d618:	2940038f 	ldh	r5,14(r5)
  80d61c:	dc401015 	stw	r17,64(sp)
  80d620:	dfc01315 	stw	ra,76(sp)
  80d624:	dcc01215 	stw	r19,72(sp)
  80d628:	dc801115 	stw	r18,68(sp)
  80d62c:	2023883a 	mov	r17,r4
  80d630:	28001c16 	blt	r5,zero,80d6a4 <__smakebuf_r+0xa4>
  80d634:	d80d883a 	mov	r6,sp
  80d638:	080d81c0 	call	80d81c <_fstat_r>
  80d63c:	10001816 	blt	r2,zero,80d6a0 <__smakebuf_r+0xa0>
  80d640:	d8800117 	ldw	r2,4(sp)
  80d644:	00e00014 	movui	r3,32768
  80d648:	10bc000c 	andi	r2,r2,61440
  80d64c:	14c80020 	cmpeqi	r19,r2,8192
  80d650:	10c03726 	beq	r2,r3,80d730 <__smakebuf_r+0x130>
  80d654:	80c0030b 	ldhu	r3,12(r16)
  80d658:	18c20014 	ori	r3,r3,2048
  80d65c:	80c0030d 	sth	r3,12(r16)
  80d660:	00c80004 	movi	r3,8192
  80d664:	10c0521e 	bne	r2,r3,80d7b0 <__smakebuf_r+0x1b0>
  80d668:	8140038f 	ldh	r5,14(r16)
  80d66c:	8809883a 	mov	r4,r17
  80d670:	080d8780 	call	80d878 <_isatty_r>
  80d674:	10004c26 	beq	r2,zero,80d7a8 <__smakebuf_r+0x1a8>
  80d678:	8080030b 	ldhu	r2,12(r16)
  80d67c:	80c010c4 	addi	r3,r16,67
  80d680:	80c00015 	stw	r3,0(r16)
  80d684:	10800054 	ori	r2,r2,1
  80d688:	8080030d 	sth	r2,12(r16)
  80d68c:	00800044 	movi	r2,1
  80d690:	80c00415 	stw	r3,16(r16)
  80d694:	80800515 	stw	r2,20(r16)
  80d698:	04810004 	movi	r18,1024
  80d69c:	00000706 	br	80d6bc <__smakebuf_r+0xbc>
  80d6a0:	8080030b 	ldhu	r2,12(r16)
  80d6a4:	10c0200c 	andi	r3,r2,128
  80d6a8:	18001f1e 	bne	r3,zero,80d728 <__smakebuf_r+0x128>
  80d6ac:	04810004 	movi	r18,1024
  80d6b0:	10820014 	ori	r2,r2,2048
  80d6b4:	8080030d 	sth	r2,12(r16)
  80d6b8:	0027883a 	mov	r19,zero
  80d6bc:	900b883a 	mov	r5,r18
  80d6c0:	8809883a 	mov	r4,r17
  80d6c4:	080b5c80 	call	80b5c8 <_malloc_r>
  80d6c8:	10002c26 	beq	r2,zero,80d77c <__smakebuf_r+0x17c>
  80d6cc:	80c0030b 	ldhu	r3,12(r16)
  80d6d0:	01002074 	movhi	r4,129
  80d6d4:	212afb04 	addi	r4,r4,-21524
  80d6d8:	89000f15 	stw	r4,60(r17)
  80d6dc:	18c02014 	ori	r3,r3,128
  80d6e0:	80c0030d 	sth	r3,12(r16)
  80d6e4:	80800015 	stw	r2,0(r16)
  80d6e8:	80800415 	stw	r2,16(r16)
  80d6ec:	84800515 	stw	r18,20(r16)
  80d6f0:	98001a1e 	bne	r19,zero,80d75c <__smakebuf_r+0x15c>
  80d6f4:	dfc01317 	ldw	ra,76(sp)
  80d6f8:	dcc01217 	ldw	r19,72(sp)
  80d6fc:	dc801117 	ldw	r18,68(sp)
  80d700:	dc401017 	ldw	r17,64(sp)
  80d704:	dc000f17 	ldw	r16,60(sp)
  80d708:	dec01404 	addi	sp,sp,80
  80d70c:	f800283a 	ret
  80d710:	288010c4 	addi	r2,r5,67
  80d714:	28800015 	stw	r2,0(r5)
  80d718:	28800415 	stw	r2,16(r5)
  80d71c:	00800044 	movi	r2,1
  80d720:	28800515 	stw	r2,20(r5)
  80d724:	f800283a 	ret
  80d728:	04801004 	movi	r18,64
  80d72c:	003fe006 	br	80d6b0 <__alt_data_end+0xff80d6b0>
  80d730:	81000a17 	ldw	r4,40(r16)
  80d734:	00c02074 	movhi	r3,129
  80d738:	18f27f04 	addi	r3,r3,-13828
  80d73c:	20ffc51e 	bne	r4,r3,80d654 <__alt_data_end+0xff80d654>
  80d740:	8080030b 	ldhu	r2,12(r16)
  80d744:	04810004 	movi	r18,1024
  80d748:	84801315 	stw	r18,76(r16)
  80d74c:	1484b03a 	or	r2,r2,r18
  80d750:	8080030d 	sth	r2,12(r16)
  80d754:	0027883a 	mov	r19,zero
  80d758:	003fd806 	br	80d6bc <__alt_data_end+0xff80d6bc>
  80d75c:	8140038f 	ldh	r5,14(r16)
  80d760:	8809883a 	mov	r4,r17
  80d764:	080d8780 	call	80d878 <_isatty_r>
  80d768:	103fe226 	beq	r2,zero,80d6f4 <__alt_data_end+0xff80d6f4>
  80d76c:	8080030b 	ldhu	r2,12(r16)
  80d770:	10800054 	ori	r2,r2,1
  80d774:	8080030d 	sth	r2,12(r16)
  80d778:	003fde06 	br	80d6f4 <__alt_data_end+0xff80d6f4>
  80d77c:	8080030b 	ldhu	r2,12(r16)
  80d780:	10c0800c 	andi	r3,r2,512
  80d784:	183fdb1e 	bne	r3,zero,80d6f4 <__alt_data_end+0xff80d6f4>
  80d788:	10800094 	ori	r2,r2,2
  80d78c:	80c010c4 	addi	r3,r16,67
  80d790:	8080030d 	sth	r2,12(r16)
  80d794:	00800044 	movi	r2,1
  80d798:	80c00015 	stw	r3,0(r16)
  80d79c:	80c00415 	stw	r3,16(r16)
  80d7a0:	80800515 	stw	r2,20(r16)
  80d7a4:	003fd306 	br	80d6f4 <__alt_data_end+0xff80d6f4>
  80d7a8:	04810004 	movi	r18,1024
  80d7ac:	003fc306 	br	80d6bc <__alt_data_end+0xff80d6bc>
  80d7b0:	0027883a 	mov	r19,zero
  80d7b4:	04810004 	movi	r18,1024
  80d7b8:	003fc006 	br	80d6bc <__alt_data_end+0xff80d6bc>

0080d7bc <_read_r>:
  80d7bc:	defffd04 	addi	sp,sp,-12
  80d7c0:	2805883a 	mov	r2,r5
  80d7c4:	dc000015 	stw	r16,0(sp)
  80d7c8:	04002074 	movhi	r16,129
  80d7cc:	dc400115 	stw	r17,4(sp)
  80d7d0:	300b883a 	mov	r5,r6
  80d7d4:	8419b704 	addi	r16,r16,26332
  80d7d8:	2023883a 	mov	r17,r4
  80d7dc:	380d883a 	mov	r6,r7
  80d7e0:	1009883a 	mov	r4,r2
  80d7e4:	dfc00215 	stw	ra,8(sp)
  80d7e8:	80000015 	stw	zero,0(r16)
  80d7ec:	080e2600 	call	80e260 <read>
  80d7f0:	00ffffc4 	movi	r3,-1
  80d7f4:	10c00526 	beq	r2,r3,80d80c <_read_r+0x50>
  80d7f8:	dfc00217 	ldw	ra,8(sp)
  80d7fc:	dc400117 	ldw	r17,4(sp)
  80d800:	dc000017 	ldw	r16,0(sp)
  80d804:	dec00304 	addi	sp,sp,12
  80d808:	f800283a 	ret
  80d80c:	80c00017 	ldw	r3,0(r16)
  80d810:	183ff926 	beq	r3,zero,80d7f8 <__alt_data_end+0xff80d7f8>
  80d814:	88c00015 	stw	r3,0(r17)
  80d818:	003ff706 	br	80d7f8 <__alt_data_end+0xff80d7f8>

0080d81c <_fstat_r>:
  80d81c:	defffd04 	addi	sp,sp,-12
  80d820:	2805883a 	mov	r2,r5
  80d824:	dc000015 	stw	r16,0(sp)
  80d828:	04002074 	movhi	r16,129
  80d82c:	dc400115 	stw	r17,4(sp)
  80d830:	8419b704 	addi	r16,r16,26332
  80d834:	2023883a 	mov	r17,r4
  80d838:	300b883a 	mov	r5,r6
  80d83c:	1009883a 	mov	r4,r2
  80d840:	dfc00215 	stw	ra,8(sp)
  80d844:	80000015 	stw	zero,0(r16)
  80d848:	080db6c0 	call	80db6c <fstat>
  80d84c:	00ffffc4 	movi	r3,-1
  80d850:	10c00526 	beq	r2,r3,80d868 <_fstat_r+0x4c>
  80d854:	dfc00217 	ldw	ra,8(sp)
  80d858:	dc400117 	ldw	r17,4(sp)
  80d85c:	dc000017 	ldw	r16,0(sp)
  80d860:	dec00304 	addi	sp,sp,12
  80d864:	f800283a 	ret
  80d868:	80c00017 	ldw	r3,0(r16)
  80d86c:	183ff926 	beq	r3,zero,80d854 <__alt_data_end+0xff80d854>
  80d870:	88c00015 	stw	r3,0(r17)
  80d874:	003ff706 	br	80d854 <__alt_data_end+0xff80d854>

0080d878 <_isatty_r>:
  80d878:	defffd04 	addi	sp,sp,-12
  80d87c:	dc000015 	stw	r16,0(sp)
  80d880:	04002074 	movhi	r16,129
  80d884:	dc400115 	stw	r17,4(sp)
  80d888:	8419b704 	addi	r16,r16,26332
  80d88c:	2023883a 	mov	r17,r4
  80d890:	2809883a 	mov	r4,r5
  80d894:	dfc00215 	stw	ra,8(sp)
  80d898:	80000015 	stw	zero,0(r16)
  80d89c:	080dc580 	call	80dc58 <isatty>
  80d8a0:	00ffffc4 	movi	r3,-1
  80d8a4:	10c00526 	beq	r2,r3,80d8bc <_isatty_r+0x44>
  80d8a8:	dfc00217 	ldw	ra,8(sp)
  80d8ac:	dc400117 	ldw	r17,4(sp)
  80d8b0:	dc000017 	ldw	r16,0(sp)
  80d8b4:	dec00304 	addi	sp,sp,12
  80d8b8:	f800283a 	ret
  80d8bc:	80c00017 	ldw	r3,0(r16)
  80d8c0:	183ff926 	beq	r3,zero,80d8a8 <__alt_data_end+0xff80d8a8>
  80d8c4:	88c00015 	stw	r3,0(r17)
  80d8c8:	003ff706 	br	80d8a8 <__alt_data_end+0xff80d8a8>

0080d8cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80d8cc:	defff504 	addi	sp,sp,-44
  80d8d0:	df000a15 	stw	fp,40(sp)
  80d8d4:	df000a04 	addi	fp,sp,40
  80d8d8:	e13ffc15 	stw	r4,-16(fp)
  80d8dc:	e17ffd15 	stw	r5,-12(fp)
  80d8e0:	e1bffe15 	stw	r6,-8(fp)
  80d8e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80d8e8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80d8ec:	d0a75317 	ldw	r2,-25268(gp)
  
  if (alt_ticks_per_second ())
  80d8f0:	10003c26 	beq	r2,zero,80d9e4 <alt_alarm_start+0x118>
  {
    if (alarm)
  80d8f4:	e0bffc17 	ldw	r2,-16(fp)
  80d8f8:	10003826 	beq	r2,zero,80d9dc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80d8fc:	e0bffc17 	ldw	r2,-16(fp)
  80d900:	e0fffe17 	ldw	r3,-8(fp)
  80d904:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80d908:	e0bffc17 	ldw	r2,-16(fp)
  80d90c:	e0ffff17 	ldw	r3,-4(fp)
  80d910:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d914:	0005303a 	rdctl	r2,status
  80d918:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d91c:	e0fff917 	ldw	r3,-28(fp)
  80d920:	00bfff84 	movi	r2,-2
  80d924:	1884703a 	and	r2,r3,r2
  80d928:	1001703a 	wrctl	status,r2
  
  return context;
  80d92c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80d930:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80d934:	d0a75417 	ldw	r2,-25264(gp)
      
      current_nticks = alt_nticks();
  80d938:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80d93c:	e0fffd17 	ldw	r3,-12(fp)
  80d940:	e0bff617 	ldw	r2,-40(fp)
  80d944:	1885883a 	add	r2,r3,r2
  80d948:	10c00044 	addi	r3,r2,1
  80d94c:	e0bffc17 	ldw	r2,-16(fp)
  80d950:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80d954:	e0bffc17 	ldw	r2,-16(fp)
  80d958:	10c00217 	ldw	r3,8(r2)
  80d95c:	e0bff617 	ldw	r2,-40(fp)
  80d960:	1880042e 	bgeu	r3,r2,80d974 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80d964:	e0bffc17 	ldw	r2,-16(fp)
  80d968:	00c00044 	movi	r3,1
  80d96c:	10c00405 	stb	r3,16(r2)
  80d970:	00000206 	br	80d97c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80d974:	e0bffc17 	ldw	r2,-16(fp)
  80d978:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80d97c:	e0bffc17 	ldw	r2,-16(fp)
  80d980:	d0e00d04 	addi	r3,gp,-32716
  80d984:	e0fffa15 	stw	r3,-24(fp)
  80d988:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80d98c:	e0bffb17 	ldw	r2,-20(fp)
  80d990:	e0fffa17 	ldw	r3,-24(fp)
  80d994:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80d998:	e0bffa17 	ldw	r2,-24(fp)
  80d99c:	10c00017 	ldw	r3,0(r2)
  80d9a0:	e0bffb17 	ldw	r2,-20(fp)
  80d9a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80d9a8:	e0bffa17 	ldw	r2,-24(fp)
  80d9ac:	10800017 	ldw	r2,0(r2)
  80d9b0:	e0fffb17 	ldw	r3,-20(fp)
  80d9b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80d9b8:	e0bffa17 	ldw	r2,-24(fp)
  80d9bc:	e0fffb17 	ldw	r3,-20(fp)
  80d9c0:	10c00015 	stw	r3,0(r2)
  80d9c4:	e0bff817 	ldw	r2,-32(fp)
  80d9c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d9cc:	e0bff717 	ldw	r2,-36(fp)
  80d9d0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80d9d4:	0005883a 	mov	r2,zero
  80d9d8:	00000306 	br	80d9e8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80d9dc:	00bffa84 	movi	r2,-22
  80d9e0:	00000106 	br	80d9e8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80d9e4:	00bfde84 	movi	r2,-134
  }
}
  80d9e8:	e037883a 	mov	sp,fp
  80d9ec:	df000017 	ldw	fp,0(sp)
  80d9f0:	dec00104 	addi	sp,sp,4
  80d9f4:	f800283a 	ret

0080d9f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d9f8:	defffe04 	addi	sp,sp,-8
  80d9fc:	dfc00115 	stw	ra,4(sp)
  80da00:	df000015 	stw	fp,0(sp)
  80da04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80da08:	d0a00b17 	ldw	r2,-32724(gp)
  80da0c:	10000326 	beq	r2,zero,80da1c <alt_get_errno+0x24>
  80da10:	d0a00b17 	ldw	r2,-32724(gp)
  80da14:	103ee83a 	callr	r2
  80da18:	00000106 	br	80da20 <alt_get_errno+0x28>
  80da1c:	d0a74f04 	addi	r2,gp,-25284
}
  80da20:	e037883a 	mov	sp,fp
  80da24:	dfc00117 	ldw	ra,4(sp)
  80da28:	df000017 	ldw	fp,0(sp)
  80da2c:	dec00204 	addi	sp,sp,8
  80da30:	f800283a 	ret

0080da34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80da34:	defffb04 	addi	sp,sp,-20
  80da38:	dfc00415 	stw	ra,16(sp)
  80da3c:	df000315 	stw	fp,12(sp)
  80da40:	df000304 	addi	fp,sp,12
  80da44:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80da48:	e0bfff17 	ldw	r2,-4(fp)
  80da4c:	10000616 	blt	r2,zero,80da68 <close+0x34>
  80da50:	e0bfff17 	ldw	r2,-4(fp)
  80da54:	10c00324 	muli	r3,r2,12
  80da58:	00802074 	movhi	r2,129
  80da5c:	108d5f04 	addi	r2,r2,13692
  80da60:	1885883a 	add	r2,r3,r2
  80da64:	00000106 	br	80da6c <close+0x38>
  80da68:	0005883a 	mov	r2,zero
  80da6c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80da70:	e0bffd17 	ldw	r2,-12(fp)
  80da74:	10001926 	beq	r2,zero,80dadc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80da78:	e0bffd17 	ldw	r2,-12(fp)
  80da7c:	10800017 	ldw	r2,0(r2)
  80da80:	10800417 	ldw	r2,16(r2)
  80da84:	10000626 	beq	r2,zero,80daa0 <close+0x6c>
  80da88:	e0bffd17 	ldw	r2,-12(fp)
  80da8c:	10800017 	ldw	r2,0(r2)
  80da90:	10800417 	ldw	r2,16(r2)
  80da94:	e13ffd17 	ldw	r4,-12(fp)
  80da98:	103ee83a 	callr	r2
  80da9c:	00000106 	br	80daa4 <close+0x70>
  80daa0:	0005883a 	mov	r2,zero
  80daa4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80daa8:	e13fff17 	ldw	r4,-4(fp)
  80daac:	080e35c0 	call	80e35c <alt_release_fd>
    if (rval < 0)
  80dab0:	e0bffe17 	ldw	r2,-8(fp)
  80dab4:	1000070e 	bge	r2,zero,80dad4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80dab8:	080d9f80 	call	80d9f8 <alt_get_errno>
  80dabc:	1007883a 	mov	r3,r2
  80dac0:	e0bffe17 	ldw	r2,-8(fp)
  80dac4:	0085c83a 	sub	r2,zero,r2
  80dac8:	18800015 	stw	r2,0(r3)
      return -1;
  80dacc:	00bfffc4 	movi	r2,-1
  80dad0:	00000706 	br	80daf0 <close+0xbc>
    }
    return 0;
  80dad4:	0005883a 	mov	r2,zero
  80dad8:	00000506 	br	80daf0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80dadc:	080d9f80 	call	80d9f8 <alt_get_errno>
  80dae0:	1007883a 	mov	r3,r2
  80dae4:	00801444 	movi	r2,81
  80dae8:	18800015 	stw	r2,0(r3)
    return -1;
  80daec:	00bfffc4 	movi	r2,-1
  }
}
  80daf0:	e037883a 	mov	sp,fp
  80daf4:	dfc00117 	ldw	ra,4(sp)
  80daf8:	df000017 	ldw	fp,0(sp)
  80dafc:	dec00204 	addi	sp,sp,8
  80db00:	f800283a 	ret

0080db04 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80db04:	defffc04 	addi	sp,sp,-16
  80db08:	df000315 	stw	fp,12(sp)
  80db0c:	df000304 	addi	fp,sp,12
  80db10:	e13ffd15 	stw	r4,-12(fp)
  80db14:	e17ffe15 	stw	r5,-8(fp)
  80db18:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80db1c:	e0bfff17 	ldw	r2,-4(fp)
}
  80db20:	e037883a 	mov	sp,fp
  80db24:	df000017 	ldw	fp,0(sp)
  80db28:	dec00104 	addi	sp,sp,4
  80db2c:	f800283a 	ret

0080db30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80db30:	defffe04 	addi	sp,sp,-8
  80db34:	dfc00115 	stw	ra,4(sp)
  80db38:	df000015 	stw	fp,0(sp)
  80db3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80db40:	d0a00b17 	ldw	r2,-32724(gp)
  80db44:	10000326 	beq	r2,zero,80db54 <alt_get_errno+0x24>
  80db48:	d0a00b17 	ldw	r2,-32724(gp)
  80db4c:	103ee83a 	callr	r2
  80db50:	00000106 	br	80db58 <alt_get_errno+0x28>
  80db54:	d0a74f04 	addi	r2,gp,-25284
}
  80db58:	e037883a 	mov	sp,fp
  80db5c:	dfc00117 	ldw	ra,4(sp)
  80db60:	df000017 	ldw	fp,0(sp)
  80db64:	dec00204 	addi	sp,sp,8
  80db68:	f800283a 	ret

0080db6c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80db6c:	defffb04 	addi	sp,sp,-20
  80db70:	dfc00415 	stw	ra,16(sp)
  80db74:	df000315 	stw	fp,12(sp)
  80db78:	df000304 	addi	fp,sp,12
  80db7c:	e13ffe15 	stw	r4,-8(fp)
  80db80:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80db84:	e0bffe17 	ldw	r2,-8(fp)
  80db88:	10000616 	blt	r2,zero,80dba4 <fstat+0x38>
  80db8c:	e0bffe17 	ldw	r2,-8(fp)
  80db90:	10c00324 	muli	r3,r2,12
  80db94:	00802074 	movhi	r2,129
  80db98:	108d5f04 	addi	r2,r2,13692
  80db9c:	1885883a 	add	r2,r3,r2
  80dba0:	00000106 	br	80dba8 <fstat+0x3c>
  80dba4:	0005883a 	mov	r2,zero
  80dba8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80dbac:	e0bffd17 	ldw	r2,-12(fp)
  80dbb0:	10001026 	beq	r2,zero,80dbf4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80dbb4:	e0bffd17 	ldw	r2,-12(fp)
  80dbb8:	10800017 	ldw	r2,0(r2)
  80dbbc:	10800817 	ldw	r2,32(r2)
  80dbc0:	10000726 	beq	r2,zero,80dbe0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80dbc4:	e0bffd17 	ldw	r2,-12(fp)
  80dbc8:	10800017 	ldw	r2,0(r2)
  80dbcc:	10800817 	ldw	r2,32(r2)
  80dbd0:	e17fff17 	ldw	r5,-4(fp)
  80dbd4:	e13ffd17 	ldw	r4,-12(fp)
  80dbd8:	103ee83a 	callr	r2
  80dbdc:	00000a06 	br	80dc08 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80dbe0:	e0bfff17 	ldw	r2,-4(fp)
  80dbe4:	00c80004 	movi	r3,8192
  80dbe8:	10c00115 	stw	r3,4(r2)
      return 0;
  80dbec:	0005883a 	mov	r2,zero
  80dbf0:	00000506 	br	80dc08 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80dbf4:	080db300 	call	80db30 <alt_get_errno>
  80dbf8:	1007883a 	mov	r3,r2
  80dbfc:	00801444 	movi	r2,81
  80dc00:	18800015 	stw	r2,0(r3)
    return -1;
  80dc04:	00bfffc4 	movi	r2,-1
  }
}
  80dc08:	e037883a 	mov	sp,fp
  80dc0c:	dfc00117 	ldw	ra,4(sp)
  80dc10:	df000017 	ldw	fp,0(sp)
  80dc14:	dec00204 	addi	sp,sp,8
  80dc18:	f800283a 	ret

0080dc1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dc1c:	defffe04 	addi	sp,sp,-8
  80dc20:	dfc00115 	stw	ra,4(sp)
  80dc24:	df000015 	stw	fp,0(sp)
  80dc28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dc2c:	d0a00b17 	ldw	r2,-32724(gp)
  80dc30:	10000326 	beq	r2,zero,80dc40 <alt_get_errno+0x24>
  80dc34:	d0a00b17 	ldw	r2,-32724(gp)
  80dc38:	103ee83a 	callr	r2
  80dc3c:	00000106 	br	80dc44 <alt_get_errno+0x28>
  80dc40:	d0a74f04 	addi	r2,gp,-25284
}
  80dc44:	e037883a 	mov	sp,fp
  80dc48:	dfc00117 	ldw	ra,4(sp)
  80dc4c:	df000017 	ldw	fp,0(sp)
  80dc50:	dec00204 	addi	sp,sp,8
  80dc54:	f800283a 	ret

0080dc58 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80dc58:	deffed04 	addi	sp,sp,-76
  80dc5c:	dfc01215 	stw	ra,72(sp)
  80dc60:	df001115 	stw	fp,68(sp)
  80dc64:	df001104 	addi	fp,sp,68
  80dc68:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dc6c:	e0bfff17 	ldw	r2,-4(fp)
  80dc70:	10000616 	blt	r2,zero,80dc8c <isatty+0x34>
  80dc74:	e0bfff17 	ldw	r2,-4(fp)
  80dc78:	10c00324 	muli	r3,r2,12
  80dc7c:	00802074 	movhi	r2,129
  80dc80:	108d5f04 	addi	r2,r2,13692
  80dc84:	1885883a 	add	r2,r3,r2
  80dc88:	00000106 	br	80dc90 <isatty+0x38>
  80dc8c:	0005883a 	mov	r2,zero
  80dc90:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80dc94:	e0bfef17 	ldw	r2,-68(fp)
  80dc98:	10000e26 	beq	r2,zero,80dcd4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80dc9c:	e0bfef17 	ldw	r2,-68(fp)
  80dca0:	10800017 	ldw	r2,0(r2)
  80dca4:	10800817 	ldw	r2,32(r2)
  80dca8:	1000021e 	bne	r2,zero,80dcb4 <isatty+0x5c>
    {
      return 1;
  80dcac:	00800044 	movi	r2,1
  80dcb0:	00000d06 	br	80dce8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80dcb4:	e0bff004 	addi	r2,fp,-64
  80dcb8:	100b883a 	mov	r5,r2
  80dcbc:	e13fff17 	ldw	r4,-4(fp)
  80dcc0:	080db6c0 	call	80db6c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80dcc4:	e0bff117 	ldw	r2,-60(fp)
  80dcc8:	10880020 	cmpeqi	r2,r2,8192
  80dccc:	10803fcc 	andi	r2,r2,255
  80dcd0:	00000506 	br	80dce8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80dcd4:	080dc1c0 	call	80dc1c <alt_get_errno>
  80dcd8:	1007883a 	mov	r3,r2
  80dcdc:	00801444 	movi	r2,81
  80dce0:	18800015 	stw	r2,0(r3)
    return 0;
  80dce4:	0005883a 	mov	r2,zero
  }
}
  80dce8:	e037883a 	mov	sp,fp
  80dcec:	dfc00117 	ldw	ra,4(sp)
  80dcf0:	df000017 	ldw	fp,0(sp)
  80dcf4:	dec00204 	addi	sp,sp,8
  80dcf8:	f800283a 	ret

0080dcfc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80dcfc:	defffc04 	addi	sp,sp,-16
  80dd00:	df000315 	stw	fp,12(sp)
  80dd04:	df000304 	addi	fp,sp,12
  80dd08:	e13ffd15 	stw	r4,-12(fp)
  80dd0c:	e17ffe15 	stw	r5,-8(fp)
  80dd10:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80dd14:	e0fffe17 	ldw	r3,-8(fp)
  80dd18:	e0bffd17 	ldw	r2,-12(fp)
  80dd1c:	18800c26 	beq	r3,r2,80dd50 <alt_load_section+0x54>
  {
    while( to != end )
  80dd20:	00000806 	br	80dd44 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80dd24:	e0bffe17 	ldw	r2,-8(fp)
  80dd28:	10c00104 	addi	r3,r2,4
  80dd2c:	e0fffe15 	stw	r3,-8(fp)
  80dd30:	e0fffd17 	ldw	r3,-12(fp)
  80dd34:	19000104 	addi	r4,r3,4
  80dd38:	e13ffd15 	stw	r4,-12(fp)
  80dd3c:	18c00017 	ldw	r3,0(r3)
  80dd40:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80dd44:	e0fffe17 	ldw	r3,-8(fp)
  80dd48:	e0bfff17 	ldw	r2,-4(fp)
  80dd4c:	18bff51e 	bne	r3,r2,80dd24 <__alt_data_end+0xff80dd24>
    {
      *to++ = *from++;
    }
  }
}
  80dd50:	0001883a 	nop
  80dd54:	e037883a 	mov	sp,fp
  80dd58:	df000017 	ldw	fp,0(sp)
  80dd5c:	dec00104 	addi	sp,sp,4
  80dd60:	f800283a 	ret

0080dd64 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80dd64:	defffe04 	addi	sp,sp,-8
  80dd68:	dfc00115 	stw	ra,4(sp)
  80dd6c:	df000015 	stw	fp,0(sp)
  80dd70:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80dd74:	01802074 	movhi	r6,129
  80dd78:	31927a04 	addi	r6,r6,18920
  80dd7c:	01402074 	movhi	r5,129
  80dd80:	294b4a04 	addi	r5,r5,11560
  80dd84:	01002074 	movhi	r4,129
  80dd88:	21127a04 	addi	r4,r4,18920
  80dd8c:	080dcfc0 	call	80dcfc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80dd90:	01802034 	movhi	r6,128
  80dd94:	31809204 	addi	r6,r6,584
  80dd98:	01402034 	movhi	r5,128
  80dd9c:	29400804 	addi	r5,r5,32
  80dda0:	01002034 	movhi	r4,128
  80dda4:	21000804 	addi	r4,r4,32
  80dda8:	080dcfc0 	call	80dcfc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80ddac:	01802074 	movhi	r6,129
  80ddb0:	318b4a04 	addi	r6,r6,11560
  80ddb4:	01402074 	movhi	r5,129
  80ddb8:	29489b04 	addi	r5,r5,8812
  80ddbc:	01002074 	movhi	r4,129
  80ddc0:	21089b04 	addi	r4,r4,8812
  80ddc4:	080dcfc0 	call	80dcfc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80ddc8:	08113100 	call	811310 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80ddcc:	08115880 	call	811588 <alt_icache_flush_all>
}
  80ddd0:	0001883a 	nop
  80ddd4:	e037883a 	mov	sp,fp
  80ddd8:	dfc00117 	ldw	ra,4(sp)
  80dddc:	df000017 	ldw	fp,0(sp)
  80dde0:	dec00204 	addi	sp,sp,8
  80dde4:	f800283a 	ret

0080dde8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dde8:	defffe04 	addi	sp,sp,-8
  80ddec:	dfc00115 	stw	ra,4(sp)
  80ddf0:	df000015 	stw	fp,0(sp)
  80ddf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ddf8:	d0a00b17 	ldw	r2,-32724(gp)
  80ddfc:	10000326 	beq	r2,zero,80de0c <alt_get_errno+0x24>
  80de00:	d0a00b17 	ldw	r2,-32724(gp)
  80de04:	103ee83a 	callr	r2
  80de08:	00000106 	br	80de10 <alt_get_errno+0x28>
  80de0c:	d0a74f04 	addi	r2,gp,-25284
}
  80de10:	e037883a 	mov	sp,fp
  80de14:	dfc00117 	ldw	ra,4(sp)
  80de18:	df000017 	ldw	fp,0(sp)
  80de1c:	dec00204 	addi	sp,sp,8
  80de20:	f800283a 	ret

0080de24 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80de24:	defff904 	addi	sp,sp,-28
  80de28:	dfc00615 	stw	ra,24(sp)
  80de2c:	df000515 	stw	fp,20(sp)
  80de30:	df000504 	addi	fp,sp,20
  80de34:	e13ffd15 	stw	r4,-12(fp)
  80de38:	e17ffe15 	stw	r5,-8(fp)
  80de3c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80de40:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80de44:	e0bffd17 	ldw	r2,-12(fp)
  80de48:	10000616 	blt	r2,zero,80de64 <lseek+0x40>
  80de4c:	e0bffd17 	ldw	r2,-12(fp)
  80de50:	10c00324 	muli	r3,r2,12
  80de54:	00802074 	movhi	r2,129
  80de58:	108d5f04 	addi	r2,r2,13692
  80de5c:	1885883a 	add	r2,r3,r2
  80de60:	00000106 	br	80de68 <lseek+0x44>
  80de64:	0005883a 	mov	r2,zero
  80de68:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80de6c:	e0bffc17 	ldw	r2,-16(fp)
  80de70:	10001026 	beq	r2,zero,80deb4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80de74:	e0bffc17 	ldw	r2,-16(fp)
  80de78:	10800017 	ldw	r2,0(r2)
  80de7c:	10800717 	ldw	r2,28(r2)
  80de80:	10000926 	beq	r2,zero,80dea8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80de84:	e0bffc17 	ldw	r2,-16(fp)
  80de88:	10800017 	ldw	r2,0(r2)
  80de8c:	10800717 	ldw	r2,28(r2)
  80de90:	e1bfff17 	ldw	r6,-4(fp)
  80de94:	e17ffe17 	ldw	r5,-8(fp)
  80de98:	e13ffc17 	ldw	r4,-16(fp)
  80de9c:	103ee83a 	callr	r2
  80dea0:	e0bffb15 	stw	r2,-20(fp)
  80dea4:	00000506 	br	80debc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80dea8:	00bfde84 	movi	r2,-134
  80deac:	e0bffb15 	stw	r2,-20(fp)
  80deb0:	00000206 	br	80debc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80deb4:	00bfebc4 	movi	r2,-81
  80deb8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80debc:	e0bffb17 	ldw	r2,-20(fp)
  80dec0:	1000070e 	bge	r2,zero,80dee0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80dec4:	080dde80 	call	80dde8 <alt_get_errno>
  80dec8:	1007883a 	mov	r3,r2
  80decc:	e0bffb17 	ldw	r2,-20(fp)
  80ded0:	0085c83a 	sub	r2,zero,r2
  80ded4:	18800015 	stw	r2,0(r3)
    rc = -1;
  80ded8:	00bfffc4 	movi	r2,-1
  80dedc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80dee0:	e0bffb17 	ldw	r2,-20(fp)
}
  80dee4:	e037883a 	mov	sp,fp
  80dee8:	dfc00117 	ldw	ra,4(sp)
  80deec:	df000017 	ldw	fp,0(sp)
  80def0:	dec00204 	addi	sp,sp,8
  80def4:	f800283a 	ret

0080def8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80def8:	defffd04 	addi	sp,sp,-12
  80defc:	dfc00215 	stw	ra,8(sp)
  80df00:	df000115 	stw	fp,4(sp)
  80df04:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80df08:	0009883a 	mov	r4,zero
  80df0c:	080e77c0 	call	80e77c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80df10:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80df14:	080e7b40 	call	80e7b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80df18:	01802074 	movhi	r6,129
  80df1c:	318a8f04 	addi	r6,r6,10812
  80df20:	01402074 	movhi	r5,129
  80df24:	294a8f04 	addi	r5,r5,10812
  80df28:	01002074 	movhi	r4,129
  80df2c:	210a8f04 	addi	r4,r4,10812
  80df30:	08116800 	call	811680 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80df34:	08114380 	call	811438 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80df38:	01002074 	movhi	r4,129
  80df3c:	21052604 	addi	r4,r4,5272
  80df40:	0811f540 	call	811f54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80df44:	d0a75017 	ldw	r2,-25280(gp)
  80df48:	d0e75117 	ldw	r3,-25276(gp)
  80df4c:	d1275217 	ldw	r4,-25272(gp)
  80df50:	200d883a 	mov	r6,r4
  80df54:	180b883a 	mov	r5,r3
  80df58:	1009883a 	mov	r4,r2
  80df5c:	08084a80 	call	8084a8 <main>
  80df60:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80df64:	01000044 	movi	r4,1
  80df68:	080da340 	call	80da34 <close>
  exit (result);
  80df6c:	e13fff17 	ldw	r4,-4(fp)
  80df70:	0811f680 	call	811f68 <exit>

0080df74 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80df74:	defffe04 	addi	sp,sp,-8
  80df78:	df000115 	stw	fp,4(sp)
  80df7c:	df000104 	addi	fp,sp,4
  80df80:	e13fff15 	stw	r4,-4(fp)
}
  80df84:	0001883a 	nop
  80df88:	e037883a 	mov	sp,fp
  80df8c:	df000017 	ldw	fp,0(sp)
  80df90:	dec00104 	addi	sp,sp,4
  80df94:	f800283a 	ret

0080df98 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80df98:	defffe04 	addi	sp,sp,-8
  80df9c:	df000115 	stw	fp,4(sp)
  80dfa0:	df000104 	addi	fp,sp,4
  80dfa4:	e13fff15 	stw	r4,-4(fp)
}
  80dfa8:	0001883a 	nop
  80dfac:	e037883a 	mov	sp,fp
  80dfb0:	df000017 	ldw	fp,0(sp)
  80dfb4:	dec00104 	addi	sp,sp,4
  80dfb8:	f800283a 	ret

0080dfbc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  80dfbc:	defff204 	addi	sp,sp,-56
  80dfc0:	dfc00a15 	stw	ra,40(sp)
  80dfc4:	df000915 	stw	fp,36(sp)
  80dfc8:	df000904 	addi	fp,sp,36
  80dfcc:	e13fff15 	stw	r4,-4(fp)
  80dfd0:	e1400215 	stw	r5,8(fp)
  80dfd4:	e1800315 	stw	r6,12(fp)
  80dfd8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
  80dfdc:	e0800204 	addi	r2,fp,8
  80dfe0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  80dfe4:	e0bfff17 	ldw	r2,-4(fp)
  80dfe8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
  80dfec:	00006f06 	br	80e1ac <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  80dff0:	e0bff807 	ldb	r2,-32(fp)
  80dff4:	10800960 	cmpeqi	r2,r2,37
  80dff8:	1000041e 	bne	r2,zero,80e00c <alt_printf+0x50>
        {
            alt_putchar(c);
  80dffc:	e0bff807 	ldb	r2,-32(fp)
  80e000:	1009883a 	mov	r4,r2
  80e004:	080e1e80 	call	80e1e8 <alt_putchar>
  80e008:	00006806 	br	80e1ac <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  80e00c:	e0bff717 	ldw	r2,-36(fp)
  80e010:	10c00044 	addi	r3,r2,1
  80e014:	e0fff715 	stw	r3,-36(fp)
  80e018:	10800003 	ldbu	r2,0(r2)
  80e01c:	e0bff805 	stb	r2,-32(fp)
  80e020:	e0bff807 	ldb	r2,-32(fp)
  80e024:	10006926 	beq	r2,zero,80e1cc <alt_printf+0x210>
            {
                if (c == '%')
  80e028:	e0bff807 	ldb	r2,-32(fp)
  80e02c:	10800958 	cmpnei	r2,r2,37
  80e030:	1000041e 	bne	r2,zero,80e044 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  80e034:	e0bff807 	ldb	r2,-32(fp)
  80e038:	1009883a 	mov	r4,r2
  80e03c:	080e1e80 	call	80e1e8 <alt_putchar>
  80e040:	00005a06 	br	80e1ac <alt_printf+0x1f0>
                } 
                else if (c == 'c')
  80e044:	e0bff807 	ldb	r2,-32(fp)
  80e048:	108018d8 	cmpnei	r2,r2,99
  80e04c:	1000081e 	bne	r2,zero,80e070 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
  80e050:	e0bffe17 	ldw	r2,-8(fp)
  80e054:	10c00104 	addi	r3,r2,4
  80e058:	e0fffe15 	stw	r3,-8(fp)
  80e05c:	10800017 	ldw	r2,0(r2)
  80e060:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
  80e064:	e13ffd17 	ldw	r4,-12(fp)
  80e068:	080e1e80 	call	80e1e8 <alt_putchar>
  80e06c:	00004f06 	br	80e1ac <alt_printf+0x1f0>
                }
                else if (c == 'x')
  80e070:	e0bff807 	ldb	r2,-32(fp)
  80e074:	10801e18 	cmpnei	r2,r2,120
  80e078:	1000341e 	bne	r2,zero,80e14c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  80e07c:	e0bffe17 	ldw	r2,-8(fp)
  80e080:	10c00104 	addi	r3,r2,4
  80e084:	e0fffe15 	stw	r3,-8(fp)
  80e088:	10800017 	ldw	r2,0(r2)
  80e08c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  80e090:	e0bffb17 	ldw	r2,-20(fp)
  80e094:	1000031e 	bne	r2,zero,80e0a4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
  80e098:	01000c04 	movi	r4,48
  80e09c:	080e1e80 	call	80e1e8 <alt_putchar>
                        continue;
  80e0a0:	00004206 	br	80e1ac <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  80e0a4:	00800704 	movi	r2,28
  80e0a8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
  80e0ac:	00000306 	br	80e0bc <alt_printf+0x100>
                        digit_shift -= 4;
  80e0b0:	e0bff917 	ldw	r2,-28(fp)
  80e0b4:	10bfff04 	addi	r2,r2,-4
  80e0b8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  80e0bc:	00c003c4 	movi	r3,15
  80e0c0:	e0bff917 	ldw	r2,-28(fp)
  80e0c4:	1884983a 	sll	r2,r3,r2
  80e0c8:	1007883a 	mov	r3,r2
  80e0cc:	e0bffb17 	ldw	r2,-20(fp)
  80e0d0:	1884703a 	and	r2,r3,r2
  80e0d4:	103ff626 	beq	r2,zero,80e0b0 <__alt_data_end+0xff80e0b0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  80e0d8:	00001906 	br	80e140 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  80e0dc:	00c003c4 	movi	r3,15
  80e0e0:	e0bff917 	ldw	r2,-28(fp)
  80e0e4:	1884983a 	sll	r2,r3,r2
  80e0e8:	1007883a 	mov	r3,r2
  80e0ec:	e0bffb17 	ldw	r2,-20(fp)
  80e0f0:	1886703a 	and	r3,r3,r2
  80e0f4:	e0bff917 	ldw	r2,-28(fp)
  80e0f8:	1884d83a 	srl	r2,r3,r2
  80e0fc:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
  80e100:	e0bffc17 	ldw	r2,-16(fp)
  80e104:	108002a8 	cmpgeui	r2,r2,10
  80e108:	1000041e 	bne	r2,zero,80e11c <alt_printf+0x160>
                            c = '0' + digit;
  80e10c:	e0bffc17 	ldw	r2,-16(fp)
  80e110:	10800c04 	addi	r2,r2,48
  80e114:	e0bff805 	stb	r2,-32(fp)
  80e118:	00000306 	br	80e128 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
  80e11c:	e0bffc17 	ldw	r2,-16(fp)
  80e120:	108015c4 	addi	r2,r2,87
  80e124:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
  80e128:	e0bff807 	ldb	r2,-32(fp)
  80e12c:	1009883a 	mov	r4,r2
  80e130:	080e1e80 	call	80e1e8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  80e134:	e0bff917 	ldw	r2,-28(fp)
  80e138:	10bfff04 	addi	r2,r2,-4
  80e13c:	e0bff915 	stw	r2,-28(fp)
  80e140:	e0bff917 	ldw	r2,-28(fp)
  80e144:	103fe50e 	bge	r2,zero,80e0dc <__alt_data_end+0xff80e0dc>
  80e148:	00001806 	br	80e1ac <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  80e14c:	e0bff807 	ldb	r2,-32(fp)
  80e150:	10801cd8 	cmpnei	r2,r2,115
  80e154:	1000151e 	bne	r2,zero,80e1ac <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  80e158:	e0bffe17 	ldw	r2,-8(fp)
  80e15c:	10c00104 	addi	r3,r2,4
  80e160:	e0fffe15 	stw	r3,-8(fp)
  80e164:	10800017 	ldw	r2,0(r2)
  80e168:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
  80e16c:	00000906 	br	80e194 <alt_printf+0x1d8>
                      alt_putchar(*s++);
  80e170:	e0bffa17 	ldw	r2,-24(fp)
  80e174:	10c00044 	addi	r3,r2,1
  80e178:	e0fffa15 	stw	r3,-24(fp)
  80e17c:	10800003 	ldbu	r2,0(r2)
  80e180:	10803fcc 	andi	r2,r2,255
  80e184:	1080201c 	xori	r2,r2,128
  80e188:	10bfe004 	addi	r2,r2,-128
  80e18c:	1009883a 	mov	r4,r2
  80e190:	080e1e80 	call	80e1e8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  80e194:	e0bffa17 	ldw	r2,-24(fp)
  80e198:	10800003 	ldbu	r2,0(r2)
  80e19c:	10803fcc 	andi	r2,r2,255
  80e1a0:	1080201c 	xori	r2,r2,128
  80e1a4:	10bfe004 	addi	r2,r2,-128
  80e1a8:	103ff11e 	bne	r2,zero,80e170 <__alt_data_end+0xff80e170>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  80e1ac:	e0bff717 	ldw	r2,-36(fp)
  80e1b0:	10c00044 	addi	r3,r2,1
  80e1b4:	e0fff715 	stw	r3,-36(fp)
  80e1b8:	10800003 	ldbu	r2,0(r2)
  80e1bc:	e0bff805 	stb	r2,-32(fp)
  80e1c0:	e0bff807 	ldb	r2,-32(fp)
  80e1c4:	103f8a1e 	bne	r2,zero,80dff0 <__alt_data_end+0xff80dff0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  80e1c8:	00000106 	br	80e1d0 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
  80e1cc:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  80e1d0:	0001883a 	nop
  80e1d4:	e037883a 	mov	sp,fp
  80e1d8:	dfc00117 	ldw	ra,4(sp)
  80e1dc:	df000017 	ldw	fp,0(sp)
  80e1e0:	dec00504 	addi	sp,sp,20
  80e1e4:	f800283a 	ret

0080e1e8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  80e1e8:	defffd04 	addi	sp,sp,-12
  80e1ec:	dfc00215 	stw	ra,8(sp)
  80e1f0:	df000115 	stw	fp,4(sp)
  80e1f4:	df000104 	addi	fp,sp,4
  80e1f8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  80e1fc:	d0a00317 	ldw	r2,-32756(gp)
  80e200:	10800217 	ldw	r2,8(r2)
  80e204:	100b883a 	mov	r5,r2
  80e208:	e13fff17 	ldw	r4,-4(fp)
  80e20c:	080c0b40 	call	80c0b4 <putc>
#endif
#endif
}
  80e210:	e037883a 	mov	sp,fp
  80e214:	dfc00117 	ldw	ra,4(sp)
  80e218:	df000017 	ldw	fp,0(sp)
  80e21c:	dec00204 	addi	sp,sp,8
  80e220:	f800283a 	ret

0080e224 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e224:	defffe04 	addi	sp,sp,-8
  80e228:	dfc00115 	stw	ra,4(sp)
  80e22c:	df000015 	stw	fp,0(sp)
  80e230:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e234:	d0a00b17 	ldw	r2,-32724(gp)
  80e238:	10000326 	beq	r2,zero,80e248 <alt_get_errno+0x24>
  80e23c:	d0a00b17 	ldw	r2,-32724(gp)
  80e240:	103ee83a 	callr	r2
  80e244:	00000106 	br	80e24c <alt_get_errno+0x28>
  80e248:	d0a74f04 	addi	r2,gp,-25284
}
  80e24c:	e037883a 	mov	sp,fp
  80e250:	dfc00117 	ldw	ra,4(sp)
  80e254:	df000017 	ldw	fp,0(sp)
  80e258:	dec00204 	addi	sp,sp,8
  80e25c:	f800283a 	ret

0080e260 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80e260:	defff904 	addi	sp,sp,-28
  80e264:	dfc00615 	stw	ra,24(sp)
  80e268:	df000515 	stw	fp,20(sp)
  80e26c:	df000504 	addi	fp,sp,20
  80e270:	e13ffd15 	stw	r4,-12(fp)
  80e274:	e17ffe15 	stw	r5,-8(fp)
  80e278:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e27c:	e0bffd17 	ldw	r2,-12(fp)
  80e280:	10000616 	blt	r2,zero,80e29c <read+0x3c>
  80e284:	e0bffd17 	ldw	r2,-12(fp)
  80e288:	10c00324 	muli	r3,r2,12
  80e28c:	00802074 	movhi	r2,129
  80e290:	108d5f04 	addi	r2,r2,13692
  80e294:	1885883a 	add	r2,r3,r2
  80e298:	00000106 	br	80e2a0 <read+0x40>
  80e29c:	0005883a 	mov	r2,zero
  80e2a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e2a4:	e0bffb17 	ldw	r2,-20(fp)
  80e2a8:	10002226 	beq	r2,zero,80e334 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80e2ac:	e0bffb17 	ldw	r2,-20(fp)
  80e2b0:	10800217 	ldw	r2,8(r2)
  80e2b4:	108000cc 	andi	r2,r2,3
  80e2b8:	10800060 	cmpeqi	r2,r2,1
  80e2bc:	1000181e 	bne	r2,zero,80e320 <read+0xc0>
        (fd->dev->read))
  80e2c0:	e0bffb17 	ldw	r2,-20(fp)
  80e2c4:	10800017 	ldw	r2,0(r2)
  80e2c8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80e2cc:	10001426 	beq	r2,zero,80e320 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80e2d0:	e0bffb17 	ldw	r2,-20(fp)
  80e2d4:	10800017 	ldw	r2,0(r2)
  80e2d8:	10800517 	ldw	r2,20(r2)
  80e2dc:	e0ffff17 	ldw	r3,-4(fp)
  80e2e0:	180d883a 	mov	r6,r3
  80e2e4:	e17ffe17 	ldw	r5,-8(fp)
  80e2e8:	e13ffb17 	ldw	r4,-20(fp)
  80e2ec:	103ee83a 	callr	r2
  80e2f0:	e0bffc15 	stw	r2,-16(fp)
  80e2f4:	e0bffc17 	ldw	r2,-16(fp)
  80e2f8:	1000070e 	bge	r2,zero,80e318 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80e2fc:	080e2240 	call	80e224 <alt_get_errno>
  80e300:	1007883a 	mov	r3,r2
  80e304:	e0bffc17 	ldw	r2,-16(fp)
  80e308:	0085c83a 	sub	r2,zero,r2
  80e30c:	18800015 	stw	r2,0(r3)
          return -1;
  80e310:	00bfffc4 	movi	r2,-1
  80e314:	00000c06 	br	80e348 <read+0xe8>
        }
        return rval;
  80e318:	e0bffc17 	ldw	r2,-16(fp)
  80e31c:	00000a06 	br	80e348 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80e320:	080e2240 	call	80e224 <alt_get_errno>
  80e324:	1007883a 	mov	r3,r2
  80e328:	00800344 	movi	r2,13
  80e32c:	18800015 	stw	r2,0(r3)
  80e330:	00000406 	br	80e344 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80e334:	080e2240 	call	80e224 <alt_get_errno>
  80e338:	1007883a 	mov	r3,r2
  80e33c:	00801444 	movi	r2,81
  80e340:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e344:	00bfffc4 	movi	r2,-1
}
  80e348:	e037883a 	mov	sp,fp
  80e34c:	dfc00117 	ldw	ra,4(sp)
  80e350:	df000017 	ldw	fp,0(sp)
  80e354:	dec00204 	addi	sp,sp,8
  80e358:	f800283a 	ret

0080e35c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80e35c:	defffe04 	addi	sp,sp,-8
  80e360:	df000115 	stw	fp,4(sp)
  80e364:	df000104 	addi	fp,sp,4
  80e368:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80e36c:	e0bfff17 	ldw	r2,-4(fp)
  80e370:	108000d0 	cmplti	r2,r2,3
  80e374:	10000d1e 	bne	r2,zero,80e3ac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80e378:	00802074 	movhi	r2,129
  80e37c:	108d5f04 	addi	r2,r2,13692
  80e380:	e0ffff17 	ldw	r3,-4(fp)
  80e384:	18c00324 	muli	r3,r3,12
  80e388:	10c5883a 	add	r2,r2,r3
  80e38c:	10800204 	addi	r2,r2,8
  80e390:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80e394:	00802074 	movhi	r2,129
  80e398:	108d5f04 	addi	r2,r2,13692
  80e39c:	e0ffff17 	ldw	r3,-4(fp)
  80e3a0:	18c00324 	muli	r3,r3,12
  80e3a4:	10c5883a 	add	r2,r2,r3
  80e3a8:	10000015 	stw	zero,0(r2)
  }
}
  80e3ac:	0001883a 	nop
  80e3b0:	e037883a 	mov	sp,fp
  80e3b4:	df000017 	ldw	fp,0(sp)
  80e3b8:	dec00104 	addi	sp,sp,4
  80e3bc:	f800283a 	ret

0080e3c0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80e3c0:	defff904 	addi	sp,sp,-28
  80e3c4:	df000615 	stw	fp,24(sp)
  80e3c8:	df000604 	addi	fp,sp,24
  80e3cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e3d0:	0005303a 	rdctl	r2,status
  80e3d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e3d8:	e0fffe17 	ldw	r3,-8(fp)
  80e3dc:	00bfff84 	movi	r2,-2
  80e3e0:	1884703a 	and	r2,r3,r2
  80e3e4:	1001703a 	wrctl	status,r2
  
  return context;
  80e3e8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80e3ec:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80e3f0:	d0a00c17 	ldw	r2,-32720(gp)
  80e3f4:	10c000c4 	addi	r3,r2,3
  80e3f8:	00bfff04 	movi	r2,-4
  80e3fc:	1884703a 	and	r2,r3,r2
  80e400:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80e404:	d0e00c17 	ldw	r3,-32720(gp)
  80e408:	e0bfff17 	ldw	r2,-4(fp)
  80e40c:	1887883a 	add	r3,r3,r2
  80e410:	00804034 	movhi	r2,256
  80e414:	10800004 	addi	r2,r2,0
  80e418:	10c0062e 	bgeu	r2,r3,80e434 <sbrk+0x74>
  80e41c:	e0bffb17 	ldw	r2,-20(fp)
  80e420:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e424:	e0bffa17 	ldw	r2,-24(fp)
  80e428:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80e42c:	00bfffc4 	movi	r2,-1
  80e430:	00000b06 	br	80e460 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80e434:	d0a00c17 	ldw	r2,-32720(gp)
  80e438:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80e43c:	d0e00c17 	ldw	r3,-32720(gp)
  80e440:	e0bfff17 	ldw	r2,-4(fp)
  80e444:	1885883a 	add	r2,r3,r2
  80e448:	d0a00c15 	stw	r2,-32720(gp)
  80e44c:	e0bffb17 	ldw	r2,-20(fp)
  80e450:	e0bffc15 	stw	r2,-16(fp)
  80e454:	e0bffc17 	ldw	r2,-16(fp)
  80e458:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80e45c:	e0bffd17 	ldw	r2,-12(fp)
} 
  80e460:	e037883a 	mov	sp,fp
  80e464:	df000017 	ldw	fp,0(sp)
  80e468:	dec00104 	addi	sp,sp,4
  80e46c:	f800283a 	ret

0080e470 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80e470:	defffa04 	addi	sp,sp,-24
  80e474:	df000515 	stw	fp,20(sp)
  80e478:	df000504 	addi	fp,sp,20
  80e47c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e480:	0005303a 	rdctl	r2,status
  80e484:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e488:	e0fffc17 	ldw	r3,-16(fp)
  80e48c:	00bfff84 	movi	r2,-2
  80e490:	1884703a 	and	r2,r3,r2
  80e494:	1001703a 	wrctl	status,r2
  
  return context;
  80e498:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80e49c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80e4a0:	e0bfff17 	ldw	r2,-4(fp)
  80e4a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80e4a8:	e0bffd17 	ldw	r2,-12(fp)
  80e4ac:	10800017 	ldw	r2,0(r2)
  80e4b0:	e0fffd17 	ldw	r3,-12(fp)
  80e4b4:	18c00117 	ldw	r3,4(r3)
  80e4b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80e4bc:	e0bffd17 	ldw	r2,-12(fp)
  80e4c0:	10800117 	ldw	r2,4(r2)
  80e4c4:	e0fffd17 	ldw	r3,-12(fp)
  80e4c8:	18c00017 	ldw	r3,0(r3)
  80e4cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80e4d0:	e0bffd17 	ldw	r2,-12(fp)
  80e4d4:	e0fffd17 	ldw	r3,-12(fp)
  80e4d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80e4dc:	e0bffd17 	ldw	r2,-12(fp)
  80e4e0:	e0fffd17 	ldw	r3,-12(fp)
  80e4e4:	10c00015 	stw	r3,0(r2)
  80e4e8:	e0bffb17 	ldw	r2,-20(fp)
  80e4ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e4f0:	e0bffe17 	ldw	r2,-8(fp)
  80e4f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80e4f8:	0001883a 	nop
  80e4fc:	e037883a 	mov	sp,fp
  80e500:	df000017 	ldw	fp,0(sp)
  80e504:	dec00104 	addi	sp,sp,4
  80e508:	f800283a 	ret

0080e50c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80e50c:	defffb04 	addi	sp,sp,-20
  80e510:	dfc00415 	stw	ra,16(sp)
  80e514:	df000315 	stw	fp,12(sp)
  80e518:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80e51c:	d0a00d17 	ldw	r2,-32716(gp)
  80e520:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80e524:	d0a75417 	ldw	r2,-25264(gp)
  80e528:	10800044 	addi	r2,r2,1
  80e52c:	d0a75415 	stw	r2,-25264(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80e530:	00002e06 	br	80e5ec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80e534:	e0bffd17 	ldw	r2,-12(fp)
  80e538:	10800017 	ldw	r2,0(r2)
  80e53c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80e540:	e0bffd17 	ldw	r2,-12(fp)
  80e544:	10800403 	ldbu	r2,16(r2)
  80e548:	10803fcc 	andi	r2,r2,255
  80e54c:	10000426 	beq	r2,zero,80e560 <alt_tick+0x54>
  80e550:	d0a75417 	ldw	r2,-25264(gp)
  80e554:	1000021e 	bne	r2,zero,80e560 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80e558:	e0bffd17 	ldw	r2,-12(fp)
  80e55c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80e560:	e0bffd17 	ldw	r2,-12(fp)
  80e564:	10800217 	ldw	r2,8(r2)
  80e568:	d0e75417 	ldw	r3,-25264(gp)
  80e56c:	18801d36 	bltu	r3,r2,80e5e4 <alt_tick+0xd8>
  80e570:	e0bffd17 	ldw	r2,-12(fp)
  80e574:	10800403 	ldbu	r2,16(r2)
  80e578:	10803fcc 	andi	r2,r2,255
  80e57c:	1000191e 	bne	r2,zero,80e5e4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80e580:	e0bffd17 	ldw	r2,-12(fp)
  80e584:	10800317 	ldw	r2,12(r2)
  80e588:	e0fffd17 	ldw	r3,-12(fp)
  80e58c:	18c00517 	ldw	r3,20(r3)
  80e590:	1809883a 	mov	r4,r3
  80e594:	103ee83a 	callr	r2
  80e598:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80e59c:	e0bfff17 	ldw	r2,-4(fp)
  80e5a0:	1000031e 	bne	r2,zero,80e5b0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80e5a4:	e13ffd17 	ldw	r4,-12(fp)
  80e5a8:	080e4700 	call	80e470 <alt_alarm_stop>
  80e5ac:	00000d06 	br	80e5e4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80e5b0:	e0bffd17 	ldw	r2,-12(fp)
  80e5b4:	10c00217 	ldw	r3,8(r2)
  80e5b8:	e0bfff17 	ldw	r2,-4(fp)
  80e5bc:	1887883a 	add	r3,r3,r2
  80e5c0:	e0bffd17 	ldw	r2,-12(fp)
  80e5c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80e5c8:	e0bffd17 	ldw	r2,-12(fp)
  80e5cc:	10c00217 	ldw	r3,8(r2)
  80e5d0:	d0a75417 	ldw	r2,-25264(gp)
  80e5d4:	1880032e 	bgeu	r3,r2,80e5e4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80e5d8:	e0bffd17 	ldw	r2,-12(fp)
  80e5dc:	00c00044 	movi	r3,1
  80e5e0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80e5e4:	e0bffe17 	ldw	r2,-8(fp)
  80e5e8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80e5ec:	e0fffd17 	ldw	r3,-12(fp)
  80e5f0:	d0a00d04 	addi	r2,gp,-32716
  80e5f4:	18bfcf1e 	bne	r3,r2,80e534 <__alt_data_end+0xff80e534>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80e5f8:	0001883a 	nop
}
  80e5fc:	0001883a 	nop
  80e600:	e037883a 	mov	sp,fp
  80e604:	dfc00117 	ldw	ra,4(sp)
  80e608:	df000017 	ldw	fp,0(sp)
  80e60c:	dec00204 	addi	sp,sp,8
  80e610:	f800283a 	ret

0080e614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e614:	defffe04 	addi	sp,sp,-8
  80e618:	dfc00115 	stw	ra,4(sp)
  80e61c:	df000015 	stw	fp,0(sp)
  80e620:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e624:	d0a00b17 	ldw	r2,-32724(gp)
  80e628:	10000326 	beq	r2,zero,80e638 <alt_get_errno+0x24>
  80e62c:	d0a00b17 	ldw	r2,-32724(gp)
  80e630:	103ee83a 	callr	r2
  80e634:	00000106 	br	80e63c <alt_get_errno+0x28>
  80e638:	d0a74f04 	addi	r2,gp,-25284
}
  80e63c:	e037883a 	mov	sp,fp
  80e640:	dfc00117 	ldw	ra,4(sp)
  80e644:	df000017 	ldw	fp,0(sp)
  80e648:	dec00204 	addi	sp,sp,8
  80e64c:	f800283a 	ret

0080e650 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80e650:	defff904 	addi	sp,sp,-28
  80e654:	dfc00615 	stw	ra,24(sp)
  80e658:	df000515 	stw	fp,20(sp)
  80e65c:	df000504 	addi	fp,sp,20
  80e660:	e13ffd15 	stw	r4,-12(fp)
  80e664:	e17ffe15 	stw	r5,-8(fp)
  80e668:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e66c:	e0bffd17 	ldw	r2,-12(fp)
  80e670:	10000616 	blt	r2,zero,80e68c <write+0x3c>
  80e674:	e0bffd17 	ldw	r2,-12(fp)
  80e678:	10c00324 	muli	r3,r2,12
  80e67c:	00802074 	movhi	r2,129
  80e680:	108d5f04 	addi	r2,r2,13692
  80e684:	1885883a 	add	r2,r3,r2
  80e688:	00000106 	br	80e690 <write+0x40>
  80e68c:	0005883a 	mov	r2,zero
  80e690:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e694:	e0bffb17 	ldw	r2,-20(fp)
  80e698:	10002126 	beq	r2,zero,80e720 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80e69c:	e0bffb17 	ldw	r2,-20(fp)
  80e6a0:	10800217 	ldw	r2,8(r2)
  80e6a4:	108000cc 	andi	r2,r2,3
  80e6a8:	10001826 	beq	r2,zero,80e70c <write+0xbc>
  80e6ac:	e0bffb17 	ldw	r2,-20(fp)
  80e6b0:	10800017 	ldw	r2,0(r2)
  80e6b4:	10800617 	ldw	r2,24(r2)
  80e6b8:	10001426 	beq	r2,zero,80e70c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80e6bc:	e0bffb17 	ldw	r2,-20(fp)
  80e6c0:	10800017 	ldw	r2,0(r2)
  80e6c4:	10800617 	ldw	r2,24(r2)
  80e6c8:	e0ffff17 	ldw	r3,-4(fp)
  80e6cc:	180d883a 	mov	r6,r3
  80e6d0:	e17ffe17 	ldw	r5,-8(fp)
  80e6d4:	e13ffb17 	ldw	r4,-20(fp)
  80e6d8:	103ee83a 	callr	r2
  80e6dc:	e0bffc15 	stw	r2,-16(fp)
  80e6e0:	e0bffc17 	ldw	r2,-16(fp)
  80e6e4:	1000070e 	bge	r2,zero,80e704 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80e6e8:	080e6140 	call	80e614 <alt_get_errno>
  80e6ec:	1007883a 	mov	r3,r2
  80e6f0:	e0bffc17 	ldw	r2,-16(fp)
  80e6f4:	0085c83a 	sub	r2,zero,r2
  80e6f8:	18800015 	stw	r2,0(r3)
        return -1;
  80e6fc:	00bfffc4 	movi	r2,-1
  80e700:	00000c06 	br	80e734 <write+0xe4>
      }
      return rval;
  80e704:	e0bffc17 	ldw	r2,-16(fp)
  80e708:	00000a06 	br	80e734 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80e70c:	080e6140 	call	80e614 <alt_get_errno>
  80e710:	1007883a 	mov	r3,r2
  80e714:	00800344 	movi	r2,13
  80e718:	18800015 	stw	r2,0(r3)
  80e71c:	00000406 	br	80e730 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80e720:	080e6140 	call	80e614 <alt_get_errno>
  80e724:	1007883a 	mov	r3,r2
  80e728:	00801444 	movi	r2,81
  80e72c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e730:	00bfffc4 	movi	r2,-1
}
  80e734:	e037883a 	mov	sp,fp
  80e738:	dfc00117 	ldw	ra,4(sp)
  80e73c:	df000017 	ldw	fp,0(sp)
  80e740:	dec00204 	addi	sp,sp,8
  80e744:	f800283a 	ret

0080e748 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80e748:	defffd04 	addi	sp,sp,-12
  80e74c:	dfc00215 	stw	ra,8(sp)
  80e750:	df000115 	stw	fp,4(sp)
  80e754:	df000104 	addi	fp,sp,4
  80e758:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80e75c:	d1600804 	addi	r5,gp,-32736
  80e760:	e13fff17 	ldw	r4,-4(fp)
  80e764:	08113940 	call	811394 <alt_dev_llist_insert>
}
  80e768:	e037883a 	mov	sp,fp
  80e76c:	dfc00117 	ldw	ra,4(sp)
  80e770:	df000017 	ldw	fp,0(sp)
  80e774:	dec00204 	addi	sp,sp,8
  80e778:	f800283a 	ret

0080e77c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80e77c:	defffd04 	addi	sp,sp,-12
  80e780:	dfc00215 	stw	ra,8(sp)
  80e784:	df000115 	stw	fp,4(sp)
  80e788:	df000104 	addi	fp,sp,4
  80e78c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  80e790:	0811b000 	call	811b00 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80e794:	00800044 	movi	r2,1
  80e798:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80e79c:	0001883a 	nop
  80e7a0:	e037883a 	mov	sp,fp
  80e7a4:	dfc00117 	ldw	ra,4(sp)
  80e7a8:	df000017 	ldw	fp,0(sp)
  80e7ac:	dec00204 	addi	sp,sp,8
  80e7b0:	f800283a 	ret

0080e7b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80e7b4:	defffe04 	addi	sp,sp,-8
  80e7b8:	dfc00115 	stw	ra,4(sp)
  80e7bc:	df000015 	stw	fp,0(sp)
  80e7c0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  80e7c4:	01c0fa04 	movi	r7,1000
  80e7c8:	018000c4 	movi	r6,3
  80e7cc:	000b883a 	mov	r5,zero
  80e7d0:	01004034 	movhi	r4,256
  80e7d4:	21041804 	addi	r4,r4,4192
  80e7d8:	08102200 	call	810220 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, Jtag_uart_0);
  80e7dc:	000d883a 	mov	r6,zero
  80e7e0:	000b883a 	mov	r5,zero
  80e7e4:	01002074 	movhi	r4,129
  80e7e8:	210dc904 	addi	r4,r4,14116
  80e7ec:	080e9cc0 	call	80e9cc <altera_avalon_jtag_uart_init>
  80e7f0:	01002074 	movhi	r4,129
  80e7f4:	210dbf04 	addi	r4,r4,14076
  80e7f8:	080e7480 	call	80e748 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  80e7fc:	01002074 	movhi	r4,129
  80e800:	2111e104 	addi	r4,r4,18308
  80e804:	08100100 	call	810010 <altera_avalon_lcd_16207_init>
  80e808:	01002074 	movhi	r4,129
  80e80c:	2111d704 	addi	r4,r4,18268
  80e810:	080e7480 	call	80e748 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  80e814:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80e818:	01800044 	movi	r6,1
  80e81c:	000b883a 	mov	r5,zero
  80e820:	01002074 	movhi	r4,129
  80e824:	21122904 	addi	r4,r4,18596
  80e828:	08103a40 	call	8103a4 <altera_avalon_uart_init>
  80e82c:	01002074 	movhi	r4,129
  80e830:	21121f04 	addi	r4,r4,18556
  80e834:	080e7480 	call	80e748 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  80e838:	01002074 	movhi	r4,129
  80e83c:	21125004 	addi	r4,r4,18752
  80e840:	080e7480 	call	80e748 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  80e844:	01002074 	movhi	r4,129
  80e848:	21125c04 	addi	r4,r4,18800
  80e84c:	080e7480 	call	80e748 <alt_dev_reg>
}
  80e850:	0001883a 	nop
  80e854:	e037883a 	mov	sp,fp
  80e858:	dfc00117 	ldw	ra,4(sp)
  80e85c:	df000017 	ldw	fp,0(sp)
  80e860:	dec00204 	addi	sp,sp,8
  80e864:	f800283a 	ret

0080e868 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80e868:	defffa04 	addi	sp,sp,-24
  80e86c:	dfc00515 	stw	ra,20(sp)
  80e870:	df000415 	stw	fp,16(sp)
  80e874:	df000404 	addi	fp,sp,16
  80e878:	e13ffd15 	stw	r4,-12(fp)
  80e87c:	e17ffe15 	stw	r5,-8(fp)
  80e880:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e884:	e0bffd17 	ldw	r2,-12(fp)
  80e888:	10800017 	ldw	r2,0(r2)
  80e88c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80e890:	e0bffc17 	ldw	r2,-16(fp)
  80e894:	10c00a04 	addi	r3,r2,40
  80e898:	e0bffd17 	ldw	r2,-12(fp)
  80e89c:	10800217 	ldw	r2,8(r2)
  80e8a0:	100f883a 	mov	r7,r2
  80e8a4:	e1bfff17 	ldw	r6,-4(fp)
  80e8a8:	e17ffe17 	ldw	r5,-8(fp)
  80e8ac:	1809883a 	mov	r4,r3
  80e8b0:	080ee880 	call	80ee88 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80e8b4:	e037883a 	mov	sp,fp
  80e8b8:	dfc00117 	ldw	ra,4(sp)
  80e8bc:	df000017 	ldw	fp,0(sp)
  80e8c0:	dec00204 	addi	sp,sp,8
  80e8c4:	f800283a 	ret

0080e8c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80e8c8:	defffa04 	addi	sp,sp,-24
  80e8cc:	dfc00515 	stw	ra,20(sp)
  80e8d0:	df000415 	stw	fp,16(sp)
  80e8d4:	df000404 	addi	fp,sp,16
  80e8d8:	e13ffd15 	stw	r4,-12(fp)
  80e8dc:	e17ffe15 	stw	r5,-8(fp)
  80e8e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e8e4:	e0bffd17 	ldw	r2,-12(fp)
  80e8e8:	10800017 	ldw	r2,0(r2)
  80e8ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80e8f0:	e0bffc17 	ldw	r2,-16(fp)
  80e8f4:	10c00a04 	addi	r3,r2,40
  80e8f8:	e0bffd17 	ldw	r2,-12(fp)
  80e8fc:	10800217 	ldw	r2,8(r2)
  80e900:	100f883a 	mov	r7,r2
  80e904:	e1bfff17 	ldw	r6,-4(fp)
  80e908:	e17ffe17 	ldw	r5,-8(fp)
  80e90c:	1809883a 	mov	r4,r3
  80e910:	080f0a40 	call	80f0a4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80e914:	e037883a 	mov	sp,fp
  80e918:	dfc00117 	ldw	ra,4(sp)
  80e91c:	df000017 	ldw	fp,0(sp)
  80e920:	dec00204 	addi	sp,sp,8
  80e924:	f800283a 	ret

0080e928 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80e928:	defffc04 	addi	sp,sp,-16
  80e92c:	dfc00315 	stw	ra,12(sp)
  80e930:	df000215 	stw	fp,8(sp)
  80e934:	df000204 	addi	fp,sp,8
  80e938:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e93c:	e0bfff17 	ldw	r2,-4(fp)
  80e940:	10800017 	ldw	r2,0(r2)
  80e944:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80e948:	e0bffe17 	ldw	r2,-8(fp)
  80e94c:	10c00a04 	addi	r3,r2,40
  80e950:	e0bfff17 	ldw	r2,-4(fp)
  80e954:	10800217 	ldw	r2,8(r2)
  80e958:	100b883a 	mov	r5,r2
  80e95c:	1809883a 	mov	r4,r3
  80e960:	080ed300 	call	80ed30 <altera_avalon_jtag_uart_close>
}
  80e964:	e037883a 	mov	sp,fp
  80e968:	dfc00117 	ldw	ra,4(sp)
  80e96c:	df000017 	ldw	fp,0(sp)
  80e970:	dec00204 	addi	sp,sp,8
  80e974:	f800283a 	ret

0080e978 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80e978:	defffa04 	addi	sp,sp,-24
  80e97c:	dfc00515 	stw	ra,20(sp)
  80e980:	df000415 	stw	fp,16(sp)
  80e984:	df000404 	addi	fp,sp,16
  80e988:	e13ffd15 	stw	r4,-12(fp)
  80e98c:	e17ffe15 	stw	r5,-8(fp)
  80e990:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80e994:	e0bffd17 	ldw	r2,-12(fp)
  80e998:	10800017 	ldw	r2,0(r2)
  80e99c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80e9a0:	e0bffc17 	ldw	r2,-16(fp)
  80e9a4:	10800a04 	addi	r2,r2,40
  80e9a8:	e1bfff17 	ldw	r6,-4(fp)
  80e9ac:	e17ffe17 	ldw	r5,-8(fp)
  80e9b0:	1009883a 	mov	r4,r2
  80e9b4:	080ed980 	call	80ed98 <altera_avalon_jtag_uart_ioctl>
}
  80e9b8:	e037883a 	mov	sp,fp
  80e9bc:	dfc00117 	ldw	ra,4(sp)
  80e9c0:	df000017 	ldw	fp,0(sp)
  80e9c4:	dec00204 	addi	sp,sp,8
  80e9c8:	f800283a 	ret

0080e9cc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80e9cc:	defffb04 	addi	sp,sp,-20
  80e9d0:	dfc00415 	stw	ra,16(sp)
  80e9d4:	df000315 	stw	fp,12(sp)
  80e9d8:	df000304 	addi	fp,sp,12
  80e9dc:	e13ffd15 	stw	r4,-12(fp)
  80e9e0:	e17ffe15 	stw	r5,-8(fp)
  80e9e4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80e9e8:	e0bffd17 	ldw	r2,-12(fp)
  80e9ec:	00c00044 	movi	r3,1
  80e9f0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80e9f4:	e0bffd17 	ldw	r2,-12(fp)
  80e9f8:	10800017 	ldw	r2,0(r2)
  80e9fc:	10800104 	addi	r2,r2,4
  80ea00:	1007883a 	mov	r3,r2
  80ea04:	e0bffd17 	ldw	r2,-12(fp)
  80ea08:	10800817 	ldw	r2,32(r2)
  80ea0c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  80ea10:	e0bfff17 	ldw	r2,-4(fp)
  80ea14:	01802074 	movhi	r6,129
  80ea18:	31baa004 	addi	r6,r6,-5504
  80ea1c:	e17ffd17 	ldw	r5,-12(fp)
  80ea20:	1009883a 	mov	r4,r2
  80ea24:	08116fc0 	call	8116fc <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80ea28:	e0bffd17 	ldw	r2,-12(fp)
  80ea2c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80ea30:	e0bffd17 	ldw	r2,-12(fp)
  80ea34:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80ea38:	d0e75317 	ldw	r3,-25268(gp)
  80ea3c:	e1fffd17 	ldw	r7,-12(fp)
  80ea40:	01802074 	movhi	r6,129
  80ea44:	31bb2404 	addi	r6,r6,-4976
  80ea48:	180b883a 	mov	r5,r3
  80ea4c:	1009883a 	mov	r4,r2
  80ea50:	080d8cc0 	call	80d8cc <alt_alarm_start>
  80ea54:	1000040e 	bge	r2,zero,80ea68 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80ea58:	e0fffd17 	ldw	r3,-12(fp)
  80ea5c:	00a00034 	movhi	r2,32768
  80ea60:	10bfffc4 	addi	r2,r2,-1
  80ea64:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80ea68:	0001883a 	nop
  80ea6c:	e037883a 	mov	sp,fp
  80ea70:	dfc00117 	ldw	ra,4(sp)
  80ea74:	df000017 	ldw	fp,0(sp)
  80ea78:	dec00204 	addi	sp,sp,8
  80ea7c:	f800283a 	ret

0080ea80 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80ea80:	defff704 	addi	sp,sp,-36
  80ea84:	df000815 	stw	fp,32(sp)
  80ea88:	df000804 	addi	fp,sp,32
  80ea8c:	e13ffe15 	stw	r4,-8(fp)
  80ea90:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80ea94:	e0bffe17 	ldw	r2,-8(fp)
  80ea98:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  80ea9c:	e0bffa17 	ldw	r2,-24(fp)
  80eaa0:	10800017 	ldw	r2,0(r2)
  80eaa4:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80eaa8:	e0bffb17 	ldw	r2,-20(fp)
  80eaac:	10800104 	addi	r2,r2,4
  80eab0:	10800037 	ldwio	r2,0(r2)
  80eab4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80eab8:	e0bffc17 	ldw	r2,-16(fp)
  80eabc:	1080c00c 	andi	r2,r2,768
  80eac0:	10006d26 	beq	r2,zero,80ec78 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80eac4:	e0bffc17 	ldw	r2,-16(fp)
  80eac8:	1080400c 	andi	r2,r2,256
  80eacc:	10003526 	beq	r2,zero,80eba4 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80ead0:	00800074 	movhi	r2,1
  80ead4:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ead8:	e0bffa17 	ldw	r2,-24(fp)
  80eadc:	10800a17 	ldw	r2,40(r2)
  80eae0:	10800044 	addi	r2,r2,1
  80eae4:	1081ffcc 	andi	r2,r2,2047
  80eae8:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
  80eaec:	e0bffa17 	ldw	r2,-24(fp)
  80eaf0:	10c00b17 	ldw	r3,44(r2)
  80eaf4:	e0bffd17 	ldw	r2,-12(fp)
  80eaf8:	18801526 	beq	r3,r2,80eb50 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80eafc:	e0bffb17 	ldw	r2,-20(fp)
  80eb00:	10800037 	ldwio	r2,0(r2)
  80eb04:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80eb08:	e0bff817 	ldw	r2,-32(fp)
  80eb0c:	10a0000c 	andi	r2,r2,32768
  80eb10:	10001126 	beq	r2,zero,80eb58 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80eb14:	e0bffa17 	ldw	r2,-24(fp)
  80eb18:	10800a17 	ldw	r2,40(r2)
  80eb1c:	e0fff817 	ldw	r3,-32(fp)
  80eb20:	1809883a 	mov	r4,r3
  80eb24:	e0fffa17 	ldw	r3,-24(fp)
  80eb28:	1885883a 	add	r2,r3,r2
  80eb2c:	10800e04 	addi	r2,r2,56
  80eb30:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80eb34:	e0bffa17 	ldw	r2,-24(fp)
  80eb38:	10800a17 	ldw	r2,40(r2)
  80eb3c:	10800044 	addi	r2,r2,1
  80eb40:	10c1ffcc 	andi	r3,r2,2047
  80eb44:	e0bffa17 	ldw	r2,-24(fp)
  80eb48:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80eb4c:	003fe206 	br	80ead8 <__alt_data_end+0xff80ead8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80eb50:	0001883a 	nop
  80eb54:	00000106 	br	80eb5c <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80eb58:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80eb5c:	e0bff817 	ldw	r2,-32(fp)
  80eb60:	10bfffec 	andhi	r2,r2,65535
  80eb64:	10000f26 	beq	r2,zero,80eba4 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80eb68:	e0bffa17 	ldw	r2,-24(fp)
  80eb6c:	10c00817 	ldw	r3,32(r2)
  80eb70:	00bfff84 	movi	r2,-2
  80eb74:	1886703a 	and	r3,r3,r2
  80eb78:	e0bffa17 	ldw	r2,-24(fp)
  80eb7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80eb80:	e0bffb17 	ldw	r2,-20(fp)
  80eb84:	10800104 	addi	r2,r2,4
  80eb88:	1007883a 	mov	r3,r2
  80eb8c:	e0bffa17 	ldw	r2,-24(fp)
  80eb90:	10800817 	ldw	r2,32(r2)
  80eb94:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80eb98:	e0bffb17 	ldw	r2,-20(fp)
  80eb9c:	10800104 	addi	r2,r2,4
  80eba0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80eba4:	e0bffc17 	ldw	r2,-16(fp)
  80eba8:	1080800c 	andi	r2,r2,512
  80ebac:	103fbe26 	beq	r2,zero,80eaa8 <__alt_data_end+0xff80eaa8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80ebb0:	e0bffc17 	ldw	r2,-16(fp)
  80ebb4:	1004d43a 	srli	r2,r2,16
  80ebb8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ebbc:	00001406 	br	80ec10 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80ebc0:	e0bffb17 	ldw	r2,-20(fp)
  80ebc4:	e0fffa17 	ldw	r3,-24(fp)
  80ebc8:	18c00d17 	ldw	r3,52(r3)
  80ebcc:	e13ffa17 	ldw	r4,-24(fp)
  80ebd0:	20c7883a 	add	r3,r4,r3
  80ebd4:	18c20e04 	addi	r3,r3,2104
  80ebd8:	18c00003 	ldbu	r3,0(r3)
  80ebdc:	18c03fcc 	andi	r3,r3,255
  80ebe0:	18c0201c 	xori	r3,r3,128
  80ebe4:	18ffe004 	addi	r3,r3,-128
  80ebe8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ebec:	e0bffa17 	ldw	r2,-24(fp)
  80ebf0:	10800d17 	ldw	r2,52(r2)
  80ebf4:	10800044 	addi	r2,r2,1
  80ebf8:	10c1ffcc 	andi	r3,r2,2047
  80ebfc:	e0bffa17 	ldw	r2,-24(fp)
  80ec00:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80ec04:	e0bff917 	ldw	r2,-28(fp)
  80ec08:	10bfffc4 	addi	r2,r2,-1
  80ec0c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80ec10:	e0bff917 	ldw	r2,-28(fp)
  80ec14:	10000526 	beq	r2,zero,80ec2c <altera_avalon_jtag_uart_irq+0x1ac>
  80ec18:	e0bffa17 	ldw	r2,-24(fp)
  80ec1c:	10c00d17 	ldw	r3,52(r2)
  80ec20:	e0bffa17 	ldw	r2,-24(fp)
  80ec24:	10800c17 	ldw	r2,48(r2)
  80ec28:	18bfe51e 	bne	r3,r2,80ebc0 <__alt_data_end+0xff80ebc0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80ec2c:	e0bff917 	ldw	r2,-28(fp)
  80ec30:	103f9d26 	beq	r2,zero,80eaa8 <__alt_data_end+0xff80eaa8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80ec34:	e0bffa17 	ldw	r2,-24(fp)
  80ec38:	10c00817 	ldw	r3,32(r2)
  80ec3c:	00bfff44 	movi	r2,-3
  80ec40:	1886703a 	and	r3,r3,r2
  80ec44:	e0bffa17 	ldw	r2,-24(fp)
  80ec48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ec4c:	e0bffa17 	ldw	r2,-24(fp)
  80ec50:	10800017 	ldw	r2,0(r2)
  80ec54:	10800104 	addi	r2,r2,4
  80ec58:	1007883a 	mov	r3,r2
  80ec5c:	e0bffa17 	ldw	r2,-24(fp)
  80ec60:	10800817 	ldw	r2,32(r2)
  80ec64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80ec68:	e0bffb17 	ldw	r2,-20(fp)
  80ec6c:	10800104 	addi	r2,r2,4
  80ec70:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80ec74:	003f8c06 	br	80eaa8 <__alt_data_end+0xff80eaa8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80ec78:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80ec7c:	0001883a 	nop
  80ec80:	e037883a 	mov	sp,fp
  80ec84:	df000017 	ldw	fp,0(sp)
  80ec88:	dec00104 	addi	sp,sp,4
  80ec8c:	f800283a 	ret

0080ec90 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80ec90:	defff804 	addi	sp,sp,-32
  80ec94:	df000715 	stw	fp,28(sp)
  80ec98:	df000704 	addi	fp,sp,28
  80ec9c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80eca0:	e0bffb17 	ldw	r2,-20(fp)
  80eca4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80eca8:	e0bff917 	ldw	r2,-28(fp)
  80ecac:	10800017 	ldw	r2,0(r2)
  80ecb0:	10800104 	addi	r2,r2,4
  80ecb4:	10800037 	ldwio	r2,0(r2)
  80ecb8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80ecbc:	e0bffa17 	ldw	r2,-24(fp)
  80ecc0:	1081000c 	andi	r2,r2,1024
  80ecc4:	10000b26 	beq	r2,zero,80ecf4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80ecc8:	e0bff917 	ldw	r2,-28(fp)
  80eccc:	10800017 	ldw	r2,0(r2)
  80ecd0:	10800104 	addi	r2,r2,4
  80ecd4:	1007883a 	mov	r3,r2
  80ecd8:	e0bff917 	ldw	r2,-28(fp)
  80ecdc:	10800817 	ldw	r2,32(r2)
  80ece0:	10810014 	ori	r2,r2,1024
  80ece4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80ece8:	e0bff917 	ldw	r2,-28(fp)
  80ecec:	10000915 	stw	zero,36(r2)
  80ecf0:	00000a06 	br	80ed1c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80ecf4:	e0bff917 	ldw	r2,-28(fp)
  80ecf8:	10c00917 	ldw	r3,36(r2)
  80ecfc:	00a00034 	movhi	r2,32768
  80ed00:	10bfff04 	addi	r2,r2,-4
  80ed04:	10c00536 	bltu	r2,r3,80ed1c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80ed08:	e0bff917 	ldw	r2,-28(fp)
  80ed0c:	10800917 	ldw	r2,36(r2)
  80ed10:	10c00044 	addi	r3,r2,1
  80ed14:	e0bff917 	ldw	r2,-28(fp)
  80ed18:	10c00915 	stw	r3,36(r2)
  80ed1c:	d0a75317 	ldw	r2,-25268(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80ed20:	e037883a 	mov	sp,fp
  80ed24:	df000017 	ldw	fp,0(sp)
  80ed28:	dec00104 	addi	sp,sp,4
  80ed2c:	f800283a 	ret

0080ed30 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80ed30:	defffd04 	addi	sp,sp,-12
  80ed34:	df000215 	stw	fp,8(sp)
  80ed38:	df000204 	addi	fp,sp,8
  80ed3c:	e13ffe15 	stw	r4,-8(fp)
  80ed40:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80ed44:	00000506 	br	80ed5c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80ed48:	e0bfff17 	ldw	r2,-4(fp)
  80ed4c:	1090000c 	andi	r2,r2,16384
  80ed50:	10000226 	beq	r2,zero,80ed5c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80ed54:	00bffd44 	movi	r2,-11
  80ed58:	00000b06 	br	80ed88 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80ed5c:	e0bffe17 	ldw	r2,-8(fp)
  80ed60:	10c00d17 	ldw	r3,52(r2)
  80ed64:	e0bffe17 	ldw	r2,-8(fp)
  80ed68:	10800c17 	ldw	r2,48(r2)
  80ed6c:	18800526 	beq	r3,r2,80ed84 <altera_avalon_jtag_uart_close+0x54>
  80ed70:	e0bffe17 	ldw	r2,-8(fp)
  80ed74:	10c00917 	ldw	r3,36(r2)
  80ed78:	e0bffe17 	ldw	r2,-8(fp)
  80ed7c:	10800117 	ldw	r2,4(r2)
  80ed80:	18bff136 	bltu	r3,r2,80ed48 <__alt_data_end+0xff80ed48>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80ed84:	0005883a 	mov	r2,zero
}
  80ed88:	e037883a 	mov	sp,fp
  80ed8c:	df000017 	ldw	fp,0(sp)
  80ed90:	dec00104 	addi	sp,sp,4
  80ed94:	f800283a 	ret

0080ed98 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80ed98:	defffa04 	addi	sp,sp,-24
  80ed9c:	df000515 	stw	fp,20(sp)
  80eda0:	df000504 	addi	fp,sp,20
  80eda4:	e13ffd15 	stw	r4,-12(fp)
  80eda8:	e17ffe15 	stw	r5,-8(fp)
  80edac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80edb0:	00bff9c4 	movi	r2,-25
  80edb4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80edb8:	e0bffe17 	ldw	r2,-8(fp)
  80edbc:	10da8060 	cmpeqi	r3,r2,27137
  80edc0:	1800031e 	bne	r3,zero,80edd0 <altera_avalon_jtag_uart_ioctl+0x38>
  80edc4:	109a80a0 	cmpeqi	r2,r2,27138
  80edc8:	1000181e 	bne	r2,zero,80ee2c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80edcc:	00002906 	br	80ee74 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80edd0:	e0bffd17 	ldw	r2,-12(fp)
  80edd4:	10c00117 	ldw	r3,4(r2)
  80edd8:	00a00034 	movhi	r2,32768
  80eddc:	10bfffc4 	addi	r2,r2,-1
  80ede0:	18802126 	beq	r3,r2,80ee68 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80ede4:	e0bfff17 	ldw	r2,-4(fp)
  80ede8:	10800017 	ldw	r2,0(r2)
  80edec:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80edf0:	e0bffc17 	ldw	r2,-16(fp)
  80edf4:	10800090 	cmplti	r2,r2,2
  80edf8:	1000061e 	bne	r2,zero,80ee14 <altera_avalon_jtag_uart_ioctl+0x7c>
  80edfc:	e0fffc17 	ldw	r3,-16(fp)
  80ee00:	00a00034 	movhi	r2,32768
  80ee04:	10bfffc4 	addi	r2,r2,-1
  80ee08:	18800226 	beq	r3,r2,80ee14 <altera_avalon_jtag_uart_ioctl+0x7c>
  80ee0c:	e0bffc17 	ldw	r2,-16(fp)
  80ee10:	00000206 	br	80ee1c <altera_avalon_jtag_uart_ioctl+0x84>
  80ee14:	00a00034 	movhi	r2,32768
  80ee18:	10bfff84 	addi	r2,r2,-2
  80ee1c:	e0fffd17 	ldw	r3,-12(fp)
  80ee20:	18800115 	stw	r2,4(r3)
      rc = 0;
  80ee24:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80ee28:	00000f06 	br	80ee68 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80ee2c:	e0bffd17 	ldw	r2,-12(fp)
  80ee30:	10c00117 	ldw	r3,4(r2)
  80ee34:	00a00034 	movhi	r2,32768
  80ee38:	10bfffc4 	addi	r2,r2,-1
  80ee3c:	18800c26 	beq	r3,r2,80ee70 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80ee40:	e0bffd17 	ldw	r2,-12(fp)
  80ee44:	10c00917 	ldw	r3,36(r2)
  80ee48:	e0bffd17 	ldw	r2,-12(fp)
  80ee4c:	10800117 	ldw	r2,4(r2)
  80ee50:	1885803a 	cmpltu	r2,r3,r2
  80ee54:	10c03fcc 	andi	r3,r2,255
  80ee58:	e0bfff17 	ldw	r2,-4(fp)
  80ee5c:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80ee60:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80ee64:	00000206 	br	80ee70 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80ee68:	0001883a 	nop
  80ee6c:	00000106 	br	80ee74 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80ee70:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80ee74:	e0bffb17 	ldw	r2,-20(fp)
}
  80ee78:	e037883a 	mov	sp,fp
  80ee7c:	df000017 	ldw	fp,0(sp)
  80ee80:	dec00104 	addi	sp,sp,4
  80ee84:	f800283a 	ret

0080ee88 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80ee88:	defff304 	addi	sp,sp,-52
  80ee8c:	dfc00c15 	stw	ra,48(sp)
  80ee90:	df000b15 	stw	fp,44(sp)
  80ee94:	df000b04 	addi	fp,sp,44
  80ee98:	e13ffc15 	stw	r4,-16(fp)
  80ee9c:	e17ffd15 	stw	r5,-12(fp)
  80eea0:	e1bffe15 	stw	r6,-8(fp)
  80eea4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80eea8:	e0bffd17 	ldw	r2,-12(fp)
  80eeac:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80eeb0:	00004706 	br	80efd0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80eeb4:	e0bffc17 	ldw	r2,-16(fp)
  80eeb8:	10800a17 	ldw	r2,40(r2)
  80eebc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80eec0:	e0bffc17 	ldw	r2,-16(fp)
  80eec4:	10800b17 	ldw	r2,44(r2)
  80eec8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80eecc:	e0fff717 	ldw	r3,-36(fp)
  80eed0:	e0bff817 	ldw	r2,-32(fp)
  80eed4:	18800536 	bltu	r3,r2,80eeec <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80eed8:	e0fff717 	ldw	r3,-36(fp)
  80eedc:	e0bff817 	ldw	r2,-32(fp)
  80eee0:	1885c83a 	sub	r2,r3,r2
  80eee4:	e0bff615 	stw	r2,-40(fp)
  80eee8:	00000406 	br	80eefc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80eeec:	00c20004 	movi	r3,2048
  80eef0:	e0bff817 	ldw	r2,-32(fp)
  80eef4:	1885c83a 	sub	r2,r3,r2
  80eef8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80eefc:	e0bff617 	ldw	r2,-40(fp)
  80ef00:	10001e26 	beq	r2,zero,80ef7c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80ef04:	e0fffe17 	ldw	r3,-8(fp)
  80ef08:	e0bff617 	ldw	r2,-40(fp)
  80ef0c:	1880022e 	bgeu	r3,r2,80ef18 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80ef10:	e0bffe17 	ldw	r2,-8(fp)
  80ef14:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80ef18:	e0bffc17 	ldw	r2,-16(fp)
  80ef1c:	10c00e04 	addi	r3,r2,56
  80ef20:	e0bff817 	ldw	r2,-32(fp)
  80ef24:	1885883a 	add	r2,r3,r2
  80ef28:	e1bff617 	ldw	r6,-40(fp)
  80ef2c:	100b883a 	mov	r5,r2
  80ef30:	e13ff517 	ldw	r4,-44(fp)
  80ef34:	080a6d00 	call	80a6d0 <memcpy>
      ptr   += n;
  80ef38:	e0fff517 	ldw	r3,-44(fp)
  80ef3c:	e0bff617 	ldw	r2,-40(fp)
  80ef40:	1885883a 	add	r2,r3,r2
  80ef44:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80ef48:	e0fffe17 	ldw	r3,-8(fp)
  80ef4c:	e0bff617 	ldw	r2,-40(fp)
  80ef50:	1885c83a 	sub	r2,r3,r2
  80ef54:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ef58:	e0fff817 	ldw	r3,-32(fp)
  80ef5c:	e0bff617 	ldw	r2,-40(fp)
  80ef60:	1885883a 	add	r2,r3,r2
  80ef64:	10c1ffcc 	andi	r3,r2,2047
  80ef68:	e0bffc17 	ldw	r2,-16(fp)
  80ef6c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80ef70:	e0bffe17 	ldw	r2,-8(fp)
  80ef74:	00bfcf16 	blt	zero,r2,80eeb4 <__alt_data_end+0xff80eeb4>
  80ef78:	00000106 	br	80ef80 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80ef7c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80ef80:	e0fff517 	ldw	r3,-44(fp)
  80ef84:	e0bffd17 	ldw	r2,-12(fp)
  80ef88:	1880141e 	bne	r3,r2,80efdc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80ef8c:	e0bfff17 	ldw	r2,-4(fp)
  80ef90:	1090000c 	andi	r2,r2,16384
  80ef94:	1000131e 	bne	r2,zero,80efe4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80ef98:	0001883a 	nop
  80ef9c:	e0bffc17 	ldw	r2,-16(fp)
  80efa0:	10c00a17 	ldw	r3,40(r2)
  80efa4:	e0bff717 	ldw	r2,-36(fp)
  80efa8:	1880051e 	bne	r3,r2,80efc0 <altera_avalon_jtag_uart_read+0x138>
  80efac:	e0bffc17 	ldw	r2,-16(fp)
  80efb0:	10c00917 	ldw	r3,36(r2)
  80efb4:	e0bffc17 	ldw	r2,-16(fp)
  80efb8:	10800117 	ldw	r2,4(r2)
  80efbc:	18bff736 	bltu	r3,r2,80ef9c <__alt_data_end+0xff80ef9c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80efc0:	e0bffc17 	ldw	r2,-16(fp)
  80efc4:	10c00a17 	ldw	r3,40(r2)
  80efc8:	e0bff717 	ldw	r2,-36(fp)
  80efcc:	18800726 	beq	r3,r2,80efec <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80efd0:	e0bffe17 	ldw	r2,-8(fp)
  80efd4:	00bfb716 	blt	zero,r2,80eeb4 <__alt_data_end+0xff80eeb4>
  80efd8:	00000506 	br	80eff0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80efdc:	0001883a 	nop
  80efe0:	00000306 	br	80eff0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80efe4:	0001883a 	nop
  80efe8:	00000106 	br	80eff0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80efec:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80eff0:	e0fff517 	ldw	r3,-44(fp)
  80eff4:	e0bffd17 	ldw	r2,-12(fp)
  80eff8:	18801826 	beq	r3,r2,80f05c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80effc:	0005303a 	rdctl	r2,status
  80f000:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f004:	e0fffb17 	ldw	r3,-20(fp)
  80f008:	00bfff84 	movi	r2,-2
  80f00c:	1884703a 	and	r2,r3,r2
  80f010:	1001703a 	wrctl	status,r2
  
  return context;
  80f014:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80f018:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f01c:	e0bffc17 	ldw	r2,-16(fp)
  80f020:	10800817 	ldw	r2,32(r2)
  80f024:	10c00054 	ori	r3,r2,1
  80f028:	e0bffc17 	ldw	r2,-16(fp)
  80f02c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f030:	e0bffc17 	ldw	r2,-16(fp)
  80f034:	10800017 	ldw	r2,0(r2)
  80f038:	10800104 	addi	r2,r2,4
  80f03c:	1007883a 	mov	r3,r2
  80f040:	e0bffc17 	ldw	r2,-16(fp)
  80f044:	10800817 	ldw	r2,32(r2)
  80f048:	18800035 	stwio	r2,0(r3)
  80f04c:	e0bffa17 	ldw	r2,-24(fp)
  80f050:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f054:	e0bff917 	ldw	r2,-28(fp)
  80f058:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80f05c:	e0fff517 	ldw	r3,-44(fp)
  80f060:	e0bffd17 	ldw	r2,-12(fp)
  80f064:	18800426 	beq	r3,r2,80f078 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80f068:	e0fff517 	ldw	r3,-44(fp)
  80f06c:	e0bffd17 	ldw	r2,-12(fp)
  80f070:	1885c83a 	sub	r2,r3,r2
  80f074:	00000606 	br	80f090 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80f078:	e0bfff17 	ldw	r2,-4(fp)
  80f07c:	1090000c 	andi	r2,r2,16384
  80f080:	10000226 	beq	r2,zero,80f08c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80f084:	00bffd44 	movi	r2,-11
  80f088:	00000106 	br	80f090 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80f08c:	00bffec4 	movi	r2,-5
}
  80f090:	e037883a 	mov	sp,fp
  80f094:	dfc00117 	ldw	ra,4(sp)
  80f098:	df000017 	ldw	fp,0(sp)
  80f09c:	dec00204 	addi	sp,sp,8
  80f0a0:	f800283a 	ret

0080f0a4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80f0a4:	defff304 	addi	sp,sp,-52
  80f0a8:	dfc00c15 	stw	ra,48(sp)
  80f0ac:	df000b15 	stw	fp,44(sp)
  80f0b0:	df000b04 	addi	fp,sp,44
  80f0b4:	e13ffc15 	stw	r4,-16(fp)
  80f0b8:	e17ffd15 	stw	r5,-12(fp)
  80f0bc:	e1bffe15 	stw	r6,-8(fp)
  80f0c0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80f0c4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80f0c8:	e0bffd17 	ldw	r2,-12(fp)
  80f0cc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f0d0:	00003706 	br	80f1b0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80f0d4:	e0bffc17 	ldw	r2,-16(fp)
  80f0d8:	10800c17 	ldw	r2,48(r2)
  80f0dc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80f0e0:	e0bffc17 	ldw	r2,-16(fp)
  80f0e4:	10800d17 	ldw	r2,52(r2)
  80f0e8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80f0ec:	e0fff917 	ldw	r3,-28(fp)
  80f0f0:	e0bff517 	ldw	r2,-44(fp)
  80f0f4:	1880062e 	bgeu	r3,r2,80f110 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80f0f8:	e0fff517 	ldw	r3,-44(fp)
  80f0fc:	e0bff917 	ldw	r2,-28(fp)
  80f100:	1885c83a 	sub	r2,r3,r2
  80f104:	10bfffc4 	addi	r2,r2,-1
  80f108:	e0bff615 	stw	r2,-40(fp)
  80f10c:	00000b06 	br	80f13c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80f110:	e0bff517 	ldw	r2,-44(fp)
  80f114:	10000526 	beq	r2,zero,80f12c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80f118:	00c20004 	movi	r3,2048
  80f11c:	e0bff917 	ldw	r2,-28(fp)
  80f120:	1885c83a 	sub	r2,r3,r2
  80f124:	e0bff615 	stw	r2,-40(fp)
  80f128:	00000406 	br	80f13c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80f12c:	00c1ffc4 	movi	r3,2047
  80f130:	e0bff917 	ldw	r2,-28(fp)
  80f134:	1885c83a 	sub	r2,r3,r2
  80f138:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80f13c:	e0bff617 	ldw	r2,-40(fp)
  80f140:	10001e26 	beq	r2,zero,80f1bc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80f144:	e0fffe17 	ldw	r3,-8(fp)
  80f148:	e0bff617 	ldw	r2,-40(fp)
  80f14c:	1880022e 	bgeu	r3,r2,80f158 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80f150:	e0bffe17 	ldw	r2,-8(fp)
  80f154:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80f158:	e0bffc17 	ldw	r2,-16(fp)
  80f15c:	10c20e04 	addi	r3,r2,2104
  80f160:	e0bff917 	ldw	r2,-28(fp)
  80f164:	1885883a 	add	r2,r3,r2
  80f168:	e1bff617 	ldw	r6,-40(fp)
  80f16c:	e17ffd17 	ldw	r5,-12(fp)
  80f170:	1009883a 	mov	r4,r2
  80f174:	080a6d00 	call	80a6d0 <memcpy>
      ptr   += n;
  80f178:	e0fffd17 	ldw	r3,-12(fp)
  80f17c:	e0bff617 	ldw	r2,-40(fp)
  80f180:	1885883a 	add	r2,r3,r2
  80f184:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80f188:	e0fffe17 	ldw	r3,-8(fp)
  80f18c:	e0bff617 	ldw	r2,-40(fp)
  80f190:	1885c83a 	sub	r2,r3,r2
  80f194:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f198:	e0fff917 	ldw	r3,-28(fp)
  80f19c:	e0bff617 	ldw	r2,-40(fp)
  80f1a0:	1885883a 	add	r2,r3,r2
  80f1a4:	10c1ffcc 	andi	r3,r2,2047
  80f1a8:	e0bffc17 	ldw	r2,-16(fp)
  80f1ac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80f1b0:	e0bffe17 	ldw	r2,-8(fp)
  80f1b4:	00bfc716 	blt	zero,r2,80f0d4 <__alt_data_end+0xff80f0d4>
  80f1b8:	00000106 	br	80f1c0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80f1bc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f1c0:	0005303a 	rdctl	r2,status
  80f1c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f1c8:	e0fffb17 	ldw	r3,-20(fp)
  80f1cc:	00bfff84 	movi	r2,-2
  80f1d0:	1884703a 	and	r2,r3,r2
  80f1d4:	1001703a 	wrctl	status,r2
  
  return context;
  80f1d8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80f1dc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80f1e0:	e0bffc17 	ldw	r2,-16(fp)
  80f1e4:	10800817 	ldw	r2,32(r2)
  80f1e8:	10c00094 	ori	r3,r2,2
  80f1ec:	e0bffc17 	ldw	r2,-16(fp)
  80f1f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80f1f4:	e0bffc17 	ldw	r2,-16(fp)
  80f1f8:	10800017 	ldw	r2,0(r2)
  80f1fc:	10800104 	addi	r2,r2,4
  80f200:	1007883a 	mov	r3,r2
  80f204:	e0bffc17 	ldw	r2,-16(fp)
  80f208:	10800817 	ldw	r2,32(r2)
  80f20c:	18800035 	stwio	r2,0(r3)
  80f210:	e0bffa17 	ldw	r2,-24(fp)
  80f214:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f218:	e0bff817 	ldw	r2,-32(fp)
  80f21c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80f220:	e0bffe17 	ldw	r2,-8(fp)
  80f224:	0080100e 	bge	zero,r2,80f268 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80f228:	e0bfff17 	ldw	r2,-4(fp)
  80f22c:	1090000c 	andi	r2,r2,16384
  80f230:	1000101e 	bne	r2,zero,80f274 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80f234:	0001883a 	nop
  80f238:	e0bffc17 	ldw	r2,-16(fp)
  80f23c:	10c00d17 	ldw	r3,52(r2)
  80f240:	e0bff517 	ldw	r2,-44(fp)
  80f244:	1880051e 	bne	r3,r2,80f25c <altera_avalon_jtag_uart_write+0x1b8>
  80f248:	e0bffc17 	ldw	r2,-16(fp)
  80f24c:	10c00917 	ldw	r3,36(r2)
  80f250:	e0bffc17 	ldw	r2,-16(fp)
  80f254:	10800117 	ldw	r2,4(r2)
  80f258:	18bff736 	bltu	r3,r2,80f238 <__alt_data_end+0xff80f238>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80f25c:	e0bffc17 	ldw	r2,-16(fp)
  80f260:	10800917 	ldw	r2,36(r2)
  80f264:	1000051e 	bne	r2,zero,80f27c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80f268:	e0bffe17 	ldw	r2,-8(fp)
  80f26c:	00bfd016 	blt	zero,r2,80f1b0 <__alt_data_end+0xff80f1b0>
  80f270:	00000306 	br	80f280 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80f274:	0001883a 	nop
  80f278:	00000106 	br	80f280 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80f27c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80f280:	e0fffd17 	ldw	r3,-12(fp)
  80f284:	e0bff717 	ldw	r2,-36(fp)
  80f288:	18800426 	beq	r3,r2,80f29c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80f28c:	e0fffd17 	ldw	r3,-12(fp)
  80f290:	e0bff717 	ldw	r2,-36(fp)
  80f294:	1885c83a 	sub	r2,r3,r2
  80f298:	00000606 	br	80f2b4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80f29c:	e0bfff17 	ldw	r2,-4(fp)
  80f2a0:	1090000c 	andi	r2,r2,16384
  80f2a4:	10000226 	beq	r2,zero,80f2b0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80f2a8:	00bffd44 	movi	r2,-11
  80f2ac:	00000106 	br	80f2b4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80f2b0:	00bffec4 	movi	r2,-5
}
  80f2b4:	e037883a 	mov	sp,fp
  80f2b8:	dfc00117 	ldw	ra,4(sp)
  80f2bc:	df000017 	ldw	fp,0(sp)
  80f2c0:	dec00204 	addi	sp,sp,8
  80f2c4:	f800283a 	ret

0080f2c8 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80f2c8:	defffa04 	addi	sp,sp,-24
  80f2cc:	dfc00515 	stw	ra,20(sp)
  80f2d0:	df000415 	stw	fp,16(sp)
  80f2d4:	df000404 	addi	fp,sp,16
  80f2d8:	e13ffe15 	stw	r4,-8(fp)
  80f2dc:	2805883a 	mov	r2,r5
  80f2e0:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80f2e4:	e0bffe17 	ldw	r2,-8(fp)
  80f2e8:	10800017 	ldw	r2,0(r2)
  80f2ec:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80f2f0:	008003f4 	movhi	r2,15
  80f2f4:	10909004 	addi	r2,r2,16960
  80f2f8:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80f2fc:	e0bffe17 	ldw	r2,-8(fp)
  80f300:	10800803 	ldbu	r2,32(r2)
  80f304:	10803fcc 	andi	r2,r2,255
  80f308:	1080201c 	xori	r2,r2,128
  80f30c:	10bfe004 	addi	r2,r2,-128
  80f310:	1000151e 	bne	r2,zero,80f368 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f314:	00000906 	br	80f33c <lcd_write_command+0x74>
    if (--i == 0)
  80f318:	e0bffc17 	ldw	r2,-16(fp)
  80f31c:	10bfffc4 	addi	r2,r2,-1
  80f320:	e0bffc15 	stw	r2,-16(fp)
  80f324:	e0bffc17 	ldw	r2,-16(fp)
  80f328:	1000041e 	bne	r2,zero,80f33c <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80f32c:	e0bffe17 	ldw	r2,-8(fp)
  80f330:	00c00044 	movi	r3,1
  80f334:	10c00805 	stb	r3,32(r2)
      return;
  80f338:	00000c06 	br	80f36c <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f33c:	e0bffd17 	ldw	r2,-12(fp)
  80f340:	10800104 	addi	r2,r2,4
  80f344:	10800037 	ldwio	r2,0(r2)
  80f348:	1080200c 	andi	r2,r2,128
  80f34c:	103ff21e 	bne	r2,zero,80f318 <__alt_data_end+0xff80f318>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80f350:	01001904 	movi	r4,100
  80f354:	0811ad00 	call	811ad0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80f358:	e0bffd17 	ldw	r2,-12(fp)
  80f35c:	e0ffff03 	ldbu	r3,-4(fp)
  80f360:	10c00035 	stwio	r3,0(r2)
  80f364:	00000106 	br	80f36c <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80f368:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80f36c:	e037883a 	mov	sp,fp
  80f370:	dfc00117 	ldw	ra,4(sp)
  80f374:	df000017 	ldw	fp,0(sp)
  80f378:	dec00204 	addi	sp,sp,8
  80f37c:	f800283a 	ret

0080f380 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80f380:	defffa04 	addi	sp,sp,-24
  80f384:	dfc00515 	stw	ra,20(sp)
  80f388:	df000415 	stw	fp,16(sp)
  80f38c:	df000404 	addi	fp,sp,16
  80f390:	e13ffe15 	stw	r4,-8(fp)
  80f394:	2805883a 	mov	r2,r5
  80f398:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80f39c:	e0bffe17 	ldw	r2,-8(fp)
  80f3a0:	10800017 	ldw	r2,0(r2)
  80f3a4:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80f3a8:	008003f4 	movhi	r2,15
  80f3ac:	10909004 	addi	r2,r2,16960
  80f3b0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80f3b4:	e0bffe17 	ldw	r2,-8(fp)
  80f3b8:	10800803 	ldbu	r2,32(r2)
  80f3bc:	10803fcc 	andi	r2,r2,255
  80f3c0:	1080201c 	xori	r2,r2,128
  80f3c4:	10bfe004 	addi	r2,r2,-128
  80f3c8:	10001d1e 	bne	r2,zero,80f440 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f3cc:	00000906 	br	80f3f4 <lcd_write_data+0x74>
    if (--i == 0)
  80f3d0:	e0bffc17 	ldw	r2,-16(fp)
  80f3d4:	10bfffc4 	addi	r2,r2,-1
  80f3d8:	e0bffc15 	stw	r2,-16(fp)
  80f3dc:	e0bffc17 	ldw	r2,-16(fp)
  80f3e0:	1000041e 	bne	r2,zero,80f3f4 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  80f3e4:	e0bffe17 	ldw	r2,-8(fp)
  80f3e8:	00c00044 	movi	r3,1
  80f3ec:	10c00805 	stb	r3,32(r2)
      return;
  80f3f0:	00001406 	br	80f444 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80f3f4:	e0bffd17 	ldw	r2,-12(fp)
  80f3f8:	10800104 	addi	r2,r2,4
  80f3fc:	10800037 	ldwio	r2,0(r2)
  80f400:	1080200c 	andi	r2,r2,128
  80f404:	103ff21e 	bne	r2,zero,80f3d0 <__alt_data_end+0xff80f3d0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80f408:	01001904 	movi	r4,100
  80f40c:	0811ad00 	call	811ad0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80f410:	e0bffd17 	ldw	r2,-12(fp)
  80f414:	10800204 	addi	r2,r2,8
  80f418:	1007883a 	mov	r3,r2
  80f41c:	e0bfff03 	ldbu	r2,-4(fp)
  80f420:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80f424:	e0bffe17 	ldw	r2,-8(fp)
  80f428:	108008c3 	ldbu	r2,35(r2)
  80f42c:	10800044 	addi	r2,r2,1
  80f430:	1007883a 	mov	r3,r2
  80f434:	e0bffe17 	ldw	r2,-8(fp)
  80f438:	10c008c5 	stb	r3,35(r2)
  80f43c:	00000106 	br	80f444 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80f440:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80f444:	e037883a 	mov	sp,fp
  80f448:	dfc00117 	ldw	ra,4(sp)
  80f44c:	df000017 	ldw	fp,0(sp)
  80f450:	dec00204 	addi	sp,sp,8
  80f454:	f800283a 	ret

0080f458 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80f458:	defffc04 	addi	sp,sp,-16
  80f45c:	dfc00315 	stw	ra,12(sp)
  80f460:	df000215 	stw	fp,8(sp)
  80f464:	df000204 	addi	fp,sp,8
  80f468:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80f46c:	01400044 	movi	r5,1
  80f470:	e13fff17 	ldw	r4,-4(fp)
  80f474:	080f2c80 	call	80f2c8 <lcd_write_command>

  sp->x = 0;
  80f478:	e0bfff17 	ldw	r2,-4(fp)
  80f47c:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80f480:	e0bfff17 	ldw	r2,-4(fp)
  80f484:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80f488:	e0bfff17 	ldw	r2,-4(fp)
  80f48c:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f490:	e03ffe15 	stw	zero,-8(fp)
  80f494:	00001b06 	br	80f504 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80f498:	e0bffe17 	ldw	r2,-8(fp)
  80f49c:	108018e4 	muli	r2,r2,99
  80f4a0:	10801004 	addi	r2,r2,64
  80f4a4:	e0ffff17 	ldw	r3,-4(fp)
  80f4a8:	1885883a 	add	r2,r3,r2
  80f4ac:	01801444 	movi	r6,81
  80f4b0:	01400804 	movi	r5,32
  80f4b4:	1009883a 	mov	r4,r2
  80f4b8:	080a8180 	call	80a818 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80f4bc:	e0bffe17 	ldw	r2,-8(fp)
  80f4c0:	108018e4 	muli	r2,r2,99
  80f4c4:	10800c04 	addi	r2,r2,48
  80f4c8:	e0ffff17 	ldw	r3,-4(fp)
  80f4cc:	1885883a 	add	r2,r3,r2
  80f4d0:	01800404 	movi	r6,16
  80f4d4:	01400804 	movi	r5,32
  80f4d8:	1009883a 	mov	r4,r2
  80f4dc:	080a8180 	call	80a818 <memset>
    sp->line[y].width = 0;
  80f4e0:	e0ffff17 	ldw	r3,-4(fp)
  80f4e4:	e0bffe17 	ldw	r2,-8(fp)
  80f4e8:	108018e4 	muli	r2,r2,99
  80f4ec:	1885883a 	add	r2,r3,r2
  80f4f0:	10802444 	addi	r2,r2,145
  80f4f4:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f4f8:	e0bffe17 	ldw	r2,-8(fp)
  80f4fc:	10800044 	addi	r2,r2,1
  80f500:	e0bffe15 	stw	r2,-8(fp)
  80f504:	e0bffe17 	ldw	r2,-8(fp)
  80f508:	10800090 	cmplti	r2,r2,2
  80f50c:	103fe21e 	bne	r2,zero,80f498 <__alt_data_end+0xff80f498>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80f510:	0001883a 	nop
  80f514:	e037883a 	mov	sp,fp
  80f518:	dfc00117 	ldw	ra,4(sp)
  80f51c:	df000017 	ldw	fp,0(sp)
  80f520:	dec00204 	addi	sp,sp,8
  80f524:	f800283a 	ret

0080f528 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80f528:	defff704 	addi	sp,sp,-36
  80f52c:	dfc00815 	stw	ra,32(sp)
  80f530:	df000715 	stw	fp,28(sp)
  80f534:	df000704 	addi	fp,sp,28
  80f538:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80f53c:	e0bfff17 	ldw	r2,-4(fp)
  80f540:	10800943 	ldbu	r2,37(r2)
  80f544:	10803fcc 	andi	r2,r2,255
  80f548:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f54c:	e03ff915 	stw	zero,-28(fp)
  80f550:	00006706 	br	80f6f0 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80f554:	e0ffff17 	ldw	r3,-4(fp)
  80f558:	e0bff917 	ldw	r2,-28(fp)
  80f55c:	108018e4 	muli	r2,r2,99
  80f560:	1885883a 	add	r2,r3,r2
  80f564:	10802444 	addi	r2,r2,145
  80f568:	10800003 	ldbu	r2,0(r2)
  80f56c:	10803fcc 	andi	r2,r2,255
  80f570:	1080201c 	xori	r2,r2,128
  80f574:	10bfe004 	addi	r2,r2,-128
  80f578:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80f57c:	e0ffff17 	ldw	r3,-4(fp)
  80f580:	e0bff917 	ldw	r2,-28(fp)
  80f584:	108018e4 	muli	r2,r2,99
  80f588:	1885883a 	add	r2,r3,r2
  80f58c:	10802484 	addi	r2,r2,146
  80f590:	10800003 	ldbu	r2,0(r2)
  80f594:	10c03fcc 	andi	r3,r2,255
  80f598:	e0bffc17 	ldw	r2,-16(fp)
  80f59c:	1885383a 	mul	r2,r3,r2
  80f5a0:	1005d23a 	srai	r2,r2,8
  80f5a4:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80f5a8:	e0fffb17 	ldw	r3,-20(fp)
  80f5ac:	e0bffd17 	ldw	r2,-12(fp)
  80f5b0:	18800116 	blt	r3,r2,80f5b8 <lcd_repaint_screen+0x90>
      offset = 0;
  80f5b4:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80f5b8:	e03ffa15 	stw	zero,-24(fp)
  80f5bc:	00004606 	br	80f6d8 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80f5c0:	e0fffa17 	ldw	r3,-24(fp)
  80f5c4:	e0bffb17 	ldw	r2,-20(fp)
  80f5c8:	1885883a 	add	r2,r3,r2
  80f5cc:	e17ffd17 	ldw	r5,-12(fp)
  80f5d0:	1009883a 	mov	r4,r2
  80f5d4:	080a42c0 	call	80a42c <__modsi3>
  80f5d8:	1009883a 	mov	r4,r2
  80f5dc:	e0ffff17 	ldw	r3,-4(fp)
  80f5e0:	e0bff917 	ldw	r2,-28(fp)
  80f5e4:	108018e4 	muli	r2,r2,99
  80f5e8:	1885883a 	add	r2,r3,r2
  80f5ec:	1105883a 	add	r2,r2,r4
  80f5f0:	10801004 	addi	r2,r2,64
  80f5f4:	10800003 	ldbu	r2,0(r2)
  80f5f8:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80f5fc:	e0ffff17 	ldw	r3,-4(fp)
  80f600:	e0bff917 	ldw	r2,-28(fp)
  80f604:	108018e4 	muli	r2,r2,99
  80f608:	1887883a 	add	r3,r3,r2
  80f60c:	e0bffa17 	ldw	r2,-24(fp)
  80f610:	1885883a 	add	r2,r3,r2
  80f614:	10800c04 	addi	r2,r2,48
  80f618:	10800003 	ldbu	r2,0(r2)
  80f61c:	10c03fcc 	andi	r3,r2,255
  80f620:	18c0201c 	xori	r3,r3,128
  80f624:	18ffe004 	addi	r3,r3,-128
  80f628:	e0bffe07 	ldb	r2,-8(fp)
  80f62c:	18802726 	beq	r3,r2,80f6cc <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80f630:	e0fff917 	ldw	r3,-28(fp)
  80f634:	d0a00f04 	addi	r2,gp,-32708
  80f638:	1885883a 	add	r2,r3,r2
  80f63c:	10800003 	ldbu	r2,0(r2)
  80f640:	1007883a 	mov	r3,r2
  80f644:	e0bffa17 	ldw	r2,-24(fp)
  80f648:	1885883a 	add	r2,r3,r2
  80f64c:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80f650:	e0fffe43 	ldbu	r3,-7(fp)
  80f654:	e0bfff17 	ldw	r2,-4(fp)
  80f658:	108008c3 	ldbu	r2,35(r2)
  80f65c:	10803fcc 	andi	r2,r2,255
  80f660:	1080201c 	xori	r2,r2,128
  80f664:	10bfe004 	addi	r2,r2,-128
  80f668:	18800a26 	beq	r3,r2,80f694 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80f66c:	e0fffe43 	ldbu	r3,-7(fp)
  80f670:	00bfe004 	movi	r2,-128
  80f674:	1884b03a 	or	r2,r3,r2
  80f678:	10803fcc 	andi	r2,r2,255
  80f67c:	100b883a 	mov	r5,r2
  80f680:	e13fff17 	ldw	r4,-4(fp)
  80f684:	080f2c80 	call	80f2c8 <lcd_write_command>
          sp->address = address;
  80f688:	e0fffe43 	ldbu	r3,-7(fp)
  80f68c:	e0bfff17 	ldw	r2,-4(fp)
  80f690:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80f694:	e0bffe03 	ldbu	r2,-8(fp)
  80f698:	10803fcc 	andi	r2,r2,255
  80f69c:	100b883a 	mov	r5,r2
  80f6a0:	e13fff17 	ldw	r4,-4(fp)
  80f6a4:	080f3800 	call	80f380 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80f6a8:	e0ffff17 	ldw	r3,-4(fp)
  80f6ac:	e0bff917 	ldw	r2,-28(fp)
  80f6b0:	108018e4 	muli	r2,r2,99
  80f6b4:	1887883a 	add	r3,r3,r2
  80f6b8:	e0bffa17 	ldw	r2,-24(fp)
  80f6bc:	1885883a 	add	r2,r3,r2
  80f6c0:	10800c04 	addi	r2,r2,48
  80f6c4:	e0fffe03 	ldbu	r3,-8(fp)
  80f6c8:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80f6cc:	e0bffa17 	ldw	r2,-24(fp)
  80f6d0:	10800044 	addi	r2,r2,1
  80f6d4:	e0bffa15 	stw	r2,-24(fp)
  80f6d8:	e0bffa17 	ldw	r2,-24(fp)
  80f6dc:	10800410 	cmplti	r2,r2,16
  80f6e0:	103fb71e 	bne	r2,zero,80f5c0 <__alt_data_end+0xff80f5c0>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f6e4:	e0bff917 	ldw	r2,-28(fp)
  80f6e8:	10800044 	addi	r2,r2,1
  80f6ec:	e0bff915 	stw	r2,-28(fp)
  80f6f0:	e0bff917 	ldw	r2,-28(fp)
  80f6f4:	10800090 	cmplti	r2,r2,2
  80f6f8:	103f961e 	bne	r2,zero,80f554 <__alt_data_end+0xff80f554>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80f6fc:	0001883a 	nop
  80f700:	e037883a 	mov	sp,fp
  80f704:	dfc00117 	ldw	ra,4(sp)
  80f708:	df000017 	ldw	fp,0(sp)
  80f70c:	dec00204 	addi	sp,sp,8
  80f710:	f800283a 	ret

0080f714 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80f714:	defffc04 	addi	sp,sp,-16
  80f718:	dfc00315 	stw	ra,12(sp)
  80f71c:	df000215 	stw	fp,8(sp)
  80f720:	df000204 	addi	fp,sp,8
  80f724:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f728:	e03ffe15 	stw	zero,-8(fp)
  80f72c:	00001d06 	br	80f7a4 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80f730:	e0bffe17 	ldw	r2,-8(fp)
  80f734:	00800f16 	blt	zero,r2,80f774 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80f738:	e0bffe17 	ldw	r2,-8(fp)
  80f73c:	108018e4 	muli	r2,r2,99
  80f740:	10801004 	addi	r2,r2,64
  80f744:	e0ffff17 	ldw	r3,-4(fp)
  80f748:	1889883a 	add	r4,r3,r2
  80f74c:	e0bffe17 	ldw	r2,-8(fp)
  80f750:	10800044 	addi	r2,r2,1
  80f754:	108018e4 	muli	r2,r2,99
  80f758:	10801004 	addi	r2,r2,64
  80f75c:	e0ffff17 	ldw	r3,-4(fp)
  80f760:	1885883a 	add	r2,r3,r2
  80f764:	01801404 	movi	r6,80
  80f768:	100b883a 	mov	r5,r2
  80f76c:	080a6d00 	call	80a6d0 <memcpy>
  80f770:	00000906 	br	80f798 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80f774:	e0bffe17 	ldw	r2,-8(fp)
  80f778:	108018e4 	muli	r2,r2,99
  80f77c:	10801004 	addi	r2,r2,64
  80f780:	e0ffff17 	ldw	r3,-4(fp)
  80f784:	1885883a 	add	r2,r3,r2
  80f788:	01801404 	movi	r6,80
  80f78c:	01400804 	movi	r5,32
  80f790:	1009883a 	mov	r4,r2
  80f794:	080a8180 	call	80a818 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80f798:	e0bffe17 	ldw	r2,-8(fp)
  80f79c:	10800044 	addi	r2,r2,1
  80f7a0:	e0bffe15 	stw	r2,-8(fp)
  80f7a4:	e0bffe17 	ldw	r2,-8(fp)
  80f7a8:	10800090 	cmplti	r2,r2,2
  80f7ac:	103fe01e 	bne	r2,zero,80f730 <__alt_data_end+0xff80f730>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80f7b0:	e0bfff17 	ldw	r2,-4(fp)
  80f7b4:	10800883 	ldbu	r2,34(r2)
  80f7b8:	10bfffc4 	addi	r2,r2,-1
  80f7bc:	1007883a 	mov	r3,r2
  80f7c0:	e0bfff17 	ldw	r2,-4(fp)
  80f7c4:	10c00885 	stb	r3,34(r2)
}
  80f7c8:	0001883a 	nop
  80f7cc:	e037883a 	mov	sp,fp
  80f7d0:	dfc00117 	ldw	ra,4(sp)
  80f7d4:	df000017 	ldw	fp,0(sp)
  80f7d8:	dec00204 	addi	sp,sp,8
  80f7dc:	f800283a 	ret

0080f7e0 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80f7e0:	defff904 	addi	sp,sp,-28
  80f7e4:	dfc00615 	stw	ra,24(sp)
  80f7e8:	df000515 	stw	fp,20(sp)
  80f7ec:	df000504 	addi	fp,sp,20
  80f7f0:	e13ffe15 	stw	r4,-8(fp)
  80f7f4:	2805883a 	mov	r2,r5
  80f7f8:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80f7fc:	e03ffb15 	stw	zero,-20(fp)
  80f800:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80f804:	e0bffe17 	ldw	r2,-8(fp)
  80f808:	10800a03 	ldbu	r2,40(r2)
  80f80c:	10803fcc 	andi	r2,r2,255
  80f810:	1080201c 	xori	r2,r2,128
  80f814:	10bfe004 	addi	r2,r2,-128
  80f818:	108016d8 	cmpnei	r2,r2,91
  80f81c:	1000411e 	bne	r2,zero,80f924 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80f820:	e0bffe17 	ldw	r2,-8(fp)
  80f824:	10800a04 	addi	r2,r2,40
  80f828:	10800044 	addi	r2,r2,1
  80f82c:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80f830:	00000c06 	br	80f864 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80f834:	e0bffb17 	ldw	r2,-20(fp)
  80f838:	10c002a4 	muli	r3,r2,10
  80f83c:	e0bffd17 	ldw	r2,-12(fp)
  80f840:	11000044 	addi	r4,r2,1
  80f844:	e13ffd15 	stw	r4,-12(fp)
  80f848:	10800003 	ldbu	r2,0(r2)
  80f84c:	10803fcc 	andi	r2,r2,255
  80f850:	1080201c 	xori	r2,r2,128
  80f854:	10bfe004 	addi	r2,r2,-128
  80f858:	10bff404 	addi	r2,r2,-48
  80f85c:	1885883a 	add	r2,r3,r2
  80f860:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80f864:	d0e01117 	ldw	r3,-32700(gp)
  80f868:	e0bffd17 	ldw	r2,-12(fp)
  80f86c:	10800003 	ldbu	r2,0(r2)
  80f870:	10803fcc 	andi	r2,r2,255
  80f874:	1080201c 	xori	r2,r2,128
  80f878:	10bfe004 	addi	r2,r2,-128
  80f87c:	10800044 	addi	r2,r2,1
  80f880:	1885883a 	add	r2,r3,r2
  80f884:	10800003 	ldbu	r2,0(r2)
  80f888:	10803fcc 	andi	r2,r2,255
  80f88c:	1080010c 	andi	r2,r2,4
  80f890:	103fe81e 	bne	r2,zero,80f834 <__alt_data_end+0xff80f834>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80f894:	e0bffd17 	ldw	r2,-12(fp)
  80f898:	10800003 	ldbu	r2,0(r2)
  80f89c:	10803fcc 	andi	r2,r2,255
  80f8a0:	1080201c 	xori	r2,r2,128
  80f8a4:	10bfe004 	addi	r2,r2,-128
  80f8a8:	10800ed8 	cmpnei	r2,r2,59
  80f8ac:	10001f1e 	bne	r2,zero,80f92c <lcd_handle_escape+0x14c>
    {
      ptr++;
  80f8b0:	e0bffd17 	ldw	r2,-12(fp)
  80f8b4:	10800044 	addi	r2,r2,1
  80f8b8:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80f8bc:	00000c06 	br	80f8f0 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80f8c0:	e0bffc17 	ldw	r2,-16(fp)
  80f8c4:	10c002a4 	muli	r3,r2,10
  80f8c8:	e0bffd17 	ldw	r2,-12(fp)
  80f8cc:	11000044 	addi	r4,r2,1
  80f8d0:	e13ffd15 	stw	r4,-12(fp)
  80f8d4:	10800003 	ldbu	r2,0(r2)
  80f8d8:	10803fcc 	andi	r2,r2,255
  80f8dc:	1080201c 	xori	r2,r2,128
  80f8e0:	10bfe004 	addi	r2,r2,-128
  80f8e4:	10bff404 	addi	r2,r2,-48
  80f8e8:	1885883a 	add	r2,r3,r2
  80f8ec:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80f8f0:	d0e01117 	ldw	r3,-32700(gp)
  80f8f4:	e0bffd17 	ldw	r2,-12(fp)
  80f8f8:	10800003 	ldbu	r2,0(r2)
  80f8fc:	10803fcc 	andi	r2,r2,255
  80f900:	1080201c 	xori	r2,r2,128
  80f904:	10bfe004 	addi	r2,r2,-128
  80f908:	10800044 	addi	r2,r2,1
  80f90c:	1885883a 	add	r2,r3,r2
  80f910:	10800003 	ldbu	r2,0(r2)
  80f914:	10803fcc 	andi	r2,r2,255
  80f918:	1080010c 	andi	r2,r2,4
  80f91c:	103fe81e 	bne	r2,zero,80f8c0 <__alt_data_end+0xff80f8c0>
  80f920:	00000206 	br	80f92c <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80f924:	00bfffc4 	movi	r2,-1
  80f928:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80f92c:	e0bfff07 	ldb	r2,-4(fp)
  80f930:	10c012a0 	cmpeqi	r3,r2,74
  80f934:	1800291e 	bne	r3,zero,80f9dc <lcd_handle_escape+0x1fc>
  80f938:	10c012c8 	cmpgei	r3,r2,75
  80f93c:	1800031e 	bne	r3,zero,80f94c <lcd_handle_escape+0x16c>
  80f940:	10801220 	cmpeqi	r2,r2,72
  80f944:	1000061e 	bne	r2,zero,80f960 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80f948:	00004a06 	br	80fa74 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80f94c:	10c012e0 	cmpeqi	r3,r2,75
  80f950:	1800281e 	bne	r3,zero,80f9f4 <lcd_handle_escape+0x214>
  80f954:	108019a0 	cmpeqi	r2,r2,102
  80f958:	1000011e 	bne	r2,zero,80f960 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80f95c:	00004506 	br	80fa74 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80f960:	e0bffc17 	ldw	r2,-16(fp)
  80f964:	0080050e 	bge	zero,r2,80f97c <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  80f968:	e0bffc17 	ldw	r2,-16(fp)
  80f96c:	10bfffc4 	addi	r2,r2,-1
  80f970:	1007883a 	mov	r3,r2
  80f974:	e0bffe17 	ldw	r2,-8(fp)
  80f978:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80f97c:	e0bffb17 	ldw	r2,-20(fp)
  80f980:	0080370e 	bge	zero,r2,80fa60 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80f984:	e0bffb17 	ldw	r2,-20(fp)
  80f988:	10bfffc4 	addi	r2,r2,-1
  80f98c:	1007883a 	mov	r3,r2
  80f990:	e0bffe17 	ldw	r2,-8(fp)
  80f994:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80f998:	e0bffe17 	ldw	r2,-8(fp)
  80f99c:	10800883 	ldbu	r2,34(r2)
  80f9a0:	10803fcc 	andi	r2,r2,255
  80f9a4:	10800170 	cmpltui	r2,r2,5
  80f9a8:	1000061e 	bne	r2,zero,80f9c4 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80f9ac:	e0bffe17 	ldw	r2,-8(fp)
  80f9b0:	00c00104 	movi	r3,4
  80f9b4:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80f9b8:	00000206 	br	80f9c4 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80f9bc:	e13ffe17 	ldw	r4,-8(fp)
  80f9c0:	080f7140 	call	80f714 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80f9c4:	e0bffe17 	ldw	r2,-8(fp)
  80f9c8:	10800883 	ldbu	r2,34(r2)
  80f9cc:	10803fcc 	andi	r2,r2,255
  80f9d0:	108000e8 	cmpgeui	r2,r2,3
  80f9d4:	103ff91e 	bne	r2,zero,80f9bc <__alt_data_end+0xff80f9bc>
        lcd_scroll_up(sp);
    }
    break;
  80f9d8:	00002106 	br	80fa60 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80f9dc:	e0bffb17 	ldw	r2,-20(fp)
  80f9e0:	10800098 	cmpnei	r2,r2,2
  80f9e4:	1000201e 	bne	r2,zero,80fa68 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  80f9e8:	e13ffe17 	ldw	r4,-8(fp)
  80f9ec:	080f4580 	call	80f458 <lcd_clear_screen>
    break;
  80f9f0:	00001d06 	br	80fa68 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80f9f4:	e0bffb17 	ldw	r2,-20(fp)
  80f9f8:	00801d16 	blt	zero,r2,80fa70 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80f9fc:	e0bffe17 	ldw	r2,-8(fp)
  80fa00:	10800843 	ldbu	r2,33(r2)
  80fa04:	10803fcc 	andi	r2,r2,255
  80fa08:	10801428 	cmpgeui	r2,r2,80
  80fa0c:	1000181e 	bne	r2,zero,80fa70 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80fa10:	e0bffe17 	ldw	r2,-8(fp)
  80fa14:	10800883 	ldbu	r2,34(r2)
  80fa18:	10803fcc 	andi	r2,r2,255
  80fa1c:	108018e4 	muli	r2,r2,99
  80fa20:	10801004 	addi	r2,r2,64
  80fa24:	e0fffe17 	ldw	r3,-8(fp)
  80fa28:	1887883a 	add	r3,r3,r2
  80fa2c:	e0bffe17 	ldw	r2,-8(fp)
  80fa30:	10800843 	ldbu	r2,33(r2)
  80fa34:	10803fcc 	andi	r2,r2,255
  80fa38:	1889883a 	add	r4,r3,r2
  80fa3c:	e0bffe17 	ldw	r2,-8(fp)
  80fa40:	10800843 	ldbu	r2,33(r2)
  80fa44:	10803fcc 	andi	r2,r2,255
  80fa48:	00c01404 	movi	r3,80
  80fa4c:	1885c83a 	sub	r2,r3,r2
  80fa50:	100d883a 	mov	r6,r2
  80fa54:	01400804 	movi	r5,32
  80fa58:	080a8180 	call	80a818 <memset>
    }
    break;
  80fa5c:	00000406 	br	80fa70 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80fa60:	0001883a 	nop
  80fa64:	00000306 	br	80fa74 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  80fa68:	0001883a 	nop
  80fa6c:	00000106 	br	80fa74 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80fa70:	0001883a 	nop
  }
}
  80fa74:	0001883a 	nop
  80fa78:	e037883a 	mov	sp,fp
  80fa7c:	dfc00117 	ldw	ra,4(sp)
  80fa80:	df000017 	ldw	fp,0(sp)
  80fa84:	dec00204 	addi	sp,sp,8
  80fa88:	f800283a 	ret

0080fa8c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80fa8c:	defff304 	addi	sp,sp,-52
  80fa90:	dfc00c15 	stw	ra,48(sp)
  80fa94:	df000b15 	stw	fp,44(sp)
  80fa98:	df000b04 	addi	fp,sp,44
  80fa9c:	e13ffc15 	stw	r4,-16(fp)
  80faa0:	e17ffd15 	stw	r5,-12(fp)
  80faa4:	e1bffe15 	stw	r6,-8(fp)
  80faa8:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80faac:	e0bffe17 	ldw	r2,-8(fp)
  80fab0:	e0fffd17 	ldw	r3,-12(fp)
  80fab4:	1885883a 	add	r2,r3,r2
  80fab8:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80fabc:	e0bffc17 	ldw	r2,-16(fp)
  80fac0:	00c00044 	movi	r3,1
  80fac4:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80fac8:	00009906 	br	80fd30 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80facc:	e0bffd17 	ldw	r2,-12(fp)
  80fad0:	10800003 	ldbu	r2,0(r2)
  80fad4:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80fad8:	e0bffc17 	ldw	r2,-16(fp)
  80fadc:	10800903 	ldbu	r2,36(r2)
  80fae0:	10803fcc 	andi	r2,r2,255
  80fae4:	1080201c 	xori	r2,r2,128
  80fae8:	10bfe004 	addi	r2,r2,-128
  80faec:	10003716 	blt	r2,zero,80fbcc <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  80faf0:	e0bffc17 	ldw	r2,-16(fp)
  80faf4:	10800903 	ldbu	r2,36(r2)
  80faf8:	10803fcc 	andi	r2,r2,255
  80fafc:	1080201c 	xori	r2,r2,128
  80fb00:	10bfe004 	addi	r2,r2,-128
  80fb04:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80fb08:	e0bffa17 	ldw	r2,-24(fp)
  80fb0c:	1000031e 	bne	r2,zero,80fb1c <altera_avalon_lcd_16207_write+0x90>
  80fb10:	e0bff907 	ldb	r2,-28(fp)
  80fb14:	108016d8 	cmpnei	r2,r2,91
  80fb18:	10000d1e 	bne	r2,zero,80fb50 <altera_avalon_lcd_16207_write+0xc4>
  80fb1c:	e0bffa17 	ldw	r2,-24(fp)
  80fb20:	10001826 	beq	r2,zero,80fb84 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80fb24:	d0e01117 	ldw	r3,-32700(gp)
  80fb28:	e0bff907 	ldb	r2,-28(fp)
  80fb2c:	10800044 	addi	r2,r2,1
  80fb30:	1885883a 	add	r2,r3,r2
  80fb34:	10800003 	ldbu	r2,0(r2)
  80fb38:	10803fcc 	andi	r2,r2,255
  80fb3c:	1080010c 	andi	r2,r2,4
  80fb40:	1000101e 	bne	r2,zero,80fb84 <altera_avalon_lcd_16207_write+0xf8>
  80fb44:	e0bff907 	ldb	r2,-28(fp)
  80fb48:	10800ee0 	cmpeqi	r2,r2,59
  80fb4c:	10000d1e 	bne	r2,zero,80fb84 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80fb50:	e0fffc17 	ldw	r3,-16(fp)
  80fb54:	e0bffa17 	ldw	r2,-24(fp)
  80fb58:	1885883a 	add	r2,r3,r2
  80fb5c:	10800a04 	addi	r2,r2,40
  80fb60:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80fb64:	e0bff907 	ldb	r2,-28(fp)
  80fb68:	100b883a 	mov	r5,r2
  80fb6c:	e13ffc17 	ldw	r4,-16(fp)
  80fb70:	080f7e00 	call	80f7e0 <lcd_handle_escape>

        sp->esccount = -1;
  80fb74:	e0bffc17 	ldw	r2,-16(fp)
  80fb78:	00ffffc4 	movi	r3,-1
  80fb7c:	10c00905 	stb	r3,36(r2)
  80fb80:	00006806 	br	80fd24 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80fb84:	e0bffc17 	ldw	r2,-16(fp)
  80fb88:	10800903 	ldbu	r2,36(r2)
  80fb8c:	10803fcc 	andi	r2,r2,255
  80fb90:	108001e8 	cmpgeui	r2,r2,7
  80fb94:	1000631e 	bne	r2,zero,80fd24 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  80fb98:	e0fffc17 	ldw	r3,-16(fp)
  80fb9c:	e0bffa17 	ldw	r2,-24(fp)
  80fba0:	1885883a 	add	r2,r3,r2
  80fba4:	10800a04 	addi	r2,r2,40
  80fba8:	e0fff903 	ldbu	r3,-28(fp)
  80fbac:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80fbb0:	e0bffc17 	ldw	r2,-16(fp)
  80fbb4:	10800903 	ldbu	r2,36(r2)
  80fbb8:	10800044 	addi	r2,r2,1
  80fbbc:	1007883a 	mov	r3,r2
  80fbc0:	e0bffc17 	ldw	r2,-16(fp)
  80fbc4:	10c00905 	stb	r3,36(r2)
  80fbc8:	00005606 	br	80fd24 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80fbcc:	e0bff907 	ldb	r2,-28(fp)
  80fbd0:	108006d8 	cmpnei	r2,r2,27
  80fbd4:	1000031e 	bne	r2,zero,80fbe4 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  80fbd8:	e0bffc17 	ldw	r2,-16(fp)
  80fbdc:	10000905 	stb	zero,36(r2)
  80fbe0:	00005006 	br	80fd24 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  80fbe4:	e0bff907 	ldb	r2,-28(fp)
  80fbe8:	10800358 	cmpnei	r2,r2,13
  80fbec:	1000031e 	bne	r2,zero,80fbfc <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  80fbf0:	e0bffc17 	ldw	r2,-16(fp)
  80fbf4:	10000845 	stb	zero,33(r2)
  80fbf8:	00004a06 	br	80fd24 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  80fbfc:	e0bff907 	ldb	r2,-28(fp)
  80fc00:	10800298 	cmpnei	r2,r2,10
  80fc04:	1000101e 	bne	r2,zero,80fc48 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  80fc08:	e0bffc17 	ldw	r2,-16(fp)
  80fc0c:	10000845 	stb	zero,33(r2)
      sp->y++;
  80fc10:	e0bffc17 	ldw	r2,-16(fp)
  80fc14:	10800883 	ldbu	r2,34(r2)
  80fc18:	10800044 	addi	r2,r2,1
  80fc1c:	1007883a 	mov	r3,r2
  80fc20:	e0bffc17 	ldw	r2,-16(fp)
  80fc24:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80fc28:	e0bffc17 	ldw	r2,-16(fp)
  80fc2c:	10800883 	ldbu	r2,34(r2)
  80fc30:	10803fcc 	andi	r2,r2,255
  80fc34:	108000f0 	cmpltui	r2,r2,3
  80fc38:	10003a1e 	bne	r2,zero,80fd24 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  80fc3c:	e13ffc17 	ldw	r4,-16(fp)
  80fc40:	080f7140 	call	80f714 <lcd_scroll_up>
  80fc44:	00003706 	br	80fd24 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  80fc48:	e0bff907 	ldb	r2,-28(fp)
  80fc4c:	10800218 	cmpnei	r2,r2,8
  80fc50:	10000b1e 	bne	r2,zero,80fc80 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  80fc54:	e0bffc17 	ldw	r2,-16(fp)
  80fc58:	10800843 	ldbu	r2,33(r2)
  80fc5c:	10803fcc 	andi	r2,r2,255
  80fc60:	10003026 	beq	r2,zero,80fd24 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  80fc64:	e0bffc17 	ldw	r2,-16(fp)
  80fc68:	10800843 	ldbu	r2,33(r2)
  80fc6c:	10bfffc4 	addi	r2,r2,-1
  80fc70:	1007883a 	mov	r3,r2
  80fc74:	e0bffc17 	ldw	r2,-16(fp)
  80fc78:	10c00845 	stb	r3,33(r2)
  80fc7c:	00002906 	br	80fd24 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  80fc80:	d0e01117 	ldw	r3,-32700(gp)
  80fc84:	e0bff907 	ldb	r2,-28(fp)
  80fc88:	10800044 	addi	r2,r2,1
  80fc8c:	1885883a 	add	r2,r3,r2
  80fc90:	10800003 	ldbu	r2,0(r2)
  80fc94:	10803fcc 	andi	r2,r2,255
  80fc98:	1080201c 	xori	r2,r2,128
  80fc9c:	10bfe004 	addi	r2,r2,-128
  80fca0:	108025cc 	andi	r2,r2,151
  80fca4:	10001f26 	beq	r2,zero,80fd24 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80fca8:	e0bffc17 	ldw	r2,-16(fp)
  80fcac:	10800883 	ldbu	r2,34(r2)
  80fcb0:	10803fcc 	andi	r2,r2,255
  80fcb4:	108000b0 	cmpltui	r2,r2,2
  80fcb8:	1000021e 	bne	r2,zero,80fcc4 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  80fcbc:	e13ffc17 	ldw	r4,-16(fp)
  80fcc0:	080f7140 	call	80f714 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80fcc4:	e0bffc17 	ldw	r2,-16(fp)
  80fcc8:	10800843 	ldbu	r2,33(r2)
  80fccc:	10803fcc 	andi	r2,r2,255
  80fcd0:	10801428 	cmpgeui	r2,r2,80
  80fcd4:	10000d1e 	bne	r2,zero,80fd0c <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  80fcd8:	e0bffc17 	ldw	r2,-16(fp)
  80fcdc:	10800883 	ldbu	r2,34(r2)
  80fce0:	10c03fcc 	andi	r3,r2,255
  80fce4:	e0bffc17 	ldw	r2,-16(fp)
  80fce8:	10800843 	ldbu	r2,33(r2)
  80fcec:	10803fcc 	andi	r2,r2,255
  80fcf0:	e13ffc17 	ldw	r4,-16(fp)
  80fcf4:	18c018e4 	muli	r3,r3,99
  80fcf8:	20c7883a 	add	r3,r4,r3
  80fcfc:	1885883a 	add	r2,r3,r2
  80fd00:	10801004 	addi	r2,r2,64
  80fd04:	e0fff903 	ldbu	r3,-28(fp)
  80fd08:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80fd0c:	e0bffc17 	ldw	r2,-16(fp)
  80fd10:	10800843 	ldbu	r2,33(r2)
  80fd14:	10800044 	addi	r2,r2,1
  80fd18:	1007883a 	mov	r3,r2
  80fd1c:	e0bffc17 	ldw	r2,-16(fp)
  80fd20:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80fd24:	e0bffd17 	ldw	r2,-12(fp)
  80fd28:	10800044 	addi	r2,r2,1
  80fd2c:	e0bffd15 	stw	r2,-12(fp)
  80fd30:	e0fffd17 	ldw	r3,-12(fp)
  80fd34:	e0bff817 	ldw	r2,-32(fp)
  80fd38:	18bf6436 	bltu	r3,r2,80facc <__alt_data_end+0xff80facc>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80fd3c:	00800404 	movi	r2,16
  80fd40:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fd44:	e03ff515 	stw	zero,-44(fp)
  80fd48:	00003706 	br	80fe28 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80fd4c:	00801404 	movi	r2,80
  80fd50:	e0bff715 	stw	r2,-36(fp)
  80fd54:	00001106 	br	80fd9c <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  80fd58:	e0bff717 	ldw	r2,-36(fp)
  80fd5c:	10bfffc4 	addi	r2,r2,-1
  80fd60:	e13ffc17 	ldw	r4,-16(fp)
  80fd64:	e0fff517 	ldw	r3,-44(fp)
  80fd68:	18c018e4 	muli	r3,r3,99
  80fd6c:	20c7883a 	add	r3,r4,r3
  80fd70:	1885883a 	add	r2,r3,r2
  80fd74:	10801004 	addi	r2,r2,64
  80fd78:	10800003 	ldbu	r2,0(r2)
  80fd7c:	10803fcc 	andi	r2,r2,255
  80fd80:	1080201c 	xori	r2,r2,128
  80fd84:	10bfe004 	addi	r2,r2,-128
  80fd88:	10800820 	cmpeqi	r2,r2,32
  80fd8c:	10000626 	beq	r2,zero,80fda8 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80fd90:	e0bff717 	ldw	r2,-36(fp)
  80fd94:	10bfffc4 	addi	r2,r2,-1
  80fd98:	e0bff715 	stw	r2,-36(fp)
  80fd9c:	e0bff717 	ldw	r2,-36(fp)
  80fda0:	00bfed16 	blt	zero,r2,80fd58 <__alt_data_end+0xff80fd58>
  80fda4:	00000106 	br	80fdac <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  80fda8:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80fdac:	e0bff717 	ldw	r2,-36(fp)
  80fdb0:	10800448 	cmpgei	r2,r2,17
  80fdb4:	1000031e 	bne	r2,zero,80fdc4 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  80fdb8:	00800404 	movi	r2,16
  80fdbc:	e0bff715 	stw	r2,-36(fp)
  80fdc0:	00000306 	br	80fdd0 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  80fdc4:	e0bff717 	ldw	r2,-36(fp)
  80fdc8:	10800044 	addi	r2,r2,1
  80fdcc:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80fdd0:	e0bff717 	ldw	r2,-36(fp)
  80fdd4:	1009883a 	mov	r4,r2
  80fdd8:	e0fffc17 	ldw	r3,-16(fp)
  80fddc:	e0bff517 	ldw	r2,-44(fp)
  80fde0:	108018e4 	muli	r2,r2,99
  80fde4:	1885883a 	add	r2,r3,r2
  80fde8:	10802444 	addi	r2,r2,145
  80fdec:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  80fdf0:	e0fff617 	ldw	r3,-40(fp)
  80fdf4:	e0bff717 	ldw	r2,-36(fp)
  80fdf8:	1880020e 	bge	r3,r2,80fe04 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  80fdfc:	e0bff717 	ldw	r2,-36(fp)
  80fe00:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80fe04:	e0fffc17 	ldw	r3,-16(fp)
  80fe08:	e0bff517 	ldw	r2,-44(fp)
  80fe0c:	108018e4 	muli	r2,r2,99
  80fe10:	1885883a 	add	r2,r3,r2
  80fe14:	10802484 	addi	r2,r2,146
  80fe18:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fe1c:	e0bff517 	ldw	r2,-44(fp)
  80fe20:	10800044 	addi	r2,r2,1
  80fe24:	e0bff515 	stw	r2,-44(fp)
  80fe28:	e0bff517 	ldw	r2,-44(fp)
  80fe2c:	10800090 	cmplti	r2,r2,2
  80fe30:	103fc61e 	bne	r2,zero,80fd4c <__alt_data_end+0xff80fd4c>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80fe34:	e0bff617 	ldw	r2,-40(fp)
  80fe38:	10800448 	cmpgei	r2,r2,17
  80fe3c:	1000031e 	bne	r2,zero,80fe4c <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  80fe40:	e0bffc17 	ldw	r2,-16(fp)
  80fe44:	10000985 	stb	zero,38(r2)
  80fe48:	00002e06 	br	80ff04 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  80fe4c:	e0bff617 	ldw	r2,-40(fp)
  80fe50:	1085883a 	add	r2,r2,r2
  80fe54:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80fe58:	e0bff617 	ldw	r2,-40(fp)
  80fe5c:	1007883a 	mov	r3,r2
  80fe60:	e0bffc17 	ldw	r2,-16(fp)
  80fe64:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80fe68:	e03ff515 	stw	zero,-44(fp)
  80fe6c:	00002206 	br	80fef8 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80fe70:	e0fffc17 	ldw	r3,-16(fp)
  80fe74:	e0bff517 	ldw	r2,-44(fp)
  80fe78:	108018e4 	muli	r2,r2,99
  80fe7c:	1885883a 	add	r2,r3,r2
  80fe80:	10802444 	addi	r2,r2,145
  80fe84:	10800003 	ldbu	r2,0(r2)
  80fe88:	10803fcc 	andi	r2,r2,255
  80fe8c:	1080201c 	xori	r2,r2,128
  80fe90:	10bfe004 	addi	r2,r2,-128
  80fe94:	10800450 	cmplti	r2,r2,17
  80fe98:	1000141e 	bne	r2,zero,80feec <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80fe9c:	e0fffc17 	ldw	r3,-16(fp)
  80fea0:	e0bff517 	ldw	r2,-44(fp)
  80fea4:	108018e4 	muli	r2,r2,99
  80fea8:	1885883a 	add	r2,r3,r2
  80feac:	10802444 	addi	r2,r2,145
  80feb0:	10800003 	ldbu	r2,0(r2)
  80feb4:	10803fcc 	andi	r2,r2,255
  80feb8:	1080201c 	xori	r2,r2,128
  80febc:	10bfe004 	addi	r2,r2,-128
  80fec0:	1004923a 	slli	r2,r2,8
  80fec4:	e17ff617 	ldw	r5,-40(fp)
  80fec8:	1009883a 	mov	r4,r2
  80fecc:	080a3a80 	call	80a3a8 <__divsi3>
  80fed0:	1009883a 	mov	r4,r2
  80fed4:	e0fffc17 	ldw	r3,-16(fp)
  80fed8:	e0bff517 	ldw	r2,-44(fp)
  80fedc:	108018e4 	muli	r2,r2,99
  80fee0:	1885883a 	add	r2,r3,r2
  80fee4:	10802484 	addi	r2,r2,146
  80fee8:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80feec:	e0bff517 	ldw	r2,-44(fp)
  80fef0:	10800044 	addi	r2,r2,1
  80fef4:	e0bff515 	stw	r2,-44(fp)
  80fef8:	e0bff517 	ldw	r2,-44(fp)
  80fefc:	10800090 	cmplti	r2,r2,2
  80ff00:	103fdb1e 	bne	r2,zero,80fe70 <__alt_data_end+0xff80fe70>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80ff04:	e0bffc17 	ldw	r2,-16(fp)
  80ff08:	10800943 	ldbu	r2,37(r2)
  80ff0c:	10803fcc 	andi	r2,r2,255
  80ff10:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80ff14:	e13ffc17 	ldw	r4,-16(fp)
  80ff18:	080f5280 	call	80f528 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80ff1c:	e0bffc17 	ldw	r2,-16(fp)
  80ff20:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80ff24:	e0bffc17 	ldw	r2,-16(fp)
  80ff28:	10800943 	ldbu	r2,37(r2)
  80ff2c:	10c03fcc 	andi	r3,r2,255
  80ff30:	e0bffb17 	ldw	r2,-20(fp)
  80ff34:	18800426 	beq	r3,r2,80ff48 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80ff38:	e0bffc17 	ldw	r2,-16(fp)
  80ff3c:	00c00044 	movi	r3,1
  80ff40:	10c009c5 	stb	r3,39(r2)
  }
  80ff44:	003fef06 	br	80ff04 <__alt_data_end+0xff80ff04>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  80ff48:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80ff4c:	e0bffe17 	ldw	r2,-8(fp)
}
  80ff50:	e037883a 	mov	sp,fp
  80ff54:	dfc00117 	ldw	ra,4(sp)
  80ff58:	df000017 	ldw	fp,0(sp)
  80ff5c:	dec00204 	addi	sp,sp,8
  80ff60:	f800283a 	ret

0080ff64 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80ff64:	defffc04 	addi	sp,sp,-16
  80ff68:	dfc00315 	stw	ra,12(sp)
  80ff6c:	df000215 	stw	fp,8(sp)
  80ff70:	df000204 	addi	fp,sp,8
  80ff74:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80ff78:	e0bfff17 	ldw	r2,-4(fp)
  80ff7c:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80ff80:	e0bffe17 	ldw	r2,-8(fp)
  80ff84:	10800943 	ldbu	r2,37(r2)
  80ff88:	10803fcc 	andi	r2,r2,255
  80ff8c:	10c00044 	addi	r3,r2,1
  80ff90:	e0bffe17 	ldw	r2,-8(fp)
  80ff94:	10800983 	ldbu	r2,38(r2)
  80ff98:	10803fcc 	andi	r2,r2,255
  80ff9c:	18800316 	blt	r3,r2,80ffac <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80ffa0:	e0bffe17 	ldw	r2,-8(fp)
  80ffa4:	10000945 	stb	zero,37(r2)
  80ffa8:	00000606 	br	80ffc4 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80ffac:	e0bffe17 	ldw	r2,-8(fp)
  80ffb0:	10800943 	ldbu	r2,37(r2)
  80ffb4:	10800044 	addi	r2,r2,1
  80ffb8:	1007883a 	mov	r3,r2
  80ffbc:	e0bffe17 	ldw	r2,-8(fp)
  80ffc0:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80ffc4:	e0bffe17 	ldw	r2,-8(fp)
  80ffc8:	10800983 	ldbu	r2,38(r2)
  80ffcc:	10803fcc 	andi	r2,r2,255
  80ffd0:	10000826 	beq	r2,zero,80fff4 <alt_lcd_16207_timeout+0x90>
  80ffd4:	e0bffe17 	ldw	r2,-8(fp)
  80ffd8:	108009c3 	ldbu	r2,39(r2)
  80ffdc:	10803fcc 	andi	r2,r2,255
  80ffe0:	1080201c 	xori	r2,r2,128
  80ffe4:	10bfe004 	addi	r2,r2,-128
  80ffe8:	1000021e 	bne	r2,zero,80fff4 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80ffec:	e13ffe17 	ldw	r4,-8(fp)
  80fff0:	080f5280 	call	80f528 <lcd_repaint_screen>

  return sp->period;
  80fff4:	e0bffe17 	ldw	r2,-8(fp)
  80fff8:	10800717 	ldw	r2,28(r2)
}
  80fffc:	e037883a 	mov	sp,fp
  810000:	dfc00117 	ldw	ra,4(sp)
  810004:	df000017 	ldw	fp,0(sp)
  810008:	dec00204 	addi	sp,sp,8
  81000c:	f800283a 	ret

00810010 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  810010:	defffc04 	addi	sp,sp,-16
  810014:	dfc00315 	stw	ra,12(sp)
  810018:	df000215 	stw	fp,8(sp)
  81001c:	df000204 	addi	fp,sp,8
  810020:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  810024:	e0bfff17 	ldw	r2,-4(fp)
  810028:	10800017 	ldw	r2,0(r2)
  81002c:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  810030:	e0bfff17 	ldw	r2,-4(fp)
  810034:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  810038:	010ea604 	movi	r4,15000
  81003c:	0811ad00 	call	811ad0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810040:	e0bffe17 	ldw	r2,-8(fp)
  810044:	00c00c04 	movi	r3,48
  810048:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  81004c:	01040104 	movi	r4,4100
  810050:	0811ad00 	call	811ad0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810054:	e0bffe17 	ldw	r2,-8(fp)
  810058:	00c00c04 	movi	r3,48
  81005c:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  810060:	0100fa04 	movi	r4,1000
  810064:	0811ad00 	call	811ad0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810068:	e0bffe17 	ldw	r2,-8(fp)
  81006c:	00c00c04 	movi	r3,48
  810070:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  810074:	01400e04 	movi	r5,56
  810078:	e13fff17 	ldw	r4,-4(fp)
  81007c:	080f2c80 	call	80f2c8 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  810080:	01400204 	movi	r5,8
  810084:	e13fff17 	ldw	r4,-4(fp)
  810088:	080f2c80 	call	80f2c8 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  81008c:	e13fff17 	ldw	r4,-4(fp)
  810090:	080f4580 	call	80f458 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  810094:	01400184 	movi	r5,6
  810098:	e13fff17 	ldw	r4,-4(fp)
  81009c:	080f2c80 	call	80f2c8 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8100a0:	01400304 	movi	r5,12
  8100a4:	e13fff17 	ldw	r4,-4(fp)
  8100a8:	080f2c80 	call	80f2c8 <lcd_write_command>

  sp->esccount = -1;
  8100ac:	e0bfff17 	ldw	r2,-4(fp)
  8100b0:	00ffffc4 	movi	r3,-1
  8100b4:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  8100b8:	e0bfff17 	ldw	r2,-4(fp)
  8100bc:	10800a04 	addi	r2,r2,40
  8100c0:	01800204 	movi	r6,8
  8100c4:	000b883a 	mov	r5,zero
  8100c8:	1009883a 	mov	r4,r2
  8100cc:	080a8180 	call	80a818 <memset>

  sp->scrollpos = 0;
  8100d0:	e0bfff17 	ldw	r2,-4(fp)
  8100d4:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8100d8:	e0bfff17 	ldw	r2,-4(fp)
  8100dc:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8100e0:	e0bfff17 	ldw	r2,-4(fp)
  8100e4:	100009c5 	stb	zero,39(r2)
  8100e8:	d0a75317 	ldw	r2,-25268(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8100ec:	01400284 	movi	r5,10
  8100f0:	1009883a 	mov	r4,r2
  8100f4:	080a4a00 	call	80a4a0 <__udivsi3>
  8100f8:	1007883a 	mov	r3,r2
  8100fc:	e0bfff17 	ldw	r2,-4(fp)
  810100:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  810104:	e0bfff17 	ldw	r2,-4(fp)
  810108:	10c00104 	addi	r3,r2,4
  81010c:	e0bfff17 	ldw	r2,-4(fp)
  810110:	10800717 	ldw	r2,28(r2)
  810114:	e1ffff17 	ldw	r7,-4(fp)
  810118:	01802074 	movhi	r6,129
  81011c:	31bfd904 	addi	r6,r6,-156
  810120:	100b883a 	mov	r5,r2
  810124:	1809883a 	mov	r4,r3
  810128:	080d8cc0 	call	80d8cc <alt_alarm_start>
}
  81012c:	0001883a 	nop
  810130:	e037883a 	mov	sp,fp
  810134:	dfc00117 	ldw	ra,4(sp)
  810138:	df000017 	ldw	fp,0(sp)
  81013c:	dec00204 	addi	sp,sp,8
  810140:	f800283a 	ret

00810144 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810144:	defffa04 	addi	sp,sp,-24
  810148:	dfc00515 	stw	ra,20(sp)
  81014c:	df000415 	stw	fp,16(sp)
  810150:	df000404 	addi	fp,sp,16
  810154:	e13ffd15 	stw	r4,-12(fp)
  810158:	e17ffe15 	stw	r5,-8(fp)
  81015c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  810160:	e0bffd17 	ldw	r2,-12(fp)
  810164:	10800017 	ldw	r2,0(r2)
  810168:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  81016c:	e0bffc17 	ldw	r2,-16(fp)
  810170:	10c00a04 	addi	r3,r2,40
  810174:	e0bffd17 	ldw	r2,-12(fp)
  810178:	10800217 	ldw	r2,8(r2)
  81017c:	100f883a 	mov	r7,r2
  810180:	e1bfff17 	ldw	r6,-4(fp)
  810184:	e17ffe17 	ldw	r5,-8(fp)
  810188:	1809883a 	mov	r4,r3
  81018c:	080fa8c0 	call	80fa8c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  810190:	e037883a 	mov	sp,fp
  810194:	dfc00117 	ldw	ra,4(sp)
  810198:	df000017 	ldw	fp,0(sp)
  81019c:	dec00204 	addi	sp,sp,8
  8101a0:	f800283a 	ret

008101a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8101a4:	defff904 	addi	sp,sp,-28
  8101a8:	dfc00615 	stw	ra,24(sp)
  8101ac:	df000515 	stw	fp,20(sp)
  8101b0:	df000504 	addi	fp,sp,20
  8101b4:	e13ffe15 	stw	r4,-8(fp)
  8101b8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8101bc:	0007883a 	mov	r3,zero
  8101c0:	e0bffe17 	ldw	r2,-8(fp)
  8101c4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8101c8:	e0bffe17 	ldw	r2,-8(fp)
  8101cc:	10800104 	addi	r2,r2,4
  8101d0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8101d4:	0005303a 	rdctl	r2,status
  8101d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8101dc:	e0fffc17 	ldw	r3,-16(fp)
  8101e0:	00bfff84 	movi	r2,-2
  8101e4:	1884703a 	and	r2,r3,r2
  8101e8:	1001703a 	wrctl	status,r2
  
  return context;
  8101ec:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8101f0:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  8101f4:	080e50c0 	call	80e50c <alt_tick>
  8101f8:	e0bffb17 	ldw	r2,-20(fp)
  8101fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810200:	e0bffd17 	ldw	r2,-12(fp)
  810204:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  810208:	0001883a 	nop
  81020c:	e037883a 	mov	sp,fp
  810210:	dfc00117 	ldw	ra,4(sp)
  810214:	df000017 	ldw	fp,0(sp)
  810218:	dec00204 	addi	sp,sp,8
  81021c:	f800283a 	ret

00810220 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  810220:	defff904 	addi	sp,sp,-28
  810224:	dfc00615 	stw	ra,24(sp)
  810228:	df000515 	stw	fp,20(sp)
  81022c:	df000504 	addi	fp,sp,20
  810230:	e13ffc15 	stw	r4,-16(fp)
  810234:	e17ffd15 	stw	r5,-12(fp)
  810238:	e1bffe15 	stw	r6,-8(fp)
  81023c:	e1ffff15 	stw	r7,-4(fp)
  810240:	e0bfff17 	ldw	r2,-4(fp)
  810244:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  810248:	d0a75317 	ldw	r2,-25268(gp)
  81024c:	1000021e 	bne	r2,zero,810258 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  810250:	e0bffb17 	ldw	r2,-20(fp)
  810254:	d0a75315 	stw	r2,-25268(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  810258:	e0bffc17 	ldw	r2,-16(fp)
  81025c:	10800104 	addi	r2,r2,4
  810260:	00c001c4 	movi	r3,7
  810264:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  810268:	01802074 	movhi	r6,129
  81026c:	31806904 	addi	r6,r6,420
  810270:	e17ffc17 	ldw	r5,-16(fp)
  810274:	e13ffe17 	ldw	r4,-8(fp)
  810278:	08116fc0 	call	8116fc <alt_irq_register>
#endif  
}
  81027c:	0001883a 	nop
  810280:	e037883a 	mov	sp,fp
  810284:	dfc00117 	ldw	ra,4(sp)
  810288:	df000017 	ldw	fp,0(sp)
  81028c:	dec00204 	addi	sp,sp,8
  810290:	f800283a 	ret

00810294 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810294:	defffa04 	addi	sp,sp,-24
  810298:	dfc00515 	stw	ra,20(sp)
  81029c:	df000415 	stw	fp,16(sp)
  8102a0:	df000404 	addi	fp,sp,16
  8102a4:	e13ffd15 	stw	r4,-12(fp)
  8102a8:	e17ffe15 	stw	r5,-8(fp)
  8102ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8102b0:	e0bffd17 	ldw	r2,-12(fp)
  8102b4:	10800017 	ldw	r2,0(r2)
  8102b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8102bc:	e0bffc17 	ldw	r2,-16(fp)
  8102c0:	10c00a04 	addi	r3,r2,40
  8102c4:	e0bffd17 	ldw	r2,-12(fp)
  8102c8:	10800217 	ldw	r2,8(r2)
  8102cc:	100f883a 	mov	r7,r2
  8102d0:	e1bfff17 	ldw	r6,-4(fp)
  8102d4:	e17ffe17 	ldw	r5,-8(fp)
  8102d8:	1809883a 	mov	r4,r3
  8102dc:	08107a40 	call	8107a4 <altera_avalon_uart_read>
      fd->fd_flags);
}
  8102e0:	e037883a 	mov	sp,fp
  8102e4:	dfc00117 	ldw	ra,4(sp)
  8102e8:	df000017 	ldw	fp,0(sp)
  8102ec:	dec00204 	addi	sp,sp,8
  8102f0:	f800283a 	ret

008102f4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8102f4:	defffa04 	addi	sp,sp,-24
  8102f8:	dfc00515 	stw	ra,20(sp)
  8102fc:	df000415 	stw	fp,16(sp)
  810300:	df000404 	addi	fp,sp,16
  810304:	e13ffd15 	stw	r4,-12(fp)
  810308:	e17ffe15 	stw	r5,-8(fp)
  81030c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810310:	e0bffd17 	ldw	r2,-12(fp)
  810314:	10800017 	ldw	r2,0(r2)
  810318:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  81031c:	e0bffc17 	ldw	r2,-16(fp)
  810320:	10c00a04 	addi	r3,r2,40
  810324:	e0bffd17 	ldw	r2,-12(fp)
  810328:	10800217 	ldw	r2,8(r2)
  81032c:	100f883a 	mov	r7,r2
  810330:	e1bfff17 	ldw	r6,-4(fp)
  810334:	e17ffe17 	ldw	r5,-8(fp)
  810338:	1809883a 	mov	r4,r3
  81033c:	08109bc0 	call	8109bc <altera_avalon_uart_write>
      fd->fd_flags);
}
  810340:	e037883a 	mov	sp,fp
  810344:	dfc00117 	ldw	ra,4(sp)
  810348:	df000017 	ldw	fp,0(sp)
  81034c:	dec00204 	addi	sp,sp,8
  810350:	f800283a 	ret

00810354 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  810354:	defffc04 	addi	sp,sp,-16
  810358:	dfc00315 	stw	ra,12(sp)
  81035c:	df000215 	stw	fp,8(sp)
  810360:	df000204 	addi	fp,sp,8
  810364:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  810368:	e0bfff17 	ldw	r2,-4(fp)
  81036c:	10800017 	ldw	r2,0(r2)
  810370:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  810374:	e0bffe17 	ldw	r2,-8(fp)
  810378:	10c00a04 	addi	r3,r2,40
  81037c:	e0bfff17 	ldw	r2,-4(fp)
  810380:	10800217 	ldw	r2,8(r2)
  810384:	100b883a 	mov	r5,r2
  810388:	1809883a 	mov	r4,r3
  81038c:	08107140 	call	810714 <altera_avalon_uart_close>
}
  810390:	e037883a 	mov	sp,fp
  810394:	dfc00117 	ldw	ra,4(sp)
  810398:	df000017 	ldw	fp,0(sp)
  81039c:	dec00204 	addi	sp,sp,8
  8103a0:	f800283a 	ret

008103a4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8103a4:	defff904 	addi	sp,sp,-28
  8103a8:	dfc00615 	stw	ra,24(sp)
  8103ac:	df000515 	stw	fp,20(sp)
  8103b0:	df000504 	addi	fp,sp,20
  8103b4:	e13ffd15 	stw	r4,-12(fp)
  8103b8:	e17ffe15 	stw	r5,-8(fp)
  8103bc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  8103c0:	e0bffd17 	ldw	r2,-12(fp)
  8103c4:	10800017 	ldw	r2,0(r2)
  8103c8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8103cc:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8103d0:	1000041e 	bne	r2,zero,8103e4 <altera_avalon_uart_init+0x40>
  8103d4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8103d8:	1000021e 	bne	r2,zero,8103e4 <altera_avalon_uart_init+0x40>
  8103dc:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8103e0:	10000226 	beq	r2,zero,8103ec <altera_avalon_uart_init+0x48>
  8103e4:	00800044 	movi	r2,1
  8103e8:	00000106 	br	8103f0 <altera_avalon_uart_init+0x4c>
  8103ec:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8103f0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8103f4:	e0bffc17 	ldw	r2,-16(fp)
  8103f8:	10000d1e 	bne	r2,zero,810430 <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8103fc:	e0bffd17 	ldw	r2,-12(fp)
  810400:	00c32004 	movi	r3,3200
  810404:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  810408:	e0bffb17 	ldw	r2,-20(fp)
  81040c:	10800304 	addi	r2,r2,12
  810410:	e0fffd17 	ldw	r3,-12(fp)
  810414:	18c00117 	ldw	r3,4(r3)
  810418:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  81041c:	01802074 	movhi	r6,129
  810420:	31811204 	addi	r6,r6,1096
  810424:	e17ffd17 	ldw	r5,-12(fp)
  810428:	e13fff17 	ldw	r4,-4(fp)
  81042c:	08116fc0 	call	8116fc <alt_irq_register>
#endif  
  }
}
  810430:	0001883a 	nop
  810434:	e037883a 	mov	sp,fp
  810438:	dfc00117 	ldw	ra,4(sp)
  81043c:	df000017 	ldw	fp,0(sp)
  810440:	dec00204 	addi	sp,sp,8
  810444:	f800283a 	ret

00810448 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  810448:	defff904 	addi	sp,sp,-28
  81044c:	dfc00615 	stw	ra,24(sp)
  810450:	df000515 	stw	fp,20(sp)
  810454:	df000504 	addi	fp,sp,20
  810458:	e13ffe15 	stw	r4,-8(fp)
  81045c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  810460:	e0bffe17 	ldw	r2,-8(fp)
  810464:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  810468:	e0bffb17 	ldw	r2,-20(fp)
  81046c:	10800017 	ldw	r2,0(r2)
  810470:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  810474:	e0bffc17 	ldw	r2,-16(fp)
  810478:	10800204 	addi	r2,r2,8
  81047c:	10800037 	ldwio	r2,0(r2)
  810480:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  810484:	e0bffc17 	ldw	r2,-16(fp)
  810488:	10800204 	addi	r2,r2,8
  81048c:	0007883a 	mov	r3,zero
  810490:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  810494:	e0bffc17 	ldw	r2,-16(fp)
  810498:	10800204 	addi	r2,r2,8
  81049c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8104a0:	e0bffd17 	ldw	r2,-12(fp)
  8104a4:	1080200c 	andi	r2,r2,128
  8104a8:	10000326 	beq	r2,zero,8104b8 <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  8104ac:	e17ffd17 	ldw	r5,-12(fp)
  8104b0:	e13ffb17 	ldw	r4,-20(fp)
  8104b4:	08104e80 	call	8104e8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8104b8:	e0bffd17 	ldw	r2,-12(fp)
  8104bc:	1081100c 	andi	r2,r2,1088
  8104c0:	10000326 	beq	r2,zero,8104d0 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8104c4:	e17ffd17 	ldw	r5,-12(fp)
  8104c8:	e13ffb17 	ldw	r4,-20(fp)
  8104cc:	08105cc0 	call	8105cc <altera_avalon_uart_txirq>
  }
  

}
  8104d0:	0001883a 	nop
  8104d4:	e037883a 	mov	sp,fp
  8104d8:	dfc00117 	ldw	ra,4(sp)
  8104dc:	df000017 	ldw	fp,0(sp)
  8104e0:	dec00204 	addi	sp,sp,8
  8104e4:	f800283a 	ret

008104e8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8104e8:	defffc04 	addi	sp,sp,-16
  8104ec:	df000315 	stw	fp,12(sp)
  8104f0:	df000304 	addi	fp,sp,12
  8104f4:	e13ffe15 	stw	r4,-8(fp)
  8104f8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8104fc:	e0bfff17 	ldw	r2,-4(fp)
  810500:	108000cc 	andi	r2,r2,3
  810504:	10002c1e 	bne	r2,zero,8105b8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  810508:	e0bffe17 	ldw	r2,-8(fp)
  81050c:	10800317 	ldw	r2,12(r2)
  810510:	e0bffe17 	ldw	r2,-8(fp)
  810514:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  810518:	e0bffe17 	ldw	r2,-8(fp)
  81051c:	10800317 	ldw	r2,12(r2)
  810520:	10800044 	addi	r2,r2,1
  810524:	10800fcc 	andi	r2,r2,63
  810528:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  81052c:	e0bffe17 	ldw	r2,-8(fp)
  810530:	10800317 	ldw	r2,12(r2)
  810534:	e0fffe17 	ldw	r3,-8(fp)
  810538:	18c00017 	ldw	r3,0(r3)
  81053c:	18c00037 	ldwio	r3,0(r3)
  810540:	1809883a 	mov	r4,r3
  810544:	e0fffe17 	ldw	r3,-8(fp)
  810548:	1885883a 	add	r2,r3,r2
  81054c:	10800704 	addi	r2,r2,28
  810550:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  810554:	e0bffe17 	ldw	r2,-8(fp)
  810558:	e0fffd17 	ldw	r3,-12(fp)
  81055c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  810560:	e0bffe17 	ldw	r2,-8(fp)
  810564:	10800317 	ldw	r2,12(r2)
  810568:	10800044 	addi	r2,r2,1
  81056c:	10800fcc 	andi	r2,r2,63
  810570:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  810574:	e0bffe17 	ldw	r2,-8(fp)
  810578:	10c00217 	ldw	r3,8(r2)
  81057c:	e0bffd17 	ldw	r2,-12(fp)
  810580:	18800e1e 	bne	r3,r2,8105bc <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  810584:	e0bffe17 	ldw	r2,-8(fp)
  810588:	10c00117 	ldw	r3,4(r2)
  81058c:	00bfdfc4 	movi	r2,-129
  810590:	1886703a 	and	r3,r3,r2
  810594:	e0bffe17 	ldw	r2,-8(fp)
  810598:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  81059c:	e0bffe17 	ldw	r2,-8(fp)
  8105a0:	10800017 	ldw	r2,0(r2)
  8105a4:	10800304 	addi	r2,r2,12
  8105a8:	e0fffe17 	ldw	r3,-8(fp)
  8105ac:	18c00117 	ldw	r3,4(r3)
  8105b0:	10c00035 	stwio	r3,0(r2)
  8105b4:	00000106 	br	8105bc <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  8105b8:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  8105bc:	e037883a 	mov	sp,fp
  8105c0:	df000017 	ldw	fp,0(sp)
  8105c4:	dec00104 	addi	sp,sp,4
  8105c8:	f800283a 	ret

008105cc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8105cc:	defffb04 	addi	sp,sp,-20
  8105d0:	df000415 	stw	fp,16(sp)
  8105d4:	df000404 	addi	fp,sp,16
  8105d8:	e13ffc15 	stw	r4,-16(fp)
  8105dc:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8105e0:	e0bffc17 	ldw	r2,-16(fp)
  8105e4:	10c00417 	ldw	r3,16(r2)
  8105e8:	e0bffc17 	ldw	r2,-16(fp)
  8105ec:	10800517 	ldw	r2,20(r2)
  8105f0:	18803226 	beq	r3,r2,8106bc <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8105f4:	e0bffc17 	ldw	r2,-16(fp)
  8105f8:	10800617 	ldw	r2,24(r2)
  8105fc:	1080008c 	andi	r2,r2,2
  810600:	10000326 	beq	r2,zero,810610 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  810604:	e0bffd17 	ldw	r2,-12(fp)
  810608:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  81060c:	10001d26 	beq	r2,zero,810684 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  810610:	e0bffc17 	ldw	r2,-16(fp)
  810614:	10800417 	ldw	r2,16(r2)
  810618:	e0bffc17 	ldw	r2,-16(fp)
  81061c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  810620:	e0bffc17 	ldw	r2,-16(fp)
  810624:	10800017 	ldw	r2,0(r2)
  810628:	10800104 	addi	r2,r2,4
  81062c:	e0fffc17 	ldw	r3,-16(fp)
  810630:	18c00417 	ldw	r3,16(r3)
  810634:	e13ffc17 	ldw	r4,-16(fp)
  810638:	20c7883a 	add	r3,r4,r3
  81063c:	18c01704 	addi	r3,r3,92
  810640:	18c00003 	ldbu	r3,0(r3)
  810644:	18c03fcc 	andi	r3,r3,255
  810648:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  81064c:	e0bffc17 	ldw	r2,-16(fp)
  810650:	10800417 	ldw	r2,16(r2)
  810654:	10800044 	addi	r2,r2,1
  810658:	e0fffc17 	ldw	r3,-16(fp)
  81065c:	18800415 	stw	r2,16(r3)
  810660:	10c00fcc 	andi	r3,r2,63
  810664:	e0bffc17 	ldw	r2,-16(fp)
  810668:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  81066c:	e0bffc17 	ldw	r2,-16(fp)
  810670:	10800117 	ldw	r2,4(r2)
  810674:	10c01014 	ori	r3,r2,64
  810678:	e0bffc17 	ldw	r2,-16(fp)
  81067c:	10c00115 	stw	r3,4(r2)
  810680:	00000e06 	br	8106bc <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  810684:	e0bffc17 	ldw	r2,-16(fp)
  810688:	10800017 	ldw	r2,0(r2)
  81068c:	10800204 	addi	r2,r2,8
  810690:	10800037 	ldwio	r2,0(r2)
  810694:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  810698:	e0bffd17 	ldw	r2,-12(fp)
  81069c:	1082000c 	andi	r2,r2,2048
  8106a0:	1000061e 	bne	r2,zero,8106bc <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8106a4:	e0bffc17 	ldw	r2,-16(fp)
  8106a8:	10c00117 	ldw	r3,4(r2)
  8106ac:	00bfefc4 	movi	r2,-65
  8106b0:	1886703a 	and	r3,r3,r2
  8106b4:	e0bffc17 	ldw	r2,-16(fp)
  8106b8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8106bc:	e0bffc17 	ldw	r2,-16(fp)
  8106c0:	10c00417 	ldw	r3,16(r2)
  8106c4:	e0bffc17 	ldw	r2,-16(fp)
  8106c8:	10800517 	ldw	r2,20(r2)
  8106cc:	1880061e 	bne	r3,r2,8106e8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8106d0:	e0bffc17 	ldw	r2,-16(fp)
  8106d4:	10c00117 	ldw	r3,4(r2)
  8106d8:	00beefc4 	movi	r2,-1089
  8106dc:	1886703a 	and	r3,r3,r2
  8106e0:	e0bffc17 	ldw	r2,-16(fp)
  8106e4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8106e8:	e0bffc17 	ldw	r2,-16(fp)
  8106ec:	10800017 	ldw	r2,0(r2)
  8106f0:	10800304 	addi	r2,r2,12
  8106f4:	e0fffc17 	ldw	r3,-16(fp)
  8106f8:	18c00117 	ldw	r3,4(r3)
  8106fc:	10c00035 	stwio	r3,0(r2)
}
  810700:	0001883a 	nop
  810704:	e037883a 	mov	sp,fp
  810708:	df000017 	ldw	fp,0(sp)
  81070c:	dec00104 	addi	sp,sp,4
  810710:	f800283a 	ret

00810714 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  810714:	defffd04 	addi	sp,sp,-12
  810718:	df000215 	stw	fp,8(sp)
  81071c:	df000204 	addi	fp,sp,8
  810720:	e13ffe15 	stw	r4,-8(fp)
  810724:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  810728:	00000506 	br	810740 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  81072c:	e0bfff17 	ldw	r2,-4(fp)
  810730:	1090000c 	andi	r2,r2,16384
  810734:	10000226 	beq	r2,zero,810740 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  810738:	00bffd44 	movi	r2,-11
  81073c:	00000606 	br	810758 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  810740:	e0bffe17 	ldw	r2,-8(fp)
  810744:	10c00417 	ldw	r3,16(r2)
  810748:	e0bffe17 	ldw	r2,-8(fp)
  81074c:	10800517 	ldw	r2,20(r2)
  810750:	18bff61e 	bne	r3,r2,81072c <__alt_data_end+0xff81072c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  810754:	0005883a 	mov	r2,zero
}
  810758:	e037883a 	mov	sp,fp
  81075c:	df000017 	ldw	fp,0(sp)
  810760:	dec00104 	addi	sp,sp,4
  810764:	f800283a 	ret

00810768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810768:	defffe04 	addi	sp,sp,-8
  81076c:	dfc00115 	stw	ra,4(sp)
  810770:	df000015 	stw	fp,0(sp)
  810774:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810778:	d0a00b17 	ldw	r2,-32724(gp)
  81077c:	10000326 	beq	r2,zero,81078c <alt_get_errno+0x24>
  810780:	d0a00b17 	ldw	r2,-32724(gp)
  810784:	103ee83a 	callr	r2
  810788:	00000106 	br	810790 <alt_get_errno+0x28>
  81078c:	d0a74f04 	addi	r2,gp,-25284
}
  810790:	e037883a 	mov	sp,fp
  810794:	dfc00117 	ldw	ra,4(sp)
  810798:	df000017 	ldw	fp,0(sp)
  81079c:	dec00204 	addi	sp,sp,8
  8107a0:	f800283a 	ret

008107a4 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8107a4:	defff204 	addi	sp,sp,-56
  8107a8:	dfc00d15 	stw	ra,52(sp)
  8107ac:	df000c15 	stw	fp,48(sp)
  8107b0:	df000c04 	addi	fp,sp,48
  8107b4:	e13ffc15 	stw	r4,-16(fp)
  8107b8:	e17ffd15 	stw	r5,-12(fp)
  8107bc:	e1bffe15 	stw	r6,-8(fp)
  8107c0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  8107c4:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  8107c8:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  8107cc:	e0bfff17 	ldw	r2,-4(fp)
  8107d0:	1090000c 	andi	r2,r2,16384
  8107d4:	1005003a 	cmpeq	r2,r2,zero
  8107d8:	10803fcc 	andi	r2,r2,255
  8107dc:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8107e0:	00001306 	br	810830 <altera_avalon_uart_read+0x8c>
    {
      count++;
  8107e4:	e0bff517 	ldw	r2,-44(fp)
  8107e8:	10800044 	addi	r2,r2,1
  8107ec:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8107f0:	e0bffd17 	ldw	r2,-12(fp)
  8107f4:	10c00044 	addi	r3,r2,1
  8107f8:	e0fffd15 	stw	r3,-12(fp)
  8107fc:	e0fffc17 	ldw	r3,-16(fp)
  810800:	18c00217 	ldw	r3,8(r3)
  810804:	e13ffc17 	ldw	r4,-16(fp)
  810808:	20c7883a 	add	r3,r4,r3
  81080c:	18c00704 	addi	r3,r3,28
  810810:	18c00003 	ldbu	r3,0(r3)
  810814:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  810818:	e0bffc17 	ldw	r2,-16(fp)
  81081c:	10800217 	ldw	r2,8(r2)
  810820:	10800044 	addi	r2,r2,1
  810824:	10c00fcc 	andi	r3,r2,63
  810828:	e0bffc17 	ldw	r2,-16(fp)
  81082c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  810830:	e0fff517 	ldw	r3,-44(fp)
  810834:	e0bffe17 	ldw	r2,-8(fp)
  810838:	1880050e 	bge	r3,r2,810850 <altera_avalon_uart_read+0xac>
  81083c:	e0bffc17 	ldw	r2,-16(fp)
  810840:	10c00217 	ldw	r3,8(r2)
  810844:	e0bffc17 	ldw	r2,-16(fp)
  810848:	10800317 	ldw	r2,12(r2)
  81084c:	18bfe51e 	bne	r3,r2,8107e4 <__alt_data_end+0xff8107e4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  810850:	e0bff517 	ldw	r2,-44(fp)
  810854:	1000251e 	bne	r2,zero,8108ec <altera_avalon_uart_read+0x148>
  810858:	e0bffc17 	ldw	r2,-16(fp)
  81085c:	10c00217 	ldw	r3,8(r2)
  810860:	e0bffc17 	ldw	r2,-16(fp)
  810864:	10800317 	ldw	r2,12(r2)
  810868:	1880201e 	bne	r3,r2,8108ec <altera_avalon_uart_read+0x148>
    {
      if (!block)
  81086c:	e0bff617 	ldw	r2,-40(fp)
  810870:	1000071e 	bne	r2,zero,810890 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  810874:	08107680 	call	810768 <alt_get_errno>
  810878:	1007883a 	mov	r3,r2
  81087c:	008002c4 	movi	r2,11
  810880:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  810884:	00800044 	movi	r2,1
  810888:	e0bff405 	stb	r2,-48(fp)
        break;
  81088c:	00001b06 	br	8108fc <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810890:	0005303a 	rdctl	r2,status
  810894:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810898:	e0fff917 	ldw	r3,-28(fp)
  81089c:	00bfff84 	movi	r2,-2
  8108a0:	1884703a 	and	r2,r3,r2
  8108a4:	1001703a 	wrctl	status,r2
  
  return context;
  8108a8:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  8108ac:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8108b0:	e0bffc17 	ldw	r2,-16(fp)
  8108b4:	10800117 	ldw	r2,4(r2)
  8108b8:	10c02014 	ori	r3,r2,128
  8108bc:	e0bffc17 	ldw	r2,-16(fp)
  8108c0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8108c4:	e0bffc17 	ldw	r2,-16(fp)
  8108c8:	10800017 	ldw	r2,0(r2)
  8108cc:	10800304 	addi	r2,r2,12
  8108d0:	e0fffc17 	ldw	r3,-16(fp)
  8108d4:	18c00117 	ldw	r3,4(r3)
  8108d8:	10c00035 	stwio	r3,0(r2)
  8108dc:	e0bff817 	ldw	r2,-32(fp)
  8108e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8108e4:	e0bffa17 	ldw	r2,-24(fp)
  8108e8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8108ec:	e0bff517 	ldw	r2,-44(fp)
  8108f0:	1000021e 	bne	r2,zero,8108fc <altera_avalon_uart_read+0x158>
  8108f4:	e0bffe17 	ldw	r2,-8(fp)
  8108f8:	103fcd1e 	bne	r2,zero,810830 <__alt_data_end+0xff810830>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8108fc:	0005303a 	rdctl	r2,status
  810900:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810904:	e0fffb17 	ldw	r3,-20(fp)
  810908:	00bfff84 	movi	r2,-2
  81090c:	1884703a 	and	r2,r3,r2
  810910:	1001703a 	wrctl	status,r2
  
  return context;
  810914:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  810918:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  81091c:	e0bffc17 	ldw	r2,-16(fp)
  810920:	10800117 	ldw	r2,4(r2)
  810924:	10c02014 	ori	r3,r2,128
  810928:	e0bffc17 	ldw	r2,-16(fp)
  81092c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810930:	e0bffc17 	ldw	r2,-16(fp)
  810934:	10800017 	ldw	r2,0(r2)
  810938:	10800304 	addi	r2,r2,12
  81093c:	e0fffc17 	ldw	r3,-16(fp)
  810940:	18c00117 	ldw	r3,4(r3)
  810944:	10c00035 	stwio	r3,0(r2)
  810948:	e0bff817 	ldw	r2,-32(fp)
  81094c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810950:	e0bff717 	ldw	r2,-36(fp)
  810954:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  810958:	e0bff403 	ldbu	r2,-48(fp)
  81095c:	10000226 	beq	r2,zero,810968 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  810960:	00bffd44 	movi	r2,-11
  810964:	00000106 	br	81096c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  810968:	e0bff517 	ldw	r2,-44(fp)
  }
}
  81096c:	e037883a 	mov	sp,fp
  810970:	dfc00117 	ldw	ra,4(sp)
  810974:	df000017 	ldw	fp,0(sp)
  810978:	dec00204 	addi	sp,sp,8
  81097c:	f800283a 	ret

00810980 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810980:	defffe04 	addi	sp,sp,-8
  810984:	dfc00115 	stw	ra,4(sp)
  810988:	df000015 	stw	fp,0(sp)
  81098c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810990:	d0a00b17 	ldw	r2,-32724(gp)
  810994:	10000326 	beq	r2,zero,8109a4 <alt_get_errno+0x24>
  810998:	d0a00b17 	ldw	r2,-32724(gp)
  81099c:	103ee83a 	callr	r2
  8109a0:	00000106 	br	8109a8 <alt_get_errno+0x28>
  8109a4:	d0a74f04 	addi	r2,gp,-25284
}
  8109a8:	e037883a 	mov	sp,fp
  8109ac:	dfc00117 	ldw	ra,4(sp)
  8109b0:	df000017 	ldw	fp,0(sp)
  8109b4:	dec00204 	addi	sp,sp,8
  8109b8:	f800283a 	ret

008109bc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  8109bc:	defff204 	addi	sp,sp,-56
  8109c0:	dfc00d15 	stw	ra,52(sp)
  8109c4:	df000c15 	stw	fp,48(sp)
  8109c8:	df000c04 	addi	fp,sp,48
  8109cc:	e13ffc15 	stw	r4,-16(fp)
  8109d0:	e17ffd15 	stw	r5,-12(fp)
  8109d4:	e1bffe15 	stw	r6,-8(fp)
  8109d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8109dc:	e0bffe17 	ldw	r2,-8(fp)
  8109e0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8109e4:	e0bfff17 	ldw	r2,-4(fp)
  8109e8:	1090000c 	andi	r2,r2,16384
  8109ec:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8109f0:	00003c06 	br	810ae4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8109f4:	e0bffc17 	ldw	r2,-16(fp)
  8109f8:	10800517 	ldw	r2,20(r2)
  8109fc:	10800044 	addi	r2,r2,1
  810a00:	10800fcc 	andi	r2,r2,63
  810a04:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  810a08:	e0bffc17 	ldw	r2,-16(fp)
  810a0c:	10c00417 	ldw	r3,16(r2)
  810a10:	e0bff717 	ldw	r2,-36(fp)
  810a14:	1880221e 	bne	r3,r2,810aa0 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  810a18:	e0bff517 	ldw	r2,-44(fp)
  810a1c:	10000526 	beq	r2,zero,810a34 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  810a20:	08109800 	call	810980 <alt_get_errno>
  810a24:	1007883a 	mov	r3,r2
  810a28:	008002c4 	movi	r2,11
  810a2c:	18800015 	stw	r2,0(r3)
        break;
  810a30:	00002e06 	br	810aec <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810a34:	0005303a 	rdctl	r2,status
  810a38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a3c:	e0fff917 	ldw	r3,-28(fp)
  810a40:	00bfff84 	movi	r2,-2
  810a44:	1884703a 	and	r2,r3,r2
  810a48:	1001703a 	wrctl	status,r2
  
  return context;
  810a4c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  810a50:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  810a54:	e0bffc17 	ldw	r2,-16(fp)
  810a58:	10800117 	ldw	r2,4(r2)
  810a5c:	10c11014 	ori	r3,r2,1088
  810a60:	e0bffc17 	ldw	r2,-16(fp)
  810a64:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810a68:	e0bffc17 	ldw	r2,-16(fp)
  810a6c:	10800017 	ldw	r2,0(r2)
  810a70:	10800304 	addi	r2,r2,12
  810a74:	e0fffc17 	ldw	r3,-16(fp)
  810a78:	18c00117 	ldw	r3,4(r3)
  810a7c:	10c00035 	stwio	r3,0(r2)
  810a80:	e0bff817 	ldw	r2,-32(fp)
  810a84:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a88:	e0bff617 	ldw	r2,-40(fp)
  810a8c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  810a90:	e0bffc17 	ldw	r2,-16(fp)
  810a94:	10c00417 	ldw	r3,16(r2)
  810a98:	e0bff717 	ldw	r2,-36(fp)
  810a9c:	18bffc26 	beq	r3,r2,810a90 <__alt_data_end+0xff810a90>
      }
    }

    count--;
  810aa0:	e0bff417 	ldw	r2,-48(fp)
  810aa4:	10bfffc4 	addi	r2,r2,-1
  810aa8:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  810aac:	e0bffc17 	ldw	r2,-16(fp)
  810ab0:	10c00517 	ldw	r3,20(r2)
  810ab4:	e0bffd17 	ldw	r2,-12(fp)
  810ab8:	11000044 	addi	r4,r2,1
  810abc:	e13ffd15 	stw	r4,-12(fp)
  810ac0:	10800003 	ldbu	r2,0(r2)
  810ac4:	1009883a 	mov	r4,r2
  810ac8:	e0bffc17 	ldw	r2,-16(fp)
  810acc:	10c5883a 	add	r2,r2,r3
  810ad0:	10801704 	addi	r2,r2,92
  810ad4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  810ad8:	e0bffc17 	ldw	r2,-16(fp)
  810adc:	e0fff717 	ldw	r3,-36(fp)
  810ae0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  810ae4:	e0bff417 	ldw	r2,-48(fp)
  810ae8:	103fc21e 	bne	r2,zero,8109f4 <__alt_data_end+0xff8109f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810aec:	0005303a 	rdctl	r2,status
  810af0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810af4:	e0fffb17 	ldw	r3,-20(fp)
  810af8:	00bfff84 	movi	r2,-2
  810afc:	1884703a 	and	r2,r3,r2
  810b00:	1001703a 	wrctl	status,r2
  
  return context;
  810b04:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  810b08:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  810b0c:	e0bffc17 	ldw	r2,-16(fp)
  810b10:	10800117 	ldw	r2,4(r2)
  810b14:	10c11014 	ori	r3,r2,1088
  810b18:	e0bffc17 	ldw	r2,-16(fp)
  810b1c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  810b20:	e0bffc17 	ldw	r2,-16(fp)
  810b24:	10800017 	ldw	r2,0(r2)
  810b28:	10800304 	addi	r2,r2,12
  810b2c:	e0fffc17 	ldw	r3,-16(fp)
  810b30:	18c00117 	ldw	r3,4(r3)
  810b34:	10c00035 	stwio	r3,0(r2)
  810b38:	e0bff817 	ldw	r2,-32(fp)
  810b3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810b40:	e0bffa17 	ldw	r2,-24(fp)
  810b44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  810b48:	e0fffe17 	ldw	r3,-8(fp)
  810b4c:	e0bff417 	ldw	r2,-48(fp)
  810b50:	1885c83a 	sub	r2,r3,r2
}
  810b54:	e037883a 	mov	sp,fp
  810b58:	dfc00117 	ldw	ra,4(sp)
  810b5c:	df000017 	ldw	fp,0(sp)
  810b60:	dec00204 	addi	sp,sp,8
  810b64:	f800283a 	ret

00810b68 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  810b68:	defffc04 	addi	sp,sp,-16
  810b6c:	dfc00315 	stw	ra,12(sp)
  810b70:	df000215 	stw	fp,8(sp)
  810b74:	df000204 	addi	fp,sp,8
  810b78:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  810b7c:	d1600804 	addi	r5,gp,-32736
  810b80:	e13fff17 	ldw	r4,-4(fp)
  810b84:	08114f80 	call	8114f8 <alt_find_dev>
  810b88:	e0bffe15 	stw	r2,-8(fp)
  return dev;
  810b8c:	e0bffe17 	ldw	r2,-8(fp)
}
  810b90:	e037883a 	mov	sp,fp
  810b94:	dfc00117 	ldw	ra,4(sp)
  810b98:	df000017 	ldw	fp,0(sp)
  810b9c:	dec00204 	addi	sp,sp,8
  810ba0:	f800283a 	ret

00810ba4 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  810ba4:	defffd04 	addi	sp,sp,-12
  810ba8:	df000215 	stw	fp,8(sp)
  810bac:	df000204 	addi	fp,sp,8
  810bb0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  810bb4:	e0bfff17 	ldw	r2,-4(fp)
  810bb8:	10800a17 	ldw	r2,40(r2)
  810bbc:	10800037 	ldwio	r2,0(r2)
  810bc0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  810bc4:	e0bffe17 	ldw	r2,-8(fp)
  810bc8:	10800054 	ori	r2,r2,1
  810bcc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  810bd0:	e0bfff17 	ldw	r2,-4(fp)
  810bd4:	10800a17 	ldw	r2,40(r2)
  810bd8:	1007883a 	mov	r3,r2
  810bdc:	e0bffe17 	ldw	r2,-8(fp)
  810be0:	18800035 	stwio	r2,0(r3)
}
  810be4:	0001883a 	nop
  810be8:	e037883a 	mov	sp,fp
  810bec:	df000017 	ldw	fp,0(sp)
  810bf0:	dec00104 	addi	sp,sp,4
  810bf4:	f800283a 	ret

00810bf8 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  810bf8:	defffd04 	addi	sp,sp,-12
  810bfc:	df000215 	stw	fp,8(sp)
  810c00:	df000204 	addi	fp,sp,8
  810c04:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  810c08:	e0bfff17 	ldw	r2,-4(fp)
  810c0c:	10800a17 	ldw	r2,40(r2)
  810c10:	10800037 	ldwio	r2,0(r2)
  810c14:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  810c18:	e0fffe17 	ldw	r3,-8(fp)
  810c1c:	00bfff84 	movi	r2,-2
  810c20:	1884703a 	and	r2,r3,r2
  810c24:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  810c28:	e0bfff17 	ldw	r2,-4(fp)
  810c2c:	10800a17 	ldw	r2,40(r2)
  810c30:	1007883a 	mov	r3,r2
  810c34:	e0bffe17 	ldw	r2,-8(fp)
  810c38:	18800035 	stwio	r2,0(r3)
}
  810c3c:	0001883a 	nop
  810c40:	e037883a 	mov	sp,fp
  810c44:	df000017 	ldw	fp,0(sp)
  810c48:	dec00104 	addi	sp,sp,4
  810c4c:	f800283a 	ret

00810c50 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  810c50:	defffd04 	addi	sp,sp,-12
  810c54:	df000215 	stw	fp,8(sp)
  810c58:	df000204 	addi	fp,sp,8
  810c5c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  810c60:	e0bfff17 	ldw	r2,-4(fp)
  810c64:	10800a17 	ldw	r2,40(r2)
  810c68:	10800037 	ldwio	r2,0(r2)
  810c6c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  810c70:	e0bffe17 	ldw	r2,-8(fp)
  810c74:	10800094 	ori	r2,r2,2
  810c78:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  810c7c:	e0bfff17 	ldw	r2,-4(fp)
  810c80:	10800a17 	ldw	r2,40(r2)
  810c84:	1007883a 	mov	r3,r2
  810c88:	e0bffe17 	ldw	r2,-8(fp)
  810c8c:	18800035 	stwio	r2,0(r3)
}
  810c90:	0001883a 	nop
  810c94:	e037883a 	mov	sp,fp
  810c98:	df000017 	ldw	fp,0(sp)
  810c9c:	dec00104 	addi	sp,sp,4
  810ca0:	f800283a 	ret

00810ca4 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  810ca4:	defffd04 	addi	sp,sp,-12
  810ca8:	df000215 	stw	fp,8(sp)
  810cac:	df000204 	addi	fp,sp,8
  810cb0:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  810cb4:	e0bfff17 	ldw	r2,-4(fp)
  810cb8:	10800a17 	ldw	r2,40(r2)
  810cbc:	10800037 	ldwio	r2,0(r2)
  810cc0:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  810cc4:	e0fffe17 	ldw	r3,-8(fp)
  810cc8:	00bfff44 	movi	r2,-3
  810ccc:	1884703a 	and	r2,r3,r2
  810cd0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  810cd4:	e0bfff17 	ldw	r2,-4(fp)
  810cd8:	10800a17 	ldw	r2,40(r2)
  810cdc:	1007883a 	mov	r3,r2
  810ce0:	e0bffe17 	ldw	r2,-8(fp)
  810ce4:	18800035 	stwio	r2,0(r3)
}
  810ce8:	0001883a 	nop
  810cec:	e037883a 	mov	sp,fp
  810cf0:	df000017 	ldw	fp,0(sp)
  810cf4:	dec00104 	addi	sp,sp,4
  810cf8:	f800283a 	ret

00810cfc <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  810cfc:	defffd04 	addi	sp,sp,-12
  810d00:	df000215 	stw	fp,8(sp)
  810d04:	df000204 	addi	fp,sp,8
  810d08:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  810d0c:	e0bfff17 	ldw	r2,-4(fp)
  810d10:	10800a17 	ldw	r2,40(r2)
  810d14:	10800037 	ldwio	r2,0(r2)
  810d18:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  810d1c:	e0bffe17 	ldw	r2,-8(fp)
  810d20:	1080400c 	andi	r2,r2,256
  810d24:	1004c03a 	cmpne	r2,r2,zero
  810d28:	10803fcc 	andi	r2,r2,255
}
  810d2c:	e037883a 	mov	sp,fp
  810d30:	df000017 	ldw	fp,0(sp)
  810d34:	dec00104 	addi	sp,sp,4
  810d38:	f800283a 	ret

00810d3c <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  810d3c:	defffd04 	addi	sp,sp,-12
  810d40:	df000215 	stw	fp,8(sp)
  810d44:	df000204 	addi	fp,sp,8
  810d48:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  810d4c:	e0bfff17 	ldw	r2,-4(fp)
  810d50:	10800a17 	ldw	r2,40(r2)
  810d54:	10800037 	ldwio	r2,0(r2)
  810d58:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  810d5c:	e0bffe17 	ldw	r2,-8(fp)
  810d60:	1080800c 	andi	r2,r2,512
  810d64:	1004c03a 	cmpne	r2,r2,zero
  810d68:	10803fcc 	andi	r2,r2,255
}
  810d6c:	e037883a 	mov	sp,fp
  810d70:	df000017 	ldw	fp,0(sp)
  810d74:	dec00104 	addi	sp,sp,4
  810d78:	f800283a 	ret

00810d7c <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  810d7c:	defffd04 	addi	sp,sp,-12
  810d80:	df000215 	stw	fp,8(sp)
  810d84:	df000204 	addi	fp,sp,8
  810d88:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  810d8c:	e0bfff17 	ldw	r2,-4(fp)
  810d90:	10800a17 	ldw	r2,40(r2)
  810d94:	10800037 	ldwio	r2,0(r2)
  810d98:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  810d9c:	e0bffe17 	ldw	r2,-8(fp)
  810da0:	10800114 	ori	r2,r2,4
  810da4:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  810da8:	e0bffe17 	ldw	r2,-8(fp)
  810dac:	10800214 	ori	r2,r2,8
  810db0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  810db4:	e0bfff17 	ldw	r2,-4(fp)
  810db8:	10800a17 	ldw	r2,40(r2)
  810dbc:	1007883a 	mov	r3,r2
  810dc0:	e0bffe17 	ldw	r2,-8(fp)
  810dc4:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  810dc8:	e0fffe17 	ldw	r3,-8(fp)
  810dcc:	00bffec4 	movi	r2,-5
  810dd0:	1884703a 	and	r2,r3,r2
  810dd4:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  810dd8:	e0fffe17 	ldw	r3,-8(fp)
  810ddc:	00bffdc4 	movi	r2,-9
  810de0:	1884703a 	and	r2,r3,r2
  810de4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  810de8:	e0bfff17 	ldw	r2,-4(fp)
  810dec:	10800a17 	ldw	r2,40(r2)
  810df0:	1007883a 	mov	r3,r2
  810df4:	e0bffe17 	ldw	r2,-8(fp)
  810df8:	18800035 	stwio	r2,0(r3)
}
  810dfc:	0001883a 	nop
  810e00:	e037883a 	mov	sp,fp
  810e04:	df000017 	ldw	fp,0(sp)
  810e08:	dec00104 	addi	sp,sp,4
  810e0c:	f800283a 	ret

00810e10 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  810e10:	defffc04 	addi	sp,sp,-16
  810e14:	df000315 	stw	fp,12(sp)
  810e18:	df000304 	addi	fp,sp,12
  810e1c:	e13ffe15 	stw	r4,-8(fp)
  810e20:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  810e24:	e0bffe17 	ldw	r2,-8(fp)
  810e28:	10800a17 	ldw	r2,40(r2)
  810e2c:	10800104 	addi	r2,r2,4
  810e30:	10800037 	ldwio	r2,0(r2)
  810e34:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
  810e38:	e0bfff17 	ldw	r2,-4(fp)
  810e3c:	1000041e 	bne	r2,zero,810e50 <alt_up_audio_read_fifo_avail+0x40>
  810e40:	e0bffd17 	ldw	r2,-12(fp)
  810e44:	10bfc00c 	andi	r2,r2,65280
  810e48:	1004d23a 	srli	r2,r2,8
  810e4c:	00000206 	br	810e58 <alt_up_audio_read_fifo_avail+0x48>
  810e50:	e0bffd17 	ldw	r2,-12(fp)
  810e54:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  810e58:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  810e5c:	e0bffd17 	ldw	r2,-12(fp)
}
  810e60:	e037883a 	mov	sp,fp
  810e64:	df000017 	ldw	fp,0(sp)
  810e68:	dec00104 	addi	sp,sp,4
  810e6c:	f800283a 	ret

00810e70 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  810e70:	defffa04 	addi	sp,sp,-24
  810e74:	dfc00515 	stw	ra,20(sp)
  810e78:	df000415 	stw	fp,16(sp)
  810e7c:	df000404 	addi	fp,sp,16
  810e80:	e13ffd15 	stw	r4,-12(fp)
  810e84:	e17ffe15 	stw	r5,-8(fp)
  810e88:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  810e8c:	01400044 	movi	r5,1
  810e90:	e13ffd17 	ldw	r4,-12(fp)
  810e94:	0810e100 	call	810e10 <alt_up_audio_read_fifo_avail>
  810e98:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  810e9c:	e0bffc17 	ldw	r2,-16(fp)
  810ea0:	10801868 	cmpgeui	r2,r2,97
  810ea4:	1000021e 	bne	r2,zero,810eb0 <alt_up_audio_record_r+0x40>
		return 0;
  810ea8:	0005883a 	mov	r2,zero
  810eac:	00000506 	br	810ec4 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  810eb0:	01c00044 	movi	r7,1
  810eb4:	e1bfff17 	ldw	r6,-4(fp)
  810eb8:	e17ffe17 	ldw	r5,-8(fp)
  810ebc:	e13ffd17 	ldw	r4,-12(fp)
  810ec0:	08110700 	call	811070 <alt_up_audio_read_fifo>
}
  810ec4:	e037883a 	mov	sp,fp
  810ec8:	dfc00117 	ldw	ra,4(sp)
  810ecc:	df000017 	ldw	fp,0(sp)
  810ed0:	dec00204 	addi	sp,sp,8
  810ed4:	f800283a 	ret

00810ed8 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  810ed8:	defffa04 	addi	sp,sp,-24
  810edc:	dfc00515 	stw	ra,20(sp)
  810ee0:	df000415 	stw	fp,16(sp)
  810ee4:	df000404 	addi	fp,sp,16
  810ee8:	e13ffd15 	stw	r4,-12(fp)
  810eec:	e17ffe15 	stw	r5,-8(fp)
  810ef0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  810ef4:	000b883a 	mov	r5,zero
  810ef8:	e13ffd17 	ldw	r4,-12(fp)
  810efc:	0810e100 	call	810e10 <alt_up_audio_read_fifo_avail>
  810f00:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
  810f04:	e0bffc17 	ldw	r2,-16(fp)
  810f08:	10801868 	cmpgeui	r2,r2,97
  810f0c:	1000021e 	bne	r2,zero,810f18 <alt_up_audio_record_l+0x40>
		return 0;
  810f10:	0005883a 	mov	r2,zero
  810f14:	00000506 	br	810f2c <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  810f18:	000f883a 	mov	r7,zero
  810f1c:	e1bfff17 	ldw	r6,-4(fp)
  810f20:	e17ffe17 	ldw	r5,-8(fp)
  810f24:	e13ffd17 	ldw	r4,-12(fp)
  810f28:	08110700 	call	811070 <alt_up_audio_read_fifo>
}
  810f2c:	e037883a 	mov	sp,fp
  810f30:	dfc00117 	ldw	ra,4(sp)
  810f34:	df000017 	ldw	fp,0(sp)
  810f38:	dec00204 	addi	sp,sp,8
  810f3c:	f800283a 	ret

00810f40 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  810f40:	defffc04 	addi	sp,sp,-16
  810f44:	df000315 	stw	fp,12(sp)
  810f48:	df000304 	addi	fp,sp,12
  810f4c:	e13ffe15 	stw	r4,-8(fp)
  810f50:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  810f54:	e0bffe17 	ldw	r2,-8(fp)
  810f58:	10800a17 	ldw	r2,40(r2)
  810f5c:	10800104 	addi	r2,r2,4
  810f60:	10800037 	ldwio	r2,0(r2)
  810f64:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  810f68:	e0bfff17 	ldw	r2,-4(fp)
  810f6c:	1000031e 	bne	r2,zero,810f7c <alt_up_audio_write_fifo_space+0x3c>
  810f70:	e0bffd17 	ldw	r2,-12(fp)
  810f74:	1004d63a 	srli	r2,r2,24
  810f78:	00000306 	br	810f88 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  810f7c:	e0bffd17 	ldw	r2,-12(fp)
  810f80:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  810f84:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  810f88:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  810f8c:	e0bffd17 	ldw	r2,-12(fp)
}
  810f90:	e037883a 	mov	sp,fp
  810f94:	df000017 	ldw	fp,0(sp)
  810f98:	dec00104 	addi	sp,sp,4
  810f9c:	f800283a 	ret

00810fa0 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  810fa0:	defffa04 	addi	sp,sp,-24
  810fa4:	dfc00515 	stw	ra,20(sp)
  810fa8:	df000415 	stw	fp,16(sp)
  810fac:	df000404 	addi	fp,sp,16
  810fb0:	e13ffd15 	stw	r4,-12(fp)
  810fb4:	e17ffe15 	stw	r5,-8(fp)
  810fb8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  810fbc:	01400044 	movi	r5,1
  810fc0:	e13ffd17 	ldw	r4,-12(fp)
  810fc4:	0810f400 	call	810f40 <alt_up_audio_write_fifo_space>
  810fc8:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  810fcc:	e0bffc17 	ldw	r2,-16(fp)
  810fd0:	10801868 	cmpgeui	r2,r2,97
  810fd4:	1000021e 	bne	r2,zero,810fe0 <alt_up_audio_play_r+0x40>
		return 0;
  810fd8:	0005883a 	mov	r2,zero
  810fdc:	00000506 	br	810ff4 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  810fe0:	01c00044 	movi	r7,1
  810fe4:	e1bfff17 	ldw	r6,-4(fp)
  810fe8:	e17ffe17 	ldw	r5,-8(fp)
  810fec:	e13ffd17 	ldw	r4,-12(fp)
  810ff0:	08111500 	call	811150 <alt_up_audio_write_fifo>
}
  810ff4:	e037883a 	mov	sp,fp
  810ff8:	dfc00117 	ldw	ra,4(sp)
  810ffc:	df000017 	ldw	fp,0(sp)
  811000:	dec00204 	addi	sp,sp,8
  811004:	f800283a 	ret

00811008 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  811008:	defffa04 	addi	sp,sp,-24
  81100c:	dfc00515 	stw	ra,20(sp)
  811010:	df000415 	stw	fp,16(sp)
  811014:	df000404 	addi	fp,sp,16
  811018:	e13ffd15 	stw	r4,-12(fp)
  81101c:	e17ffe15 	stw	r5,-8(fp)
  811020:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  811024:	000b883a 	mov	r5,zero
  811028:	e13ffd17 	ldw	r4,-12(fp)
  81102c:	0810f400 	call	810f40 <alt_up_audio_write_fifo_space>
  811030:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
  811034:	e0bffc17 	ldw	r2,-16(fp)
  811038:	10801868 	cmpgeui	r2,r2,97
  81103c:	1000021e 	bne	r2,zero,811048 <alt_up_audio_play_l+0x40>
		return 0;
  811040:	0005883a 	mov	r2,zero
  811044:	00000506 	br	81105c <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  811048:	000f883a 	mov	r7,zero
  81104c:	e1bfff17 	ldw	r6,-4(fp)
  811050:	e17ffe17 	ldw	r5,-8(fp)
  811054:	e13ffd17 	ldw	r4,-12(fp)
  811058:	08111500 	call	811150 <alt_up_audio_write_fifo>
}
  81105c:	e037883a 	mov	sp,fp
  811060:	dfc00117 	ldw	ra,4(sp)
  811064:	df000017 	ldw	fp,0(sp)
  811068:	dec00204 	addi	sp,sp,8
  81106c:	f800283a 	ret

00811070 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  811070:	defff904 	addi	sp,sp,-28
  811074:	df000615 	stw	fp,24(sp)
  811078:	df000604 	addi	fp,sp,24
  81107c:	e13ffc15 	stw	r4,-16(fp)
  811080:	e17ffd15 	stw	r5,-12(fp)
  811084:	e1bffe15 	stw	r6,-8(fp)
  811088:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  81108c:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  811090:	00002506 	br	811128 <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  811094:	e0bffc17 	ldw	r2,-16(fp)
  811098:	10800a17 	ldw	r2,40(r2)
  81109c:	10800104 	addi	r2,r2,4
  8110a0:	10800037 	ldwio	r2,0(r2)
  8110a4:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
  8110a8:	e0bfff17 	ldw	r2,-4(fp)
  8110ac:	1000041e 	bne	r2,zero,8110c0 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
  8110b0:	e0bffb17 	ldw	r2,-20(fp)
  8110b4:	10bfc00c 	andi	r2,r2,65280
			:
  8110b8:	1004d23a 	srli	r2,r2,8
  8110bc:	00000206 	br	8110c8 <alt_up_audio_read_fifo+0x58>
  8110c0:	e0bffb17 	ldw	r2,-20(fp)
  8110c4:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8110c8:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  8110cc:	e0bffb17 	ldw	r2,-20(fp)
  8110d0:	10001926 	beq	r2,zero,811138 <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  8110d4:	e0bffa17 	ldw	r2,-24(fp)
  8110d8:	1085883a 	add	r2,r2,r2
  8110dc:	1085883a 	add	r2,r2,r2
  8110e0:	1007883a 	mov	r3,r2
  8110e4:	e0bffd17 	ldw	r2,-12(fp)
  8110e8:	10c5883a 	add	r2,r2,r3
  8110ec:	e0ffff17 	ldw	r3,-4(fp)
  8110f0:	1800051e 	bne	r3,zero,811108 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  8110f4:	e0fffc17 	ldw	r3,-16(fp)
  8110f8:	18c00a17 	ldw	r3,40(r3)
  8110fc:	18c00204 	addi	r3,r3,8
  811100:	18c00037 	ldwio	r3,0(r3)
  811104:	00000406 	br	811118 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
  811108:	e0fffc17 	ldw	r3,-16(fp)
  81110c:	18c00a17 	ldw	r3,40(r3)
  811110:	18c00304 	addi	r3,r3,12
  811114:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  811118:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  81111c:	e0bffa17 	ldw	r2,-24(fp)
  811120:	10800044 	addi	r2,r2,1
  811124:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  811128:	e0fffa17 	ldw	r3,-24(fp)
  81112c:	e0bffe17 	ldw	r2,-8(fp)
  811130:	18bfd816 	blt	r3,r2,811094 <__alt_data_end+0xff811094>
  811134:	00000106 	br	81113c <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
  811138:	0001883a 	nop
		}
	}
	return count;
  81113c:	e0bffa17 	ldw	r2,-24(fp)
}
  811140:	e037883a 	mov	sp,fp
  811144:	df000017 	ldw	fp,0(sp)
  811148:	dec00104 	addi	sp,sp,4
  81114c:	f800283a 	ret

00811150 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  811150:	defff904 	addi	sp,sp,-28
  811154:	df000615 	stw	fp,24(sp)
  811158:	df000604 	addi	fp,sp,24
  81115c:	e13ffc15 	stw	r4,-16(fp)
  811160:	e17ffd15 	stw	r5,-12(fp)
  811164:	e1bffe15 	stw	r6,-8(fp)
  811168:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
  81116c:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
  811170:	00002f06 	br	811230 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  811174:	e0bffc17 	ldw	r2,-16(fp)
  811178:	10800a17 	ldw	r2,40(r2)
  81117c:	10800104 	addi	r2,r2,4
  811180:	10800037 	ldwio	r2,0(r2)
  811184:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  811188:	e0bfff17 	ldw	r2,-4(fp)
  81118c:	1000031e 	bne	r2,zero,81119c <alt_up_audio_write_fifo+0x4c>
  811190:	e0bffb17 	ldw	r2,-20(fp)
  811194:	1004d63a 	srli	r2,r2,24
  811198:	00000306 	br	8111a8 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
  81119c:	e0bffb17 	ldw	r2,-20(fp)
  8111a0:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
  8111a4:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  8111a8:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  8111ac:	e0bffb17 	ldw	r2,-20(fp)
  8111b0:	10002326 	beq	r2,zero,811240 <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  8111b4:	e0bfff17 	ldw	r2,-4(fp)
  8111b8:	10000f1e 	bne	r2,zero,8111f8 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  8111bc:	e0bffc17 	ldw	r2,-16(fp)
  8111c0:	10800a17 	ldw	r2,40(r2)
  8111c4:	10800204 	addi	r2,r2,8
  8111c8:	1009883a 	mov	r4,r2
  8111cc:	e0bffa17 	ldw	r2,-24(fp)
  8111d0:	10c00044 	addi	r3,r2,1
  8111d4:	e0fffa15 	stw	r3,-24(fp)
  8111d8:	1085883a 	add	r2,r2,r2
  8111dc:	1085883a 	add	r2,r2,r2
  8111e0:	1007883a 	mov	r3,r2
  8111e4:	e0bffd17 	ldw	r2,-12(fp)
  8111e8:	10c5883a 	add	r2,r2,r3
  8111ec:	10800017 	ldw	r2,0(r2)
  8111f0:	20800035 	stwio	r2,0(r4)
  8111f4:	00000e06 	br	811230 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  8111f8:	e0bffc17 	ldw	r2,-16(fp)
  8111fc:	10800a17 	ldw	r2,40(r2)
  811200:	10800304 	addi	r2,r2,12
  811204:	1009883a 	mov	r4,r2
  811208:	e0bffa17 	ldw	r2,-24(fp)
  81120c:	10c00044 	addi	r3,r2,1
  811210:	e0fffa15 	stw	r3,-24(fp)
  811214:	1085883a 	add	r2,r2,r2
  811218:	1085883a 	add	r2,r2,r2
  81121c:	1007883a 	mov	r3,r2
  811220:	e0bffd17 	ldw	r2,-12(fp)
  811224:	10c5883a 	add	r2,r2,r3
  811228:	10800017 	ldw	r2,0(r2)
  81122c:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
  811230:	e0fffa17 	ldw	r3,-24(fp)
  811234:	e0bffe17 	ldw	r2,-8(fp)
  811238:	18bfce16 	blt	r3,r2,811174 <__alt_data_end+0xff811174>
  81123c:	00000106 	br	811244 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
  811240:	0001883a 	nop
		}
	}
	return count;
  811244:	e0bffa17 	ldw	r2,-24(fp)
}
  811248:	e037883a 	mov	sp,fp
  81124c:	df000017 	ldw	fp,0(sp)
  811250:	dec00104 	addi	sp,sp,4
  811254:	f800283a 	ret

00811258 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  811258:	defffd04 	addi	sp,sp,-12
  81125c:	df000215 	stw	fp,8(sp)
  811260:	df000204 	addi	fp,sp,8
  811264:	e13ffe15 	stw	r4,-8(fp)
  811268:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  81126c:	e0bfff17 	ldw	r2,-4(fp)
  811270:	1000051e 	bne	r2,zero,811288 <alt_up_audio_read_fifo_head+0x30>
  811274:	e0bffe17 	ldw	r2,-8(fp)
  811278:	10800a17 	ldw	r2,40(r2)
  81127c:	10800204 	addi	r2,r2,8
  811280:	10800037 	ldwio	r2,0(r2)
  811284:	00000406 	br	811298 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
  811288:	e0bffe17 	ldw	r2,-8(fp)
  81128c:	10800a17 	ldw	r2,40(r2)
  811290:	10800304 	addi	r2,r2,12
  811294:	10800037 	ldwio	r2,0(r2)
}
  811298:	e037883a 	mov	sp,fp
  81129c:	df000017 	ldw	fp,0(sp)
  8112a0:	dec00104 	addi	sp,sp,4
  8112a4:	f800283a 	ret

008112a8 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  8112a8:	defffc04 	addi	sp,sp,-16
  8112ac:	df000315 	stw	fp,12(sp)
  8112b0:	df000304 	addi	fp,sp,12
  8112b4:	e13ffd15 	stw	r4,-12(fp)
  8112b8:	e17ffe15 	stw	r5,-8(fp)
  8112bc:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  8112c0:	e0bfff17 	ldw	r2,-4(fp)
  8112c4:	1000071e 	bne	r2,zero,8112e4 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  8112c8:	e0bffd17 	ldw	r2,-12(fp)
  8112cc:	10800a17 	ldw	r2,40(r2)
  8112d0:	10800204 	addi	r2,r2,8
  8112d4:	1007883a 	mov	r3,r2
  8112d8:	e0bffe17 	ldw	r2,-8(fp)
  8112dc:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
  8112e0:	00000606 	br	8112fc <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  8112e4:	e0bffd17 	ldw	r2,-12(fp)
  8112e8:	10800a17 	ldw	r2,40(r2)
  8112ec:	10800304 	addi	r2,r2,12
  8112f0:	1007883a 	mov	r3,r2
  8112f4:	e0bffe17 	ldw	r2,-8(fp)
  8112f8:	18800035 	stwio	r2,0(r3)
}
  8112fc:	0001883a 	nop
  811300:	e037883a 	mov	sp,fp
  811304:	df000017 	ldw	fp,0(sp)
  811308:	dec00104 	addi	sp,sp,4
  81130c:	f800283a 	ret

00811310 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  811310:	defffe04 	addi	sp,sp,-8
  811314:	df000115 	stw	fp,4(sp)
  811318:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81131c:	e03fff15 	stw	zero,-4(fp)
  811320:	00000506 	br	811338 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  811324:	e0bfff17 	ldw	r2,-4(fp)
  811328:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  81132c:	e0bfff17 	ldw	r2,-4(fp)
  811330:	10800804 	addi	r2,r2,32
  811334:	e0bfff15 	stw	r2,-4(fp)
  811338:	e0bfff17 	ldw	r2,-4(fp)
  81133c:	10820030 	cmpltui	r2,r2,2048
  811340:	103ff81e 	bne	r2,zero,811324 <__alt_data_end+0xff811324>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  811344:	0001883a 	nop
  811348:	e037883a 	mov	sp,fp
  81134c:	df000017 	ldw	fp,0(sp)
  811350:	dec00104 	addi	sp,sp,4
  811354:	f800283a 	ret

00811358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811358:	defffe04 	addi	sp,sp,-8
  81135c:	dfc00115 	stw	ra,4(sp)
  811360:	df000015 	stw	fp,0(sp)
  811364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811368:	d0a00b17 	ldw	r2,-32724(gp)
  81136c:	10000326 	beq	r2,zero,81137c <alt_get_errno+0x24>
  811370:	d0a00b17 	ldw	r2,-32724(gp)
  811374:	103ee83a 	callr	r2
  811378:	00000106 	br	811380 <alt_get_errno+0x28>
  81137c:	d0a74f04 	addi	r2,gp,-25284
}
  811380:	e037883a 	mov	sp,fp
  811384:	dfc00117 	ldw	ra,4(sp)
  811388:	df000017 	ldw	fp,0(sp)
  81138c:	dec00204 	addi	sp,sp,8
  811390:	f800283a 	ret

00811394 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  811394:	defffa04 	addi	sp,sp,-24
  811398:	dfc00515 	stw	ra,20(sp)
  81139c:	df000415 	stw	fp,16(sp)
  8113a0:	df000404 	addi	fp,sp,16
  8113a4:	e13ffe15 	stw	r4,-8(fp)
  8113a8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8113ac:	e0bffe17 	ldw	r2,-8(fp)
  8113b0:	10000326 	beq	r2,zero,8113c0 <alt_dev_llist_insert+0x2c>
  8113b4:	e0bffe17 	ldw	r2,-8(fp)
  8113b8:	10800217 	ldw	r2,8(r2)
  8113bc:	1000061e 	bne	r2,zero,8113d8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  8113c0:	08113580 	call	811358 <alt_get_errno>
  8113c4:	1007883a 	mov	r3,r2
  8113c8:	00800584 	movi	r2,22
  8113cc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8113d0:	00bffa84 	movi	r2,-22
  8113d4:	00001306 	br	811424 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8113d8:	e0bffe17 	ldw	r2,-8(fp)
  8113dc:	e0ffff17 	ldw	r3,-4(fp)
  8113e0:	e0fffc15 	stw	r3,-16(fp)
  8113e4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8113e8:	e0bffd17 	ldw	r2,-12(fp)
  8113ec:	e0fffc17 	ldw	r3,-16(fp)
  8113f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8113f4:	e0bffc17 	ldw	r2,-16(fp)
  8113f8:	10c00017 	ldw	r3,0(r2)
  8113fc:	e0bffd17 	ldw	r2,-12(fp)
  811400:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  811404:	e0bffc17 	ldw	r2,-16(fp)
  811408:	10800017 	ldw	r2,0(r2)
  81140c:	e0fffd17 	ldw	r3,-12(fp)
  811410:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  811414:	e0bffc17 	ldw	r2,-16(fp)
  811418:	e0fffd17 	ldw	r3,-12(fp)
  81141c:	10c00015 	stw	r3,0(r2)

  return 0;  
  811420:	0005883a 	mov	r2,zero
}
  811424:	e037883a 	mov	sp,fp
  811428:	dfc00117 	ldw	ra,4(sp)
  81142c:	df000017 	ldw	fp,0(sp)
  811430:	dec00204 	addi	sp,sp,8
  811434:	f800283a 	ret

00811438 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  811438:	defffd04 	addi	sp,sp,-12
  81143c:	dfc00215 	stw	ra,8(sp)
  811440:	df000115 	stw	fp,4(sp)
  811444:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811448:	00802074 	movhi	r2,129
  81144c:	10889a04 	addi	r2,r2,8808
  811450:	e0bfff15 	stw	r2,-4(fp)
  811454:	00000606 	br	811470 <_do_ctors+0x38>
        (*ctor) (); 
  811458:	e0bfff17 	ldw	r2,-4(fp)
  81145c:	10800017 	ldw	r2,0(r2)
  811460:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811464:	e0bfff17 	ldw	r2,-4(fp)
  811468:	10bfff04 	addi	r2,r2,-4
  81146c:	e0bfff15 	stw	r2,-4(fp)
  811470:	e0ffff17 	ldw	r3,-4(fp)
  811474:	00802074 	movhi	r2,129
  811478:	10889b04 	addi	r2,r2,8812
  81147c:	18bff62e 	bgeu	r3,r2,811458 <__alt_data_end+0xff811458>
        (*ctor) (); 
}
  811480:	0001883a 	nop
  811484:	e037883a 	mov	sp,fp
  811488:	dfc00117 	ldw	ra,4(sp)
  81148c:	df000017 	ldw	fp,0(sp)
  811490:	dec00204 	addi	sp,sp,8
  811494:	f800283a 	ret

00811498 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  811498:	defffd04 	addi	sp,sp,-12
  81149c:	dfc00215 	stw	ra,8(sp)
  8114a0:	df000115 	stw	fp,4(sp)
  8114a4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8114a8:	00802074 	movhi	r2,129
  8114ac:	10889a04 	addi	r2,r2,8808
  8114b0:	e0bfff15 	stw	r2,-4(fp)
  8114b4:	00000606 	br	8114d0 <_do_dtors+0x38>
        (*dtor) (); 
  8114b8:	e0bfff17 	ldw	r2,-4(fp)
  8114bc:	10800017 	ldw	r2,0(r2)
  8114c0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  8114c4:	e0bfff17 	ldw	r2,-4(fp)
  8114c8:	10bfff04 	addi	r2,r2,-4
  8114cc:	e0bfff15 	stw	r2,-4(fp)
  8114d0:	e0ffff17 	ldw	r3,-4(fp)
  8114d4:	00802074 	movhi	r2,129
  8114d8:	10889b04 	addi	r2,r2,8812
  8114dc:	18bff62e 	bgeu	r3,r2,8114b8 <__alt_data_end+0xff8114b8>
        (*dtor) (); 
}
  8114e0:	0001883a 	nop
  8114e4:	e037883a 	mov	sp,fp
  8114e8:	dfc00117 	ldw	ra,4(sp)
  8114ec:	df000017 	ldw	fp,0(sp)
  8114f0:	dec00204 	addi	sp,sp,8
  8114f4:	f800283a 	ret

008114f8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8114f8:	defffa04 	addi	sp,sp,-24
  8114fc:	dfc00515 	stw	ra,20(sp)
  811500:	df000415 	stw	fp,16(sp)
  811504:	df000404 	addi	fp,sp,16
  811508:	e13ffe15 	stw	r4,-8(fp)
  81150c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  811510:	e0bfff17 	ldw	r2,-4(fp)
  811514:	10800017 	ldw	r2,0(r2)
  811518:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81151c:	e13ffe17 	ldw	r4,-8(fp)
  811520:	080ab4c0 	call	80ab4c <strlen>
  811524:	10800044 	addi	r2,r2,1
  811528:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81152c:	00000d06 	br	811564 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  811530:	e0bffc17 	ldw	r2,-16(fp)
  811534:	10800217 	ldw	r2,8(r2)
  811538:	e0fffd17 	ldw	r3,-12(fp)
  81153c:	180d883a 	mov	r6,r3
  811540:	e17ffe17 	ldw	r5,-8(fp)
  811544:	1009883a 	mov	r4,r2
  811548:	080a6540 	call	80a654 <memcmp>
  81154c:	1000021e 	bne	r2,zero,811558 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  811550:	e0bffc17 	ldw	r2,-16(fp)
  811554:	00000706 	br	811574 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  811558:	e0bffc17 	ldw	r2,-16(fp)
  81155c:	10800017 	ldw	r2,0(r2)
  811560:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  811564:	e0fffc17 	ldw	r3,-16(fp)
  811568:	e0bfff17 	ldw	r2,-4(fp)
  81156c:	18bff01e 	bne	r3,r2,811530 <__alt_data_end+0xff811530>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  811570:	0005883a 	mov	r2,zero
}
  811574:	e037883a 	mov	sp,fp
  811578:	dfc00117 	ldw	ra,4(sp)
  81157c:	df000017 	ldw	fp,0(sp)
  811580:	dec00204 	addi	sp,sp,8
  811584:	f800283a 	ret

00811588 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  811588:	defffe04 	addi	sp,sp,-8
  81158c:	dfc00115 	stw	ra,4(sp)
  811590:	df000015 	stw	fp,0(sp)
  811594:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  811598:	01440004 	movi	r5,4096
  81159c:	0009883a 	mov	r4,zero
  8115a0:	0811e280 	call	811e28 <alt_icache_flush>
#endif
}
  8115a4:	0001883a 	nop
  8115a8:	e037883a 	mov	sp,fp
  8115ac:	dfc00117 	ldw	ra,4(sp)
  8115b0:	df000017 	ldw	fp,0(sp)
  8115b4:	dec00204 	addi	sp,sp,8
  8115b8:	f800283a 	ret

008115bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8115bc:	defff904 	addi	sp,sp,-28
  8115c0:	dfc00615 	stw	ra,24(sp)
  8115c4:	df000515 	stw	fp,20(sp)
  8115c8:	df000504 	addi	fp,sp,20
  8115cc:	e13ffc15 	stw	r4,-16(fp)
  8115d0:	e17ffd15 	stw	r5,-12(fp)
  8115d4:	e1bffe15 	stw	r6,-8(fp)
  8115d8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8115dc:	e1bfff17 	ldw	r6,-4(fp)
  8115e0:	e17ffe17 	ldw	r5,-8(fp)
  8115e4:	e13ffd17 	ldw	r4,-12(fp)
  8115e8:	081197c0 	call	81197c <open>
  8115ec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8115f0:	e0bffb17 	ldw	r2,-20(fp)
  8115f4:	10001c16 	blt	r2,zero,811668 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  8115f8:	00802074 	movhi	r2,129
  8115fc:	108d5f04 	addi	r2,r2,13692
  811600:	e0fffb17 	ldw	r3,-20(fp)
  811604:	18c00324 	muli	r3,r3,12
  811608:	10c5883a 	add	r2,r2,r3
  81160c:	10c00017 	ldw	r3,0(r2)
  811610:	e0bffc17 	ldw	r2,-16(fp)
  811614:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  811618:	00802074 	movhi	r2,129
  81161c:	108d5f04 	addi	r2,r2,13692
  811620:	e0fffb17 	ldw	r3,-20(fp)
  811624:	18c00324 	muli	r3,r3,12
  811628:	10c5883a 	add	r2,r2,r3
  81162c:	10800104 	addi	r2,r2,4
  811630:	10c00017 	ldw	r3,0(r2)
  811634:	e0bffc17 	ldw	r2,-16(fp)
  811638:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81163c:	00802074 	movhi	r2,129
  811640:	108d5f04 	addi	r2,r2,13692
  811644:	e0fffb17 	ldw	r3,-20(fp)
  811648:	18c00324 	muli	r3,r3,12
  81164c:	10c5883a 	add	r2,r2,r3
  811650:	10800204 	addi	r2,r2,8
  811654:	10c00017 	ldw	r3,0(r2)
  811658:	e0bffc17 	ldw	r2,-16(fp)
  81165c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  811660:	e13ffb17 	ldw	r4,-20(fp)
  811664:	080e35c0 	call	80e35c <alt_release_fd>
  }
} 
  811668:	0001883a 	nop
  81166c:	e037883a 	mov	sp,fp
  811670:	dfc00117 	ldw	ra,4(sp)
  811674:	df000017 	ldw	fp,0(sp)
  811678:	dec00204 	addi	sp,sp,8
  81167c:	f800283a 	ret

00811680 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  811680:	defffb04 	addi	sp,sp,-20
  811684:	dfc00415 	stw	ra,16(sp)
  811688:	df000315 	stw	fp,12(sp)
  81168c:	df000304 	addi	fp,sp,12
  811690:	e13ffd15 	stw	r4,-12(fp)
  811694:	e17ffe15 	stw	r5,-8(fp)
  811698:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81169c:	01c07fc4 	movi	r7,511
  8116a0:	01800044 	movi	r6,1
  8116a4:	e17ffd17 	ldw	r5,-12(fp)
  8116a8:	01002074 	movhi	r4,129
  8116ac:	210d6204 	addi	r4,r4,13704
  8116b0:	08115bc0 	call	8115bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8116b4:	01c07fc4 	movi	r7,511
  8116b8:	000d883a 	mov	r6,zero
  8116bc:	e17ffe17 	ldw	r5,-8(fp)
  8116c0:	01002074 	movhi	r4,129
  8116c4:	210d5f04 	addi	r4,r4,13692
  8116c8:	08115bc0 	call	8115bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8116cc:	01c07fc4 	movi	r7,511
  8116d0:	01800044 	movi	r6,1
  8116d4:	e17fff17 	ldw	r5,-4(fp)
  8116d8:	01002074 	movhi	r4,129
  8116dc:	210d6504 	addi	r4,r4,13716
  8116e0:	08115bc0 	call	8115bc <alt_open_fd>
}  
  8116e4:	0001883a 	nop
  8116e8:	e037883a 	mov	sp,fp
  8116ec:	dfc00117 	ldw	ra,4(sp)
  8116f0:	df000017 	ldw	fp,0(sp)
  8116f4:	dec00204 	addi	sp,sp,8
  8116f8:	f800283a 	ret

008116fc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  8116fc:	defff004 	addi	sp,sp,-64
  811700:	df000f15 	stw	fp,60(sp)
  811704:	df000f04 	addi	fp,sp,60
  811708:	e13ffd15 	stw	r4,-12(fp)
  81170c:	e17ffe15 	stw	r5,-8(fp)
  811710:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  811714:	00bffa84 	movi	r2,-22
  811718:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81171c:	e0bffd17 	ldw	r2,-12(fp)
  811720:	10800828 	cmpgeui	r2,r2,32
  811724:	1000501e 	bne	r2,zero,811868 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811728:	0005303a 	rdctl	r2,status
  81172c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811730:	e0fff617 	ldw	r3,-40(fp)
  811734:	00bfff84 	movi	r2,-2
  811738:	1884703a 	and	r2,r3,r2
  81173c:	1001703a 	wrctl	status,r2
  
  return context;
  811740:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  811744:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  811748:	00802074 	movhi	r2,129
  81174c:	109cba04 	addi	r2,r2,29416
  811750:	e0fffd17 	ldw	r3,-12(fp)
  811754:	180690fa 	slli	r3,r3,3
  811758:	10c5883a 	add	r2,r2,r3
  81175c:	e0ffff17 	ldw	r3,-4(fp)
  811760:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  811764:	00802074 	movhi	r2,129
  811768:	109cba04 	addi	r2,r2,29416
  81176c:	e0fffd17 	ldw	r3,-12(fp)
  811770:	180690fa 	slli	r3,r3,3
  811774:	10c5883a 	add	r2,r2,r3
  811778:	10800104 	addi	r2,r2,4
  81177c:	e0fffe17 	ldw	r3,-8(fp)
  811780:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  811784:	e0bfff17 	ldw	r2,-4(fp)
  811788:	10001926 	beq	r2,zero,8117f0 <alt_irq_register+0xf4>
  81178c:	e0bffd17 	ldw	r2,-12(fp)
  811790:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811794:	0005303a 	rdctl	r2,status
  811798:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81179c:	e0fff717 	ldw	r3,-36(fp)
  8117a0:	00bfff84 	movi	r2,-2
  8117a4:	1884703a 	and	r2,r3,r2
  8117a8:	1001703a 	wrctl	status,r2
  
  return context;
  8117ac:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8117b0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  8117b4:	00c00044 	movi	r3,1
  8117b8:	e0bff217 	ldw	r2,-56(fp)
  8117bc:	1884983a 	sll	r2,r3,r2
  8117c0:	1007883a 	mov	r3,r2
  8117c4:	d0a75517 	ldw	r2,-25260(gp)
  8117c8:	1884b03a 	or	r2,r3,r2
  8117cc:	d0a75515 	stw	r2,-25260(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8117d0:	d0a75517 	ldw	r2,-25260(gp)
  8117d4:	100170fa 	wrctl	ienable,r2
  8117d8:	e0bff817 	ldw	r2,-32(fp)
  8117dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8117e0:	e0bff917 	ldw	r2,-28(fp)
  8117e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8117e8:	0005883a 	mov	r2,zero
  8117ec:	00001906 	br	811854 <alt_irq_register+0x158>
  8117f0:	e0bffd17 	ldw	r2,-12(fp)
  8117f4:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8117f8:	0005303a 	rdctl	r2,status
  8117fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811800:	e0fffa17 	ldw	r3,-24(fp)
  811804:	00bfff84 	movi	r2,-2
  811808:	1884703a 	and	r2,r3,r2
  81180c:	1001703a 	wrctl	status,r2
  
  return context;
  811810:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811814:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  811818:	00c00044 	movi	r3,1
  81181c:	e0bff417 	ldw	r2,-48(fp)
  811820:	1884983a 	sll	r2,r3,r2
  811824:	0084303a 	nor	r2,zero,r2
  811828:	1007883a 	mov	r3,r2
  81182c:	d0a75517 	ldw	r2,-25260(gp)
  811830:	1884703a 	and	r2,r3,r2
  811834:	d0a75515 	stw	r2,-25260(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811838:	d0a75517 	ldw	r2,-25260(gp)
  81183c:	100170fa 	wrctl	ienable,r2
  811840:	e0bffb17 	ldw	r2,-20(fp)
  811844:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811848:	e0bffc17 	ldw	r2,-16(fp)
  81184c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  811850:	0005883a 	mov	r2,zero
  811854:	e0bff115 	stw	r2,-60(fp)
  811858:	e0bff317 	ldw	r2,-52(fp)
  81185c:	e0bff515 	stw	r2,-44(fp)
  811860:	e0bff517 	ldw	r2,-44(fp)
  811864:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  811868:	e0bff117 	ldw	r2,-60(fp)
}
  81186c:	e037883a 	mov	sp,fp
  811870:	df000017 	ldw	fp,0(sp)
  811874:	dec00104 	addi	sp,sp,4
  811878:	f800283a 	ret

0081187c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81187c:	defffe04 	addi	sp,sp,-8
  811880:	dfc00115 	stw	ra,4(sp)
  811884:	df000015 	stw	fp,0(sp)
  811888:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81188c:	d0a00b17 	ldw	r2,-32724(gp)
  811890:	10000326 	beq	r2,zero,8118a0 <alt_get_errno+0x24>
  811894:	d0a00b17 	ldw	r2,-32724(gp)
  811898:	103ee83a 	callr	r2
  81189c:	00000106 	br	8118a4 <alt_get_errno+0x28>
  8118a0:	d0a74f04 	addi	r2,gp,-25284
}
  8118a4:	e037883a 	mov	sp,fp
  8118a8:	dfc00117 	ldw	ra,4(sp)
  8118ac:	df000017 	ldw	fp,0(sp)
  8118b0:	dec00204 	addi	sp,sp,8
  8118b4:	f800283a 	ret

008118b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8118b8:	defffd04 	addi	sp,sp,-12
  8118bc:	df000215 	stw	fp,8(sp)
  8118c0:	df000204 	addi	fp,sp,8
  8118c4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8118c8:	e0bfff17 	ldw	r2,-4(fp)
  8118cc:	10800217 	ldw	r2,8(r2)
  8118d0:	10d00034 	orhi	r3,r2,16384
  8118d4:	e0bfff17 	ldw	r2,-4(fp)
  8118d8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8118dc:	e03ffe15 	stw	zero,-8(fp)
  8118e0:	00001d06 	br	811958 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8118e4:	00802074 	movhi	r2,129
  8118e8:	108d5f04 	addi	r2,r2,13692
  8118ec:	e0fffe17 	ldw	r3,-8(fp)
  8118f0:	18c00324 	muli	r3,r3,12
  8118f4:	10c5883a 	add	r2,r2,r3
  8118f8:	10c00017 	ldw	r3,0(r2)
  8118fc:	e0bfff17 	ldw	r2,-4(fp)
  811900:	10800017 	ldw	r2,0(r2)
  811904:	1880111e 	bne	r3,r2,81194c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  811908:	00802074 	movhi	r2,129
  81190c:	108d5f04 	addi	r2,r2,13692
  811910:	e0fffe17 	ldw	r3,-8(fp)
  811914:	18c00324 	muli	r3,r3,12
  811918:	10c5883a 	add	r2,r2,r3
  81191c:	10800204 	addi	r2,r2,8
  811920:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  811924:	1000090e 	bge	r2,zero,81194c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  811928:	e0bffe17 	ldw	r2,-8(fp)
  81192c:	10c00324 	muli	r3,r2,12
  811930:	00802074 	movhi	r2,129
  811934:	108d5f04 	addi	r2,r2,13692
  811938:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  81193c:	e0bfff17 	ldw	r2,-4(fp)
  811940:	18800226 	beq	r3,r2,81194c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  811944:	00bffcc4 	movi	r2,-13
  811948:	00000806 	br	81196c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81194c:	e0bffe17 	ldw	r2,-8(fp)
  811950:	10800044 	addi	r2,r2,1
  811954:	e0bffe15 	stw	r2,-8(fp)
  811958:	d0a00a17 	ldw	r2,-32728(gp)
  81195c:	1007883a 	mov	r3,r2
  811960:	e0bffe17 	ldw	r2,-8(fp)
  811964:	18bfdf2e 	bgeu	r3,r2,8118e4 <__alt_data_end+0xff8118e4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  811968:	0005883a 	mov	r2,zero
}
  81196c:	e037883a 	mov	sp,fp
  811970:	df000017 	ldw	fp,0(sp)
  811974:	dec00104 	addi	sp,sp,4
  811978:	f800283a 	ret

0081197c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  81197c:	defff604 	addi	sp,sp,-40
  811980:	dfc00915 	stw	ra,36(sp)
  811984:	df000815 	stw	fp,32(sp)
  811988:	df000804 	addi	fp,sp,32
  81198c:	e13ffd15 	stw	r4,-12(fp)
  811990:	e17ffe15 	stw	r5,-8(fp)
  811994:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  811998:	00bfffc4 	movi	r2,-1
  81199c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  8119a0:	00bffb44 	movi	r2,-19
  8119a4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  8119a8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8119ac:	d1600804 	addi	r5,gp,-32736
  8119b0:	e13ffd17 	ldw	r4,-12(fp)
  8119b4:	08114f80 	call	8114f8 <alt_find_dev>
  8119b8:	e0bff815 	stw	r2,-32(fp)
  8119bc:	e0bff817 	ldw	r2,-32(fp)
  8119c0:	1000051e 	bne	r2,zero,8119d8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8119c4:	e13ffd17 	ldw	r4,-12(fp)
  8119c8:	0811c7c0 	call	811c7c <alt_find_file>
  8119cc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8119d0:	00800044 	movi	r2,1
  8119d4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8119d8:	e0bff817 	ldw	r2,-32(fp)
  8119dc:	10002926 	beq	r2,zero,811a84 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8119e0:	e13ff817 	ldw	r4,-32(fp)
  8119e4:	0811d840 	call	811d84 <alt_get_fd>
  8119e8:	e0bff915 	stw	r2,-28(fp)
  8119ec:	e0bff917 	ldw	r2,-28(fp)
  8119f0:	1000030e 	bge	r2,zero,811a00 <open+0x84>
    {
      status = index;
  8119f4:	e0bff917 	ldw	r2,-28(fp)
  8119f8:	e0bffa15 	stw	r2,-24(fp)
  8119fc:	00002306 	br	811a8c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  811a00:	e0bff917 	ldw	r2,-28(fp)
  811a04:	10c00324 	muli	r3,r2,12
  811a08:	00802074 	movhi	r2,129
  811a0c:	108d5f04 	addi	r2,r2,13692
  811a10:	1885883a 	add	r2,r3,r2
  811a14:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  811a18:	e0fffe17 	ldw	r3,-8(fp)
  811a1c:	00900034 	movhi	r2,16384
  811a20:	10bfffc4 	addi	r2,r2,-1
  811a24:	1886703a 	and	r3,r3,r2
  811a28:	e0bffc17 	ldw	r2,-16(fp)
  811a2c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  811a30:	e0bffb17 	ldw	r2,-20(fp)
  811a34:	1000051e 	bne	r2,zero,811a4c <open+0xd0>
  811a38:	e13ffc17 	ldw	r4,-16(fp)
  811a3c:	08118b80 	call	8118b8 <alt_file_locked>
  811a40:	e0bffa15 	stw	r2,-24(fp)
  811a44:	e0bffa17 	ldw	r2,-24(fp)
  811a48:	10001016 	blt	r2,zero,811a8c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  811a4c:	e0bff817 	ldw	r2,-32(fp)
  811a50:	10800317 	ldw	r2,12(r2)
  811a54:	10000826 	beq	r2,zero,811a78 <open+0xfc>
  811a58:	e0bff817 	ldw	r2,-32(fp)
  811a5c:	10800317 	ldw	r2,12(r2)
  811a60:	e1ffff17 	ldw	r7,-4(fp)
  811a64:	e1bffe17 	ldw	r6,-8(fp)
  811a68:	e17ffd17 	ldw	r5,-12(fp)
  811a6c:	e13ffc17 	ldw	r4,-16(fp)
  811a70:	103ee83a 	callr	r2
  811a74:	00000106 	br	811a7c <open+0x100>
  811a78:	0005883a 	mov	r2,zero
  811a7c:	e0bffa15 	stw	r2,-24(fp)
  811a80:	00000206 	br	811a8c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  811a84:	00bffb44 	movi	r2,-19
  811a88:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  811a8c:	e0bffa17 	ldw	r2,-24(fp)
  811a90:	1000090e 	bge	r2,zero,811ab8 <open+0x13c>
  {
    alt_release_fd (index);  
  811a94:	e13ff917 	ldw	r4,-28(fp)
  811a98:	080e35c0 	call	80e35c <alt_release_fd>
    ALT_ERRNO = -status;
  811a9c:	081187c0 	call	81187c <alt_get_errno>
  811aa0:	1007883a 	mov	r3,r2
  811aa4:	e0bffa17 	ldw	r2,-24(fp)
  811aa8:	0085c83a 	sub	r2,zero,r2
  811aac:	18800015 	stw	r2,0(r3)
    return -1;
  811ab0:	00bfffc4 	movi	r2,-1
  811ab4:	00000106 	br	811abc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  811ab8:	e0bff917 	ldw	r2,-28(fp)
}
  811abc:	e037883a 	mov	sp,fp
  811ac0:	dfc00117 	ldw	ra,4(sp)
  811ac4:	df000017 	ldw	fp,0(sp)
  811ac8:	dec00204 	addi	sp,sp,8
  811acc:	f800283a 	ret

00811ad0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  811ad0:	defffd04 	addi	sp,sp,-12
  811ad4:	dfc00215 	stw	ra,8(sp)
  811ad8:	df000115 	stw	fp,4(sp)
  811adc:	df000104 	addi	fp,sp,4
  811ae0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  811ae4:	e13fff17 	ldw	r4,-4(fp)
  811ae8:	0811b240 	call	811b24 <alt_busy_sleep>
}
  811aec:	e037883a 	mov	sp,fp
  811af0:	dfc00117 	ldw	ra,4(sp)
  811af4:	df000017 	ldw	fp,0(sp)
  811af8:	dec00204 	addi	sp,sp,8
  811afc:	f800283a 	ret

00811b00 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  811b00:	deffff04 	addi	sp,sp,-4
  811b04:	df000015 	stw	fp,0(sp)
  811b08:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  811b0c:	000170fa 	wrctl	ienable,zero
}
  811b10:	0001883a 	nop
  811b14:	e037883a 	mov	sp,fp
  811b18:	df000017 	ldw	fp,0(sp)
  811b1c:	dec00104 	addi	sp,sp,4
  811b20:	f800283a 	ret

00811b24 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  811b24:	defffa04 	addi	sp,sp,-24
  811b28:	dfc00515 	stw	ra,20(sp)
  811b2c:	df000415 	stw	fp,16(sp)
  811b30:	df000404 	addi	fp,sp,16
  811b34:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  811b38:	008000c4 	movi	r2,3
  811b3c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  811b40:	e0fffd17 	ldw	r3,-12(fp)
  811b44:	008003f4 	movhi	r2,15
  811b48:	10909004 	addi	r2,r2,16960
  811b4c:	1885383a 	mul	r2,r3,r2
  811b50:	100b883a 	mov	r5,r2
  811b54:	0100bef4 	movhi	r4,763
  811b58:	213c2004 	addi	r4,r4,-3968
  811b5c:	080a4a00 	call	80a4a0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  811b60:	100b883a 	mov	r5,r2
  811b64:	01200034 	movhi	r4,32768
  811b68:	213fffc4 	addi	r4,r4,-1
  811b6c:	080a4a00 	call	80a4a0 <__udivsi3>
  811b70:	100b883a 	mov	r5,r2
  811b74:	e13fff17 	ldw	r4,-4(fp)
  811b78:	080a4a00 	call	80a4a0 <__udivsi3>
  811b7c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  811b80:	e0bffe17 	ldw	r2,-8(fp)
  811b84:	10002a26 	beq	r2,zero,811c30 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  811b88:	e03ffc15 	stw	zero,-16(fp)
  811b8c:	00001706 	br	811bec <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  811b90:	00a00034 	movhi	r2,32768
  811b94:	10bfffc4 	addi	r2,r2,-1
  811b98:	10bfffc4 	addi	r2,r2,-1
  811b9c:	103ffe1e 	bne	r2,zero,811b98 <__alt_data_end+0xff811b98>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  811ba0:	e0fffd17 	ldw	r3,-12(fp)
  811ba4:	008003f4 	movhi	r2,15
  811ba8:	10909004 	addi	r2,r2,16960
  811bac:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  811bb0:	100b883a 	mov	r5,r2
  811bb4:	0100bef4 	movhi	r4,763
  811bb8:	213c2004 	addi	r4,r4,-3968
  811bbc:	080a4a00 	call	80a4a0 <__udivsi3>
  811bc0:	100b883a 	mov	r5,r2
  811bc4:	01200034 	movhi	r4,32768
  811bc8:	213fffc4 	addi	r4,r4,-1
  811bcc:	080a4a00 	call	80a4a0 <__udivsi3>
  811bd0:	1007883a 	mov	r3,r2
  811bd4:	e0bfff17 	ldw	r2,-4(fp)
  811bd8:	10c5c83a 	sub	r2,r2,r3
  811bdc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  811be0:	e0bffc17 	ldw	r2,-16(fp)
  811be4:	10800044 	addi	r2,r2,1
  811be8:	e0bffc15 	stw	r2,-16(fp)
  811bec:	e0fffc17 	ldw	r3,-16(fp)
  811bf0:	e0bffe17 	ldw	r2,-8(fp)
  811bf4:	18bfe616 	blt	r3,r2,811b90 <__alt_data_end+0xff811b90>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  811bf8:	e0fffd17 	ldw	r3,-12(fp)
  811bfc:	008003f4 	movhi	r2,15
  811c00:	10909004 	addi	r2,r2,16960
  811c04:	1885383a 	mul	r2,r3,r2
  811c08:	100b883a 	mov	r5,r2
  811c0c:	0100bef4 	movhi	r4,763
  811c10:	213c2004 	addi	r4,r4,-3968
  811c14:	080a4a00 	call	80a4a0 <__udivsi3>
  811c18:	1007883a 	mov	r3,r2
  811c1c:	e0bfff17 	ldw	r2,-4(fp)
  811c20:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  811c24:	10bfffc4 	addi	r2,r2,-1
  811c28:	103ffe1e 	bne	r2,zero,811c24 <__alt_data_end+0xff811c24>
  811c2c:	00000d06 	br	811c64 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  811c30:	e0fffd17 	ldw	r3,-12(fp)
  811c34:	008003f4 	movhi	r2,15
  811c38:	10909004 	addi	r2,r2,16960
  811c3c:	1885383a 	mul	r2,r3,r2
  811c40:	100b883a 	mov	r5,r2
  811c44:	0100bef4 	movhi	r4,763
  811c48:	213c2004 	addi	r4,r4,-3968
  811c4c:	080a4a00 	call	80a4a0 <__udivsi3>
  811c50:	1007883a 	mov	r3,r2
  811c54:	e0bfff17 	ldw	r2,-4(fp)
  811c58:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  811c5c:	10bfffc4 	addi	r2,r2,-1
  811c60:	00bffe16 	blt	zero,r2,811c5c <__alt_data_end+0xff811c5c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  811c64:	0005883a 	mov	r2,zero
}
  811c68:	e037883a 	mov	sp,fp
  811c6c:	dfc00117 	ldw	ra,4(sp)
  811c70:	df000017 	ldw	fp,0(sp)
  811c74:	dec00204 	addi	sp,sp,8
  811c78:	f800283a 	ret

00811c7c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  811c7c:	defffb04 	addi	sp,sp,-20
  811c80:	dfc00415 	stw	ra,16(sp)
  811c84:	df000315 	stw	fp,12(sp)
  811c88:	df000304 	addi	fp,sp,12
  811c8c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  811c90:	d0a00617 	ldw	r2,-32744(gp)
  811c94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811c98:	00003106 	br	811d60 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  811c9c:	e0bffd17 	ldw	r2,-12(fp)
  811ca0:	10800217 	ldw	r2,8(r2)
  811ca4:	1009883a 	mov	r4,r2
  811ca8:	080ab4c0 	call	80ab4c <strlen>
  811cac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  811cb0:	e0bffd17 	ldw	r2,-12(fp)
  811cb4:	10c00217 	ldw	r3,8(r2)
  811cb8:	e0bffe17 	ldw	r2,-8(fp)
  811cbc:	10bfffc4 	addi	r2,r2,-1
  811cc0:	1885883a 	add	r2,r3,r2
  811cc4:	10800003 	ldbu	r2,0(r2)
  811cc8:	10803fcc 	andi	r2,r2,255
  811ccc:	1080201c 	xori	r2,r2,128
  811cd0:	10bfe004 	addi	r2,r2,-128
  811cd4:	10800bd8 	cmpnei	r2,r2,47
  811cd8:	1000031e 	bne	r2,zero,811ce8 <alt_find_file+0x6c>
    {
      len -= 1;
  811cdc:	e0bffe17 	ldw	r2,-8(fp)
  811ce0:	10bfffc4 	addi	r2,r2,-1
  811ce4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  811ce8:	e0bffe17 	ldw	r2,-8(fp)
  811cec:	e0ffff17 	ldw	r3,-4(fp)
  811cf0:	1885883a 	add	r2,r3,r2
  811cf4:	10800003 	ldbu	r2,0(r2)
  811cf8:	10803fcc 	andi	r2,r2,255
  811cfc:	1080201c 	xori	r2,r2,128
  811d00:	10bfe004 	addi	r2,r2,-128
  811d04:	10800be0 	cmpeqi	r2,r2,47
  811d08:	1000081e 	bne	r2,zero,811d2c <alt_find_file+0xb0>
  811d0c:	e0bffe17 	ldw	r2,-8(fp)
  811d10:	e0ffff17 	ldw	r3,-4(fp)
  811d14:	1885883a 	add	r2,r3,r2
  811d18:	10800003 	ldbu	r2,0(r2)
  811d1c:	10803fcc 	andi	r2,r2,255
  811d20:	1080201c 	xori	r2,r2,128
  811d24:	10bfe004 	addi	r2,r2,-128
  811d28:	10000a1e 	bne	r2,zero,811d54 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  811d2c:	e0bffd17 	ldw	r2,-12(fp)
  811d30:	10800217 	ldw	r2,8(r2)
  811d34:	e0fffe17 	ldw	r3,-8(fp)
  811d38:	180d883a 	mov	r6,r3
  811d3c:	e17fff17 	ldw	r5,-4(fp)
  811d40:	1009883a 	mov	r4,r2
  811d44:	080a6540 	call	80a654 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  811d48:	1000021e 	bne	r2,zero,811d54 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  811d4c:	e0bffd17 	ldw	r2,-12(fp)
  811d50:	00000706 	br	811d70 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  811d54:	e0bffd17 	ldw	r2,-12(fp)
  811d58:	10800017 	ldw	r2,0(r2)
  811d5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811d60:	e0fffd17 	ldw	r3,-12(fp)
  811d64:	d0a00604 	addi	r2,gp,-32744
  811d68:	18bfcc1e 	bne	r3,r2,811c9c <__alt_data_end+0xff811c9c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  811d6c:	0005883a 	mov	r2,zero
}
  811d70:	e037883a 	mov	sp,fp
  811d74:	dfc00117 	ldw	ra,4(sp)
  811d78:	df000017 	ldw	fp,0(sp)
  811d7c:	dec00204 	addi	sp,sp,8
  811d80:	f800283a 	ret

00811d84 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  811d84:	defffc04 	addi	sp,sp,-16
  811d88:	df000315 	stw	fp,12(sp)
  811d8c:	df000304 	addi	fp,sp,12
  811d90:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  811d94:	00bffa04 	movi	r2,-24
  811d98:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811d9c:	e03ffd15 	stw	zero,-12(fp)
  811da0:	00001906 	br	811e08 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  811da4:	00802074 	movhi	r2,129
  811da8:	108d5f04 	addi	r2,r2,13692
  811dac:	e0fffd17 	ldw	r3,-12(fp)
  811db0:	18c00324 	muli	r3,r3,12
  811db4:	10c5883a 	add	r2,r2,r3
  811db8:	10800017 	ldw	r2,0(r2)
  811dbc:	10000f1e 	bne	r2,zero,811dfc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  811dc0:	00802074 	movhi	r2,129
  811dc4:	108d5f04 	addi	r2,r2,13692
  811dc8:	e0fffd17 	ldw	r3,-12(fp)
  811dcc:	18c00324 	muli	r3,r3,12
  811dd0:	10c5883a 	add	r2,r2,r3
  811dd4:	e0ffff17 	ldw	r3,-4(fp)
  811dd8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  811ddc:	d0e00a17 	ldw	r3,-32728(gp)
  811de0:	e0bffd17 	ldw	r2,-12(fp)
  811de4:	1880020e 	bge	r3,r2,811df0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  811de8:	e0bffd17 	ldw	r2,-12(fp)
  811dec:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  811df0:	e0bffd17 	ldw	r2,-12(fp)
  811df4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  811df8:	00000606 	br	811e14 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811dfc:	e0bffd17 	ldw	r2,-12(fp)
  811e00:	10800044 	addi	r2,r2,1
  811e04:	e0bffd15 	stw	r2,-12(fp)
  811e08:	e0bffd17 	ldw	r2,-12(fp)
  811e0c:	10800810 	cmplti	r2,r2,32
  811e10:	103fe41e 	bne	r2,zero,811da4 <__alt_data_end+0xff811da4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  811e14:	e0bffe17 	ldw	r2,-8(fp)
}
  811e18:	e037883a 	mov	sp,fp
  811e1c:	df000017 	ldw	fp,0(sp)
  811e20:	dec00104 	addi	sp,sp,4
  811e24:	f800283a 	ret

00811e28 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  811e28:	defffb04 	addi	sp,sp,-20
  811e2c:	df000415 	stw	fp,16(sp)
  811e30:	df000404 	addi	fp,sp,16
  811e34:	e13ffe15 	stw	r4,-8(fp)
  811e38:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  811e3c:	e0bfff17 	ldw	r2,-4(fp)
  811e40:	10840070 	cmpltui	r2,r2,4097
  811e44:	1000021e 	bne	r2,zero,811e50 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  811e48:	00840004 	movi	r2,4096
  811e4c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  811e50:	e0fffe17 	ldw	r3,-8(fp)
  811e54:	e0bfff17 	ldw	r2,-4(fp)
  811e58:	1885883a 	add	r2,r3,r2
  811e5c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811e60:	e0bffe17 	ldw	r2,-8(fp)
  811e64:	e0bffc15 	stw	r2,-16(fp)
  811e68:	00000506 	br	811e80 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  811e6c:	e0bffc17 	ldw	r2,-16(fp)
  811e70:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  811e74:	e0bffc17 	ldw	r2,-16(fp)
  811e78:	10800804 	addi	r2,r2,32
  811e7c:	e0bffc15 	stw	r2,-16(fp)
  811e80:	e0fffc17 	ldw	r3,-16(fp)
  811e84:	e0bffd17 	ldw	r2,-12(fp)
  811e88:	18bff836 	bltu	r3,r2,811e6c <__alt_data_end+0xff811e6c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  811e8c:	e0bffe17 	ldw	r2,-8(fp)
  811e90:	108007cc 	andi	r2,r2,31
  811e94:	10000226 	beq	r2,zero,811ea0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  811e98:	e0bffc17 	ldw	r2,-16(fp)
  811e9c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  811ea0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  811ea4:	0001883a 	nop
  811ea8:	e037883a 	mov	sp,fp
  811eac:	df000017 	ldw	fp,0(sp)
  811eb0:	dec00104 	addi	sp,sp,4
  811eb4:	f800283a 	ret

00811eb8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  811eb8:	defffe04 	addi	sp,sp,-8
  811ebc:	df000115 	stw	fp,4(sp)
  811ec0:	df000104 	addi	fp,sp,4
  811ec4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  811ec8:	e0bfff17 	ldw	r2,-4(fp)
  811ecc:	10bffe84 	addi	r2,r2,-6
  811ed0:	10c00428 	cmpgeui	r3,r2,16
  811ed4:	18001a1e 	bne	r3,zero,811f40 <alt_exception_cause_generated_bad_addr+0x88>
  811ed8:	100690ba 	slli	r3,r2,2
  811edc:	00802074 	movhi	r2,129
  811ee0:	1087bc04 	addi	r2,r2,7920
  811ee4:	1885883a 	add	r2,r3,r2
  811ee8:	10800017 	ldw	r2,0(r2)
  811eec:	1000683a 	jmp	r2
  811ef0:	00811f30 	cmpltui	r2,zero,1148
  811ef4:	00811f30 	cmpltui	r2,zero,1148
  811ef8:	00811f40 	call	811f4 <__alt_mem_sdram_0-0x77ee0c>
  811efc:	00811f40 	call	811f4 <__alt_mem_sdram_0-0x77ee0c>
  811f00:	00811f40 	call	811f4 <__alt_mem_sdram_0-0x77ee0c>
  811f04:	00811f30 	cmpltui	r2,zero,1148
  811f08:	00811f38 	rdprs	r2,zero,1148
  811f0c:	00811f40 	call	811f4 <__alt_mem_sdram_0-0x77ee0c>
  811f10:	00811f30 	cmpltui	r2,zero,1148
  811f14:	00811f30 	cmpltui	r2,zero,1148
  811f18:	00811f40 	call	811f4 <__alt_mem_sdram_0-0x77ee0c>
  811f1c:	00811f30 	cmpltui	r2,zero,1148
  811f20:	00811f38 	rdprs	r2,zero,1148
  811f24:	00811f40 	call	811f4 <__alt_mem_sdram_0-0x77ee0c>
  811f28:	00811f40 	call	811f4 <__alt_mem_sdram_0-0x77ee0c>
  811f2c:	00811f30 	cmpltui	r2,zero,1148
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  811f30:	00800044 	movi	r2,1
  811f34:	00000306 	br	811f44 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  811f38:	0005883a 	mov	r2,zero
  811f3c:	00000106 	br	811f44 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  811f40:	0005883a 	mov	r2,zero
  }
}
  811f44:	e037883a 	mov	sp,fp
  811f48:	df000017 	ldw	fp,0(sp)
  811f4c:	dec00104 	addi	sp,sp,4
  811f50:	f800283a 	ret

00811f54 <atexit>:
  811f54:	200b883a 	mov	r5,r4
  811f58:	000f883a 	mov	r7,zero
  811f5c:	000d883a 	mov	r6,zero
  811f60:	0009883a 	mov	r4,zero
  811f64:	0811fa01 	jmpi	811fa0 <__register_exitproc>

00811f68 <exit>:
  811f68:	defffe04 	addi	sp,sp,-8
  811f6c:	000b883a 	mov	r5,zero
  811f70:	dc000015 	stw	r16,0(sp)
  811f74:	dfc00115 	stw	ra,4(sp)
  811f78:	2021883a 	mov	r16,r4
  811f7c:	08120b80 	call	8120b8 <__call_exitprocs>
  811f80:	00802074 	movhi	r2,129
  811f84:	10926a04 	addi	r2,r2,18856
  811f88:	11000017 	ldw	r4,0(r2)
  811f8c:	20800f17 	ldw	r2,60(r4)
  811f90:	10000126 	beq	r2,zero,811f98 <exit+0x30>
  811f94:	103ee83a 	callr	r2
  811f98:	8009883a 	mov	r4,r16
  811f9c:	08122380 	call	812238 <_exit>

00811fa0 <__register_exitproc>:
  811fa0:	defffa04 	addi	sp,sp,-24
  811fa4:	dc000315 	stw	r16,12(sp)
  811fa8:	04002074 	movhi	r16,129
  811fac:	84126a04 	addi	r16,r16,18856
  811fb0:	80c00017 	ldw	r3,0(r16)
  811fb4:	dc400415 	stw	r17,16(sp)
  811fb8:	dfc00515 	stw	ra,20(sp)
  811fbc:	18805217 	ldw	r2,328(r3)
  811fc0:	2023883a 	mov	r17,r4
  811fc4:	10003726 	beq	r2,zero,8120a4 <__register_exitproc+0x104>
  811fc8:	10c00117 	ldw	r3,4(r2)
  811fcc:	010007c4 	movi	r4,31
  811fd0:	20c00e16 	blt	r4,r3,81200c <__register_exitproc+0x6c>
  811fd4:	1a000044 	addi	r8,r3,1
  811fd8:	8800221e 	bne	r17,zero,812064 <__register_exitproc+0xc4>
  811fdc:	18c00084 	addi	r3,r3,2
  811fe0:	18c7883a 	add	r3,r3,r3
  811fe4:	18c7883a 	add	r3,r3,r3
  811fe8:	12000115 	stw	r8,4(r2)
  811fec:	10c7883a 	add	r3,r2,r3
  811ff0:	19400015 	stw	r5,0(r3)
  811ff4:	0005883a 	mov	r2,zero
  811ff8:	dfc00517 	ldw	ra,20(sp)
  811ffc:	dc400417 	ldw	r17,16(sp)
  812000:	dc000317 	ldw	r16,12(sp)
  812004:	dec00604 	addi	sp,sp,24
  812008:	f800283a 	ret
  81200c:	00800034 	movhi	r2,0
  812010:	10800004 	addi	r2,r2,0
  812014:	10002626 	beq	r2,zero,8120b0 <__register_exitproc+0x110>
  812018:	01006404 	movi	r4,400
  81201c:	d9400015 	stw	r5,0(sp)
  812020:	d9800115 	stw	r6,4(sp)
  812024:	d9c00215 	stw	r7,8(sp)
  812028:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  81202c:	d9400017 	ldw	r5,0(sp)
  812030:	d9800117 	ldw	r6,4(sp)
  812034:	d9c00217 	ldw	r7,8(sp)
  812038:	10001d26 	beq	r2,zero,8120b0 <__register_exitproc+0x110>
  81203c:	81000017 	ldw	r4,0(r16)
  812040:	10000115 	stw	zero,4(r2)
  812044:	02000044 	movi	r8,1
  812048:	22405217 	ldw	r9,328(r4)
  81204c:	0007883a 	mov	r3,zero
  812050:	12400015 	stw	r9,0(r2)
  812054:	20805215 	stw	r2,328(r4)
  812058:	10006215 	stw	zero,392(r2)
  81205c:	10006315 	stw	zero,396(r2)
  812060:	883fde26 	beq	r17,zero,811fdc <__alt_data_end+0xff811fdc>
  812064:	18c9883a 	add	r4,r3,r3
  812068:	2109883a 	add	r4,r4,r4
  81206c:	1109883a 	add	r4,r2,r4
  812070:	21802215 	stw	r6,136(r4)
  812074:	01800044 	movi	r6,1
  812078:	12406217 	ldw	r9,392(r2)
  81207c:	30cc983a 	sll	r6,r6,r3
  812080:	4992b03a 	or	r9,r9,r6
  812084:	12406215 	stw	r9,392(r2)
  812088:	21c04215 	stw	r7,264(r4)
  81208c:	01000084 	movi	r4,2
  812090:	893fd21e 	bne	r17,r4,811fdc <__alt_data_end+0xff811fdc>
  812094:	11006317 	ldw	r4,396(r2)
  812098:	218cb03a 	or	r6,r4,r6
  81209c:	11806315 	stw	r6,396(r2)
  8120a0:	003fce06 	br	811fdc <__alt_data_end+0xff811fdc>
  8120a4:	18805304 	addi	r2,r3,332
  8120a8:	18805215 	stw	r2,328(r3)
  8120ac:	003fc606 	br	811fc8 <__alt_data_end+0xff811fc8>
  8120b0:	00bfffc4 	movi	r2,-1
  8120b4:	003fd006 	br	811ff8 <__alt_data_end+0xff811ff8>

008120b8 <__call_exitprocs>:
  8120b8:	defff504 	addi	sp,sp,-44
  8120bc:	df000915 	stw	fp,36(sp)
  8120c0:	dd400615 	stw	r21,24(sp)
  8120c4:	dc800315 	stw	r18,12(sp)
  8120c8:	dfc00a15 	stw	ra,40(sp)
  8120cc:	ddc00815 	stw	r23,32(sp)
  8120d0:	dd800715 	stw	r22,28(sp)
  8120d4:	dd000515 	stw	r20,20(sp)
  8120d8:	dcc00415 	stw	r19,16(sp)
  8120dc:	dc400215 	stw	r17,8(sp)
  8120e0:	dc000115 	stw	r16,4(sp)
  8120e4:	d9000015 	stw	r4,0(sp)
  8120e8:	2839883a 	mov	fp,r5
  8120ec:	04800044 	movi	r18,1
  8120f0:	057fffc4 	movi	r21,-1
  8120f4:	00802074 	movhi	r2,129
  8120f8:	10926a04 	addi	r2,r2,18856
  8120fc:	12000017 	ldw	r8,0(r2)
  812100:	45005217 	ldw	r20,328(r8)
  812104:	44c05204 	addi	r19,r8,328
  812108:	a0001c26 	beq	r20,zero,81217c <__call_exitprocs+0xc4>
  81210c:	a0800117 	ldw	r2,4(r20)
  812110:	15ffffc4 	addi	r23,r2,-1
  812114:	b8000d16 	blt	r23,zero,81214c <__call_exitprocs+0x94>
  812118:	14000044 	addi	r16,r2,1
  81211c:	8421883a 	add	r16,r16,r16
  812120:	8421883a 	add	r16,r16,r16
  812124:	84402004 	addi	r17,r16,128
  812128:	a463883a 	add	r17,r20,r17
  81212c:	a421883a 	add	r16,r20,r16
  812130:	e0001e26 	beq	fp,zero,8121ac <__call_exitprocs+0xf4>
  812134:	80804017 	ldw	r2,256(r16)
  812138:	e0801c26 	beq	fp,r2,8121ac <__call_exitprocs+0xf4>
  81213c:	bdffffc4 	addi	r23,r23,-1
  812140:	843fff04 	addi	r16,r16,-4
  812144:	8c7fff04 	addi	r17,r17,-4
  812148:	bd7ff91e 	bne	r23,r21,812130 <__alt_data_end+0xff812130>
  81214c:	00800034 	movhi	r2,0
  812150:	10800004 	addi	r2,r2,0
  812154:	10000926 	beq	r2,zero,81217c <__call_exitprocs+0xc4>
  812158:	a0800117 	ldw	r2,4(r20)
  81215c:	1000301e 	bne	r2,zero,812220 <__call_exitprocs+0x168>
  812160:	a0800017 	ldw	r2,0(r20)
  812164:	10003226 	beq	r2,zero,812230 <__call_exitprocs+0x178>
  812168:	a009883a 	mov	r4,r20
  81216c:	98800015 	stw	r2,0(r19)
  812170:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  812174:	9d000017 	ldw	r20,0(r19)
  812178:	a03fe41e 	bne	r20,zero,81210c <__alt_data_end+0xff81210c>
  81217c:	dfc00a17 	ldw	ra,40(sp)
  812180:	df000917 	ldw	fp,36(sp)
  812184:	ddc00817 	ldw	r23,32(sp)
  812188:	dd800717 	ldw	r22,28(sp)
  81218c:	dd400617 	ldw	r21,24(sp)
  812190:	dd000517 	ldw	r20,20(sp)
  812194:	dcc00417 	ldw	r19,16(sp)
  812198:	dc800317 	ldw	r18,12(sp)
  81219c:	dc400217 	ldw	r17,8(sp)
  8121a0:	dc000117 	ldw	r16,4(sp)
  8121a4:	dec00b04 	addi	sp,sp,44
  8121a8:	f800283a 	ret
  8121ac:	a0800117 	ldw	r2,4(r20)
  8121b0:	80c00017 	ldw	r3,0(r16)
  8121b4:	10bfffc4 	addi	r2,r2,-1
  8121b8:	15c01426 	beq	r2,r23,81220c <__call_exitprocs+0x154>
  8121bc:	80000015 	stw	zero,0(r16)
  8121c0:	183fde26 	beq	r3,zero,81213c <__alt_data_end+0xff81213c>
  8121c4:	95c8983a 	sll	r4,r18,r23
  8121c8:	a0806217 	ldw	r2,392(r20)
  8121cc:	a5800117 	ldw	r22,4(r20)
  8121d0:	2084703a 	and	r2,r4,r2
  8121d4:	10000b26 	beq	r2,zero,812204 <__call_exitprocs+0x14c>
  8121d8:	a0806317 	ldw	r2,396(r20)
  8121dc:	2088703a 	and	r4,r4,r2
  8121e0:	20000c1e 	bne	r4,zero,812214 <__call_exitprocs+0x15c>
  8121e4:	89400017 	ldw	r5,0(r17)
  8121e8:	d9000017 	ldw	r4,0(sp)
  8121ec:	183ee83a 	callr	r3
  8121f0:	a0800117 	ldw	r2,4(r20)
  8121f4:	15bfbf1e 	bne	r2,r22,8120f4 <__alt_data_end+0xff8120f4>
  8121f8:	98800017 	ldw	r2,0(r19)
  8121fc:	153fcf26 	beq	r2,r20,81213c <__alt_data_end+0xff81213c>
  812200:	003fbc06 	br	8120f4 <__alt_data_end+0xff8120f4>
  812204:	183ee83a 	callr	r3
  812208:	003ff906 	br	8121f0 <__alt_data_end+0xff8121f0>
  81220c:	a5c00115 	stw	r23,4(r20)
  812210:	003feb06 	br	8121c0 <__alt_data_end+0xff8121c0>
  812214:	89000017 	ldw	r4,0(r17)
  812218:	183ee83a 	callr	r3
  81221c:	003ff406 	br	8121f0 <__alt_data_end+0xff8121f0>
  812220:	a0800017 	ldw	r2,0(r20)
  812224:	a027883a 	mov	r19,r20
  812228:	1029883a 	mov	r20,r2
  81222c:	003fb606 	br	812108 <__alt_data_end+0xff812108>
  812230:	0005883a 	mov	r2,zero
  812234:	003ffb06 	br	812224 <__alt_data_end+0xff812224>

00812238 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  812238:	defffd04 	addi	sp,sp,-12
  81223c:	df000215 	stw	fp,8(sp)
  812240:	df000204 	addi	fp,sp,8
  812244:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  812248:	0001883a 	nop
  81224c:	e0bfff17 	ldw	r2,-4(fp)
  812250:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  812254:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  812258:	10000226 	beq	r2,zero,812264 <_exit+0x2c>
    ALT_SIM_FAIL();
  81225c:	002af070 	cmpltui	zero,zero,43969
  812260:	00000106 	br	812268 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  812264:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  812268:	003fff06 	br	812268 <__alt_data_end+0xff812268>
